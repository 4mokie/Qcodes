
Qcodes example with Agilent 34400A
==================================

.. code:: ipython3

    %matplotlib nbagg
    import matplotlib.pyplot as plt
    import time
    import numpy as np
    
    import qcodes as qc
    from qcodes.utils.validators import Enum, Strings
    import qcodes.instrument_drivers.tektronix.Keithley_2600 as keith
    import qcodes.instrument_drivers.agilent.Agilent_34400A as agi
    
    qc.set_mp_method('spawn')  # force Windows behavior on mac
    
    # this makes a widget in the corner of the window to show and control
    # subprocesses and any output they would print to the terminal
    qc.show_subprocess_widget()




.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <style>.qcodes-output-view:not(.ui-draggable) {
        bottom: 0;
        right: 5px;
    }
    .qcodes-output-view {
        position: fixed;
        z-index: 999;
        background-color: #fff;
        box-shadow: 0 0 12px 1px rgba(87, 87, 87, 0.2);
    }
    
    .qcodes-output-header  {
        float: right;
    }
    
    .qcodes-output-view span {
        padding: 2px 6px 3px 12px;
    }
    
    .qcodes-output-view .btn {
        margin: 0 3px 0 0;
    }
    
    .qcodes-output-view[qcodes-state=docked] .qcodes-docked,
    .qcodes-output-view[qcodes-state=floated] .qcodes-floated,
    .qcodes-output-view[qcodes-state=minimized] .qcodes-minimized,
    .qcodes-output-view[qcodes-state=minimized] .qcodes-content {
        display: none;
    }
    
    .qcodes-output-view .disabled {
        opacity: 0.4;
    }
    
    .qcodes-abort-loop {
        background-color: #844;
        color: #fff;
    }
    
    .qcodes-output-view pre {
        clear: both;
        margin: 0;
        border: 0;
        border-top: 1px solid #ccc;
        background-color: #ffe;
        min-height: 50px;
        max-height: 400px;
        min-width: 400px;
        max-width: 1000px;
    }</style>


.. code:: ipython3

    import time
    class Timer(object):
        def __init__(self, name=None):
            self.name = name
    
        def __enter__(self):
            self.tstart = time.time()
    
        def __exit__(self, type, value, traceback):
            if self.name:
                print('[%s]' % self.name,)
            print('Elapsed: %s' % (time.time() - self.tstart))

.. code:: ipython3

    # create Instruments
    k1 = keith.Keithley_2600('Keithley1', 'GPIB0::15::INSTR',channel='a')
    k2 = keith.Keithley_2600('Keithley2', 'GPIB0::15::INSTR',channel='b')
    
    a1 = agi.Agilent_34400A('Agilent1', 'GPIB0::11::INSTR')
    a2 = agi.Agilent_34400A('Agilent2', 'GPIB0::6::INSTR')
    
    # set integration time (number of line cycles)
    a1.NPLC.set(10)
    a2.NPLC.set(10)

.. code:: ipython3

    station1 = qc.Station(a1,a2)
    station1.set_measurement(a1.volt)
    station2 = qc.Station(a1,a2)
    station2.set_measurement(a1.volt, a2.volt)

.. code:: ipython3

    # Time single readings
    with Timer('Time s1'):
        station1.measure()
    with Timer('Time s2'):
        station2.measure()


.. parsed-literal::

    [Time s1]
    Elapsed: 2.0011143684387207


::


    ---------------------------------------------------------------------------

    Empty                                     Traceback (most recent call last)

    <ipython-input-5-a118e754f9ee> in <module>()
          1 # Time single readings
          2 with Timer('Time s1'):
    ----> 3     station1.measure()
          4 with Timer('Time s2'):
          5     station2.measure()


    E:\Git\Qcodes\qcodes\station.py in measure(self, *actions)
        105         for action in actions:
        106             if hasattr(action, 'get'):
    --> 107                 out.append(action.get())
        108             elif callable(action):
        109                 action()


    E:\Git\Qcodes\qcodes\instrument\remote.py in get(self)
        121 
        122     def get(self):
    --> 123         return self._instrument.connection.ask('get', self.name)
        124 
        125     def set(self, value):


    E:\Git\Qcodes\qcodes\instrument\server.py in ask(self, func_name, *args, **kwargs)
        134         Query the server copy of this instrument, expecting a response
        135         '''
    --> 136         return self.manager.ask('ask', self.id, func_name, args, kwargs)
        137 
        138     def write(self, func_name, *args, **kwargs):


    E:\Git\Qcodes\qcodes\utils\multiprocessing.py in ask(self, timeout, *query)
        332                 if self._error_queue.empty():
        333                     # only raise if we're not about to find a deeper error
    --> 334                     raise e
        335             self._check_for_errors(self._expect_error)
        336 


    E:\Git\Qcodes\qcodes\utils\multiprocessing.py in ask(self, timeout, *query)
        324 
        325             try:
    --> 326                 res = self._check_response(timeout)
        327 
        328                 while not self._response_queue.empty():


    E:\Git\Qcodes\qcodes\utils\multiprocessing.py in _check_response(self, timeout)
        301 
        302     def _check_response(self, timeout):
    --> 303         res = self._response_queue.get(timeout=timeout)
        304         if res == SERVER_ERR:
        305             self._expect_error = True


    c:\users\qdev\anaconda3\lib\multiprocessing\queues.py in get(self, block, timeout)
        103                     timeout = deadline - time.time()
        104                     if timeout < 0 or not self._poll(timeout):
    --> 105                         raise Empty
        106                 elif not self._poll():
        107                     raise Empty


    Empty: 


.. code:: ipython3

    # Time single readings
    with Timer('Time a1'):
        a1.volt.get()
    with Timer('Time a2'):
        a2.volt.get()

.. code:: ipython3

    with Timer('Time Loop 1'):
        data = qc.Loop(k1.volt[-5:5:1], 0).each(a1.volt).run(location='testsweep', overwrite=True,background=False)
    
    with Timer('Time Loop 2'):
        data = qc.Loop(k1.volt[-5:5:1], 0).each(a1.volt, a2.volt).run(location='testsweep', overwrite=True,background=False)

.. code:: ipython3

    with Timer('Time Loop 1'):
        data = qc.Loop(k1.volt[-5:5:1], 0).each(a1.volt).run(location='testsweep', overwrite=True)
        while data.sync():
            time.sleep(0.1)

.. code:: ipython3

    with Timer('Time Loop 2'):
        data = qc.Loop(k1.volt[-5:5:1], 0).each(a1.volt, a2.volt).run(location='testsweep', overwrite=True)
        while data.sync():
            time.sleep(0.1)

