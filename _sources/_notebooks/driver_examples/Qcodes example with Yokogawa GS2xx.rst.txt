
Qcodes example with Yokogawa GS200/GS210
========================================

.. code:: ipython3

    import numpy as np
    import time 
    
    import qcodes
    from qcodes.instrument_drivers.yokogawa.GS200 import GS200


.. parsed-literal::

    pyqtgraph plotting not supported, try "from qcodes.plots.pyqtgraph import QtPlot" to see the full error


.. code:: ipython3

    gs = GS200("gs200", 'GPIB0::1::INSTR', terminator="\n")


.. parsed-literal::

    Connected to: YOKOGAWA GS210 (serial:91T928108, firmware:2.02) in 0.08s


Lets do some sanity checks

.. code:: ipython3

    gs.output("off")
    gs.source_mode("VOLT")
    gs.auto_range(False)
    gs.voltage(0)

.. code:: ipython3

    gs.auto_range(True)

Try to put 1 V on the output

.. code:: ipython3

    gs.voltage(1)

The instrument indeed goes to 1 V output. Next, assert that an error is
raised if we try to get/set the current

.. code:: ipython3

    try:
        gs.current(0.001)  # Set a current
        print("Something has gone wrong")
        assert(False)
    except: 
        print("exception correctly raised")
    
    try:
        gs.current() # Get the current
        print("Something has gone wrong")
        assert(False)
    except: 
        print("exception correctly raised")


.. parsed-literal::

    exception correctly raised
    exception correctly raised


.. code:: ipython3

    gs.voltage(0)

The instrument indeed goes back to 0 V output

.. code:: ipython3

    gs.source_mode("CURR")

Instrument does indeed go to current source mode

.. code:: ipython3

    gs.current(0.001)

The instrument does indeed show 1mA output. Note that because output is
off, no actual current is flowing

.. code:: ipython3

    gs.output()




.. parsed-literal::

    'off'



The instrument is indeed in off mode

Put a 10kOhm resistor over the output and verify that the voltage across
the resistor is 1E-3 \* 10E3 = 10 V.

.. code:: ipython3

    gs.voltage_limit(30)
    gs.output("on")

We verify that the voltage on the multmeter is indeed 10V. Let's verify
that if we put a 5 volt voltage limit the voltage does indeed drop to 5
V

.. code:: ipython3

    gs.voltage_limit(5)

We see that the voltage on the multimeter is indeed 5V

.. code:: ipython3

    gs.current(0.00)

The multimeter reads 0 mA again and the voltage across the resistor is 0
V

.. code:: ipython3

    gs.output("off")

The instrument turns output off. Next assert that exceptions are raised
if we try to get/set the voltage while still being in current mode

.. code:: ipython3

    try:
        gs.volatge(0.0)  # Set a voltage
        print("Something has gone wrong")
        assert(False)
    except: 
        print("exception correctly raised")
    
    try:
        gs.voltage() # Get the voltage
        print("Something has gone wrong")
        assert(False)
    except: 
        print("exception correctly raised")


.. parsed-literal::

    exception correctly raised
    exception correctly raised


Next, test that we get an exception if we turn off auto ranging and
deliberately set the voltage outside of the chosen range

.. code:: ipython3

    gs.auto_range(False)
    gs.source_mode("VOLT")
    gs.range(10E-3)
    
    try:
         gs.voltage(1.5)
    except ValueError as exp:
        print("exception correctly raised")


.. parsed-literal::

    exception correctly raised


Verify that when auto range is true, we can set voltages without being
worried about ranges

.. code:: ipython3

    gs.source_mode("VOLT")
    gs.auto_range(True)
    gs.voltage(1.5)

We verify that we can now set the output to 1.5V without problems. Let
see if ramping from 0 to 5 volts with steps of 0.5 works. The delay
between the steps shall be 1 second, so the entire ramp should take 10
seconds

.. code:: ipython3

    tb = time.time()
    gs.voltage(0)
    gs.ramp_voltage(5, 0.5, 1)
    te = time.time()
    
    print("This took {:.3} seconds".format(te - tb))


.. parsed-literal::

    This took 10.0 seconds


Now try to ramp the current while still in volt mode. This should raise
an error

.. code:: ipython3

    try:
        gs.ramp_current(0, 1E-3, 1)
        print("Something has gone wrong")
        assert(False)
    except:
        print("exception correctly raised")


.. parsed-literal::

    exception correctly raised


.. code:: ipython3

    gs.voltage_range()




.. parsed-literal::

    10.0



.. code:: ipython3

    try:
        gs.current_range()
        print("Something has gone wrong")
        assert(False)
    except:
        print("exception correctly raised")


.. parsed-literal::

    exception correctly raised


.. code:: ipython3

    gs.source_mode("CURR")

.. code:: ipython3

    gs.current_range()




.. parsed-literal::

    0.001



.. code:: ipython3

    gs.current(0)

.. code:: ipython3

    gs.auto_range()




.. parsed-literal::

    True


