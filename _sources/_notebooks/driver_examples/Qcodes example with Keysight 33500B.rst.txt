
Qcodes example with Keysight 33500B
===================================

.. code:: ipython3

    import qcodes as qc
    from qcodes.instrument_drivers.Keysight.Keysight_33500B import Keysight_33500B


.. parsed-literal::

    pyqtgraph plotting not supported, try "from qcodes.plots.pyqtgraph import QtPlot" to see the full error


.. code:: ipython3

    ks = Keysight_33500B('ks', 'TCPIP0::K-33522B-00256::inst0::INSTR')


.. parsed-literal::

    Connected to: Agilent Technologies 33522B (serial:MY57800256, firmware:3.05-1.19-2.00-52-00) in 0.11s


Basic usage
-----------

.. code:: ipython3

    # SET up a sawtooth
    ks.ch1_function_type('RAMP')
    ks.ch1_ramp_symmetry(100)
    ks.ch1_amplitude_unit('VPP')
    ks.ch1_amplitude(1)
    ks.ch1_offset(0)
    ks.ch1_frequency(2e3)
    ks.sync_source(1)

.. code:: ipython3

    # Start it
    ks.sync_output('ON')
    ks.ch1_output('ON')


.. code:: ipython3

    ks.ch1_frequency(1e3)

.. code:: ipython3

    # stop it
    ks.sync_output('OFF')
    ks.ch1_output('OFF')

Using burst mode
----------------


.. code:: ipython3

    # In burst mode, the instrument starts running a task (e.g. a waveform generation) upon receiving a trigger
    
    # TRIGGERING
    
    # Can be 'EXT' (external), 'IMM' (immediate, internal),
    # 'BUS' (software trigger), 'TIM' (timed)
    ks.ch1_trigger_source('EXT')  
    
    ks.ch1_trigger_count(1)
    ks.ch1_trigger_delay(0)  # seconds
    
    # for external triggering, a slope should be specified
    ks.ch1_trigger_slope('POS')
    
    # For timed triggering, the time between each trigger should be set
    ks.ch1_trigger_timer(50e-3)
    
    # BURSTING
    
    ks.ch1_burst_state('ON')
    ks.ch1_burst_mode('N Cycle')  # Can be 'N Cycle' or 'Gated'
    
    # when in 'N Cycle' mode, the following options are available
    ks.ch1_burst_ncycles(1)  # Can be 1, 2, 3,... , 'MIN', 'MAX', or 'INF'
    ks.ch1_burst_phase(180)  # the starting phase (degrees)
    
    # If in 'Gated' mode, the following should be specified
    ks.ch1_burst_polarity('NORM')  # Can be 'NORM' or 'INV'

Error handling
--------------

.. code:: ipython3

    # The instrument has an error queue of length up to 20 messages.
    # The queue message retrieval is first-in-first-out
    
    # The first (i.e. oldest) error message in the queue can be gotten (and thereby removed from the queue)
    ks.error()




.. parsed-literal::

    (0, 'No error')



.. code:: ipython3

    # The entire queue can be flushed out
    
    # generate a few errors
    for ii in range(3):
        ks.write('gimme an error!')
    
    ks.flush_error_queue()


.. parsed-literal::

    -113 Undefined header
    -113 Undefined header
    -113 Undefined header
    0 No error


