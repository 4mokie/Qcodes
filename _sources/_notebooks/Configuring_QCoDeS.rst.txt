
.. code:: ipython3

    %load_ext autoreload
    %autoreload 2
    import qcodes as qc


.. parsed-literal::

    matplotlib plotting not supported, try "from qcodes.plots.qcmatplotlib import MatPlot" to see the full error
    pyqtgraph plotting not supported, try "from qcodes.plots.pyqtgraph import QtPlot" to see the full error



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <style>.qcodes-output-view:not(.ui-draggable) {
        bottom: 0;
        right: 5px;
    }
    .qcodes-output-view {
        position: fixed;
        z-index: 999;
        background-color: #fff;
        box-shadow: 0 0 12px 1px rgba(87, 87, 87, 0.2);
    }
    
    .qcodes-output-header {
        float: right;
    }
    
    .qcodes-highlight {
        animation: pulse 1s linear;
        background-color: #fa4;
    }
    
    @keyframes pulse {
        0% {
            background-color: #f00;
        }
        100% {
            background-color: #fa4;
        }
    }
    
    .qcodes-process-list {
        float: left;
        max-width: 780px;
        margin: 3px 5px 3px 10px;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }
    
    .qcodes-output-view[qcodes-state=minimized] .qcodes-process-list {
        max-width: 300px;
    }
    
    .qcodes-output-view span {
        padding: 2px 6px 3px 12px;
    }
    
    .qcodes-output-view .btn {
        margin: 0 3px 0 0;
    }
    
    .qcodes-output-view[qcodes-state=docked] .qcodes-docked,
    .qcodes-output-view[qcodes-state=floated] .qcodes-floated,
    .qcodes-output-view[qcodes-state=minimized] .qcodes-minimized,
    .qcodes-output-view[qcodes-state=minimized] .qcodes-content {
        display: none;
    }
    
    .qcodes-output-view .disabled {
        opacity: 0.4;
    }
    
    .qcodes-abort-loop {
        background-color: #844;
        color: #fff;
    }
    
    .qcodes-output-view pre {
        clear: both;
        margin: 0;
        border: 0;
        border-top: 1px solid #ccc;
        background-color: #ffe;
        min-height: 50px;
        max-height: 400px;
        min-width: 400px;
        max-width: 1000px;
    }</style>


QCoDeS config
=============

Qcodes loads defaults and configurations at module import

.. code:: ipython3

    qc.config.current_config




.. parsed-literal::

    {'core': {'legacy_mp': False, 'loglevel': 'DEBUG'},
     'gui': {'notebook': True, 'plotlib': 'matplotlib'},
     'user': {}}



.. code:: ipython3

    qc.config.defaults




.. parsed-literal::

    {'core': {'legacy_mp': False, 'loglevel': 'DEBUG'},
     'gui': {'notebook': True, 'plotlib': 'matplotlib'},
     'user': {}}



One can inspect what the configuration options mean at runtime

.. code:: ipython3

    print(qc.config.describe('core'))


.. parsed-literal::

    controls core settings of qcodes.
    Current value: {'legacy_mp': False, 'loglevel': 'DEBUG'}. Type: object. Default: Not defined.


configuring qcodes
------------------

Defaults are the settings that are shipped with the package, which you
can overwrite programmatically.

A way to customize qcodes is to write your own json files, they are
expected to be in the directories printed below. One will be empty
because one needs to define first the environment variable in the OS.

They are ordered by "weight", meaning that the last file always wins if
it's overwriting any preconfigured defaults or values in the other
files.

Simply copy the file to the directories and you are good to go.

.. code:: ipython3

    print("\n".join([qc.config.home_file_name, qc.config.env_file_name, qc.config.cwd_file_name]))


.. parsed-literal::

    /home/unga/qcodesrc.json
    
    /home/unga/src/Qcodes/docs/examples/qcodesrc.json


But the easiest way to add something to the config is to use the
provided helper:

.. code:: ipython3

    qc.config.add("base_location", "/dev/random", value_type="string", description="Location of data", default="/dev/random")

This will add a base\_location with value /dev/random to the current
config, and validate it's value to be of type string, will also set the
description and what one would want to have as default. The new entry is
saved in the 'user' part of the config.

.. code:: ipython3

    print(qc.config.describe('user.base_location'))


.. parsed-literal::

    Location of data.
    Current value: /dev/random. Type: string. Default: /dev/random.


saving changes
--------------

All the changes made to the defaults are stored, and one can then decide
to save them to the expected place.

.. code:: ipython3

    help(qc.config.save_to_cwd)


.. parsed-literal::

    Help on method save_to_cwd in module qcodes.config.config:
    
    save_to_cwd() method of qcodes.config.config.Config instance
        Save files to current working dir
    


.. code:: ipython3

    help(qc.config.save_to_env)


.. parsed-literal::

    Help on method save_to_env in module qcodes.config.config:
    
    save_to_env() method of qcodes.config.config.Config instance
        Save  files to env path
    


.. code:: ipython3

    help(qc.config.save_to_home)


.. parsed-literal::

    Help on method save_to_home in module qcodes.config.config:
    
    save_to_home() method of qcodes.config.config.Config instance
        Save  files to home dir
    


Using a custom configured variable in your experiment:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Simply get the value you have set before with dot notation. For example:

.. code:: ipython3

    loc_provider = qc.data.location.FormatLocation(fmt=qc.config.user.base_location)
    qc.data.data_set.DataSet.location_provider=loc_provider  

Changing core
-------------

one can change the core values at runtime, but there is no guarantee
that they are valided. Changing core values will also shadow the config
from being updated if the defaults are updated upsteam (i.e. in the
repo). So use it with a care.

.. code:: ipython3

    qc.config.current_config.core.loglevel = 'INFO'

but one can maunually validate

.. code:: ipython3

    qc.config.validate()

which will raise an exception in case of bad inputs

.. code:: ipython3

    qc.config.current_config.core.loglevel = 'YOLO'
    qc.config.validate() 
    # NOTE that you how have a broken config! 


::


    ---------------------------------------------------------------------------

    ValidationError                           Traceback (most recent call last)

    <ipython-input-14-28539f77dfd3> in <module>()
          1 qc.config.current_config.core.loglevel = 'YOLO'
    ----> 2 qc.config.validate()
          3 # NOTE that you how have a broken config!


    /home/unga/src/Qcodes/qcodes/config/config.py in validate(self, json_config, schema, extra_schema_path)
        168         else:
        169             if json_config is None and schema is None:
    --> 170                 jsonschema.validate(self.current_config, self.current_schema)
        171             else:
        172                 jsonschema.validate(json_config, schema)


    /home/unga/.pyenv/versions/3.4.5/envs/qcodes-dev/lib/python3.4/site-packages/jsonschema/validators.py in validate(instance, schema, cls, *args, **kwargs)
        476         cls = validator_for(schema)
        477     cls.check_schema(schema)
    --> 478     cls(schema, *args, **kwargs).validate(instance)
    

    /home/unga/.pyenv/versions/3.4.5/envs/qcodes-dev/lib/python3.4/site-packages/jsonschema/validators.py in validate(self, *args, **kwargs)
        121         def validate(self, *args, **kwargs):
        122             for error in self.iter_errors(*args, **kwargs):
    --> 123                 raise error
        124 
        125         def is_type(self, instance, type):


    ValidationError: 'YOLO' is not one of ['CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG']
    
    Failed validating 'enum' in schema['properties']['core']['properties']['loglevel']:
        {'default': 'DEBUG',
         'description': 'control logging  level',
         'enum': ['CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG'],
         'type': 'string'}
    
    On instance['core']['loglevel']:
        'YOLO'

