
Combined Parameters
===================

.. code:: ipython3

    import qcodes as qc
    import numpy as np 
    
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.utils.validators import Numbers


.. parsed-literal::

    matplotlib plotting not supported, try "from qcodes.plots.qcmatplotlib import MatPlot" to see the full error
    pyqtgraph plotting not supported, try "from qcodes.plots.pyqtgraph import QtPlot" to see the full error



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <style>.qcodes-output-view:not(.ui-draggable) {
        bottom: 0;
        right: 5px;
    }
    .qcodes-output-view {
        position: fixed;
        z-index: 999;
        background-color: #fff;
        box-shadow: 0 0 12px 1px rgba(87, 87, 87, 0.2);
    }
    
    .qcodes-output-header {
        float: right;
    }
    
    .qcodes-highlight {
        animation: pulse 1s linear;
        background-color: #fa4;
    }
    
    @keyframes pulse {
        0% {
            background-color: #f00;
        }
        100% {
            background-color: #fa4;
        }
    }
    
    .qcodes-process-list {
        float: left;
        max-width: 780px;
        margin: 3px 5px 3px 10px;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }
    
    .qcodes-output-view[qcodes-state=minimized] .qcodes-process-list {
        max-width: 300px;
    }
    
    .qcodes-output-view span {
        padding: 2px 6px 3px 12px;
    }
    
    .qcodes-output-view .btn {
        margin: 0 3px 0 0;
    }
    
    .qcodes-output-view[qcodes-state=docked] .qcodes-docked,
    .qcodes-output-view[qcodes-state=floated] .qcodes-floated,
    .qcodes-output-view[qcodes-state=minimized] .qcodes-minimized,
    .qcodes-output-view[qcodes-state=minimized] .qcodes-content {
        display: none;
    }
    
    .qcodes-output-view .disabled {
        opacity: 0.4;
    }
    
    .qcodes-abort-loop {
        background-color: #844;
        color: #fff;
    }
    
    .qcodes-output-view pre {
        clear: both;
        margin: 0;
        border: 0;
        border-top: 1px solid #ccc;
        background-color: #ffe;
        min-height: 50px;
        max-height: 400px;
        min-width: 400px;
        max-width: 1000px;
    }</style>


If you want to sweep multiple parameters at once qcodes offers the
combine function. You can combine any number of any kind paramter. We'll
use a ManualParameter for this example.

.. code:: ipython3

    p1 = ManualParameter('p1', vals=Numbers(-10, 10))
    p2 = ManualParameter('p2', vals=Numbers(-10, 10))
    p3 = ManualParameter('p3', vals=Numbers(-10, 10))
    p4 = ManualParameter('p4', vals=Numbers(-10, 10))
    # set to -1 so we get some data out
    p4.set(-1)

Simple combined parameters
--------------------------

.. code:: ipython3

    combined = qc.combine(p1, p2, p3, name='combined')
    
    sweep_vals = np.array([[1, 1,1], [1, 1,1]])


.. code:: ipython3

    # 2d loop with a inner loop over a combined parameter
    loop = qc.Loop(p1.sweep(0,10,1)).loop(combined.sweep(sweep_vals), delay=0.001).each(p4)

.. code:: ipython3

    data = loop.get_data_set(name='testsweep')

.. code:: ipython3

    data = loop.run()


.. parsed-literal::

    DataSet:
       mode     = DataMode.LOCAL
       location = '2016-10-20/18-58-13_testsweep'
       <Type>   | <array_id>   | <array.name> | <array.shape>
       Setpoint | p1_set       | p1           | (11,)
       Setpoint | combined_set | combined     | (11, 2)
       Measured | p4           | p4           | (11, 2)
       Measured | p1           | p1           | (11, 2)
       Measured | p2           | p2           | (11, 2)
       Measured | p3           | p3           | (11, 2)
    started at 2016-10-20 18:58:13


The combined\_set just stores the indices

.. code:: ipython3

    print(data.combined_set)


.. parsed-literal::

    DataArray[11,2]: combined_set
    array([[ 0.,  1.],
           [ 0.,  1.],
           [ 0.,  1.],
           [ 0.,  1.],
           [ 0.,  1.],
           [ 0.,  1.],
           [ 0.,  1.],
           [ 0.,  1.],
           [ 0.,  1.],
           [ 0.,  1.],
           [ 0.,  1.]])


But the acutal set values are saved, but labeled as "measured"

.. code:: ipython3

    data.p3




.. parsed-literal::

    DataArray[11,2]: p3
    array([[ 1.,  1.],
           [ 1.,  1.],
           [ 1.,  1.],
           [ 1.,  1.],
           [ 1.,  1.],
           [ 1.,  1.],
           [ 1.,  1.],
           [ 1.,  1.],
           [ 1.,  1.],
           [ 1.,  1.],
           [ 1.,  1.]])



Combine and aggregate parameters
--------------------------------

If an aggregator function is given, the aggregated values are saved
instead of the indices.

.. code:: ipython3

    # define an aggregator function that takes as arguments the parameters you whish to aggegate
    def linear(x,y,z):
        return x+y+z

.. code:: ipython3

    combined = qc.combine(p1, p2, p3, name='combined', label="Sum", units="a.u", aggregator=linear)
    
    x_vals = np.linspace(1, 2, 2)
    y_vals = np.linspace(1, 2, 2)
    z_vals = np.linspace(1, 2, 2)
    


.. code:: ipython3

    # 2d loop with a inner loop over a combined parameter
    loop = qc.Loop(p1.sweep(0,10,1)).loop(combined.sweep(x_vals, y_vals, z_vals), delay=0.001).each(p4)

.. code:: ipython3

    data = loop.get_data_set(name='testsweep')

.. code:: ipython3

    data = loop.run()


.. parsed-literal::

    DataSet:
       mode     = DataMode.LOCAL
       location = '2016-10-20/18-58-13_testsweep_002'
       <Type>   | <array_id>   | <array.name> | <array.shape>
       Setpoint | p1_set       | p1           | (11,)
       Setpoint | combined_set | combined     | (11, 2)
       Measured | p4           | p4           | (11, 2)
       Measured | p1           | p1           | (11, 2)
       Measured | p2           | p2           | (11, 2)
       Measured | p3           | p3           | (11, 2)
    started at 2016-10-20 18:58:13


the combined\_set now stores the aggregated values

.. code:: ipython3

    print(data.combined_set)


.. parsed-literal::

    DataArray[11,2]: combined_set
    array([[ 3.,  6.],
           [ 3.,  6.],
           [ 3.,  6.],
           [ 3.,  6.],
           [ 3.,  6.],
           [ 3.,  6.],
           [ 3.,  6.],
           [ 3.,  6.],
           [ 3.,  6.],
           [ 3.,  6.],
           [ 3.,  6.]])


.. code:: ipython3

    # snapshot of the combined parameter
    combined.snapshot()




.. parsed-literal::

    OrderedDict([('__class__', 'qcodes.instrument.parameter.CombinedParameter'),
                 ('units', 'a.u'),
                 ('label', 'Sum'),
                 ('full_name', 'combined'),
                 ('aggreagator', '<function linear at 0x7fd834e99ea0>'),
                 ('p1',
                  {'__class__': 'qcodes.instrument.parameter.ManualParameter',
                   'label': 'p1',
                   'name': 'p1',
                   'ts': '2016-10-20 18:58:13',
                   'units': '',
                   'value': 2.0}),
                 ('p2',
                  {'__class__': 'qcodes.instrument.parameter.ManualParameter',
                   'label': 'p2',
                   'name': 'p2',
                   'ts': '2016-10-20 18:58:13',
                   'units': '',
                   'value': 2.0}),
                 ('p3',
                  {'__class__': 'qcodes.instrument.parameter.ManualParameter',
                   'label': 'p3',
                   'name': 'p3',
                   'ts': '2016-10-20 18:58:13',
                   'units': '',
                   'value': 2.0})])


