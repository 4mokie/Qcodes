
Offline plotting with categorical data
======================================

This notebook is a collection of plotting examples using ``plot_by_id``
and caterogical (string-valued) data. The notebook should cover all
possible permutations of categorical versus numerical data.

.. code:: ipython3

    %matplotlib notebook
    import numpy as np
    
    from qcodes import Parameter
    from qcodes.dataset.plotting import plot_by_id, get_data_by_id
    from qcodes.dataset.measurements import Measurement
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.experiment_container import new_experiment

.. code:: ipython3

    initialise_database()
    new_experiment('offline_plotting_experiment', '')




.. parsed-literal::

    offline_plotting_experiment#some_sample#1@./exp_container_tutorial.db
    ---------------------------------------------------------------------



1D plotting
-----------

Category is the independent parameter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An example with made-up sciency words and random values.

With the category as the independent parameter, ``plot_by_id`` will
default to a bar plot as long as there is at most one value per
category. If more than one value is found for any category a bar plot i
snot possible, and ``plot_by_id`` falls back to a scatter plot.

.. code:: ipython3

    voltage = Parameter('voltage',
                        label='Voltage',
                        unit='V',
                        set_cmd=None,
                        get_cmd=None)
    fridge_config = Parameter('config',
                              label='Fridge configuration',
                              set_cmd=None,
                              get_cmd=None)
    
    meas = Measurement()
    meas.register_parameter(fridge_config, paramtype='text')
    meas.register_parameter(voltage, setpoints=(fridge_config,))
    
    with meas.run() as datasaver:
    
        configurations = ['open', 'outer chamber closed',
                          'pumping', 'closed']
        
        for configuration in configurations:
            datasaver.add_result((fridge_config, configuration),
                                 (voltage, np.random.rand()))
    
    
    run_id = datasaver.run_id


.. parsed-literal::

    Starting experimental run with id: 1


.. code:: ipython3

    _ = plot_by_id(run_id)



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='7ce44de6-34cd-4bc1-a652-1778c69a58c1'></div>


.. code:: ipython3

    with meas.run() as datasaver:
    
        configurations = ['open', 'outer chamber closed',
                          'pumping', 'closed']
        
        for configuration in configurations:
            datasaver.add_result((fridge_config, configuration),
                                 (voltage, np.random.rand()))
    
    
        datasaver.add_result((fridge_config, 'open'),
                             (voltage, np.random.rand()))
            
    run_id = datasaver.run_id  
    
    _ = plot_by_id(run_id)


.. parsed-literal::

    Starting experimental run with id: 2



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='d4e83596-4fcc-47ac-94fa-ccad530f0a23'></div>


Category is the dependent parameter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

With the categories as the dependent variable, i.e. the *outcome* of a
measurement, ``plot_by_id`` defaults to a scatter plot.

Here an example with made-up sciency words and random values.

**UNRESOLVED**: How do we ensure the y-axis order?

.. code:: ipython3

    voltage = Parameter('voltage',
                        label='Voltage',
                        unit='V',
                        set_cmd=None,
                        get_cmd=None)
    response = Parameter('response',
                         label='Sample response',
                         set_cmd=None,
                         get_cmd=None)
    
    meas = Measurement()
    meas.register_parameter(voltage)
    meas.register_parameter(response, paramtype='text', setpoints=(voltage,))
    
    
    with meas.run() as datasaver:
    
        for volt in np.linspace(0, 1, 50):
            coinvalue = volt + 0.5*np.random.randn()
            if coinvalue < 0:
                resp = 'Bad'
            elif coinvalue < 0.8:
                resp = 'Good'
            else:
                resp = 'Excellent'
                
            datasaver.add_result((voltage, volt),
                                 (response, resp))
                
    run_id = datasaver.run_id


.. parsed-literal::

    Starting experimental run with id: 3


.. code:: ipython3

    _ = plot_by_id(run_id)



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='9c66ecd8-2622-4b78-bf38-8b2893ad990d'></div>


Both variables are categorical
------------------------------

For both variables being categorical, ``plot_by_id`` defaults to a
scatter plot.

This case would typically be some summary of a large number of
measurements.

.. code:: ipython3

    sample = Parameter('sample',
                        label='Sample',
                        unit='',
                        set_cmd=None,
                        get_cmd=None)
    feature = Parameter('feature',
                         label='Physical feature',
                         set_cmd=None,
                         get_cmd=None)
    
    meas = Measurement()
    meas.register_parameter(sample, paramtype='text')
    meas.register_parameter(feature, paramtype='text', setpoints=(sample,))
    
    
    with meas.run() as datasaver:
    
        features = ['superconducting', 'qubit',
                    'clean states', 'high bandwidth']
        
        for samp in ['Nanowire', 'Silicon Chip', 'SQUID', 'Membrane']:
    
            feats = np.random.randint(1, 5)
            for _ in range(feats):
    
                datasaver.add_result((sample, samp),
                                     (feature, features[np.random.randint(0, 4)]))
        
    run_id = datasaver.run_id


.. parsed-literal::

    Starting experimental run with id: 4


.. code:: ipython3

    _ = plot_by_id(run_id)



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='5b7dac75-7f93-4a09-bc1a-d373303a8c19'></div>


2D plotting
-----------

Naming convention: the x-axis is horizontal, the y-axis is vertical, and
the z-axis is out-of-plane.

Categorical data on the x-axis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Here an example were different samples are tested for conductivity. The
longer the name of the sample, the higher the conductivity.

.. code:: ipython3

    sample = Parameter('sample',
                        label='Sample',
                        unit='',
                        set_cmd=None,
                        get_cmd=None)
    gate_voltage = Parameter('gate_v',
                             label='Gate voltage',
                             unit='V',
                             set_cmd=None,
                             get_cmd=None)
    conductance = Parameter('conductance',
                            label='Conductance',
                            unit='e^2/hbar',
                            set_cmd=None,
                            get_cmd=None)
    
    meas = Measurement()
    meas.register_parameter(sample, paramtype='text')
    meas.register_parameter(gate_voltage)
    meas.register_parameter(conductance, setpoints=(sample, gate_voltage))
    
    
    with meas.run() as datasaver:
        
        for samp in ['Nanowire', 'Silicon Chip', 'SQUID', 'Membrane']:
    
            gate_vs = np.linspace(0, 0.075, 75)
            
            for gate_v in gate_vs:
                datasaver.add_result((sample, samp),
                                     (gate_voltage, gate_v),
                                     (conductance, len(samp)*gate_v))
        
    run_id = datasaver.run_id


.. parsed-literal::

    Starting experimental run with id: 5


.. code:: ipython3

    ax, _ = plot_by_id(run_id)



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='33a265f5-de83-4f64-8c48-116da1f528ac'></div>


Categorical data on the y-axis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This situation is very similar to having categorical data on the x-axis.
We reuse the same example.

.. code:: ipython3

    sample = Parameter('sample',
                        label='Sample',
                        unit='',
                        set_cmd=None,
                        get_cmd=None)
    gate_voltage = Parameter('gate_v',
                             label='Gate voltage',
                             unit='V',
                             set_cmd=None,
                             get_cmd=None)
    conductance = Parameter('conductance',
                            label='Conductance',
                            unit='e^2/hbar',
                            set_cmd=None,
                            get_cmd=None)
    
    meas = Measurement()
    meas.register_parameter(sample, paramtype='text')
    meas.register_parameter(gate_voltage)
    meas.register_parameter(conductance, setpoints=(gate_voltage, sample))
    
    
    with meas.run() as datasaver:
        
        for samp in ['Nanowire', 'Silicon Chip', 'SQUID', 'Membrane']:
    
            gate_vs = np.linspace(0, 0.01, 75)
            
            for gate_v in gate_vs:
                datasaver.add_result((sample, samp),
                                     (gate_voltage, gate_v),
                                     (conductance, len(samp)*gate_v))
        
    run_id = datasaver.run_id


.. parsed-literal::

    Starting experimental run with id: 6


.. code:: ipython3

    ax, _ = plot_by_id(run_id)



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='e7dbb5f6-f226-485c-9c05-77e30a03ec83'></div>


Categorical data on the z-axis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Categorical data on the z-axis behaves similarly to numerical data on
the z-axis; what kind of plot we get depends on the structure of the
setpoints (i.e. the x-axis and y-axis data). If the setpoints are on a
grid, we get a heatmap. If not, we get a scatter plot.

Gridded setpoints
^^^^^^^^^^^^^^^^^

.. code:: ipython3

    bias_voltage = Parameter('bias_v',
                             label='Bias voltage',
                             unit='V',
                             set_cmd=None,
                             get_cmd=None)
    gate_voltage = Parameter('gate_v',
                             label='Gate voltage',
                             unit='V',
                             set_cmd=None,
                             get_cmd=None)
    useful = Parameter('usefulness',
                       label='Usefulness of region',
                       set_cmd=None,
                       get_cmd=None)
    
    meas = Measurement()
    meas.register_parameter(gate_voltage)
    meas.register_parameter(bias_voltage)
    meas.register_parameter(useful, setpoints=(bias_voltage, gate_voltage),
                            paramtype='text')
    
    
    # a function to simulate the usefulness of a region
    
    def get_usefulness(x, y):
        val = np.sin(x)*np.sin(y)
        if val < -0.4:
            return 'Useless'
        if val < 0:
            return 'Bad'
        if val <0.5:
            return 'Possible'
        return 'Good'
    
    with meas.run() as datasaver:
        
        for bias_v in np.linspace(0, 3, 100):
            for gate_v in np.linspace(-1, 1, 75):
                datasaver.add_result((bias_voltage, bias_v),
                                     (gate_voltage, gate_v),
                                     (useful, get_usefulness(bias_v, gate_v)))
        
    run_id = datasaver.run_id


.. parsed-literal::

    Starting experimental run with id: 7


.. code:: ipython3

    ax, cax = plot_by_id(run_id)



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='314cef12-90b3-4b10-88f3-0dee1ccade55'></div>


Scattered setpoints
^^^^^^^^^^^^^^^^^^^

The same example as above, but this time with setpoints not on a grid.

.. code:: ipython3

    bias_voltage = Parameter('bias_v',
                             label='Bias voltage',
                             unit='V',
                             set_cmd=None,
                             get_cmd=None)
    gate_voltage = Parameter('gate_v',
                             label='Gate voltage',
                             unit='V',
                             set_cmd=None,
                             get_cmd=None)
    useful = Parameter('usefulness',
                       label='Usefulness of region',
                       set_cmd=None,
                       get_cmd=None)
    
    meas = Measurement()
    meas.register_parameter(gate_voltage)
    meas.register_parameter(bias_voltage)
    meas.register_parameter(useful, setpoints=(bias_voltage, gate_voltage),
                            paramtype='text')
    
    
    # a function to simulate the usefulness of a region
    
    def get_usefulness(x, y):
        val = np.sin(x)*np.sin(y)
        if val < -0.4:
            return 'Useless'
        if val < 0:
            return 'Bad'
        if val <0.5:
            return 'Possible'
        return 'Good'
    
    with meas.run() as datasaver:
        
        for bias_v in 3*(np.random.rand(100)):
            for gate_v in 2*(np.random.rand(75)-0.5):
                datasaver.add_result((bias_voltage, bias_v),
                                     (gate_voltage, gate_v),
                                     (useful, get_usefulness(bias_v, gate_v)))
        
    run_id = datasaver.run_id


.. parsed-literal::

    Starting experimental run with id: 8


.. code:: ipython3

    ax, cax = plot_by_id(run_id)



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='db902cd4-adba-47ac-9ab9-953615fbce40'></div>


Categorical data on x-axis and z-axis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For completeness, we include two examples of this situation. One
resulting in a grid and one resulting in a scatter plot. We reuse the
example with the x- and y-axes having numerical data with just a slight
modification.

.. code:: ipython3

    sample = Parameter('sample',
                             label='Sample',
                             set_cmd=None,
                             get_cmd=None)
    gate_voltage = Parameter('gate_v',
                             label='Gate voltage',
                             unit='V',
                             set_cmd=None,
                             get_cmd=None)
    useful = Parameter('usefulness',
                       label='Usefulness of region',
                       set_cmd=None,
                       get_cmd=None)
    
    meas = Measurement()
    meas.register_parameter(sample, paramtype='text')
    meas.register_parameter(gate_voltage)
    meas.register_parameter(useful, setpoints=(sample, gate_voltage),
                            paramtype='text')
    
    samples = ['nanowire', '2DEG', 'spin qubit', 'nanowire_alt']
    
    # a function to simulate the usefulness of a region
    
    def get_usefulness(x, y):
        x_num = samples.index(x)*4/len(samples)
        val = np.sin(x_num)*np.sin(y)
        if val < -0.4:
            return 'Useless'
        if val < 0:
            return 'Bad'
        if val <0.5:
            return 'Possible'
        return 'Good'
    
    with meas.run() as datasaver:
        
        for samp in samples:
            for gate_v in np.linspace(-1, 1, 75):
                datasaver.add_result((sample, samp),
                                     (gate_voltage, gate_v),
                                     (useful, get_usefulness(samp, gate_v)))
        
    run_id = datasaver.run_id


.. parsed-literal::

    Starting experimental run with id: 9


.. code:: ipython3

    ax, cax = plot_by_id(run_id)



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='f2f7a5e2-4dc7-4eb3-aaed-388db55fe363'></div>


.. code:: ipython3

    sample = Parameter('sample',
                             label='Sample',
                             set_cmd=None,
                             get_cmd=None)
    gate_voltage = Parameter('gate_v',
                             label='Gate voltage',
                             unit='V',
                             set_cmd=None,
                             get_cmd=None)
    useful = Parameter('usefulness',
                       label='Usefulness of region',
                       set_cmd=None,
                       get_cmd=None)
    
    meas = Measurement()
    meas.register_parameter(sample, paramtype='text')
    meas.register_parameter(gate_voltage)
    meas.register_parameter(useful, setpoints=(sample, gate_voltage),
                            paramtype='text')
    
    samples = ['nanowire', '2DEG', 'spin qubit', 'nanowire_alt']
    
    # a function to simulate the usefulness of a region
    
    def get_usefulness(x, y):
        x_num = samples.index(x)*4/len(samples)
        val = np.sin(x_num)*np.sin(y)
        if val < -0.4:
            return 'Useless'
        if val < 0:
            return 'Bad'
        if val <0.5:
            return 'Possible'
        return 'Good'
    
    with meas.run() as datasaver:
        
        for samp in samples:
            for gate_v in 2*(np.random.rand(75)-0.5):
                datasaver.add_result((sample, samp),
                                     (gate_voltage, gate_v),
                                     (useful, get_usefulness(samp, gate_v)))
        
    run_id = datasaver.run_id


.. parsed-literal::

    Starting experimental run with id: 10


.. code:: ipython3

    ax, cax = plot_by_id(run_id)



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='f958ba35-5c20-4565-a139-7cff6ab4fcc9'></div>


