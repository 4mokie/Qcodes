
Dataset Benchmarking
====================

.. code:: ipython3

    %matplotlib notebook
    import matplotlib.pyplot as plt
    import qcodes as qc
    from qcodes import ParamSpec, new_data_set, new_experiment
    import numpy as np

.. code:: ipython3

    qc.config.core.db_location




.. parsed-literal::

    './experiments.db'



Setup
-----

.. code:: ipython3

    exp = new_experiment("benchmarking", sample_name="the sample is a lie")
    exp




.. parsed-literal::

    benchmarking#the sample is a lie#1@./experiments.db
    ---------------------------------------------------



Now we can create a dataset. Note two things:

::

    - if we don't specfiy a exp_id, but we have an experiment in the experiment container the dataset will go into that one.
    - dataset can be created from the experiment object

.. code:: ipython3

    dataSet = new_data_set("benchmark_data")
    exp




.. parsed-literal::

    benchmarking#the sample is a lie#1@./experiments.db
    ---------------------------------------------------
    1-benchmark_data-1-None-0



In this benchmark we will assueme that we are doing a 2D loop and
investigate the performance implications of writing to the dataset

.. code:: ipython3

    x_shape = 100
    y_shape = 100

Baseline: Generate data
-----------------------

.. code:: ipython3

    %%time
    for x in range(x_shape):
        for y in range(y_shape):
            z = np.random.random_sample(1)


.. parsed-literal::

    CPU times: user 48.8 ms, sys: 171 µs, total: 49 ms
    Wall time: 45.7 ms


and store in memory

.. code:: ipython3

    x_data = np.zeros((x_shape, y_shape))
    y_data = np.zeros((x_shape, y_shape))
    z_data = np.zeros((x_shape, y_shape))

.. code:: ipython3

    %%time
    for x in range(x_shape):
        for y in range(y_shape):
            x_data[x,y] = x
            y_data[x,y] = y
            z_data[x,y] = np.random.random_sample()


.. parsed-literal::

    CPU times: user 17.4 ms, sys: 215 µs, total: 17.7 ms
    Wall time: 15.5 ms


Add to dataset inside double loop
---------------------------------

.. code:: ipython3

    double_dataset = new_data_set("doubledata", specs=[ParamSpec("x", "numeric"),
                                                       ParamSpec("y", "numeric"),
                                                       ParamSpec('z', "numeric")])

Note that this is so slow that we are only doing a 10th of the
computation

.. code:: ipython3

    %%time
    for x in range(x_shape//10):
        for y in range(y_shape):
            double_dataset.add_result({"x": x, 'y': y, 'z': np.random.random_sample()})


.. parsed-literal::

    CPU times: user 1.7 s, sys: 1.04 s, total: 2.74 s
    Wall time: 13.1 s


Add the data in outer loop and store as np array
------------------------------------------------

.. code:: ipython3

    single_dataset = new_data_set("singledata", specs=[ParamSpec("x", "array"),
                                                       ParamSpec("y", "array"),
                                                       ParamSpec('z', "array")])
    x_data = np.zeros((y_shape))
    y_data = np.zeros((y_shape))
    z_data = np.zeros((y_shape))

.. code:: ipython3

    %%time
    for x in range(x_shape):
        for y in range(y_shape):
            x_data[y] = x
            y_data[y] = y
            z_data[y] = np.random.random_sample(1)
        single_dataset.add_result({"x": x_data, 'y': y_data, 'z': z_data})


.. parsed-literal::

    CPU times: user 350 ms, sys: 132 ms, total: 481 ms
    Wall time: 779 ms


Save once after loop
--------------------

.. code:: ipython3

    zero_dataset = new_data_set("zerodata", specs=[ParamSpec("x", "array"),
                                                       ParamSpec("y", "array"),
                                                       ParamSpec('z', "array")])
    x_data = np.zeros((x_shape, y_shape))
    y_data = np.zeros((x_shape, y_shape))
    z_data = np.zeros((x_shape, y_shape))

.. code:: ipython3

    %%time
    for x in range(x_shape):
        for y in range(y_shape):
            x_data[x,y] = x
            y_data[x,y] = y
            z_data[x,y] = np.random.random_sample(1)
    zero_dataset.add_result({'x':x_data, 'y':y_data, 'z':z_data})


.. parsed-literal::

    CPU times: user 66 ms, sys: 4.61 ms, total: 70.6 ms
    Wall time: 69.2 ms


Array parameter
---------------

.. code:: ipython3

    array1D_dataset = new_data_set("array1Ddata", specs=[ParamSpec("x", "array"),
                                                         ParamSpec("y", "array"),
                                                         ParamSpec('z', "array")])
    y_setpoints = np.arange(y_shape)

.. code:: ipython3

    %%timeit
    for x in range(x_shape):
        x_data[x,:] = x
        array1D_dataset.add_result({'x':x_data[x,:], 'y':y_setpoints, 'z':np.random.random_sample(y_shape)})


.. parsed-literal::

    The slowest run took 4.68 times longer than the fastest. This could mean that an intermediate result is being cached.
    1.06 s ± 714 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)


.. code:: ipython3

    x_data = np.zeros((x_shape, y_shape))
    y_data = np.zeros((x_shape, y_shape))
    z_data = np.zeros((x_shape, y_shape))
    y_setpoints = np.arange(y_shape)

.. code:: ipython3

    array0D_dataset = new_data_set("array0Ddata", specs=[ParamSpec("x", "array"),
                                                         ParamSpec("y", "array"),
                                                         ParamSpec('z', "array")])

.. code:: ipython3

    %%timeit
    for x in range(x_shape):
        x_data[x,:] = x
        y_data[x,:] = y_setpoints
        z_data[x,:] = np.random.random_sample(y_shape)
    array0D_dataset.add_result({'x':x_data, 'y':y_data, 'z':z_data})


.. parsed-literal::

    The slowest run took 7.23 times longer than the fastest. This could mean that an intermediate result is being cached.
    28.1 ms ± 25.2 ms per loop (mean ± std. dev. of 7 runs, 100 loops each)


Insert many
===========

.. code:: ipython3

    data = []
    for i in range(100):
        for j in range(100):
            data.append({'x': i, 'y':j, 'z':np.random.random_sample()})

.. code:: ipython3

    many_Data = new_data_set("many_data", specs=[ParamSpec("x", "numeric"),
                                                 ParamSpec("y", "numeric"),
                                                 ParamSpec("z", "numeric")])

.. code:: ipython3

    %%timeit
    many_Data.add_results(data)


.. parsed-literal::

    26.8 ms ± 3.13 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

