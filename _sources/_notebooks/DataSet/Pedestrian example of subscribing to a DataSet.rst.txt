
Pedestrian example of subscribing to a DataSet
==============================================

It is possible to *subscribe* to a dataset. Subscribing means adding a
function to the dataset and having the dataset call that function every
time a result is added to the dataset (or more rarely, see below).

Call signature
~~~~~~~~~~~~~~

The subscribing function must have the following call signature:

::

    fun(results: List[Tuple[Value]], length: int,
        state: Union[MutableSequence, MutableMapping]) -> None:
        """
        Args:
            results: A list of tuples where each tuple holds the results inserted into the dataset.
                For two scalar parameters, X and Y, results might look like [(x1, y1), (x2, y2), ...]
            length: The current length of the dataset.
            state: Any mutable sequence/mapping that can be used to hold information from call to call.
                In practice a list or a dict.
        """

Below we provide an example function that counts the number of times a
voltage has exceeded a certain limit.

Frequency
~~~~~~~~~

Since calling the function **every** time an insertion is made may be
too frequent, a ``min_wait`` and a ``min_count`` argument may be
provided when subscribing. The dataset will then only call the function
upon inserting a result if ``min_wait`` seconds have elapsed since the
last call (or the start of the subscription, in the time before the
first call) AND ``min_count`` results have been added to the dataset
since the last call (or the start of the subscription). All the results
added in the meantime are queued and passed to the function in one go.

Order
~~~~~

The subscription must be set up **after** all parameters have been added
to the dataset.

.. code:: ipython3

    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.data_set import new_data_set, ParamSpec
    from qcodes.dataset.experiment_container import new_experiment
    import logging
    import warnings
    import numpy as np
    from time import sleep

Example 1: A notification
-------------------------

We imagine scanning a frequency and reading out a noisy voltage. When
the voltage has exceeded a threshold 5 times, we want to receive a
warning.

.. code:: ipython3

    initialise_database()
    new_experiment(name="subscription_tutorial", sample_name="no_sample")




.. parsed-literal::

    subscription_tutorial#no_sample#6@./exp_container_tutorial.db
    -------------------------------------------------------------



.. code:: ipython3

    dataSet = new_data_set("test", specs=[ParamSpec("x", "numeric", unit='Hz'),
                                          ParamSpec("y", "numeric", unit='V')])

.. code:: ipython3

    def threshold_notifier(results, length, state):
        if len(state) > 4:
            print(f'At step {length}: The voltage exceeded the limit 5 times! ')
            state.clear()
        for result in results:
            if result[1] > 0.8:
                state.append(result[1])

.. code:: ipython3

    # now perform the subscription
    # since this is important safety info, we want our callback function called
    # on EVERY insertion
    sub_id = dataSet.subscribe(threshold_notifier, min_wait=0, min_count=1, state=[])

.. code:: ipython3

    for x in np.linspace(100, 200, 150):
        y = np.random.randn()
        dataSet.add_result({"x": x, "y": y})


.. parsed-literal::

    At step 23: The voltage exceeded the limit 5 times! 
    At step 40: The voltage exceeded the limit 5 times! 
    At step 65: The voltage exceeded the limit 5 times! 
    At step 85: The voltage exceeded the limit 5 times! 
    At step 95: The voltage exceeded the limit 5 times! 
    At step 122: The voltage exceeded the limit 5 times! 


.. code:: ipython3

    dataSet.unsubscribe_all()

Example 2: ASCII Plotter
------------------------

Not the most useful example for real life, but indeed what every kid on
the block seems to be demanding.

.. code:: ipython3

    dataSet = new_data_set("test", specs=[ParamSpec("blip", "numeric", unit='bit'),
                                          ParamSpec("blop", "numeric", unit='bit')])

.. code:: ipython3

    def ASCII_plotter_5bit(results, length, state):
        """
        Glorious 5-bit signal plotter
        
        Digitises the range (-1, 1) with 4 bits and plots it
        in stdout. Crashes and burns if given data outside that
        interval.
        """
        for result in results:
            plotline = ['.'] * 32
            yvalue = result[1]
            yvalue += 1
            yvalue /= 2
            yvalue = int(yvalue*31)
            plotline[yvalue] = 'O'
            print(''.join(plotline))
            

.. code:: ipython3

    sub_id = dataSet.subscribe(ASCII_plotter_5bit, min_wait=0, min_count=3, state=[])

.. code:: ipython3

    for x in np.linspace(0, 3*np.pi, 100):
        yvalue = 0.9*np.sin(x) + np.random.randn()*0.05
        dataSet.add_result({"blip": x, "blop": yvalue})
        sleep(0.1)


.. parsed-literal::

    ..............O.................
    .................O..............
    .................O..............
    ...................O............
    ...................O............
    ......................O.........
    ........................O.......
    ........................O.......
    ........................O.......
    ..........................O.....
    ..........................O.....
    ..........................O.....
    ..........................O.....
    ............................O...
    ...........................O....
    .............................O..
    ..............................O.
    .............................O..
    .............................O..
    .............................O..
    ...........................O....
    ............................O...
    ...........................O....
    ............................O...
    .........................O......
    .........................O......
    .......................O........
    .........................O......
    ......................O.........
    ....................O...........
    ..................O.............
    ..................O.............
    .................O..............
    ................O...............
    ............O...................
    ..............O.................
    ..........O.....................
    .........O......................
    ........O.......................
    .......O........................
    .......O........................
    ......O.........................
    ......O.........................
    ...O............................
    ...O............................
    ..O.............................
    ..O.............................
    .O..............................
    ..O.............................
    ..O.............................
    .O..............................
    O...............................
    ...O............................
    .O..............................
    ..O.............................
    ....O...........................
    ....O...........................
    ...O............................
    .....O..........................
    .......O........................
    ........O.......................
    .........O......................
    .........O......................
    ...........O....................
    ...........O....................
    .............O..................
    ...............O................
    .................O..............
    .................O..............
    ....................O...........
    ....................O...........
    ......................O.........
    .....................O..........
    .......................O........
    ........................O.......
    .........................O......
    ..........................O.....
    ..........................O.....
    ............................O...
    .............................O..
    ............................O...
    .............................O..
    ...........................O....
    ............................O...
    ............................O...
    ............................O...
    ..........................O.....
    ...........................O....
    ............................O...
    ..........................O.....
    .........................O......
    .........................O......
    ........................O.......
    ......................O.........
    .....................O..........
    .....................O..........
    .................O..............
    ...................O............
    ................O...............

