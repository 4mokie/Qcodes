
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='9ecd41a6-8622-4fdd-8702-7bc84282e3ec'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='2daa72ab-cd63-4d34-b5f2-e2db2bf4b1e2'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.598421137804905],
     [0.352752990778589],
     [0.285281667433228],
     [0.691709995519495],
     [0.540070250981559],
     [0.425363409934252],
     [0.192114743959501],
     [0.185835454109899],
     [0.484231712938268],
     [0.427385746676716],
     [0.174726999235402],
     [0.471815289777713],
     [0.0418847630567155],
     [0.318865276223327],
     [0.151914865595442],
     [0.869452757097494],
     [0.198975554793421],
     [0.716208376603999],
     [0.746286329921937],
     [0.882249021871914],
     [0.777211645999107],
     [0.779389920849683],
     [0.673009735894557],
     [0.604085308910536],
     [0.0142829030457222],
     [0.61221974106364],
     [0.0408199719601293],
     [0.378967877432224],
     [0.998521032150882],
     [0.314165794178742],
     [0.919504889445759],
     [0.50753246321602],
     [0.241847013787232],
     [0.509285055607285],
     [0.419181928551259],
     [0.507525771709075],
     [0.386957151248933],
     [0.395017681756654],
     [0.247656889070136],
     [0.510490477034792],
     [0.520666385073668],
     [0.386265001043405],
     [0.0591055244656353],
     [0.738509470059107],
     [0.411066318954663],
     [0.451408722928587],
     [0.86515726722415],
     [0.877942557707633],
     [0.789258870707018],
     [0.888992396075209],
     [0.279207099413963],
     [0.986059726566717],
     [0.250047946432639],
     [0.494899874223759],
     [0.808203806566183],
     [0.22743419691817],
     [0.111350029757451],
     [0.670257515224379],
     [0.36911176869838],
     [0.258298525284575],
     [0.413870897583243],
     [0.559179081084419],
     [0.577189308654271],
     [0.271257271759347],
     [0.742384961876227],
     [0.991533198904808],
     [0.584036879310606],
     [0.468446765871336],
     [0.731728966079312],
     [0.958871129148178],
     [0.601488833879215],
     [0.54480712629109],
     [0.657678808830181],
     [0.940007711224228],
     [0.84042976160533],
     [0.829511947447401],
     [0.976331114892145],
     [0.958328342544155],
     [0.0160514023296722],
     [0.50198965384832],
     [0.989084445948731],
     [0.451271449360303],
     [0.786499008704471],
     [0.917210465568628],
     [0.676983298173887],
     [0.274639881971647],
     [0.0640271542973206],
     [0.0319164728284784],
     [0.654066094126021],
     [0.627052164991134],
     [0.816351453407816],
     [0.378233856369915],
     [0.039488375010609],
     [0.364226604596996],
     [0.892126374344547],
     [0.411818788786044],
     [0.311441165560943],
     [0.340287233718452],
     [0.431926478725511],
     [0.401176601164448]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.88776823])],
     [array([0.71274212])],
     [array([0.44621713])],
     [array([0.10993377])],
     [array([0.3158944])],
     [array([0.89557994])],
     [array([0.38914971])],
     [array([0.4806922])],
     [array([0.85118985])],
     [array([0.49472846])],
     [array([0.33055211])],
     [array([0.93758477])],
     [array([0.66993764])],
     [array([0.62029579])],
     [array([0.78064701])],
     [array([0.42500963])],
     [array([0.49258483])],
     [array([0.05271998])],
     [array([0.47509775])],
     [array([0.01953162])],
     [array([0.35963044])],
     [array([0.89004161])],
     [array([0.50757151])],
     [array([0.39314352])],
     [array([0.49668333])],
     [array([0.57033536])],
     [array([0.03725416])],
     [array([0.80045622])],
     [array([0.5384057])],
     [array([0.16409112])],
     [array([0.7897954])],
     [array([0.95621948])],
     [array([0.03779158])],
     [array([0.34034832])],
     [array([0.27163318])],
     [array([0.75118838])],
     [array([0.76945147])],
     [array([0.46316792])],
     [array([0.09059365])],
     [array([0.47235456])],
     [array([0.79145512])],
     [array([0.76175183])],
     [array([0.56517069])],
     [array([0.44829274])],
     [array([0.27262592])],
     [array([0.61386225])],
     [array([0.87773257])],
     [array([0.11040012])],
     [array([0.84518544])],
     [array([0.5141119])],
     [array([0.18938617])],
     [array([0.6253989])],
     [array([0.66570593])],
     [array([0.3074065])],
     [array([0.56172833])],
     [array([0.98574459])],
     [array([0.42187899])],
     [array([0.81927922])],
     [array([0.86023281])],
     [array([0.33333731])],
     [array([0.14282259])],
     [array([0.49712159])],
     [array([0.43843438])],
     [array([0.71707477])],
     [array([0.71556585])],
     [array([0.12423807])],
     [array([0.49777406])],
     [array([0.37874842])],
     [array([0.69341267])],
     [array([0.69572592])],
     [array([0.91905814])],
     [array([0.15873354])],
     [array([0.69280715])],
     [array([0.70553108])],
     [array([0.38453523])],
     [array([0.04286016])],
     [array([0.48634906])],
     [array([0.07882221])],
     [array([0.576129])],
     [array([0.98333374])],
     [array([0.88314202])],
     [array([0.42085154])],
     [array([0.32315664])],
     [array([0.17507568])],
     [array([0.68843204])],
     [array([0.99615101])],
     [array([0.33624075])],
     [array([0.0780857])],
     [array([0.72981983])],
     [array([0.03914425])],
     [array([0.40696825])],
     [array([0.81008673])],
     [array([0.11477361])],
     [array([0.57189544])],
     [array([0.31180174])],
     [array([0.75133983])],
     [array([0.37077356])],
     [array([0.54963767])],
     [array([0.80969829])],
     [array([0.24030331])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.88776823, 0.71274212, 0.44621713, 0.10993377, 0.3158944 ,
           0.89557994, 0.38914971, 0.4806922 , 0.85118985, 0.49472846,
           0.33055211, 0.93758477, 0.66993764, 0.62029579, 0.78064701,
           0.42500963, 0.49258483, 0.05271998, 0.47509775, 0.01953162,
           0.35963044, 0.89004161, 0.50757151, 0.39314352, 0.49668333,
           0.57033536, 0.03725416, 0.80045622, 0.5384057 , 0.16409112,
           0.7897954 , 0.95621948, 0.03779158, 0.34034832, 0.27163318,
           0.75118838, 0.76945147, 0.46316792, 0.09059365, 0.47235456,
           0.79145512, 0.76175183, 0.56517069, 0.44829274, 0.27262592,
           0.61386225, 0.87773257, 0.11040012, 0.84518544, 0.5141119 ,
           0.18938617, 0.6253989 , 0.66570593, 0.3074065 , 0.56172833,
           0.98574459, 0.42187899, 0.81927922, 0.86023281, 0.33333731,
           0.14282259, 0.49712159, 0.43843438, 0.71707477, 0.71556585,
           0.12423807, 0.49777406, 0.37874842, 0.69341267, 0.69572592,
           0.91905814, 0.15873354, 0.69280715, 0.70553108, 0.38453523,
           0.04286016, 0.48634906, 0.07882221, 0.576129  , 0.98333374,
           0.88314202, 0.42085154, 0.32315664, 0.17507568, 0.68843204,
           0.99615101, 0.33624075, 0.0780857 , 0.72981983, 0.03914425,
           0.40696825, 0.81008673, 0.11477361, 0.57189544, 0.31180174,
           0.75133983, 0.37077356, 0.54963767, 0.80969829, 0.24030331])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.59842114, 0.35275299, 0.28528167, 0.69171   , 0.54007025,
              0.42536341, 0.19211474, 0.18583545, 0.48423171, 0.42738575,
              0.174727  , 0.47181529, 0.04188476, 0.31886528, 0.15191487,
              0.86945276, 0.19897555, 0.71620838, 0.74628633, 0.88224902,
              0.77721165, 0.77938992, 0.67300974, 0.60408531, 0.0142829 ,
              0.61221974, 0.04081997, 0.37896788, 0.99852103, 0.31416579,
              0.91950489, 0.50753246, 0.24184701, 0.50928506, 0.41918193,
              0.50752577, 0.38695715, 0.39501768, 0.24765689, 0.51049048,
              0.52066639, 0.386265  , 0.05910552, 0.73850947, 0.41106632,
              0.45140872, 0.86515727, 0.87794256, 0.78925887, 0.8889924 ,
              0.2792071 , 0.98605973, 0.25004795, 0.49489987, 0.80820381,
              0.2274342 , 0.11135003, 0.67025752, 0.36911177, 0.25829853,
              0.4138709 , 0.55917908, 0.57718931, 0.27125727, 0.74238496,
              0.9915332 , 0.58403688, 0.46844677, 0.73172897, 0.95887113,
              0.60148883, 0.54480713, 0.65767881, 0.94000771, 0.84042976,
              0.82951195, 0.97633111, 0.95832834, 0.0160514 , 0.50198965,
              0.98908445, 0.45127145, 0.78649901, 0.91721047, 0.6769833 ,
              0.27463988, 0.06402715, 0.03191647, 0.65406609, 0.62705216,
              0.81635145, 0.37823386, 0.03948838, 0.3642266 , 0.89212637,
              0.41181879, 0.31144117, 0.34028723, 0.43192648, 0.4011766 ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.3206063 , 0.75592138, 0.03730092, 0.3090044 , 0.98932527,
              0.52238722, 0.78302335, 0.5507899 , 0.83237403, 0.20744048,
              0.6507517 , 0.71906986, 0.09805307, 0.58446515, 0.50166578,
              0.50243399, 0.6369869 , 0.41188754, 0.33929011, 0.89466985,
              0.75823905, 0.82509081, 0.96289193, 0.23167739, 0.63065505,
              0.9735939 , 0.55688393, 0.30676603, 0.19066291, 0.81539829,
              0.28432172, 0.29990955, 0.21167404, 0.24862953, 0.42984126,
              0.52611322, 0.50277229, 0.46190405, 0.02679854, 0.84597727,
              0.72330353, 0.29138469, 0.11663308, 0.78298454, 0.56940766,
              0.90520864, 0.07308278, 0.11551704, 0.61446377, 0.38813389,
              0.85892834, 0.46471024, 0.29631974, 0.83723535, 0.77854968,
              0.97603076, 0.81468884, 0.17149469, 0.1897351 , 0.74929542,
              0.77905654, 0.50989107, 0.15607463, 0.32188552, 0.05457149,
              0.83603214, 0.64197995, 0.05845678, 0.86745266, 0.52309616,
              0.23034058, 0.40545193, 0.19847706, 0.17465514, 0.22098131,
              0.34822139, 0.14981683, 0.57287279, 0.89043991, 0.47360684,
              0.99371659, 0.6394362 , 0.86334089, 0.05700658, 0.64300174,
              0.59251058, 0.2700874 , 0.76656916, 0.91899792, 0.01805692,
              0.85850093, 0.39917176, 0.15400009, 0.69689079, 0.17839472,
              0.64299938, 0.59508986, 0.14377058, 0.65837798, 0.54018589])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.11365545, 0.29078608, 0.09285741, 0.25092834, 0.41351145,
              0.53209362, 0.04801369, 0.27796859, 0.20122827, 0.85596343,
              0.56489829, 0.68895647, 0.95924214, 0.28991197, 0.1346909 ,
              0.30722237, 0.86026734, 0.63735432, 0.3342137 , 0.92720612,
              0.24652189, 0.07874277, 0.78266272, 0.20703046, 0.84853478,
              0.49717422, 0.41875177, 0.37504504, 0.64753416, 0.95020559,
              0.92217701, 0.87162744, 0.1766857 , 0.98397828, 0.66495844,
              0.74876548, 0.7947054 , 0.29969195, 0.08544051, 0.92299308,
              0.47230659, 0.50502695, 0.48257085, 0.20407817, 0.99015817,
              0.93599267, 0.35858694, 0.1234465 , 0.65467811, 0.39731028,
              0.02122007, 0.81082987, 0.18163677, 0.8940676 , 0.03504484,
              0.38401261, 0.59161463, 0.09518699, 0.50883655, 0.36622732,
              0.07081165, 0.14122818, 0.57835466, 0.8787269 , 0.20873005,
              0.78673897, 0.47091025, 0.82122171, 0.78865041, 0.82894297,
              0.18660137, 0.45943635, 0.32605185, 0.31372876, 0.9123019 ,
              0.34852577, 0.74803332, 0.64145955, 0.02422481, 0.02305355,
              0.58927522, 0.32911163, 0.14749887, 0.02607038, 0.63773643,
              0.67349868, 0.54401823, 0.08635766, 0.56234708, 0.08488967,
              0.26369707, 0.03136051, 0.9452452 , 0.61729517, 0.85856414,
              0.7318093 , 0.92361837, 0.93678824, 0.67767285, 0.58109583])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.4338804 , 0.19988271, 0.26184947, 0.28588867, 0.99616476,
              0.70422434, 0.24894501, 0.813694  , 0.96598438, 0.57672821,
              0.23236055, 0.35762684, 0.08697283, 0.8373205 , 0.48413068,
              0.48047509, 0.39453353, 0.32173528, 0.25091936, 0.52397145,
              0.98547558, 0.76720857, 0.07009354, 0.86276933, 0.3906765 ,
              0.95961589, 0.08656126, 0.67782014, 0.63557336, 0.16969419,
              0.24386357, 0.64495387, 0.64350734, 0.51537998, 0.42308986,
              0.70041884, 0.50940056, 0.90453614, 0.75720402, 0.24991603,
              0.43977154, 0.46927614, 0.04326249, 0.56878586, 0.81705182,
              0.20334035, 0.48595835, 0.24361987, 0.24371964, 0.97726836,
              0.30608072, 0.57116605, 0.70019083, 0.86920633, 0.88311011,
              0.69020002, 0.21003871, 0.81878523, 0.72312278, 0.47526992,
              0.83019334, 0.98542145, 0.16805823, 0.46904484, 0.02508939,
              0.37171388, 0.03284791, 0.62033449, 0.36957208, 0.77187693,
              0.37746091, 0.30398711, 0.83381601, 0.13121864, 0.30333711,
              0.0709608 , 0.94238506, 0.43325055, 0.25118784, 0.03784826,
              0.76742053, 0.18431704, 0.85439037, 0.57246691, 0.07474383,
              0.23512024, 0.85457549, 0.66173674, 0.06194482, 0.10871258,
              0.23279132, 0.45326004, 0.36544158, 0.08910205, 0.79031129,
              0.46301772, 0.05478376, 0.46153733, 0.57958092, 0.13979648])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.59842114, 0.35275299, 0.28528167, 0.69171   , 0.54007025,
              0.42536341, 0.19211474, 0.18583545, 0.48423171, 0.42738575,
              0.174727  , 0.47181529, 0.04188476, 0.31886528, 0.15191487,
              0.86945276, 0.19897555, 0.71620838, 0.74628633, 0.88224902,
              0.77721165, 0.77938992, 0.67300974, 0.60408531, 0.0142829 ,
              0.61221974, 0.04081997, 0.37896788, 0.99852103, 0.31416579,
              0.91950489, 0.50753246, 0.24184701, 0.50928506, 0.41918193,
              0.50752577, 0.38695715, 0.39501768, 0.24765689, 0.51049048,
              0.52066639, 0.386265  , 0.05910552, 0.73850947, 0.41106632,
              0.45140872, 0.86515727, 0.87794256, 0.78925887, 0.8889924 ,
              0.2792071 , 0.98605973, 0.25004795, 0.49489987, 0.80820381,
              0.2274342 , 0.11135003, 0.67025752, 0.36911177, 0.25829853,
              0.4138709 , 0.55917908, 0.57718931, 0.27125727, 0.74238496,
              0.9915332 , 0.58403688, 0.46844677, 0.73172897, 0.95887113,
              0.60148883, 0.54480713, 0.65767881, 0.94000771, 0.84042976,
              0.82951195, 0.97633111, 0.95832834, 0.0160514 , 0.50198965,
              0.98908445, 0.45127145, 0.78649901, 0.91721047, 0.6769833 ,
              0.27463988, 0.06402715, 0.03191647, 0.65406609, 0.62705216,
              0.81635145, 0.37823386, 0.03948838, 0.3642266 , 0.89212637,
              0.41181879, 0.31144117, 0.34028723, 0.43192648, 0.4011766 ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.3206063 , 0.75592138, 0.03730092, 0.3090044 , 0.98932527,
              0.52238722, 0.78302335, 0.5507899 , 0.83237403, 0.20744048,
              0.6507517 , 0.71906986, 0.09805307, 0.58446515, 0.50166578,
              0.50243399, 0.6369869 , 0.41188754, 0.33929011, 0.89466985,
              0.75823905, 0.82509081, 0.96289193, 0.23167739, 0.63065505,
              0.9735939 , 0.55688393, 0.30676603, 0.19066291, 0.81539829,
              0.28432172, 0.29990955, 0.21167404, 0.24862953, 0.42984126,
              0.52611322, 0.50277229, 0.46190405, 0.02679854, 0.84597727,
              0.72330353, 0.29138469, 0.11663308, 0.78298454, 0.56940766,
              0.90520864, 0.07308278, 0.11551704, 0.61446377, 0.38813389,
              0.85892834, 0.46471024, 0.29631974, 0.83723535, 0.77854968,
              0.97603076, 0.81468884, 0.17149469, 0.1897351 , 0.74929542,
              0.77905654, 0.50989107, 0.15607463, 0.32188552, 0.05457149,
              0.83603214, 0.64197995, 0.05845678, 0.86745266, 0.52309616,
              0.23034058, 0.40545193, 0.19847706, 0.17465514, 0.22098131,
              0.34822139, 0.14981683, 0.57287279, 0.89043991, 0.47360684,
              0.99371659, 0.6394362 , 0.86334089, 0.05700658, 0.64300174,
              0.59251058, 0.2700874 , 0.76656916, 0.91899792, 0.01805692,
              0.85850093, 0.39917176, 0.15400009, 0.69689079, 0.17839472,
              0.64299938, 0.59508986, 0.14377058, 0.65837798, 0.54018589])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.11365545, 0.29078608, 0.09285741, 0.25092834, 0.41351145,
              0.53209362, 0.04801369, 0.27796859, 0.20122827, 0.85596343,
              0.56489829, 0.68895647, 0.95924214, 0.28991197, 0.1346909 ,
              0.30722237, 0.86026734, 0.63735432, 0.3342137 , 0.92720612,
              0.24652189, 0.07874277, 0.78266272, 0.20703046, 0.84853478,
              0.49717422, 0.41875177, 0.37504504, 0.64753416, 0.95020559,
              0.92217701, 0.87162744, 0.1766857 , 0.98397828, 0.66495844,
              0.74876548, 0.7947054 , 0.29969195, 0.08544051, 0.92299308,
              0.47230659, 0.50502695, 0.48257085, 0.20407817, 0.99015817,
              0.93599267, 0.35858694, 0.1234465 , 0.65467811, 0.39731028,
              0.02122007, 0.81082987, 0.18163677, 0.8940676 , 0.03504484,
              0.38401261, 0.59161463, 0.09518699, 0.50883655, 0.36622732,
              0.07081165, 0.14122818, 0.57835466, 0.8787269 , 0.20873005,
              0.78673897, 0.47091025, 0.82122171, 0.78865041, 0.82894297,
              0.18660137, 0.45943635, 0.32605185, 0.31372876, 0.9123019 ,
              0.34852577, 0.74803332, 0.64145955, 0.02422481, 0.02305355,
              0.58927522, 0.32911163, 0.14749887, 0.02607038, 0.63773643,
              0.67349868, 0.54401823, 0.08635766, 0.56234708, 0.08488967,
              0.26369707, 0.03136051, 0.9452452 , 0.61729517, 0.85856414,
              0.7318093 , 0.92361837, 0.93678824, 0.67767285, 0.58109583])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.94055008, 0.64775386, 0.05576483, 0.85617937, 0.49039988,
              0.24485095, 0.44241375, 0.24989916, 0.05579699, 0.64637936,
              0.63038756, 0.1117837 , 0.27412442, 0.70748103, 0.44766604,
              0.7809625 , 0.17918339, 0.15490661, 0.77199848, 0.48423859,
              0.92526337, 0.55974059, 0.20035403, 0.28844047, 0.63445623,
              0.69340597, 0.9577497 , 0.13741703, 0.28419645, 0.56246656,
              0.67382368, 0.73016998, 0.8607947 , 0.01767007, 0.23107434,
              0.27675552, 0.44316957, 0.9552654 , 0.49271057, 0.43002308,
              0.46166931, 0.84609576, 0.47671628, 0.02519907, 0.90973724,
              0.05834874, 0.47327735, 0.52321047, 0.38989052, 0.45964892,
              0.09031789, 0.09402298, 0.65010278, 0.01524229, 0.72943301,
              0.54641535, 0.21179093, 0.33110186, 0.80446143, 0.32736749,
              0.1628974 , 0.14205508, 0.60843313, 0.73508098, 0.78134659,
              0.35623151, 0.96201056, 0.4417235 , 0.64191045, 0.92957034,
              0.95955178, 0.59737704, 0.09374236, 0.05581929, 0.14081836,
              0.55383951, 0.91685973, 0.28350366, 0.12422044, 0.97166306,
              0.50696332, 0.76862514, 0.07981624, 0.50585076, 0.19163992,
              0.47889879, 0.46269096, 0.92970414, 0.48920987, 0.09937519,
              0.02914979, 0.50768684, 0.84828873, 0.0610723 , 0.69352166,
              0.41478935, 0.7050787 , 0.4816545 , 0.95481843, 0.01637155])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.88776823, 0.71274212, 0.44621713, 0.10993377, 0.3158944 ,
              0.89557994, 0.38914971, 0.4806922 , 0.85118985, 0.49472846,
              0.33055211, 0.93758477, 0.66993764, 0.62029579, 0.78064701,
              0.42500963, 0.49258483, 0.05271998, 0.47509775, 0.01953162,
              0.35963044, 0.89004161, 0.50757151, 0.39314352, 0.49668333,
              0.57033536, 0.03725416, 0.80045622, 0.5384057 , 0.16409112,
              0.7897954 , 0.95621948, 0.03779158, 0.34034832, 0.27163318,
              0.75118838, 0.76945147, 0.46316792, 0.09059365, 0.47235456,
              0.79145512, 0.76175183, 0.56517069, 0.44829274, 0.27262592,
              0.61386225, 0.87773257, 0.11040012, 0.84518544, 0.5141119 ,
              0.18938617, 0.6253989 , 0.66570593, 0.3074065 , 0.56172833,
              0.98574459, 0.42187899, 0.81927922, 0.86023281, 0.33333731,
              0.14282259, 0.49712159, 0.43843438, 0.71707477, 0.71556585,
              0.12423807, 0.49777406, 0.37874842, 0.69341267, 0.69572592,
              0.91905814, 0.15873354, 0.69280715, 0.70553108, 0.38453523,
              0.04286016, 0.48634906, 0.07882221, 0.576129  , 0.98333374,
              0.88314202, 0.42085154, 0.32315664, 0.17507568, 0.68843204,
              0.99615101, 0.33624075, 0.0780857 , 0.72981983, 0.03914425,
              0.40696825, 0.81008673, 0.11477361, 0.57189544, 0.31180174,
              0.75133983, 0.37077356, 0.54963767, 0.80969829, 0.24030331])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.29284083, 0.75457837, 0.56851374, 0.4965186 , 0.53410765,
              0.90764622, 0.12644168, 0.95415657, 0.28992443, 0.92735685,
              0.42395012, 0.03487289, 0.21741011, 0.56005186, 0.06390366,
              0.61660577, 0.20803181, 0.95632941, 0.11270225, 0.02739708,
              0.15030226, 0.01591932, 0.22187504, 0.95859809, 0.087629  ,
              0.27433612, 0.14672965, 0.53045464, 0.75019825, 0.52411326,
              0.72088973, 0.20550802, 0.54021941, 0.02219051, 0.52693411,
              0.31441181, 0.48049271, 0.89093332, 0.09643431, 0.75148773,
              0.34824801, 0.26221459, 0.86078385, 0.07665533, 0.88285636,
              0.0437613 , 0.78081292, 0.29807318, 0.58911867, 0.16569338,
              0.03385975, 0.24504302, 0.59862811, 0.40793813, 0.11316912,
              0.30426556, 0.443999  , 0.92758825, 0.9955845 , 0.61653398,
              0.49512457, 0.95310126, 0.64923934, 0.83979961, 0.41526287,
              0.45275691, 0.80799268, 0.22665033, 0.26482007, 0.91832367,
              0.23991962, 0.73219092, 0.96234211, 0.54163237, 0.17115151,
              0.8114082 , 0.03231771, 0.72583096, 0.23646167, 0.07835438,
              0.64970752, 0.05053821, 0.0287562 , 0.1919207 , 0.53297841,
              0.0810457 , 0.37478996, 0.86749099, 0.46763709, 0.12217023,
              0.85585268, 0.95419481, 0.50835172, 0.97421676, 0.99058189,
              0.19955517, 0.04933815, 0.86818698, 0.36691884, 0.87797821])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.86361926, 0.95484207, 0.24930888, 0.03634921, 0.63523805,
              0.88860289, 0.30083201, 0.74620323, 0.50649226, 0.31135704,
              0.47110959, 0.8744225 , 0.39717295, 0.49002918, 0.78473415,
              0.1581396 , 0.11752357, 0.71454989, 0.259663  , 0.63355892,
              0.42843204, 0.82726583, 0.50815107, 0.22780515, 0.36436313,
              0.08247272, 0.08587431, 0.86353791, 0.47874202, 0.18143176,
              0.74320009, 0.08478213, 0.13184721, 0.87460881, 0.29934722,
              0.58302246, 0.26743769, 0.55605028, 0.47418588, 0.49369879,
              0.70985213, 0.72679527, 0.02103742, 0.50111718, 0.10587093,
              0.86051989, 0.96819087, 0.70140028, 0.19463375, 0.77783552,
              0.98155167, 0.96497948, 0.12298345, 0.11046511, 0.88813558,
              0.51867439, 0.33826774, 0.41560266, 0.55180961, 0.05858146,
              0.68268236, 0.97963873, 0.96707497, 0.36555196, 0.31057332,
              0.95994079, 0.13851297, 0.69151973, 0.15800979, 0.66012767,
              0.58410661, 0.38290109, 0.32702032, 0.60567168, 0.20117207,
              0.78099949, 0.27497994, 0.03033416, 0.01434318, 0.35694164,
              0.48612514, 0.34844293, 0.99383283, 0.89726697, 0.9077271 ,
              0.06569319, 0.80283021, 0.37433572, 0.78635006, 0.39127442,
              0.88465455, 0.12194427, 0.85725315, 0.83050698, 0.6776777 ,
              0.69506033, 0.05341704, 0.82902468, 0.61031089, 0.51828448])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.43474175, 0.54952445, 0.15230285, 0.16185148, 0.39556415,
              0.59697158, 0.60377906, 0.03531391, 0.26478167, 0.57116185,
              0.80475777, 0.57440217, 0.71372576, 0.93945776, 0.73756219,
              0.8740514 , 0.34624234, 0.35459538, 0.16856365, 0.37503952,
              0.65844589, 0.52693928, 0.8910313 , 0.90005967, 0.20901145,
              0.11250363, 0.56167383, 0.01419348, 0.48533138, 0.14669892,
              0.79897355, 0.67744701, 0.85138872, 0.99302227, 0.58175516,
              0.97437815, 0.58675182, 0.02023346, 0.48833386, 0.36383106,
              0.6165277 , 0.81283729, 0.31876519, 0.43208018, 0.02078081,
              0.75896025, 0.31123646, 0.95077286, 0.32639111, 0.48273684,
              0.38917006, 0.23277231, 0.94130011, 0.90548341, 0.64956185,
              0.97461136, 0.77992571, 0.45275222, 0.76264133, 0.40514292,
              0.01996851, 0.40473529, 0.6276477 , 0.52985086, 0.39325154,
              0.98230118, 0.8182918 , 0.48132196, 0.84980457, 0.35664633,
              0.85891597, 0.69544384, 0.26859909, 0.42680488, 0.74156745,
              0.80840548, 0.51742246, 0.66450813, 0.20917589, 0.29249997,
              0.58203069, 0.07918465, 0.36231396, 0.20209942, 0.68512639,
              0.77871629, 0.73230193, 0.41933653, 0.59696025, 0.73100673,
              0.65186442, 0.71472984, 0.52890898, 0.62380263, 0.53861407,
              0.74858312, 0.36832818, 0.29026095, 0.22091635, 0.80023822])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.88776823, 0.71274212, 0.44621713, 0.10993377, 0.3158944 ,
              0.89557994, 0.38914971, 0.4806922 , 0.85118985, 0.49472846,
              0.33055211, 0.93758477, 0.66993764, 0.62029579, 0.78064701,
              0.42500963, 0.49258483, 0.05271998, 0.47509775, 0.01953162,
              0.35963044, 0.89004161, 0.50757151, 0.39314352, 0.49668333,
              0.57033536, 0.03725416, 0.80045622, 0.5384057 , 0.16409112,
              0.7897954 , 0.95621948, 0.03779158, 0.34034832, 0.27163318,
              0.75118838, 0.76945147, 0.46316792, 0.09059365, 0.47235456,
              0.79145512, 0.76175183, 0.56517069, 0.44829274, 0.27262592,
              0.61386225, 0.87773257, 0.11040012, 0.84518544, 0.5141119 ,
              0.18938617, 0.6253989 , 0.66570593, 0.3074065 , 0.56172833,
              0.98574459, 0.42187899, 0.81927922, 0.86023281, 0.33333731,
              0.14282259, 0.49712159, 0.43843438, 0.71707477, 0.71556585,
              0.12423807, 0.49777406, 0.37874842, 0.69341267, 0.69572592,
              0.91905814, 0.15873354, 0.69280715, 0.70553108, 0.38453523,
              0.04286016, 0.48634906, 0.07882221, 0.576129  , 0.98333374,
              0.88314202, 0.42085154, 0.32315664, 0.17507568, 0.68843204,
              0.99615101, 0.33624075, 0.0780857 , 0.72981983, 0.03914425,
              0.40696825, 0.81008673, 0.11477361, 0.57189544, 0.31180174,
              0.75133983, 0.37077356, 0.54963767, 0.80969829, 0.24030331])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.29284083, 0.75457837, 0.56851374, 0.4965186 , 0.53410765,
              0.90764622, 0.12644168, 0.95415657, 0.28992443, 0.92735685,
              0.42395012, 0.03487289, 0.21741011, 0.56005186, 0.06390366,
              0.61660577, 0.20803181, 0.95632941, 0.11270225, 0.02739708,
              0.15030226, 0.01591932, 0.22187504, 0.95859809, 0.087629  ,
              0.27433612, 0.14672965, 0.53045464, 0.75019825, 0.52411326,
              0.72088973, 0.20550802, 0.54021941, 0.02219051, 0.52693411,
              0.31441181, 0.48049271, 0.89093332, 0.09643431, 0.75148773,
              0.34824801, 0.26221459, 0.86078385, 0.07665533, 0.88285636,
              0.0437613 , 0.78081292, 0.29807318, 0.58911867, 0.16569338,
              0.03385975, 0.24504302, 0.59862811, 0.40793813, 0.11316912,
              0.30426556, 0.443999  , 0.92758825, 0.9955845 , 0.61653398,
              0.49512457, 0.95310126, 0.64923934, 0.83979961, 0.41526287,
              0.45275691, 0.80799268, 0.22665033, 0.26482007, 0.91832367,
              0.23991962, 0.73219092, 0.96234211, 0.54163237, 0.17115151,
              0.8114082 , 0.03231771, 0.72583096, 0.23646167, 0.07835438,
              0.64970752, 0.05053821, 0.0287562 , 0.1919207 , 0.53297841,
              0.0810457 , 0.37478996, 0.86749099, 0.46763709, 0.12217023,
              0.85585268, 0.95419481, 0.50835172, 0.97421676, 0.99058189,
              0.19955517, 0.04933815, 0.86818698, 0.36691884, 0.87797821])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.86361926, 0.95484207, 0.24930888, 0.03634921, 0.63523805,
              0.88860289, 0.30083201, 0.74620323, 0.50649226, 0.31135704,
              0.47110959, 0.8744225 , 0.39717295, 0.49002918, 0.78473415,
              0.1581396 , 0.11752357, 0.71454989, 0.259663  , 0.63355892,
              0.42843204, 0.82726583, 0.50815107, 0.22780515, 0.36436313,
              0.08247272, 0.08587431, 0.86353791, 0.47874202, 0.18143176,
              0.74320009, 0.08478213, 0.13184721, 0.87460881, 0.29934722,
              0.58302246, 0.26743769, 0.55605028, 0.47418588, 0.49369879,
              0.70985213, 0.72679527, 0.02103742, 0.50111718, 0.10587093,
              0.86051989, 0.96819087, 0.70140028, 0.19463375, 0.77783552,
              0.98155167, 0.96497948, 0.12298345, 0.11046511, 0.88813558,
              0.51867439, 0.33826774, 0.41560266, 0.55180961, 0.05858146,
              0.68268236, 0.97963873, 0.96707497, 0.36555196, 0.31057332,
              0.95994079, 0.13851297, 0.69151973, 0.15800979, 0.66012767,
              0.58410661, 0.38290109, 0.32702032, 0.60567168, 0.20117207,
              0.78099949, 0.27497994, 0.03033416, 0.01434318, 0.35694164,
              0.48612514, 0.34844293, 0.99383283, 0.89726697, 0.9077271 ,
              0.06569319, 0.80283021, 0.37433572, 0.78635006, 0.39127442,
              0.88465455, 0.12194427, 0.85725315, 0.83050698, 0.6776777 ,
              0.69506033, 0.05341704, 0.82902468, 0.61031089, 0.51828448])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.52498531, 0.19023497, 0.22999591, 0.72550669, 0.99460494,
              0.14854856, 0.55589066, 0.50653075, 0.67139828, 0.62486653,
              0.4942336 , 0.43085477, 0.68098604, 0.55051577, 0.22409623,
              0.40018103, 0.11471671, 0.96623363, 0.09002217, 0.17779967,
              0.25241808, 0.04737149, 0.68756369, 0.6776848 , 0.70956388,
              0.59162085, 0.08371859, 0.48034821, 0.11186778, 0.04184471,
              0.40936813, 0.01350059, 0.72237691, 0.77569691, 0.01812205,
              0.35905548, 0.21892799, 0.23451383, 0.61330951, 0.85566667,
              0.60699327, 0.0954246 , 0.61016411, 0.45934353, 0.10393098,
              0.58509432, 0.60971573, 0.04934193, 0.01772448, 0.66890322,
              0.39092583, 0.95825541, 0.39862118, 0.59898521, 0.67954587,
              0.63590223, 0.9908547 , 0.46658654, 0.48941433, 0.66965893,
              0.01616973, 0.75137291, 0.15382937, 0.77673473, 0.58510908,
              0.74032374, 0.29130395, 0.86001325, 0.00901579, 0.55315227,
              0.78016236, 0.63173798, 0.46109337, 0.18638445, 0.53096445,
              0.24315623, 0.89144647, 0.98566155, 0.10509699, 0.01867731,
              0.11612122, 0.70464689, 0.51068522, 0.56994211, 0.39500562,
              0.87022148, 0.59555678, 0.60965065, 0.20950716, 0.81657023,
              0.12433393, 0.15781745, 0.30059234, 0.97578553, 0.79803913,
              0.50443049, 0.11673786, 0.00388022, 0.3155546 , 0.49237326])}]]


