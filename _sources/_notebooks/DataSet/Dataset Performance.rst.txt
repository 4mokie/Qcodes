
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='850f8a66-5102-44cd-a420-cb506fd0a7ef'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='c16d0fae-98b1-4c7a-b40e-53ba96ec8731'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.830730281521539],
     [0.432572955715004],
     [0.145731085823008],
     [0.87139135048785],
     [0.0212747621726829],
     [0.124625508857332],
     [0.00668850236538676],
     [0.800553115632641],
     [0.176965279897165],
     [0.665403351368942],
     [0.397457885771238],
     [0.841411210679102],
     [0.487086412211382],
     [0.387443587212536],
     [0.490724853500094],
     [0.564031178734765],
     [0.455780898245264],
     [0.799965285868375],
     [0.314256009692052],
     [0.522049709586026],
     [0.340838206982842],
     [0.500003742484479],
     [0.291819334319222],
     [0.690646961592854],
     [0.565300562644631],
     [0.143110685560868],
     [0.878575059365384],
     [0.420224084183323],
     [0.100638449299055],
     [0.433127698163874],
     [0.101161769679589],
     [0.0743887924758423],
     [0.536342881507871],
     [0.559510159199532],
     [0.131681785843213],
     [0.156358875416478],
     [0.0931763009222157],
     [0.327243713653276],
     [0.308926080030818],
     [0.00180843310665657],
     [0.197666258456629],
     [0.106380040966],
     [0.103243108463995],
     [0.968910191588892],
     [0.742644944174341],
     [0.395889889307437],
     [0.575169589223276],
     [0.489773282981248],
     [0.217003033117681],
     [0.909632641180705],
     [0.749118933953855],
     [0.79685942768933],
     [0.102500710952953],
     [0.182003195750821],
     [0.912285154629096],
     [0.0953310018120316],
     [0.438797507006094],
     [0.236745395351314],
     [0.5616716167173],
     [0.0413328947403784],
     [0.413121598881437],
     [0.704479929312803],
     [0.819614599881085],
     [0.416543808910896],
     [0.803286441928792],
     [0.329342778736004],
     [0.193815391915588],
     [0.191170083785032],
     [0.623789927836586],
     [0.417319055056783],
     [0.960703757154278],
     [0.883791075567397],
     [0.64020689310007],
     [0.077821805836965],
     [0.145020875659511],
     [0.374148506288345],
     [0.0401374132251676],
     [0.440837157912607],
     [0.852030451336733],
     [0.449306041516933],
     [0.943941386988376],
     [0.827909507760823],
     [0.498215598582477],
     [0.245157910182505],
     [0.773287966250333],
     [0.946048349934779],
     [0.726794748904089],
     [0.544414563395806],
     [0.196252024507427],
     [0.894403027069441],
     [0.955280674225043],
     [0.551757369618831],
     [0.667423832857085],
     [0.908309058285452],
     [0.228802699663631],
     [0.5435060624901],
     [0.287041827329385],
     [0.118627053050728],
     [0.362673911246088],
     [0.522465271573768]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.0535993])],
     [array([ 0.49453495])],
     [array([ 0.3403675])],
     [array([ 0.50188405])],
     [array([ 0.44196238])],
     [array([ 0.73292888])],
     [array([ 0.33665707])],
     [array([ 0.37715246])],
     [array([ 0.84335801])],
     [array([ 0.98392777])],
     [array([ 0.64535016])],
     [array([ 0.18331571])],
     [array([ 0.85314329])],
     [array([ 0.74615194])],
     [array([ 0.32353261])],
     [array([ 0.05710032])],
     [array([ 0.48131874])],
     [array([ 0.84515726])],
     [array([ 0.12330516])],
     [array([ 0.26492149])],
     [array([ 0.95794938])],
     [array([ 0.61446461])],
     [array([ 0.48460044])],
     [array([ 0.76622789])],
     [array([ 0.9125908])],
     [array([ 0.9758219])],
     [array([ 0.34226137])],
     [array([ 0.36712887])],
     [array([ 0.79289354])],
     [array([ 0.78425719])],
     [array([ 0.29133798])],
     [array([ 0.15591803])],
     [array([ 0.56022002])],
     [array([ 0.64742693])],
     [array([ 0.75624248])],
     [array([ 0.21297454])],
     [array([ 0.12431092])],
     [array([ 0.13177561])],
     [array([ 0.7033694])],
     [array([ 0.37377472])],
     [array([ 0.14598281])],
     [array([ 0.10202525])],
     [array([ 0.45216874])],
     [array([ 0.82158614])],
     [array([ 0.91947753])],
     [array([ 0.62904579])],
     [array([ 0.23037982])],
     [array([ 0.20317738])],
     [array([ 0.266323])],
     [array([ 0.10041689])],
     [array([ 0.2279745])],
     [array([ 0.40904734])],
     [array([ 0.85670211])],
     [array([ 0.28858575])],
     [array([ 0.19001232])],
     [array([ 0.21515794])],
     [array([ 0.14497473])],
     [array([ 0.28707165])],
     [array([ 0.86016447])],
     [array([ 0.91818145])],
     [array([ 0.55418805])],
     [array([ 0.26833457])],
     [array([ 0.87623215])],
     [array([ 0.71542259])],
     [array([ 0.48957742])],
     [array([ 0.93952957])],
     [array([ 0.72317587])],
     [array([ 0.15121545])],
     [array([ 0.46288282])],
     [array([ 0.2321579])],
     [array([ 0.54673222])],
     [array([ 0.09761101])],
     [array([ 0.72928157])],
     [array([ 0.95643697])],
     [array([ 0.24078225])],
     [array([ 0.29374328])],
     [array([ 0.22472758])],
     [array([ 0.43226662])],
     [array([ 0.80696855])],
     [array([ 0.85649439])],
     [array([ 0.46971477])],
     [array([ 0.68633435])],
     [array([ 0.71400956])],
     [array([ 0.39647533])],
     [array([ 0.60831473])],
     [array([ 0.06034726])],
     [array([ 0.33416378])],
     [array([ 0.58576369])],
     [array([ 0.26623479])],
     [array([ 0.98171942])],
     [array([ 0.24423118])],
     [array([ 0.57206081])],
     [array([ 0.41526328])],
     [array([ 0.78996264])],
     [array([ 0.91694337])],
     [array([ 0.14512651])],
     [array([ 0.51586136])],
     [array([ 0.99415563])],
     [array([ 0.34678548])],
     [array([ 0.20918763])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.0535993 ,  0.49453495,  0.3403675 ,  0.50188405,  0.44196238,
            0.73292888,  0.33665707,  0.37715246,  0.84335801,  0.98392777,
            0.64535016,  0.18331571,  0.85314329,  0.74615194,  0.32353261,
            0.05710032,  0.48131874,  0.84515726,  0.12330516,  0.26492149,
            0.95794938,  0.61446461,  0.48460044,  0.76622789,  0.9125908 ,
            0.9758219 ,  0.34226137,  0.36712887,  0.79289354,  0.78425719,
            0.29133798,  0.15591803,  0.56022002,  0.64742693,  0.75624248,
            0.21297454,  0.12431092,  0.13177561,  0.7033694 ,  0.37377472,
            0.14598281,  0.10202525,  0.45216874,  0.82158614,  0.91947753,
            0.62904579,  0.23037982,  0.20317738,  0.266323  ,  0.10041689,
            0.2279745 ,  0.40904734,  0.85670211,  0.28858575,  0.19001232,
            0.21515794,  0.14497473,  0.28707165,  0.86016447,  0.91818145,
            0.55418805,  0.26833457,  0.87623215,  0.71542259,  0.48957742,
            0.93952957,  0.72317587,  0.15121545,  0.46288282,  0.2321579 ,
            0.54673222,  0.09761101,  0.72928157,  0.95643697,  0.24078225,
            0.29374328,  0.22472758,  0.43226662,  0.80696855,  0.85649439,
            0.46971477,  0.68633435,  0.71400956,  0.39647533,  0.60831473,
            0.06034726,  0.33416378,  0.58576369,  0.26623479,  0.98171942,
            0.24423118,  0.57206081,  0.41526328,  0.78996264,  0.91694337,
            0.14512651,  0.51586136,  0.99415563,  0.34678548,  0.20918763])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.83073028,  0.43257296,  0.14573109,  0.87139135,  0.02127476,
               0.12462551,  0.0066885 ,  0.80055312,  0.17696528,  0.66540335,
               0.39745789,  0.84141121,  0.48708641,  0.38744359,  0.49072485,
               0.56403118,  0.4557809 ,  0.79996529,  0.31425601,  0.52204971,
               0.34083821,  0.50000374,  0.29181933,  0.69064696,  0.56530056,
               0.14311069,  0.87857506,  0.42022408,  0.10063845,  0.4331277 ,
               0.10116177,  0.07438879,  0.53634288,  0.55951016,  0.13168179,
               0.15635888,  0.0931763 ,  0.32724371,  0.30892608,  0.00180843,
               0.19766626,  0.10638004,  0.10324311,  0.96891019,  0.74264494,
               0.39588989,  0.57516959,  0.48977328,  0.21700303,  0.90963264,
               0.74911893,  0.79685943,  0.10250071,  0.1820032 ,  0.91228515,
               0.095331  ,  0.43879751,  0.2367454 ,  0.56167162,  0.04133289,
               0.4131216 ,  0.70447993,  0.8196146 ,  0.41654381,  0.80328644,
               0.32934278,  0.19381539,  0.19117008,  0.62378993,  0.41731906,
               0.96070376,  0.88379108,  0.64020689,  0.07782181,  0.14502088,
               0.37414851,  0.04013741,  0.44083716,  0.85203045,  0.44930604,
               0.94394139,  0.82790951,  0.4982156 ,  0.24515791,  0.77328797,
               0.94604835,  0.72679475,  0.54441456,  0.19625202,  0.89440303,
               0.95528067,  0.55175737,  0.66742383,  0.90830906,  0.2288027 ,
               0.54350606,  0.28704183,  0.11862705,  0.36267391,  0.52246527])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([  5.38708223e-01,   8.45428137e-01,   6.86001270e-02,
                5.87355524e-01,   3.13610077e-01,   9.86389982e-01,
                9.18224305e-01,   8.72756487e-02,   2.36265314e-01,
                8.67905104e-01,   2.43099220e-01,   1.47888651e-01,
                6.66753337e-02,   6.95850913e-01,   6.63732715e-01,
                2.24718006e-01,   2.21747003e-02,   3.77006080e-01,
                9.44387765e-01,   9.25756145e-01,   2.25521832e-01,
                4.04019352e-01,   1.91833480e-01,   6.85249115e-01,
                3.99228114e-01,   4.01428961e-01,   4.35956603e-02,
                5.96839644e-01,   3.59342230e-01,   4.04526918e-01,
                1.10208898e-04,   5.53406064e-01,   1.60103675e-01,
                7.13210272e-02,   4.50620251e-01,   9.16663960e-01,
                9.34922958e-01,   8.81859953e-02,   7.95524655e-01,
                7.41513320e-01,   5.25218115e-01,   6.68128790e-01,
                5.96872712e-01,   3.17425902e-01,   3.26619836e-01,
                5.55622307e-03,   4.30374547e-01,   1.29125846e-03,
                9.99668697e-01,   6.97418477e-01,   5.61155260e-01,
                3.15662939e-01,   1.53003052e-01,   2.00141283e-01,
                1.39039351e-01,   3.11118143e-01,   8.28831855e-01,
                1.57354185e-01,   9.86023806e-01,   1.96463703e-01,
                1.39998871e-01,   8.92448253e-01,   8.71596798e-01,
                5.46100922e-01,   1.15889292e-03,   4.19914097e-01,
                8.88359052e-01,   6.22142423e-01,   3.43753759e-01,
                2.09358645e-01,   1.10300159e-01,   1.27764804e-02,
                4.13607858e-01,   9.64833453e-01,   4.56881697e-01,
                4.00646293e-01,   3.47555512e-01,   1.11869371e-01,
                8.44134460e-01,   9.59781664e-01,   7.47567883e-01,
                1.16833084e-01,   1.98649980e-01,   3.28822520e-01,
                1.34883266e-01,   9.85514354e-01,   6.40906039e-01,
                7.81556555e-02,   8.11975443e-01,   6.70002731e-01,
                4.71632710e-01,   1.53506112e-01,   9.68521243e-01,
                3.39584485e-01,   5.86811613e-01,   4.90643282e-01,
                1.91034776e-01,   7.99633760e-01,   9.18668137e-01,
                2.84871022e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.71027453,  0.38646211,  0.20853042,  0.26868598,  0.6515486 ,
               0.07321816,  0.2533176 ,  0.18824022,  0.0746832 ,  0.02240809,
               0.16771229,  0.01466291,  0.26737786,  0.50684281,  0.8589543 ,
               0.90936116,  0.41572329,  0.04840881,  0.70448672,  0.85579126,
               0.25725453,  0.24324503,  0.54210958,  0.30412973,  0.20216046,
               0.82545095,  0.22204002,  0.59267161,  0.97459417,  0.8387063 ,
               0.231515  ,  0.14371999,  0.6072943 ,  0.41342501,  0.48194759,
               0.77544257,  0.99428972,  0.42401987,  0.67884503,  0.02800502,
               0.0422089 ,  0.68918339,  0.97475243,  0.55706652,  0.40031392,
               0.91877759,  0.00779046,  0.58707894,  0.02839033,  0.40907702,
               0.10558736,  0.57114461,  0.05620197,  0.9234581 ,  0.36563674,
               0.04568063,  0.09922172,  0.46242783,  0.88598345,  0.89318794,
               0.66377981,  0.18335565,  0.41930685,  0.61976882,  0.88283573,
               0.05231725,  0.5811844 ,  0.73150539,  0.06035209,  0.49848325,
               0.02563992,  0.65151426,  0.9110288 ,  0.9476923 ,  0.22642492,
               0.1939078 ,  0.95228076,  0.62682311,  0.36976931,  0.46445434,
               0.07542285,  0.8924928 ,  0.80454391,  0.0774505 ,  0.7413977 ,
               0.4494807 ,  0.60966843,  0.5689193 ,  0.0584602 ,  0.24556221,
               0.88194594,  0.39713234,  0.84703058,  0.78612418,  0.50251499,
               0.29884192,  0.16291561,  0.79653034,  0.36726143,  0.44679938])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.01238365,  0.89903759,  0.38322877,  0.00201627,  0.70307762,
               0.6694768 ,  0.89947188,  0.74703578,  0.02433051,  0.69676909,
               0.88507215,  0.35001734,  0.1768357 ,  0.72304249,  0.67486991,
               0.64257259,  0.28007306,  0.74616157,  0.99735062,  0.30016693,
               0.50438194,  0.51759059,  0.9258934 ,  0.95764869,  0.09316884,
               0.0629957 ,  0.47060246,  0.49066115,  0.07004359,  0.96027927,
               0.53879434,  0.90670474,  0.87460844,  0.85211236,  0.61469224,
               0.43590307,  0.63141172,  0.84905315,  0.42677392,  0.91404299,
               0.31141312,  0.12852391,  0.20392611,  0.09905472,  0.33838842,
               0.02679891,  0.57645805,  0.30932746,  0.86605307,  0.91521001,
               0.0069549 ,  0.5597083 ,  0.122086  ,  0.70125703,  0.00661585,
               0.90753673,  0.48085174,  0.60673136,  0.60239785,  0.53634997,
               0.07804723,  0.23385847,  0.09125189,  0.38683333,  0.78258466,
               0.52147338,  0.30000454,  0.04554428,  0.66289442,  0.71328794,
               0.28407477,  0.25275448,  0.46559804,  0.38065846,  0.94393161,
               0.32092852,  0.4390203 ,  0.16578826,  0.52156983,  0.76867844,
               0.25063653,  0.30492667,  0.58119064,  0.08692212,  0.22409041,
               0.92903198,  0.40527732,  0.56684642,  0.26303501,  0.40276592,
               0.95268735,  0.13020902,  0.59830857,  0.14448501,  0.01713284,
               0.49227843,  0.96498128,  0.09953397,  0.36922522,  0.9846265 ])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.83073028,  0.43257296,  0.14573109,  0.87139135,  0.02127476,
               0.12462551,  0.0066885 ,  0.80055312,  0.17696528,  0.66540335,
               0.39745789,  0.84141121,  0.48708641,  0.38744359,  0.49072485,
               0.56403118,  0.4557809 ,  0.79996529,  0.31425601,  0.52204971,
               0.34083821,  0.50000374,  0.29181933,  0.69064696,  0.56530056,
               0.14311069,  0.87857506,  0.42022408,  0.10063845,  0.4331277 ,
               0.10116177,  0.07438879,  0.53634288,  0.55951016,  0.13168179,
               0.15635888,  0.0931763 ,  0.32724371,  0.30892608,  0.00180843,
               0.19766626,  0.10638004,  0.10324311,  0.96891019,  0.74264494,
               0.39588989,  0.57516959,  0.48977328,  0.21700303,  0.90963264,
               0.74911893,  0.79685943,  0.10250071,  0.1820032 ,  0.91228515,
               0.095331  ,  0.43879751,  0.2367454 ,  0.56167162,  0.04133289,
               0.4131216 ,  0.70447993,  0.8196146 ,  0.41654381,  0.80328644,
               0.32934278,  0.19381539,  0.19117008,  0.62378993,  0.41731906,
               0.96070376,  0.88379108,  0.64020689,  0.07782181,  0.14502088,
               0.37414851,  0.04013741,  0.44083716,  0.85203045,  0.44930604,
               0.94394139,  0.82790951,  0.4982156 ,  0.24515791,  0.77328797,
               0.94604835,  0.72679475,  0.54441456,  0.19625202,  0.89440303,
               0.95528067,  0.55175737,  0.66742383,  0.90830906,  0.2288027 ,
               0.54350606,  0.28704183,  0.11862705,  0.36267391,  0.52246527])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([  5.38708223e-01,   8.45428137e-01,   6.86001270e-02,
                5.87355524e-01,   3.13610077e-01,   9.86389982e-01,
                9.18224305e-01,   8.72756487e-02,   2.36265314e-01,
                8.67905104e-01,   2.43099220e-01,   1.47888651e-01,
                6.66753337e-02,   6.95850913e-01,   6.63732715e-01,
                2.24718006e-01,   2.21747003e-02,   3.77006080e-01,
                9.44387765e-01,   9.25756145e-01,   2.25521832e-01,
                4.04019352e-01,   1.91833480e-01,   6.85249115e-01,
                3.99228114e-01,   4.01428961e-01,   4.35956603e-02,
                5.96839644e-01,   3.59342230e-01,   4.04526918e-01,
                1.10208898e-04,   5.53406064e-01,   1.60103675e-01,
                7.13210272e-02,   4.50620251e-01,   9.16663960e-01,
                9.34922958e-01,   8.81859953e-02,   7.95524655e-01,
                7.41513320e-01,   5.25218115e-01,   6.68128790e-01,
                5.96872712e-01,   3.17425902e-01,   3.26619836e-01,
                5.55622307e-03,   4.30374547e-01,   1.29125846e-03,
                9.99668697e-01,   6.97418477e-01,   5.61155260e-01,
                3.15662939e-01,   1.53003052e-01,   2.00141283e-01,
                1.39039351e-01,   3.11118143e-01,   8.28831855e-01,
                1.57354185e-01,   9.86023806e-01,   1.96463703e-01,
                1.39998871e-01,   8.92448253e-01,   8.71596798e-01,
                5.46100922e-01,   1.15889292e-03,   4.19914097e-01,
                8.88359052e-01,   6.22142423e-01,   3.43753759e-01,
                2.09358645e-01,   1.10300159e-01,   1.27764804e-02,
                4.13607858e-01,   9.64833453e-01,   4.56881697e-01,
                4.00646293e-01,   3.47555512e-01,   1.11869371e-01,
                8.44134460e-01,   9.59781664e-01,   7.47567883e-01,
                1.16833084e-01,   1.98649980e-01,   3.28822520e-01,
                1.34883266e-01,   9.85514354e-01,   6.40906039e-01,
                7.81556555e-02,   8.11975443e-01,   6.70002731e-01,
                4.71632710e-01,   1.53506112e-01,   9.68521243e-01,
                3.39584485e-01,   5.86811613e-01,   4.90643282e-01,
                1.91034776e-01,   7.99633760e-01,   9.18668137e-01,
                2.84871022e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.71027453,  0.38646211,  0.20853042,  0.26868598,  0.6515486 ,
               0.07321816,  0.2533176 ,  0.18824022,  0.0746832 ,  0.02240809,
               0.16771229,  0.01466291,  0.26737786,  0.50684281,  0.8589543 ,
               0.90936116,  0.41572329,  0.04840881,  0.70448672,  0.85579126,
               0.25725453,  0.24324503,  0.54210958,  0.30412973,  0.20216046,
               0.82545095,  0.22204002,  0.59267161,  0.97459417,  0.8387063 ,
               0.231515  ,  0.14371999,  0.6072943 ,  0.41342501,  0.48194759,
               0.77544257,  0.99428972,  0.42401987,  0.67884503,  0.02800502,
               0.0422089 ,  0.68918339,  0.97475243,  0.55706652,  0.40031392,
               0.91877759,  0.00779046,  0.58707894,  0.02839033,  0.40907702,
               0.10558736,  0.57114461,  0.05620197,  0.9234581 ,  0.36563674,
               0.04568063,  0.09922172,  0.46242783,  0.88598345,  0.89318794,
               0.66377981,  0.18335565,  0.41930685,  0.61976882,  0.88283573,
               0.05231725,  0.5811844 ,  0.73150539,  0.06035209,  0.49848325,
               0.02563992,  0.65151426,  0.9110288 ,  0.9476923 ,  0.22642492,
               0.1939078 ,  0.95228076,  0.62682311,  0.36976931,  0.46445434,
               0.07542285,  0.8924928 ,  0.80454391,  0.0774505 ,  0.7413977 ,
               0.4494807 ,  0.60966843,  0.5689193 ,  0.0584602 ,  0.24556221,
               0.88194594,  0.39713234,  0.84703058,  0.78612418,  0.50251499,
               0.29884192,  0.16291561,  0.79653034,  0.36726143,  0.44679938])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.32078704,  0.89366662,  0.32516063,  0.57573762,  0.49583966,
               0.91391516,  0.37892089,  0.65970171,  0.18160465,  0.19739408,
               0.04266673,  0.41322389,  0.11634783,  0.86583281,  0.82808067,
               0.01639901,  0.19845271,  0.63212791,  0.06085854,  0.42361824,
               0.6385807 ,  0.66789843,  0.61708841,  0.82169244,  0.34235549,
               0.39766045,  0.70626824,  0.76851564,  0.22944651,  0.39462182,
               0.46305761,  0.08871003,  0.51266864,  0.42623527,  0.93101275,
               0.27105467,  0.8690424 ,  0.12360592,  0.81737154,  0.56638653,
               0.03820962,  0.8108298 ,  0.29037221,  0.04824763,  0.01918963,
               0.69893356,  0.09822524,  0.0663873 ,  0.27349392,  0.94847798,
               0.17274748,  0.86230355,  0.28370035,  0.00354203,  0.30261471,
               0.95543538,  0.19123257,  0.31327309,  0.72690304,  0.57963886,
               0.58016943,  0.67122556,  0.37530281,  0.82651917,  0.41349782,
               0.45332186,  0.46685626,  0.46423118,  0.40675636,  0.11855445,
               0.27135041,  0.96583669,  0.33820898,  0.65905219,  0.64317324,
               0.531893  ,  0.91211975,  0.56674452,  0.18632224,  0.42244103,
               0.99693429,  0.2972064 ,  0.73740971,  0.23768104,  0.57693973,
               0.81999608,  0.13100381,  0.94175286,  0.82182185,  0.60949402,
               0.81126916,  0.45014352,  0.14579516,  0.51561872,  0.7819986 ,
               0.71094792,  0.47343333,  0.14823765,  0.46503582,  0.57554436])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.0535993 ,  0.49453495,  0.3403675 ,  0.50188405,  0.44196238,
               0.73292888,  0.33665707,  0.37715246,  0.84335801,  0.98392777,
               0.64535016,  0.18331571,  0.85314329,  0.74615194,  0.32353261,
               0.05710032,  0.48131874,  0.84515726,  0.12330516,  0.26492149,
               0.95794938,  0.61446461,  0.48460044,  0.76622789,  0.9125908 ,
               0.9758219 ,  0.34226137,  0.36712887,  0.79289354,  0.78425719,
               0.29133798,  0.15591803,  0.56022002,  0.64742693,  0.75624248,
               0.21297454,  0.12431092,  0.13177561,  0.7033694 ,  0.37377472,
               0.14598281,  0.10202525,  0.45216874,  0.82158614,  0.91947753,
               0.62904579,  0.23037982,  0.20317738,  0.266323  ,  0.10041689,
               0.2279745 ,  0.40904734,  0.85670211,  0.28858575,  0.19001232,
               0.21515794,  0.14497473,  0.28707165,  0.86016447,  0.91818145,
               0.55418805,  0.26833457,  0.87623215,  0.71542259,  0.48957742,
               0.93952957,  0.72317587,  0.15121545,  0.46288282,  0.2321579 ,
               0.54673222,  0.09761101,  0.72928157,  0.95643697,  0.24078225,
               0.29374328,  0.22472758,  0.43226662,  0.80696855,  0.85649439,
               0.46971477,  0.68633435,  0.71400956,  0.39647533,  0.60831473,
               0.06034726,  0.33416378,  0.58576369,  0.26623479,  0.98171942,
               0.24423118,  0.57206081,  0.41526328,  0.78996264,  0.91694337,
               0.14512651,  0.51586136,  0.99415563,  0.34678548,  0.20918763])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.7243521 ,  0.42378531,  0.90279376,  0.2727502 ,  0.14641534,
               0.94298974,  0.53120514,  0.39658476,  0.50346069,  0.22199593,
               0.22415126,  0.08778358,  0.97609398,  0.22506554,  0.17491352,
               0.93742593,  0.45179296,  0.96530912,  0.87725453,  0.77849977,
               0.88507113,  0.24110776,  0.43913902,  0.94323251,  0.32283695,
               0.47717932,  0.72218436,  0.03061289,  0.86245268,  0.99083176,
               0.49644633,  0.45893941,  0.32357183,  0.63018492,  0.80030795,
               0.53416956,  0.03289415,  0.21792989,  0.66003676,  0.74537749,
               0.64107708,  0.09848298,  0.71313577,  0.606728  ,  0.3104005 ,
               0.72472676,  0.88669232,  0.50510949,  0.63271875,  0.71928179,
               0.24353832,  0.42756504,  0.35361762,  0.19862573,  0.9327014 ,
               0.15710971,  0.58188826,  0.19208344,  0.00845182,  0.46249251,
               0.28237477,  0.48178766,  0.94523241,  0.18005442,  0.00226688,
               0.15089615,  0.43834931,  0.26812452,  0.71411607,  0.28324634,
               0.41893516,  0.02395472,  0.62266228,  0.14211966,  0.47104235,
               0.06151511,  0.05852196,  0.40148384,  0.39961762,  0.54093865,
               0.71397753,  0.6633441 ,  0.91285411,  0.09684279,  0.83344627,
               0.36827974,  0.57578671,  0.85408741,  0.33974059,  0.88297632,
               0.63957408,  0.34645851,  0.39295801,  0.08107734,  0.32574873,
               0.7031537 ,  0.51304093,  0.23374119,  0.82027584,  0.66917378])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.20505483,  0.80105365,  0.62433278,  0.51868994,  0.18556291,
               0.61239327,  0.91088141,  0.2149716 ,  0.1782643 ,  0.43378353,
               0.67105895,  0.93800809,  0.11890589,  0.88350874,  0.27276119,
               0.51646239,  0.08869005,  0.0847562 ,  0.15270587,  0.21713041,
               0.56627974,  0.55474378,  0.51723527,  0.61195692,  0.72394703,
               0.75304253,  0.72988463,  0.55492156,  0.41657762,  0.94102064,
               0.79818695,  0.06853339,  0.38762914,  0.35836239,  0.75017273,
               0.18863626,  0.95397501,  0.84513722,  0.00772647,  0.64912331,
               0.31920511,  0.27710242,  0.74666899,  0.22013392,  0.58689979,
               0.98589031,  0.15559872,  0.78561513,  0.45387449,  0.38301232,
               0.875189  ,  0.8096463 ,  0.24503074,  0.62579525,  0.24980401,
               0.88722701,  0.24329192,  0.31577267,  0.67526904,  0.07347321,
               0.89709704,  0.81496258,  0.84298007,  0.98236636,  0.40016214,
               0.99530733,  0.63359644,  0.34067462,  0.37479476,  0.02403289,
               0.7924793 ,  0.04311326,  0.57668612,  0.60916803,  0.96965859,
               0.95728366,  0.29129909,  0.61242215,  0.33824911,  0.42923717,
               0.41569825,  0.01343357,  0.26304079,  0.22780542,  0.63452206,
               0.17777775,  0.27912955,  0.01021143,  0.76899492,  0.14428553,
               0.17048157,  0.60570133,  0.57063938,  0.8133699 ,  0.75407382,
               0.68445086,  0.54852888,  0.14654935,  0.06458228,  0.1511253 ])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.62769497,  0.7914188 ,  0.74007807,  0.79742705,  0.81946258,
               0.40276932,  0.19883336,  0.3127372 ,  0.22596567,  0.22058012,
               0.97897124,  0.85720203,  0.06326481,  0.55216729,  0.97844705,
               0.53198676,  0.75932226,  0.84386135,  0.50638981,  0.35934442,
               0.30509377,  0.71681895,  0.25090154,  0.06243992,  0.2528891 ,
               0.42809871,  0.88060497,  0.40114758,  0.74641453,  0.18064342,
               0.83290688,  0.7102504 ,  0.39350057,  0.33055995,  0.92708127,
               0.18648578,  0.2141726 ,  0.9836563 ,  0.47813897,  0.78379183,
               0.03622572,  0.22693364,  0.24449068,  0.86107057,  0.19856745,
               0.32993111,  0.19144501,  0.84409905,  0.35551841,  0.43951129,
               0.28517803,  0.44539432,  0.04236662,  0.28295009,  0.72938432,
               0.61244353,  0.5542675 ,  0.67884196,  0.44127431,  0.9310343 ,
               0.88043189,  0.07243954,  0.94611806,  0.73016636,  0.66226638,
               0.41167632,  0.13985747,  0.80184575,  0.86461706,  0.69223858,
               0.57956422,  0.05760249,  0.89703292,  0.47292162,  0.82437025,
               0.36699996,  0.66708295,  0.70605654,  0.29383236,  0.64392588,
               0.4628556 ,  0.42474497,  0.52165723,  0.91307947,  0.90035053,
               0.35622782,  0.48763491,  0.41698519,  0.07035016,  0.62515883,
               0.39554456,  0.98615077,  0.47111141,  0.29295654,  0.97788944,
               0.22665552,  0.28955209,  0.38014978,  0.84950703,  0.98636688])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.0535993 ,  0.49453495,  0.3403675 ,  0.50188405,  0.44196238,
               0.73292888,  0.33665707,  0.37715246,  0.84335801,  0.98392777,
               0.64535016,  0.18331571,  0.85314329,  0.74615194,  0.32353261,
               0.05710032,  0.48131874,  0.84515726,  0.12330516,  0.26492149,
               0.95794938,  0.61446461,  0.48460044,  0.76622789,  0.9125908 ,
               0.9758219 ,  0.34226137,  0.36712887,  0.79289354,  0.78425719,
               0.29133798,  0.15591803,  0.56022002,  0.64742693,  0.75624248,
               0.21297454,  0.12431092,  0.13177561,  0.7033694 ,  0.37377472,
               0.14598281,  0.10202525,  0.45216874,  0.82158614,  0.91947753,
               0.62904579,  0.23037982,  0.20317738,  0.266323  ,  0.10041689,
               0.2279745 ,  0.40904734,  0.85670211,  0.28858575,  0.19001232,
               0.21515794,  0.14497473,  0.28707165,  0.86016447,  0.91818145,
               0.55418805,  0.26833457,  0.87623215,  0.71542259,  0.48957742,
               0.93952957,  0.72317587,  0.15121545,  0.46288282,  0.2321579 ,
               0.54673222,  0.09761101,  0.72928157,  0.95643697,  0.24078225,
               0.29374328,  0.22472758,  0.43226662,  0.80696855,  0.85649439,
               0.46971477,  0.68633435,  0.71400956,  0.39647533,  0.60831473,
               0.06034726,  0.33416378,  0.58576369,  0.26623479,  0.98171942,
               0.24423118,  0.57206081,  0.41526328,  0.78996264,  0.91694337,
               0.14512651,  0.51586136,  0.99415563,  0.34678548,  0.20918763])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.7243521 ,  0.42378531,  0.90279376,  0.2727502 ,  0.14641534,
               0.94298974,  0.53120514,  0.39658476,  0.50346069,  0.22199593,
               0.22415126,  0.08778358,  0.97609398,  0.22506554,  0.17491352,
               0.93742593,  0.45179296,  0.96530912,  0.87725453,  0.77849977,
               0.88507113,  0.24110776,  0.43913902,  0.94323251,  0.32283695,
               0.47717932,  0.72218436,  0.03061289,  0.86245268,  0.99083176,
               0.49644633,  0.45893941,  0.32357183,  0.63018492,  0.80030795,
               0.53416956,  0.03289415,  0.21792989,  0.66003676,  0.74537749,
               0.64107708,  0.09848298,  0.71313577,  0.606728  ,  0.3104005 ,
               0.72472676,  0.88669232,  0.50510949,  0.63271875,  0.71928179,
               0.24353832,  0.42756504,  0.35361762,  0.19862573,  0.9327014 ,
               0.15710971,  0.58188826,  0.19208344,  0.00845182,  0.46249251,
               0.28237477,  0.48178766,  0.94523241,  0.18005442,  0.00226688,
               0.15089615,  0.43834931,  0.26812452,  0.71411607,  0.28324634,
               0.41893516,  0.02395472,  0.62266228,  0.14211966,  0.47104235,
               0.06151511,  0.05852196,  0.40148384,  0.39961762,  0.54093865,
               0.71397753,  0.6633441 ,  0.91285411,  0.09684279,  0.83344627,
               0.36827974,  0.57578671,  0.85408741,  0.33974059,  0.88297632,
               0.63957408,  0.34645851,  0.39295801,  0.08107734,  0.32574873,
               0.7031537 ,  0.51304093,  0.23374119,  0.82027584,  0.66917378])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.20505483,  0.80105365,  0.62433278,  0.51868994,  0.18556291,
               0.61239327,  0.91088141,  0.2149716 ,  0.1782643 ,  0.43378353,
               0.67105895,  0.93800809,  0.11890589,  0.88350874,  0.27276119,
               0.51646239,  0.08869005,  0.0847562 ,  0.15270587,  0.21713041,
               0.56627974,  0.55474378,  0.51723527,  0.61195692,  0.72394703,
               0.75304253,  0.72988463,  0.55492156,  0.41657762,  0.94102064,
               0.79818695,  0.06853339,  0.38762914,  0.35836239,  0.75017273,
               0.18863626,  0.95397501,  0.84513722,  0.00772647,  0.64912331,
               0.31920511,  0.27710242,  0.74666899,  0.22013392,  0.58689979,
               0.98589031,  0.15559872,  0.78561513,  0.45387449,  0.38301232,
               0.875189  ,  0.8096463 ,  0.24503074,  0.62579525,  0.24980401,
               0.88722701,  0.24329192,  0.31577267,  0.67526904,  0.07347321,
               0.89709704,  0.81496258,  0.84298007,  0.98236636,  0.40016214,
               0.99530733,  0.63359644,  0.34067462,  0.37479476,  0.02403289,
               0.7924793 ,  0.04311326,  0.57668612,  0.60916803,  0.96965859,
               0.95728366,  0.29129909,  0.61242215,  0.33824911,  0.42923717,
               0.41569825,  0.01343357,  0.26304079,  0.22780542,  0.63452206,
               0.17777775,  0.27912955,  0.01021143,  0.76899492,  0.14428553,
               0.17048157,  0.60570133,  0.57063938,  0.8133699 ,  0.75407382,
               0.68445086,  0.54852888,  0.14654935,  0.06458228,  0.1511253 ])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.36480498,  0.21378604,  0.60101488,  0.21376439,  0.7493092 ,
               0.70057698,  0.17553885,  0.93428516,  0.72931136,  0.59568382,
               0.67814692,  0.33360239,  0.67567608,  0.16730376,  0.74649512,
               0.95450242,  0.65135506,  0.28477561,  0.1525407 ,  0.75512275,
               0.6204014 ,  0.68611995,  0.08100292,  0.90506418,  0.14908748,
               0.48658916,  0.66896235,  0.31605995,  0.40180824,  0.87811155,
               0.79419691,  0.22848346,  0.68518935,  0.82835053,  0.61741185,
               0.77281478,  0.20021499,  0.82547301,  0.70438657,  0.3280621 ,
               0.79005996,  0.35400419,  0.42220315,  0.38741818,  0.35889866,
               0.92077583,  0.45451921,  0.50321288,  0.80338582,  0.04928327,
               0.1857741 ,  0.93037145,  0.36701231,  0.1795041 ,  0.47073301,
               0.39979092,  0.19856748,  0.14112479,  0.72412906,  0.44927127,
               0.71143646,  0.78818683,  0.01308667,  0.77940749,  0.17455494,
               0.11255777,  0.14393819,  0.14601684,  0.70984473,  0.53500847,
               0.55765074,  0.76228087,  0.54864936,  0.5201289 ,  0.48418275,
               0.08564525,  0.91898879,  0.13352831,  0.73784819,  0.01776454,
               0.1319034 ,  0.02498269,  0.64583534,  0.45657907,  0.11533326,
               0.0152733 ,  0.64332799,  0.65504269,  0.0927932 ,  0.07579683,
               0.6166628 ,  0.13520639,  0.54042935,  0.11908326,  0.64072551,
               0.21915827,  0.8409993 ,  0.57846829,  0.39666225,  0.59316901])}]]


