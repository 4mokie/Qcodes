
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='4f00000e-8118-4041-8b78-4bc67c87f3e2'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='44adf520-48d0-4380-a65e-3e787e0aa8e8'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.658740924596519],
     [0.273982863265712],
     [0.485792993316097],
     [0.185591897960712],
     [0.158326897023621],
     [0.403809285076623],
     [0.075509436286734],
     [0.935467121237349],
     [0.913237095569267],
     [0.624913926671368],
     [0.437205249878687],
     [0.937162682462954],
     [0.120723253360862],
     [0.599072673457092],
     [0.114038824461747],
     [0.36335964332191],
     [0.367378071403148],
     [0.22838529835725],
     [0.74105420527235],
     [0.852275191194895],
     [0.667629020597887],
     [0.442727455464411],
     [0.837001227592676],
     [0.224598845703679],
     [0.79699158325368],
     [0.315014308300382],
     [0.0616500086454841],
     [0.326126437674392],
     [0.858240544633524],
     [0.0949438761726925],
     [0.215070922797476],
     [0.211226785755454],
     [0.389105477037424],
     [0.497775616587601],
     [0.932786979745471],
     [0.345799868259516],
     [0.971682174001207],
     [0.140839006039697],
     [0.243289621175182],
     [0.489749590744773],
     [0.16322126302439],
     [0.262218723303259],
     [0.118792908788709],
     [0.724626093968346],
     [0.488261134029187],
     [0.710009621123713],
     [0.892797922414377],
     [0.255389765282535],
     [0.43342604795461],
     [0.401692004645115],
     [0.966162720645646],
     [0.719659238654354],
     [0.903602093557992],
     [0.323157605281524],
     [0.885540510690331],
     [0.173797634763589],
     [0.218002656823519],
     [0.528956124226221],
     [0.926123946206369],
     [0.769861773390821],
     [0.4419458137412],
     [0.124294673446572],
     [0.794810315822524],
     [0.849745584576211],
     [0.866640550232841],
     [0.138008136104258],
     [0.167322567639276],
     [0.908483254510641],
     [0.466354928416254],
     [0.0988805530659167],
     [0.29305535200364],
     [0.406934955228731],
     [0.702530150915658],
     [0.2155639173977],
     [0.936422553497524],
     [0.36717029975895],
     [0.523384580021398],
     [0.079727352270395],
     [0.630862716132195],
     [0.483838954030657],
     [0.0387511714094697],
     [0.494763343444817],
     [0.0102850060260965],
     [0.893193317931799],
     [0.836343510233954],
     [0.19198064807735],
     [0.232143276805729],
     [0.774765903152464],
     [0.921199663808305],
     [0.496753585154423],
     [0.603151988721465],
     [0.771011448616986],
     [0.466530777466574],
     [0.876909011012619],
     [0.185429267910122],
     [0.0128914343241397],
     [0.616090722048948],
     [0.956616637063814],
     [0.698040649464108],
     [0.681782963309416]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.17543857])],
     [array([0.8494541])],
     [array([0.73255944])],
     [array([0.91225598])],
     [array([0.73652889])],
     [array([0.18076445])],
     [array([0.27038204])],
     [array([0.86361065])],
     [array([0.56479713])],
     [array([0.3427249])],
     [array([0.06473484])],
     [array([0.44146741])],
     [array([0.51486147])],
     [array([0.64876193])],
     [array([0.10794189])],
     [array([0.47672261])],
     [array([0.89754899])],
     [array([0.58589418])],
     [array([0.40986675])],
     [array([0.59650638])],
     [array([0.62960632])],
     [array([0.98638357])],
     [array([0.9239745])],
     [array([0.20988327])],
     [array([0.60208312])],
     [array([0.43149183])],
     [array([0.21753363])],
     [array([0.27798271])],
     [array([0.43307905])],
     [array([0.88896497])],
     [array([0.56308009])],
     [array([0.72514228])],
     [array([0.32996881])],
     [array([0.21306584])],
     [array([0.97499799])],
     [array([0.82855009])],
     [array([0.34906547])],
     [array([0.34967238])],
     [array([0.4972718])],
     [array([0.88647101])],
     [array([0.97001009])],
     [array([0.60830197])],
     [array([0.49887316])],
     [array([0.70535419])],
     [array([0.9588455])],
     [array([0.57879654])],
     [array([0.49626547])],
     [array([0.50778649])],
     [array([0.92216312])],
     [array([0.88623172])],
     [array([0.83815302])],
     [array([0.41617823])],
     [array([0.90194489])],
     [array([0.86133715])],
     [array([0.44649391])],
     [array([0.10447602])],
     [array([0.60486919])],
     [array([0.67805851])],
     [array([0.81873739])],
     [array([0.57049219])],
     [array([0.12454328])],
     [array([0.35272302])],
     [array([0.66538649])],
     [array([0.78295454])],
     [array([0.29220317])],
     [array([0.17385032])],
     [array([0.45860844])],
     [array([0.77591778])],
     [array([0.49762715])],
     [array([0.94605552])],
     [array([0.15475328])],
     [array([0.00687506])],
     [array([0.66421645])],
     [array([0.21345012])],
     [array([0.66272213])],
     [array([0.67039613])],
     [array([0.51295995])],
     [array([0.8369215])],
     [array([0.10536933])],
     [array([0.94023191])],
     [array([0.43633083])],
     [array([0.81756251])],
     [array([0.66135502])],
     [array([0.66676866])],
     [array([0.32359925])],
     [array([0.07748296])],
     [array([0.31431755])],
     [array([0.4306217])],
     [array([0.58315364])],
     [array([0.95684866])],
     [array([0.1930224])],
     [array([0.48652895])],
     [array([0.63876697])],
     [array([0.903408])],
     [array([0.69458148])],
     [array([0.90633745])],
     [array([0.06067379])],
     [array([0.27814335])],
     [array([0.4525994])],
     [array([0.49002328])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.17543857, 0.8494541 , 0.73255944, 0.91225598, 0.73652889,
           0.18076445, 0.27038204, 0.86361065, 0.56479713, 0.3427249 ,
           0.06473484, 0.44146741, 0.51486147, 0.64876193, 0.10794189,
           0.47672261, 0.89754899, 0.58589418, 0.40986675, 0.59650638,
           0.62960632, 0.98638357, 0.9239745 , 0.20988327, 0.60208312,
           0.43149183, 0.21753363, 0.27798271, 0.43307905, 0.88896497,
           0.56308009, 0.72514228, 0.32996881, 0.21306584, 0.97499799,
           0.82855009, 0.34906547, 0.34967238, 0.4972718 , 0.88647101,
           0.97001009, 0.60830197, 0.49887316, 0.70535419, 0.9588455 ,
           0.57879654, 0.49626547, 0.50778649, 0.92216312, 0.88623172,
           0.83815302, 0.41617823, 0.90194489, 0.86133715, 0.44649391,
           0.10447602, 0.60486919, 0.67805851, 0.81873739, 0.57049219,
           0.12454328, 0.35272302, 0.66538649, 0.78295454, 0.29220317,
           0.17385032, 0.45860844, 0.77591778, 0.49762715, 0.94605552,
           0.15475328, 0.00687506, 0.66421645, 0.21345012, 0.66272213,
           0.67039613, 0.51295995, 0.8369215 , 0.10536933, 0.94023191,
           0.43633083, 0.81756251, 0.66135502, 0.66676866, 0.32359925,
           0.07748296, 0.31431755, 0.4306217 , 0.58315364, 0.95684866,
           0.1930224 , 0.48652895, 0.63876697, 0.903408  , 0.69458148,
           0.90633745, 0.06067379, 0.27814335, 0.4525994 , 0.49002328])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.65874092, 0.27398286, 0.48579299, 0.1855919 , 0.1583269 ,
              0.40380929, 0.07550944, 0.93546712, 0.9132371 , 0.62491393,
              0.43720525, 0.93716268, 0.12072325, 0.59907267, 0.11403882,
              0.36335964, 0.36737807, 0.2283853 , 0.74105421, 0.85227519,
              0.66762902, 0.44272746, 0.83700123, 0.22459885, 0.79699158,
              0.31501431, 0.06165001, 0.32612644, 0.85824054, 0.09494388,
              0.21507092, 0.21122679, 0.38910548, 0.49777562, 0.93278698,
              0.34579987, 0.97168217, 0.14083901, 0.24328962, 0.48974959,
              0.16322126, 0.26221872, 0.11879291, 0.72462609, 0.48826113,
              0.71000962, 0.89279792, 0.25538977, 0.43342605, 0.401692  ,
              0.96616272, 0.71965924, 0.90360209, 0.32315761, 0.88554051,
              0.17379763, 0.21800266, 0.52895612, 0.92612395, 0.76986177,
              0.44194581, 0.12429467, 0.79481032, 0.84974558, 0.86664055,
              0.13800814, 0.16732257, 0.90848325, 0.46635493, 0.09888055,
              0.29305535, 0.40693496, 0.70253015, 0.21556392, 0.93642255,
              0.3671703 , 0.52338458, 0.07972735, 0.63086272, 0.48383895,
              0.03875117, 0.49476334, 0.01028501, 0.89319332, 0.83634351,
              0.19198065, 0.23214328, 0.7747659 , 0.92119966, 0.49675359,
              0.60315199, 0.77101145, 0.46653078, 0.87690901, 0.18542927,
              0.01289143, 0.61609072, 0.95661664, 0.69804065, 0.68178296])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.03486221, 0.6844659 , 0.176894  , 0.79010947, 0.68149111,
              0.08699947, 0.66170354, 0.81001146, 0.6231921 , 0.91234596,
              0.01518966, 0.09906396, 0.2496461 , 0.15618262, 0.63890041,
              0.73276037, 0.11104925, 0.37563488, 0.18227212, 0.13735245,
              0.89149298, 0.04933059, 0.51328127, 0.74138369, 0.31621055,
              0.55103636, 0.04831151, 0.27394796, 0.60141219, 0.62613603,
              0.07558093, 0.43095921, 0.9437572 , 0.04959504, 0.00686878,
              0.36089616, 0.89524222, 0.99506809, 0.0598566 , 0.3411398 ,
              0.56898021, 0.8743808 , 0.04676824, 0.58041094, 0.94103938,
              0.25655004, 0.26318787, 0.27502783, 0.63488624, 0.4876993 ,
              0.38109937, 0.89167967, 0.47689677, 0.52621708, 0.2622113 ,
              0.19820629, 0.96420673, 0.97975021, 0.85090929, 0.47744087,
              0.55304838, 0.92072953, 0.02974294, 0.09215825, 0.67844367,
              0.27486717, 0.2268134 , 0.53409043, 0.80514376, 0.22744649,
              0.4301628 , 0.45946756, 0.0011196 , 0.81841013, 0.05013015,
              0.53680381, 0.4634957 , 0.2723616 , 0.61219607, 0.58411017,
              0.46478038, 0.23028172, 0.20556531, 0.46873352, 0.3774237 ,
              0.1837984 , 0.22063561, 0.40904979, 0.46921216, 0.28436943,
              0.78734721, 0.02872239, 0.3593338 , 0.79621518, 0.02372511,
              0.49720206, 0.96565917, 0.89438901, 0.59662342, 0.18171545])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.39316847, 0.69836713, 0.04602244, 0.81229408, 0.23226799,
              0.50052189, 0.84568796, 0.09869866, 0.24396575, 0.63669443,
              0.04029767, 0.98019249, 0.35663428, 0.87817949, 0.04314037,
              0.77048696, 0.3591196 , 0.2631426 , 0.56242073, 0.63629019,
              0.43249067, 0.91726463, 0.61266785, 0.64985175, 0.58632582,
              0.93082479, 0.2996452 , 0.24253025, 0.89937895, 0.83207302,
              0.87330763, 0.55064331, 0.31689987, 0.72806608, 0.49087918,
              0.12573734, 0.88193852, 0.52309753, 0.31605004, 0.63754028,
              0.59558498, 0.42990461, 0.33810861, 0.01690476, 0.81960934,
              0.55407452, 0.37771443, 0.76317838, 0.85934063, 0.7385076 ,
              0.60824052, 0.58199372, 0.68404898, 0.71098163, 0.45037685,
              0.2501353 , 0.62199346, 0.76467048, 0.34978443, 0.19729294,
              0.85880392, 0.59301116, 0.84597178, 0.78702123, 0.900039  ,
              0.51186482, 0.7081674 , 0.39159737, 0.50238317, 0.7805197 ,
              0.51682041, 0.62743873, 0.5442141 , 0.88494477, 0.24437674,
              0.40015972, 0.97489208, 0.29003394, 0.48457374, 0.04972577,
              0.72158696, 0.66182033, 0.49838808, 0.96120448, 0.5373303 ,
              0.52107631, 0.16820653, 0.8534749 , 0.92407774, 0.60523246,
              0.95669868, 0.83265131, 0.32639044, 0.21109549, 0.13037312,
              0.10769828, 0.58115675, 0.57969052, 0.88778722, 0.67663663])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.46583554, 0.7608702 , 0.05585078, 0.94492937, 0.91701637,
              0.16009784, 0.59689225, 0.54293125, 0.21237548, 0.71103386,
              0.30512267, 0.79355146, 0.37268107, 0.56218448, 0.89922332,
              0.43832783, 0.4743505 , 0.45849368, 0.49682619, 0.99696988,
              0.18740385, 0.09317409, 0.7605514 , 0.30529598, 0.10954617,
              0.94323758, 0.33134888, 0.86390967, 0.88582887, 0.9834646 ,
              0.88906903, 0.52033508, 0.01892826, 0.18023566, 0.17136895,
              0.42144941, 0.89133824, 0.86681449, 0.39191892, 0.9633218 ,
              0.14029412, 0.07164798, 0.9796624 , 0.59971084, 0.48711831,
              0.61660033, 0.10000954, 0.24934112, 0.80580134, 0.28662379,
              0.26501308, 0.62213501, 0.36086144, 0.27714135, 0.59229476,
              0.06145267, 0.7899435 , 0.94713173, 0.73492772, 0.3387605 ,
              0.84045529, 0.61461733, 0.32298611, 0.70099977, 0.99276979,
              0.14907618, 0.12941815, 0.09004624, 0.14988951, 0.67730519,
              0.68074747, 0.88206779, 0.13895693, 0.40387811, 0.11215851,
              0.72674853, 0.46248212, 0.36267999, 0.73866422, 0.65405891,
              0.80704421, 0.8287073 , 0.1320376 , 0.51921862, 0.82522619,
              0.40467998, 0.80239393, 0.89681832, 0.36041648, 0.32455548,
              0.82125173, 0.95338445, 0.82001159, 0.23820844, 0.78951879,
              0.65916723, 0.71546992, 0.22808462, 0.62378701, 0.12719916])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.65874092, 0.27398286, 0.48579299, 0.1855919 , 0.1583269 ,
              0.40380929, 0.07550944, 0.93546712, 0.9132371 , 0.62491393,
              0.43720525, 0.93716268, 0.12072325, 0.59907267, 0.11403882,
              0.36335964, 0.36737807, 0.2283853 , 0.74105421, 0.85227519,
              0.66762902, 0.44272746, 0.83700123, 0.22459885, 0.79699158,
              0.31501431, 0.06165001, 0.32612644, 0.85824054, 0.09494388,
              0.21507092, 0.21122679, 0.38910548, 0.49777562, 0.93278698,
              0.34579987, 0.97168217, 0.14083901, 0.24328962, 0.48974959,
              0.16322126, 0.26221872, 0.11879291, 0.72462609, 0.48826113,
              0.71000962, 0.89279792, 0.25538977, 0.43342605, 0.401692  ,
              0.96616272, 0.71965924, 0.90360209, 0.32315761, 0.88554051,
              0.17379763, 0.21800266, 0.52895612, 0.92612395, 0.76986177,
              0.44194581, 0.12429467, 0.79481032, 0.84974558, 0.86664055,
              0.13800814, 0.16732257, 0.90848325, 0.46635493, 0.09888055,
              0.29305535, 0.40693496, 0.70253015, 0.21556392, 0.93642255,
              0.3671703 , 0.52338458, 0.07972735, 0.63086272, 0.48383895,
              0.03875117, 0.49476334, 0.01028501, 0.89319332, 0.83634351,
              0.19198065, 0.23214328, 0.7747659 , 0.92119966, 0.49675359,
              0.60315199, 0.77101145, 0.46653078, 0.87690901, 0.18542927,
              0.01289143, 0.61609072, 0.95661664, 0.69804065, 0.68178296])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.03486221, 0.6844659 , 0.176894  , 0.79010947, 0.68149111,
              0.08699947, 0.66170354, 0.81001146, 0.6231921 , 0.91234596,
              0.01518966, 0.09906396, 0.2496461 , 0.15618262, 0.63890041,
              0.73276037, 0.11104925, 0.37563488, 0.18227212, 0.13735245,
              0.89149298, 0.04933059, 0.51328127, 0.74138369, 0.31621055,
              0.55103636, 0.04831151, 0.27394796, 0.60141219, 0.62613603,
              0.07558093, 0.43095921, 0.9437572 , 0.04959504, 0.00686878,
              0.36089616, 0.89524222, 0.99506809, 0.0598566 , 0.3411398 ,
              0.56898021, 0.8743808 , 0.04676824, 0.58041094, 0.94103938,
              0.25655004, 0.26318787, 0.27502783, 0.63488624, 0.4876993 ,
              0.38109937, 0.89167967, 0.47689677, 0.52621708, 0.2622113 ,
              0.19820629, 0.96420673, 0.97975021, 0.85090929, 0.47744087,
              0.55304838, 0.92072953, 0.02974294, 0.09215825, 0.67844367,
              0.27486717, 0.2268134 , 0.53409043, 0.80514376, 0.22744649,
              0.4301628 , 0.45946756, 0.0011196 , 0.81841013, 0.05013015,
              0.53680381, 0.4634957 , 0.2723616 , 0.61219607, 0.58411017,
              0.46478038, 0.23028172, 0.20556531, 0.46873352, 0.3774237 ,
              0.1837984 , 0.22063561, 0.40904979, 0.46921216, 0.28436943,
              0.78734721, 0.02872239, 0.3593338 , 0.79621518, 0.02372511,
              0.49720206, 0.96565917, 0.89438901, 0.59662342, 0.18171545])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.39316847, 0.69836713, 0.04602244, 0.81229408, 0.23226799,
              0.50052189, 0.84568796, 0.09869866, 0.24396575, 0.63669443,
              0.04029767, 0.98019249, 0.35663428, 0.87817949, 0.04314037,
              0.77048696, 0.3591196 , 0.2631426 , 0.56242073, 0.63629019,
              0.43249067, 0.91726463, 0.61266785, 0.64985175, 0.58632582,
              0.93082479, 0.2996452 , 0.24253025, 0.89937895, 0.83207302,
              0.87330763, 0.55064331, 0.31689987, 0.72806608, 0.49087918,
              0.12573734, 0.88193852, 0.52309753, 0.31605004, 0.63754028,
              0.59558498, 0.42990461, 0.33810861, 0.01690476, 0.81960934,
              0.55407452, 0.37771443, 0.76317838, 0.85934063, 0.7385076 ,
              0.60824052, 0.58199372, 0.68404898, 0.71098163, 0.45037685,
              0.2501353 , 0.62199346, 0.76467048, 0.34978443, 0.19729294,
              0.85880392, 0.59301116, 0.84597178, 0.78702123, 0.900039  ,
              0.51186482, 0.7081674 , 0.39159737, 0.50238317, 0.7805197 ,
              0.51682041, 0.62743873, 0.5442141 , 0.88494477, 0.24437674,
              0.40015972, 0.97489208, 0.29003394, 0.48457374, 0.04972577,
              0.72158696, 0.66182033, 0.49838808, 0.96120448, 0.5373303 ,
              0.52107631, 0.16820653, 0.8534749 , 0.92407774, 0.60523246,
              0.95669868, 0.83265131, 0.32639044, 0.21109549, 0.13037312,
              0.10769828, 0.58115675, 0.57969052, 0.88778722, 0.67663663])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.74946223, 0.38042649, 0.03011301, 0.84346851, 0.28162511,
              0.64819996, 0.29016344, 0.81305501, 0.3858292 , 0.57305132,
              0.32640203, 0.78993405, 0.94967932, 0.11317917, 0.77967507,
              0.14749897, 0.69938042, 0.89460228, 0.83869829, 0.5012018 ,
              0.51178338, 0.69941202, 0.68136147, 0.08730276, 0.40518967,
              0.01727187, 0.37089008, 0.3117791 , 0.80673018, 0.82252549,
              0.01137254, 0.8210481 , 0.83755507, 0.68386436, 0.97730962,
              0.14771812, 0.51844297, 0.43029009, 0.24578731, 0.004911  ,
              0.60966487, 0.81670136, 0.98303737, 0.82016188, 0.16924565,
              0.49286217, 0.85233094, 0.66204719, 0.09042139, 0.54000501,
              0.08116462, 0.81657712, 0.22489515, 0.99542508, 0.81045141,
              0.21485703, 0.19518887, 0.29186001, 0.83691272, 0.64815924,
              0.65846048, 0.42382205, 0.27417667, 0.37845788, 0.15934383,
              0.94658615, 0.18671782, 0.32750971, 0.74590686, 0.98935187,
              0.47069541, 0.56096513, 0.128153  , 0.85854041, 0.42670324,
              0.7717996 , 0.16789014, 0.62859237, 0.52778609, 0.82394302,
              0.92262514, 0.12635219, 0.40126196, 0.46513888, 0.24633375,
              0.70666018, 0.7946202 , 0.13510852, 0.12606012, 0.89434581,
              0.08911904, 0.63903984, 0.53391569, 0.32536407, 0.67617223,
              0.75992418, 0.49999155, 0.36093426, 0.22208758, 0.10783745])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.17543857, 0.8494541 , 0.73255944, 0.91225598, 0.73652889,
              0.18076445, 0.27038204, 0.86361065, 0.56479713, 0.3427249 ,
              0.06473484, 0.44146741, 0.51486147, 0.64876193, 0.10794189,
              0.47672261, 0.89754899, 0.58589418, 0.40986675, 0.59650638,
              0.62960632, 0.98638357, 0.9239745 , 0.20988327, 0.60208312,
              0.43149183, 0.21753363, 0.27798271, 0.43307905, 0.88896497,
              0.56308009, 0.72514228, 0.32996881, 0.21306584, 0.97499799,
              0.82855009, 0.34906547, 0.34967238, 0.4972718 , 0.88647101,
              0.97001009, 0.60830197, 0.49887316, 0.70535419, 0.9588455 ,
              0.57879654, 0.49626547, 0.50778649, 0.92216312, 0.88623172,
              0.83815302, 0.41617823, 0.90194489, 0.86133715, 0.44649391,
              0.10447602, 0.60486919, 0.67805851, 0.81873739, 0.57049219,
              0.12454328, 0.35272302, 0.66538649, 0.78295454, 0.29220317,
              0.17385032, 0.45860844, 0.77591778, 0.49762715, 0.94605552,
              0.15475328, 0.00687506, 0.66421645, 0.21345012, 0.66272213,
              0.67039613, 0.51295995, 0.8369215 , 0.10536933, 0.94023191,
              0.43633083, 0.81756251, 0.66135502, 0.66676866, 0.32359925,
              0.07748296, 0.31431755, 0.4306217 , 0.58315364, 0.95684866,
              0.1930224 , 0.48652895, 0.63876697, 0.903408  , 0.69458148,
              0.90633745, 0.06067379, 0.27814335, 0.4525994 , 0.49002328])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.35453166, 0.93372614, 0.08882187, 0.33241742, 0.78539813,
              0.80989168, 0.249619  , 0.41742451, 0.01153441, 0.56038827,
              0.3078726 , 0.36238838, 0.09838427, 0.89237445, 0.75266312,
              0.20962611, 0.59442158, 0.23600736, 0.5996775 , 0.53037692,
              0.70059202, 0.85688464, 0.66495371, 0.34564506, 0.55709797,
              0.446224  , 0.93912863, 0.35705269, 0.65668168, 0.43677086,
              0.06856471, 0.10285467, 0.35019495, 0.7864045 , 0.76411938,
              0.44177773, 0.17648058, 0.16087304, 0.80672432, 0.19823187,
              0.27031703, 0.13844006, 0.23643592, 0.63427775, 0.07896036,
              0.80479423, 0.707536  , 0.99275475, 0.11651756, 0.36528063,
              0.22957605, 0.09853975, 0.0229994 , 0.42902046, 0.31757359,
              0.91290011, 0.8144017 , 0.15064417, 0.69161058, 0.16346882,
              0.01199126, 0.18633133, 0.48177917, 0.52690437, 0.04363322,
              0.7399036 , 0.45906084, 0.36743721, 0.1933012 , 0.47693389,
              0.77101434, 0.37306727, 0.84581488, 0.04616561, 0.77403913,
              0.81206055, 0.55484166, 0.37215356, 0.13296755, 0.81784148,
              0.66884416, 0.46240919, 0.75007721, 0.29865599, 0.59062279,
              0.20700337, 0.18259204, 0.93177094, 0.42555634, 0.34952681,
              0.11211722, 0.44250034, 0.80001513, 0.84948341, 0.3109362 ,
              0.86286527, 0.34522529, 0.01888876, 0.11787578, 0.35191078])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.59817678, 0.96567635, 0.65917863, 0.44668432, 0.09092938,
              0.56047854, 0.2918323 , 0.64182081, 0.41072271, 0.85193955,
              0.9034513 , 0.03323489, 0.82485095, 0.28868383, 0.38102231,
              0.24830743, 0.12743395, 0.13056897, 0.97896593, 0.4654952 ,
              0.0496203 , 0.90820493, 0.94422529, 0.64509646, 0.14419314,
              0.83659895, 0.69202838, 0.54831642, 0.93503858, 0.63946367,
              0.88169612, 0.75520078, 0.80832429, 0.82954544, 0.72417456,
              0.61577827, 0.89024058, 0.31287393, 0.10990458, 0.70807751,
              0.63797269, 0.4650882 , 0.30537878, 0.88564297, 0.27191926,
              0.35803646, 0.50681527, 0.56186285, 0.43067149, 0.0527143 ,
              0.85569833, 0.71613882, 0.80253446, 0.05093921, 0.97825203,
              0.3879885 , 0.99266788, 0.85047877, 0.23624892, 0.1766052 ,
              0.62245034, 0.06755577, 0.29371433, 0.5206271 , 0.80419572,
              0.66747817, 0.87453711, 0.06090066, 0.21379418, 0.91794507,
              0.27523665, 0.44379896, 0.76947022, 0.96407794, 0.78828876,
              0.48478992, 0.49236367, 0.45325762, 0.19574582, 0.09331713,
              0.09857734, 0.78118171, 0.81346562, 0.81960221, 0.45546455,
              0.80231855, 0.33032535, 0.35240006, 0.8652338 , 0.19291983,
              0.54507579, 0.08354502, 0.22272679, 0.85060206, 0.48348066,
              0.45364139, 0.78867143, 0.88998353, 0.5987105 , 0.10759661])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.19241703, 0.41610908, 0.57659338, 0.0805969 , 0.02022042,
              0.58081664, 0.34118165, 0.02896277, 0.17067109, 0.3103173 ,
              0.6286216 , 0.89359122, 0.57326352, 0.69383629, 0.90040911,
              0.74878011, 0.84232693, 0.92789138, 0.96695068, 0.51554966,
              0.65688224, 0.94152848, 0.52827654, 0.14038449, 0.84626241,
              0.79885544, 0.21577459, 0.03883801, 0.89759126, 0.80746409,
              0.61382636, 0.09689708, 0.10557259, 0.60399446, 0.91739903,
              0.79029803, 0.45585507, 0.60292833, 0.44598044, 0.06687977,
              0.37535465, 0.04130996, 0.40593944, 0.89426262, 0.02163382,
              0.27991083, 0.2567011 , 0.36304959, 0.75340289, 0.07107684,
              0.45508448, 0.29010114, 0.36754203, 0.0465913 , 0.63071802,
              0.76202322, 0.6963579 , 0.27504977, 0.07345387, 0.17362938,
              0.32900264, 0.24992977, 0.18505781, 0.28150984, 0.74823752,
              0.47757315, 0.53545101, 0.96031432, 0.79076668, 0.11201176,
              0.20233884, 0.27557854, 0.97203761, 0.54118472, 0.2999871 ,
              0.69822147, 0.0313527 , 0.48262321, 0.49581324, 0.19684865,
              0.35643187, 0.02488958, 0.69254445, 0.54688361, 0.41541039,
              0.9889333 , 0.52661304, 0.51982687, 0.86467036, 0.68339075,
              0.93746985, 0.50268948, 0.86174339, 0.79331531, 0.00677716,
              0.90756493, 0.36249079, 0.17108554, 0.84066391, 0.3385185 ])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.17543857, 0.8494541 , 0.73255944, 0.91225598, 0.73652889,
              0.18076445, 0.27038204, 0.86361065, 0.56479713, 0.3427249 ,
              0.06473484, 0.44146741, 0.51486147, 0.64876193, 0.10794189,
              0.47672261, 0.89754899, 0.58589418, 0.40986675, 0.59650638,
              0.62960632, 0.98638357, 0.9239745 , 0.20988327, 0.60208312,
              0.43149183, 0.21753363, 0.27798271, 0.43307905, 0.88896497,
              0.56308009, 0.72514228, 0.32996881, 0.21306584, 0.97499799,
              0.82855009, 0.34906547, 0.34967238, 0.4972718 , 0.88647101,
              0.97001009, 0.60830197, 0.49887316, 0.70535419, 0.9588455 ,
              0.57879654, 0.49626547, 0.50778649, 0.92216312, 0.88623172,
              0.83815302, 0.41617823, 0.90194489, 0.86133715, 0.44649391,
              0.10447602, 0.60486919, 0.67805851, 0.81873739, 0.57049219,
              0.12454328, 0.35272302, 0.66538649, 0.78295454, 0.29220317,
              0.17385032, 0.45860844, 0.77591778, 0.49762715, 0.94605552,
              0.15475328, 0.00687506, 0.66421645, 0.21345012, 0.66272213,
              0.67039613, 0.51295995, 0.8369215 , 0.10536933, 0.94023191,
              0.43633083, 0.81756251, 0.66135502, 0.66676866, 0.32359925,
              0.07748296, 0.31431755, 0.4306217 , 0.58315364, 0.95684866,
              0.1930224 , 0.48652895, 0.63876697, 0.903408  , 0.69458148,
              0.90633745, 0.06067379, 0.27814335, 0.4525994 , 0.49002328])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.35453166, 0.93372614, 0.08882187, 0.33241742, 0.78539813,
              0.80989168, 0.249619  , 0.41742451, 0.01153441, 0.56038827,
              0.3078726 , 0.36238838, 0.09838427, 0.89237445, 0.75266312,
              0.20962611, 0.59442158, 0.23600736, 0.5996775 , 0.53037692,
              0.70059202, 0.85688464, 0.66495371, 0.34564506, 0.55709797,
              0.446224  , 0.93912863, 0.35705269, 0.65668168, 0.43677086,
              0.06856471, 0.10285467, 0.35019495, 0.7864045 , 0.76411938,
              0.44177773, 0.17648058, 0.16087304, 0.80672432, 0.19823187,
              0.27031703, 0.13844006, 0.23643592, 0.63427775, 0.07896036,
              0.80479423, 0.707536  , 0.99275475, 0.11651756, 0.36528063,
              0.22957605, 0.09853975, 0.0229994 , 0.42902046, 0.31757359,
              0.91290011, 0.8144017 , 0.15064417, 0.69161058, 0.16346882,
              0.01199126, 0.18633133, 0.48177917, 0.52690437, 0.04363322,
              0.7399036 , 0.45906084, 0.36743721, 0.1933012 , 0.47693389,
              0.77101434, 0.37306727, 0.84581488, 0.04616561, 0.77403913,
              0.81206055, 0.55484166, 0.37215356, 0.13296755, 0.81784148,
              0.66884416, 0.46240919, 0.75007721, 0.29865599, 0.59062279,
              0.20700337, 0.18259204, 0.93177094, 0.42555634, 0.34952681,
              0.11211722, 0.44250034, 0.80001513, 0.84948341, 0.3109362 ,
              0.86286527, 0.34522529, 0.01888876, 0.11787578, 0.35191078])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.59817678, 0.96567635, 0.65917863, 0.44668432, 0.09092938,
              0.56047854, 0.2918323 , 0.64182081, 0.41072271, 0.85193955,
              0.9034513 , 0.03323489, 0.82485095, 0.28868383, 0.38102231,
              0.24830743, 0.12743395, 0.13056897, 0.97896593, 0.4654952 ,
              0.0496203 , 0.90820493, 0.94422529, 0.64509646, 0.14419314,
              0.83659895, 0.69202838, 0.54831642, 0.93503858, 0.63946367,
              0.88169612, 0.75520078, 0.80832429, 0.82954544, 0.72417456,
              0.61577827, 0.89024058, 0.31287393, 0.10990458, 0.70807751,
              0.63797269, 0.4650882 , 0.30537878, 0.88564297, 0.27191926,
              0.35803646, 0.50681527, 0.56186285, 0.43067149, 0.0527143 ,
              0.85569833, 0.71613882, 0.80253446, 0.05093921, 0.97825203,
              0.3879885 , 0.99266788, 0.85047877, 0.23624892, 0.1766052 ,
              0.62245034, 0.06755577, 0.29371433, 0.5206271 , 0.80419572,
              0.66747817, 0.87453711, 0.06090066, 0.21379418, 0.91794507,
              0.27523665, 0.44379896, 0.76947022, 0.96407794, 0.78828876,
              0.48478992, 0.49236367, 0.45325762, 0.19574582, 0.09331713,
              0.09857734, 0.78118171, 0.81346562, 0.81960221, 0.45546455,
              0.80231855, 0.33032535, 0.35240006, 0.8652338 , 0.19291983,
              0.54507579, 0.08354502, 0.22272679, 0.85060206, 0.48348066,
              0.45364139, 0.78867143, 0.88998353, 0.5987105 , 0.10759661])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.6891294 , 0.12215139, 0.81700279, 0.28271605, 0.76564493,
              0.50170136, 0.33986047, 0.94185701, 0.98065048, 0.35365937,
              0.41407724, 0.90065746, 0.12358747, 0.38998651, 0.93114039,
              0.46821003, 0.28797685, 0.03960304, 0.22690283, 0.09004185,
              0.35768367, 0.09206813, 0.46630278, 0.63514842, 0.55998409,
              0.08866598, 0.36506688, 0.44750562, 0.92222457, 0.00371786,
              0.34367223, 0.81723903, 0.7565176 , 0.76150887, 0.42027254,
              0.92707258, 0.64986936, 0.75917851, 0.82353299, 0.75085991,
              0.493164  , 0.12409044, 0.60854724, 0.18024156, 0.9293236 ,
              0.03243013, 0.51785007, 0.19316647, 0.30715435, 0.07190719,
              0.27263507, 0.59616702, 0.85132993, 0.61029719, 0.98095671,
              0.57354368, 0.36118884, 0.50696402, 0.26596828, 0.67407437,
              0.34382906, 0.87994476, 0.91728166, 0.84007248, 0.82870371,
              0.412422  , 0.29592713, 0.99960736, 0.59586222, 0.28984574,
              0.02168551, 0.75649749, 0.16614347, 0.39877672, 0.12282769,
              0.24753801, 0.99643946, 0.65471042, 0.81124225, 0.2619031 ,
              0.05747792, 0.713733  , 0.54463538, 0.66437433, 0.10243767,
              0.92477209, 0.49423394, 0.46930981, 0.68687322, 0.58483954,
              0.69043287, 0.41767222, 0.75733699, 0.28563333, 0.46669635,
              0.69202799, 0.73948852, 0.45703996, 0.49951577, 0.49182401])}]]


