
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='8b2e9b3c-e943-4c23-99fe-f6217c7a6d30'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='29febec4-85ae-47fe-892a-f5a816b1b312'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.541762594449954],
     [0.673341879582175],
     [0.779898223189122],
     [0.187617223621602],
     [0.992557667478403],
     [0.539152710389554],
     [0.859079006067718],
     [0.524880820829855],
     [0.226925232805428],
     [0.835978618905055],
     [0.803455418856241],
     [0.023353144114543],
     [0.869168147296219],
     [0.846462418935538],
     [0.784786627316863],
     [0.00865485635809893],
     [0.376388942571006],
     [0.148952928334533],
     [0.64622487407116],
     [0.0494315185410692],
     [0.255102579415213],
     [0.0907067358747549],
     [0.213109933258745],
     [0.147390489617317],
     [0.177154539655732],
     [0.0820264120416179],
     [0.181641373824028],
     [0.780586506129131],
     [0.61885726445615],
     [0.44723639201037],
     [0.962938965594238],
     [0.308626851941828],
     [0.566162248900493],
     [0.00148268769233006],
     [0.492585690019636],
     [0.924834642531057],
     [0.0326756796422225],
     [0.266514424277094],
     [0.050920900318539],
     [0.314360871445396],
     [0.579903278223339],
     [0.798623447623802],
     [0.136323027375994],
     [0.602800529406833],
     [0.846320621957034],
     [0.578689793927418],
     [0.153931875528842],
     [0.204663990832478],
     [0.905612894347257],
     [0.0642974517988119],
     [0.614076481303659],
     [0.677129966272276],
     [0.581805579370457],
     [0.305198319291487],
     [0.244063828390927],
     [0.738813237439374],
     [0.391276201266995],
     [0.304800519240715],
     [0.39087654853651],
     [0.58177716968315],
     [0.515529903376232],
     [0.234998394268113],
     [0.276754955141544],
     [0.767583133042322],
     [0.5319510316963],
     [0.491820285593073],
     [0.0347592647303228],
     [0.49020777723377],
     [0.306842397884577],
     [0.809891823472173],
     [0.633748211425203],
     [0.0280840885663627],
     [0.899450005374219],
     [0.1023260976089],
     [0.7298486335099],
     [0.616726873161379],
     [0.557041312385575],
     [0.590052218730078],
     [0.518673154291107],
     [0.42293892712966],
     [0.893557095189032],
     [0.169800761027246],
     [0.649981723544855],
     [0.892509040636832],
     [0.55270558797642],
     [0.560415896018284],
     [0.43643888174734],
     [0.170869228852359],
     [0.16608238592546],
     [0.613917902679796],
     [0.215612213872157],
     [0.786250337410073],
     [0.302286385025337],
     [0.52195214873654],
     [0.198741644387419],
     [0.942847455669317],
     [0.790904844245537],
     [0.647808174420897],
     [0.538830835662703],
     [0.763741043589278]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.74055987])],
     [array([0.30868385])],
     [array([0.37983364])],
     [array([0.40255295])],
     [array([0.42013734])],
     [array([0.86664012])],
     [array([0.46605994])],
     [array([0.52518218])],
     [array([0.54359976])],
     [array([0.35523855])],
     [array([0.63727629])],
     [array([0.07724403])],
     [array([0.53905261])],
     [array([0.70809028])],
     [array([0.62551168])],
     [array([0.12752352])],
     [array([0.72212675])],
     [array([0.77000486])],
     [array([0.85273882])],
     [array([0.15651705])],
     [array([0.12565476])],
     [array([0.15770985])],
     [array([0.83834639])],
     [array([0.24424361])],
     [array([0.6057172])],
     [array([0.84308914])],
     [array([0.51781084])],
     [array([0.19847465])],
     [array([0.31807095])],
     [array([0.51086236])],
     [array([0.65883429])],
     [array([0.15243503])],
     [array([0.09640095])],
     [array([0.41626916])],
     [array([0.60836945])],
     [array([0.66240313])],
     [array([0.89248992])],
     [array([0.1889588])],
     [array([0.51954309])],
     [array([0.12637962])],
     [array([0.88361977])],
     [array([0.39760371])],
     [array([0.8371109])],
     [array([0.29385878])],
     [array([0.72765715])],
     [array([0.15596997])],
     [array([0.02600285])],
     [array([0.38185904])],
     [array([0.51271214])],
     [array([0.35165412])],
     [array([0.6230585])],
     [array([0.9645755])],
     [array([0.23558713])],
     [array([0.55447196])],
     [array([0.32547865])],
     [array([0.66857479])],
     [array([0.15468938])],
     [array([0.27158519])],
     [array([0.98936894])],
     [array([0.31756112])],
     [array([0.78565069])],
     [array([0.84550557])],
     [array([0.53825359])],
     [array([0.24700082])],
     [array([0.23749251])],
     [array([0.06402594])],
     [array([0.73323504])],
     [array([0.40564343])],
     [array([0.07781273])],
     [array([0.59071433])],
     [array([0.98057565])],
     [array([0.35753009])],
     [array([0.68988188])],
     [array([0.9142154])],
     [array([0.6091106])],
     [array([0.0851173])],
     [array([0.31264549])],
     [array([0.52687574])],
     [array([0.11615449])],
     [array([0.47477962])],
     [array([0.6567335])],
     [array([0.14055182])],
     [array([0.5075023])],
     [array([0.1623455])],
     [array([0.74628514])],
     [array([0.24406029])],
     [array([0.25128978])],
     [array([0.51960865])],
     [array([0.1269657])],
     [array([0.56330489])],
     [array([0.06398625])],
     [array([0.15312942])],
     [array([0.44241442])],
     [array([0.68783169])],
     [array([0.48915232])],
     [array([0.7754011])],
     [array([0.8320206])],
     [array([0.1733462])],
     [array([0.96119817])],
     [array([0.02691563])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.74055987, 0.30868385, 0.37983364, 0.40255295, 0.42013734,
           0.86664012, 0.46605994, 0.52518218, 0.54359976, 0.35523855,
           0.63727629, 0.07724403, 0.53905261, 0.70809028, 0.62551168,
           0.12752352, 0.72212675, 0.77000486, 0.85273882, 0.15651705,
           0.12565476, 0.15770985, 0.83834639, 0.24424361, 0.6057172 ,
           0.84308914, 0.51781084, 0.19847465, 0.31807095, 0.51086236,
           0.65883429, 0.15243503, 0.09640095, 0.41626916, 0.60836945,
           0.66240313, 0.89248992, 0.1889588 , 0.51954309, 0.12637962,
           0.88361977, 0.39760371, 0.8371109 , 0.29385878, 0.72765715,
           0.15596997, 0.02600285, 0.38185904, 0.51271214, 0.35165412,
           0.6230585 , 0.9645755 , 0.23558713, 0.55447196, 0.32547865,
           0.66857479, 0.15468938, 0.27158519, 0.98936894, 0.31756112,
           0.78565069, 0.84550557, 0.53825359, 0.24700082, 0.23749251,
           0.06402594, 0.73323504, 0.40564343, 0.07781273, 0.59071433,
           0.98057565, 0.35753009, 0.68988188, 0.9142154 , 0.6091106 ,
           0.0851173 , 0.31264549, 0.52687574, 0.11615449, 0.47477962,
           0.6567335 , 0.14055182, 0.5075023 , 0.1623455 , 0.74628514,
           0.24406029, 0.25128978, 0.51960865, 0.1269657 , 0.56330489,
           0.06398625, 0.15312942, 0.44241442, 0.68783169, 0.48915232,
           0.7754011 , 0.8320206 , 0.1733462 , 0.96119817, 0.02691563])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.54176259, 0.67334188, 0.77989822, 0.18761722, 0.99255767,
              0.53915271, 0.85907901, 0.52488082, 0.22692523, 0.83597862,
              0.80345542, 0.02335314, 0.86916815, 0.84646242, 0.78478663,
              0.00865486, 0.37638894, 0.14895293, 0.64622487, 0.04943152,
              0.25510258, 0.09070674, 0.21310993, 0.14739049, 0.17715454,
              0.08202641, 0.18164137, 0.78058651, 0.61885726, 0.44723639,
              0.96293897, 0.30862685, 0.56616225, 0.00148269, 0.49258569,
              0.92483464, 0.03267568, 0.26651442, 0.0509209 , 0.31436087,
              0.57990328, 0.79862345, 0.13632303, 0.60280053, 0.84632062,
              0.57868979, 0.15393188, 0.20466399, 0.90561289, 0.06429745,
              0.61407648, 0.67712997, 0.58180558, 0.30519832, 0.24406383,
              0.73881324, 0.3912762 , 0.30480052, 0.39087655, 0.58177717,
              0.5155299 , 0.23499839, 0.27675496, 0.76758313, 0.53195103,
              0.49182029, 0.03475926, 0.49020778, 0.3068424 , 0.80989182,
              0.63374821, 0.02808409, 0.89945001, 0.1023261 , 0.72984863,
              0.61672687, 0.55704131, 0.59005222, 0.51867315, 0.42293893,
              0.8935571 , 0.16980076, 0.64998172, 0.89250904, 0.55270559,
              0.5604159 , 0.43643888, 0.17086923, 0.16608239, 0.6139179 ,
              0.21561221, 0.78625034, 0.30228639, 0.52195215, 0.19874164,
              0.94284746, 0.79090484, 0.64780817, 0.53883084, 0.76374104])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.82025694, 0.2472447 , 0.63245747, 0.36541951, 0.97716711,
              0.17951533, 0.53937742, 0.8278789 , 0.42065133, 0.93548512,
              0.35471447, 0.68056406, 0.65052308, 0.70424586, 0.54289496,
              0.62713743, 0.47902694, 0.88083154, 0.16757095, 0.24689665,
              0.62779755, 0.28709839, 0.58969315, 0.25820095, 0.15090736,
              0.79955456, 0.66341564, 0.33627365, 0.58749709, 0.8456487 ,
              0.35991332, 0.80756962, 0.89062249, 0.35238016, 0.5595301 ,
              0.27465844, 0.6858753 , 0.12502538, 0.10166401, 0.93750521,
              0.33477113, 0.04274569, 0.72231705, 0.33557808, 0.08347318,
              0.83254857, 0.98815346, 0.71049786, 0.24038269, 0.66801204,
              0.05227586, 0.31886865, 0.59851933, 0.68919158, 0.58546214,
              0.0143665 , 0.69630604, 0.47171381, 0.76538055, 0.45228877,
              0.80801501, 0.03270248, 0.95496088, 0.06541112, 0.79868013,
              0.77932288, 0.54568559, 0.79303014, 0.95415536, 0.74507886,
              0.76463598, 0.57464066, 0.54272958, 0.58006757, 0.61877246,
              0.56910394, 0.97062117, 0.97102435, 0.78890355, 0.89133748,
              0.06421447, 0.26961664, 0.60013285, 0.35425195, 0.36411925,
              0.38556825, 0.13831608, 0.64815601, 0.19749282, 0.64251824,
              0.40291558, 0.90959707, 0.72601233, 0.13637178, 0.87085295,
              0.48714905, 0.54517836, 0.84241644, 0.34984856, 0.52534762])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.73518725, 0.89319976, 0.25298614, 0.62483708, 0.28108749,
              0.28400121, 0.6880201 , 0.99875499, 0.62898274, 0.30464224,
              0.37327275, 0.90357385, 0.10433507, 0.11844423, 0.10566585,
              0.98887403, 0.14532812, 0.50379281, 0.89922048, 0.25653033,
              0.37513271, 0.58540484, 0.48560059, 0.01261744, 0.37552315,
              0.16336746, 0.51943931, 0.66315911, 0.53730262, 0.74648174,
              0.80984028, 0.67800018, 0.05877197, 0.51381635, 0.8502814 ,
              0.33192569, 0.31353618, 0.39326014, 0.85651259, 0.76721971,
              0.98645284, 0.53847331, 0.06082621, 0.14556777, 0.95343714,
              0.88959083, 0.7317234 , 0.64844597, 0.41840896, 0.5251028 ,
              0.5143853 , 0.71586016, 0.52644171, 0.88865825, 0.16323749,
              0.17529048, 0.40579618, 0.25615323, 0.13026616, 0.1633929 ,
              0.03817177, 0.11337287, 0.47696794, 0.98613554, 0.78392582,
              0.87751448, 0.48152493, 0.65448069, 0.96261858, 0.65558447,
              0.46322735, 0.55912307, 0.23060391, 0.86971229, 0.61196658,
              0.01442808, 0.23747881, 0.04014004, 0.09593244, 0.31026956,
              0.57642399, 0.39141827, 0.77381316, 0.69487416, 0.07408442,
              0.57374376, 0.52460942, 0.97591581, 0.85359015, 0.37800924,
              0.11032153, 0.8078216 , 0.55256263, 0.52182675, 0.40822516,
              0.00195589, 0.12269855, 0.97076755, 0.26765079, 0.08247526])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.48792789, 0.62935528, 0.69838418, 0.61604395, 0.65538734,
              0.42306346, 0.2904831 , 0.48094675, 0.96763889, 0.17525872,
              0.87033165, 0.78685027, 0.80754279, 0.97081564, 0.97432177,
              0.78113787, 0.72767939, 0.58038609, 0.72548211, 0.49589092,
              0.33640302, 0.06158739, 0.77149879, 0.662641  , 0.49198524,
              0.84646779, 0.1482077 , 0.13569669, 0.100704  , 0.55373794,
              0.04073718, 0.74127729, 0.68786011, 0.85658612, 0.09592812,
              0.41105661, 0.75421494, 0.00742995, 0.99366479, 0.33942713,
              0.24188179, 0.18892547, 0.94395815, 0.18056147, 0.41769417,
              0.3901057 , 0.45186178, 0.11319706, 0.26329854, 0.79374073,
              0.14047675, 0.04583043, 0.7877998 , 0.1447073 , 0.19678229,
              0.58637471, 0.71542139, 0.09812636, 0.45482799, 0.19047569,
              0.61696196, 0.35388059, 0.58377424, 0.29095279, 0.67905379,
              0.81353882, 0.85798638, 0.61322694, 0.75175391, 0.74192302,
              0.91100738, 0.47072825, 0.7998893 , 0.92363122, 0.76050865,
              0.41151152, 0.36938298, 0.64344418, 0.13112975, 0.10835293,
              0.01158658, 0.37392507, 0.723995  , 0.15673224, 0.58535184,
              0.3373138 , 0.06237284, 0.78133646, 0.19305011, 0.29925555,
              0.26186181, 0.40361717, 0.30748313, 0.57076243, 0.92407652,
              0.08282125, 0.94436033, 0.46186187, 0.98542039, 0.25825959])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.54176259, 0.67334188, 0.77989822, 0.18761722, 0.99255767,
              0.53915271, 0.85907901, 0.52488082, 0.22692523, 0.83597862,
              0.80345542, 0.02335314, 0.86916815, 0.84646242, 0.78478663,
              0.00865486, 0.37638894, 0.14895293, 0.64622487, 0.04943152,
              0.25510258, 0.09070674, 0.21310993, 0.14739049, 0.17715454,
              0.08202641, 0.18164137, 0.78058651, 0.61885726, 0.44723639,
              0.96293897, 0.30862685, 0.56616225, 0.00148269, 0.49258569,
              0.92483464, 0.03267568, 0.26651442, 0.0509209 , 0.31436087,
              0.57990328, 0.79862345, 0.13632303, 0.60280053, 0.84632062,
              0.57868979, 0.15393188, 0.20466399, 0.90561289, 0.06429745,
              0.61407648, 0.67712997, 0.58180558, 0.30519832, 0.24406383,
              0.73881324, 0.3912762 , 0.30480052, 0.39087655, 0.58177717,
              0.5155299 , 0.23499839, 0.27675496, 0.76758313, 0.53195103,
              0.49182029, 0.03475926, 0.49020778, 0.3068424 , 0.80989182,
              0.63374821, 0.02808409, 0.89945001, 0.1023261 , 0.72984863,
              0.61672687, 0.55704131, 0.59005222, 0.51867315, 0.42293893,
              0.8935571 , 0.16980076, 0.64998172, 0.89250904, 0.55270559,
              0.5604159 , 0.43643888, 0.17086923, 0.16608239, 0.6139179 ,
              0.21561221, 0.78625034, 0.30228639, 0.52195215, 0.19874164,
              0.94284746, 0.79090484, 0.64780817, 0.53883084, 0.76374104])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.82025694, 0.2472447 , 0.63245747, 0.36541951, 0.97716711,
              0.17951533, 0.53937742, 0.8278789 , 0.42065133, 0.93548512,
              0.35471447, 0.68056406, 0.65052308, 0.70424586, 0.54289496,
              0.62713743, 0.47902694, 0.88083154, 0.16757095, 0.24689665,
              0.62779755, 0.28709839, 0.58969315, 0.25820095, 0.15090736,
              0.79955456, 0.66341564, 0.33627365, 0.58749709, 0.8456487 ,
              0.35991332, 0.80756962, 0.89062249, 0.35238016, 0.5595301 ,
              0.27465844, 0.6858753 , 0.12502538, 0.10166401, 0.93750521,
              0.33477113, 0.04274569, 0.72231705, 0.33557808, 0.08347318,
              0.83254857, 0.98815346, 0.71049786, 0.24038269, 0.66801204,
              0.05227586, 0.31886865, 0.59851933, 0.68919158, 0.58546214,
              0.0143665 , 0.69630604, 0.47171381, 0.76538055, 0.45228877,
              0.80801501, 0.03270248, 0.95496088, 0.06541112, 0.79868013,
              0.77932288, 0.54568559, 0.79303014, 0.95415536, 0.74507886,
              0.76463598, 0.57464066, 0.54272958, 0.58006757, 0.61877246,
              0.56910394, 0.97062117, 0.97102435, 0.78890355, 0.89133748,
              0.06421447, 0.26961664, 0.60013285, 0.35425195, 0.36411925,
              0.38556825, 0.13831608, 0.64815601, 0.19749282, 0.64251824,
              0.40291558, 0.90959707, 0.72601233, 0.13637178, 0.87085295,
              0.48714905, 0.54517836, 0.84241644, 0.34984856, 0.52534762])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.73518725, 0.89319976, 0.25298614, 0.62483708, 0.28108749,
              0.28400121, 0.6880201 , 0.99875499, 0.62898274, 0.30464224,
              0.37327275, 0.90357385, 0.10433507, 0.11844423, 0.10566585,
              0.98887403, 0.14532812, 0.50379281, 0.89922048, 0.25653033,
              0.37513271, 0.58540484, 0.48560059, 0.01261744, 0.37552315,
              0.16336746, 0.51943931, 0.66315911, 0.53730262, 0.74648174,
              0.80984028, 0.67800018, 0.05877197, 0.51381635, 0.8502814 ,
              0.33192569, 0.31353618, 0.39326014, 0.85651259, 0.76721971,
              0.98645284, 0.53847331, 0.06082621, 0.14556777, 0.95343714,
              0.88959083, 0.7317234 , 0.64844597, 0.41840896, 0.5251028 ,
              0.5143853 , 0.71586016, 0.52644171, 0.88865825, 0.16323749,
              0.17529048, 0.40579618, 0.25615323, 0.13026616, 0.1633929 ,
              0.03817177, 0.11337287, 0.47696794, 0.98613554, 0.78392582,
              0.87751448, 0.48152493, 0.65448069, 0.96261858, 0.65558447,
              0.46322735, 0.55912307, 0.23060391, 0.86971229, 0.61196658,
              0.01442808, 0.23747881, 0.04014004, 0.09593244, 0.31026956,
              0.57642399, 0.39141827, 0.77381316, 0.69487416, 0.07408442,
              0.57374376, 0.52460942, 0.97591581, 0.85359015, 0.37800924,
              0.11032153, 0.8078216 , 0.55256263, 0.52182675, 0.40822516,
              0.00195589, 0.12269855, 0.97076755, 0.26765079, 0.08247526])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.53528285, 0.14983007, 0.33394436, 0.00282182, 0.9968199 ,
              0.09546235, 0.88641802, 0.94521049, 0.15262022, 0.18056689,
              0.61760051, 0.63118171, 0.96019403, 0.08951523, 0.01051616,
              0.91098019, 0.20476234, 0.17108455, 0.18087901, 0.69123996,
              0.80784913, 0.03901015, 0.117665  , 0.23121837, 0.40328171,
              0.42236355, 0.78596333, 0.70189255, 0.72797959, 0.74497497,
              0.07759451, 0.17302184, 0.24292932, 0.25285694, 0.5748479 ,
              0.75820692, 0.84726382, 0.15988574, 0.98283315, 0.93586133,
              0.01165658, 0.15226545, 0.70110788, 0.40692962, 0.25508421,
              0.49070942, 0.1123036 , 0.96280026, 0.82382722, 0.46849884,
              0.23121512, 0.04930071, 0.26735047, 0.10031947, 0.68453101,
              0.34306902, 0.05781149, 0.94057717, 0.65010745, 0.5930786 ,
              0.31483752, 0.50318228, 0.27301569, 0.20020146, 0.04898945,
              0.06758394, 0.96274136, 0.83468919, 0.91225962, 0.45442751,
              0.75656977, 0.15208349, 0.19867576, 0.55278225, 0.24501166,
              0.11927647, 0.88899192, 0.66330928, 0.89272462, 0.83115303,
              0.37902617, 0.13088517, 0.35639361, 0.13069877, 0.77387135,
              0.05093761, 0.00867617, 0.08126613, 0.04678574, 0.36170629,
              0.11174376, 0.99056918, 0.77420844, 0.2817704 , 0.92135366,
              0.7439216 , 0.11955454, 0.24862451, 0.79474608, 0.97326211])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.74055987, 0.30868385, 0.37983364, 0.40255295, 0.42013734,
              0.86664012, 0.46605994, 0.52518218, 0.54359976, 0.35523855,
              0.63727629, 0.07724403, 0.53905261, 0.70809028, 0.62551168,
              0.12752352, 0.72212675, 0.77000486, 0.85273882, 0.15651705,
              0.12565476, 0.15770985, 0.83834639, 0.24424361, 0.6057172 ,
              0.84308914, 0.51781084, 0.19847465, 0.31807095, 0.51086236,
              0.65883429, 0.15243503, 0.09640095, 0.41626916, 0.60836945,
              0.66240313, 0.89248992, 0.1889588 , 0.51954309, 0.12637962,
              0.88361977, 0.39760371, 0.8371109 , 0.29385878, 0.72765715,
              0.15596997, 0.02600285, 0.38185904, 0.51271214, 0.35165412,
              0.6230585 , 0.9645755 , 0.23558713, 0.55447196, 0.32547865,
              0.66857479, 0.15468938, 0.27158519, 0.98936894, 0.31756112,
              0.78565069, 0.84550557, 0.53825359, 0.24700082, 0.23749251,
              0.06402594, 0.73323504, 0.40564343, 0.07781273, 0.59071433,
              0.98057565, 0.35753009, 0.68988188, 0.9142154 , 0.6091106 ,
              0.0851173 , 0.31264549, 0.52687574, 0.11615449, 0.47477962,
              0.6567335 , 0.14055182, 0.5075023 , 0.1623455 , 0.74628514,
              0.24406029, 0.25128978, 0.51960865, 0.1269657 , 0.56330489,
              0.06398625, 0.15312942, 0.44241442, 0.68783169, 0.48915232,
              0.7754011 , 0.8320206 , 0.1733462 , 0.96119817, 0.02691563])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([3.49396107e-01, 5.97441608e-01, 8.35257851e-01, 9.16920173e-01,
              9.23564977e-01, 3.15579018e-01, 5.20558889e-01, 4.17692682e-01,
              6.49406248e-01, 8.08585113e-01, 7.80893827e-01, 7.58584740e-01,
              3.82377498e-03, 1.18455515e-01, 6.50455746e-01, 1.62497533e-01,
              1.57252489e-01, 8.05316764e-01, 7.68764614e-01, 4.23158022e-01,
              7.58063373e-01, 7.73666579e-01, 3.68048631e-01, 6.39179235e-01,
              8.35917957e-01, 5.66652189e-01, 1.93346382e-02, 2.72054162e-02,
              2.26274260e-04, 9.74469841e-01, 9.77367968e-01, 2.72902467e-01,
              6.85845643e-02, 6.49271062e-02, 3.06228911e-01, 3.05646499e-01,
              5.55142218e-01, 6.54928341e-01, 2.10544131e-01, 5.71325915e-01,
              8.72370474e-01, 9.55011859e-01, 6.85003020e-01, 2.61888253e-01,
              5.43507426e-02, 3.88144788e-01, 8.30423799e-01, 6.05557360e-01,
              6.08697726e-01, 2.38493332e-01, 3.18696019e-01, 2.32336231e-01,
              8.54442591e-01, 4.57586757e-02, 7.10971701e-01, 2.51364543e-01,
              2.95969379e-01, 8.75396575e-01, 9.93894976e-02, 5.80259057e-01,
              2.07977572e-01, 1.56287094e-01, 9.27994792e-01, 5.12907841e-01,
              8.76262485e-01, 2.99545793e-01, 5.28749846e-01, 1.65797909e-01,
              4.79935320e-01, 7.53488728e-01, 5.23026247e-01, 1.20466380e-02,
              7.76571203e-02, 1.41907604e-01, 5.07112299e-01, 9.82004361e-01,
              9.93005717e-01, 8.28788313e-01, 5.95067917e-03, 6.30661845e-01,
              6.12782166e-01, 3.51397059e-01, 2.30385315e-01, 3.17394153e-01,
              2.09542344e-03, 8.49080336e-01, 1.05036774e-01, 7.41093716e-01,
              4.06628935e-01, 1.02884862e-01, 1.85010544e-01, 7.81318717e-02,
              3.69461823e-01, 6.64536033e-01, 8.45803184e-01, 7.12333502e-01,
              7.62207293e-01, 6.62202985e-01, 9.83095846e-01, 9.71703054e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.09461226, 0.57230613, 0.54921947, 0.52376255, 0.99161885,
              0.06606204, 0.19964188, 0.53688332, 0.06567866, 0.28600407,
              0.7197658 , 0.65161333, 0.15336039, 0.76931087, 0.68711014,
              0.58610689, 0.71345043, 0.01720077, 0.78231408, 0.27105909,
              0.17574098, 0.89254918, 0.49161121, 0.72609791, 0.10393613,
              0.15062352, 0.90690485, 0.39809604, 0.52530301, 0.82469905,
              0.39024539, 0.91457101, 0.10315834, 0.47155299, 0.10243599,
              0.00523447, 0.68799534, 0.16879912, 0.50529835, 0.18532136,
              0.92566869, 0.4786584 , 0.24359814, 0.65738357, 0.16514068,
              0.14275597, 0.89439625, 0.96172318, 0.20545801, 0.32081636,
              0.1991785 , 0.8549677 , 0.64614945, 0.75732996, 0.59271829,
              0.0531682 , 0.3254974 , 0.80682969, 0.94198848, 0.90246296,
              0.75637751, 0.53463474, 0.2909795 , 0.53613271, 0.31125866,
              0.58461244, 0.21718397, 0.16158694, 0.69102678, 0.71061123,
              0.80316448, 0.05111847, 0.61777229, 0.39135446, 0.20736918,
              0.89807781, 0.48032059, 0.74329052, 0.86132497, 0.74078505,
              0.68140094, 0.33050801, 0.36991739, 0.84357562, 0.18942774,
              0.18217572, 0.33651579, 0.62899998, 0.19959747, 0.99717882,
              0.04274368, 0.30718759, 0.40042254, 0.29545   , 0.51232783,
              0.93078101, 0.52076517, 0.15394856, 0.37900414, 0.43700565])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.83471531, 0.52783196, 0.5054113 , 0.0344704 , 0.60672935,
              0.02556508, 0.11123739, 0.9581751 , 0.42281125, 0.81342729,
              0.46693796, 0.08909207, 0.52484214, 0.75601244, 0.12783157,
              0.4159939 , 0.99697524, 0.1305868 , 0.91021051, 0.53971295,
              0.69835058, 0.4698715 , 0.20592055, 0.93917272, 0.04820632,
              0.86707916, 0.54237656, 0.80317997, 0.11732947, 0.59138741,
              0.93891277, 0.21246403, 0.03437126, 0.82475108, 0.98637148,
              0.24947735, 0.73084546, 0.6284457 , 0.16484693, 0.05657271,
              0.90270511, 0.62526679, 0.0361986 , 0.97854078, 0.33289386,
              0.10426606, 0.05428362, 0.49976773, 0.91227999, 0.4996314 ,
              0.64395731, 0.34756562, 0.50769954, 0.50246327, 0.16869854,
              0.38476965, 0.00907814, 0.0959328 , 0.28776703, 0.45002507,
              0.15806438, 0.95446947, 0.54107926, 0.45819254, 0.66777498,
              0.01685188, 0.03177855, 0.44985199, 0.35039418, 0.3894932 ,
              0.84150503, 0.40201795, 0.03267188, 0.75593714, 0.92024419,
              0.58976386, 0.17529656, 0.24294724, 0.75147641, 0.94437499,
              0.75861486, 0.72932533, 0.30333103, 0.71243017, 0.98819834,
              0.63556795, 0.50085428, 0.1049718 , 0.11950583, 0.12649227,
              0.6947388 , 0.16111895, 0.18577954, 0.13244184, 0.84000556,
              0.07274858, 0.65231877, 0.36566222, 0.92825933, 0.03948203])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.74055987, 0.30868385, 0.37983364, 0.40255295, 0.42013734,
              0.86664012, 0.46605994, 0.52518218, 0.54359976, 0.35523855,
              0.63727629, 0.07724403, 0.53905261, 0.70809028, 0.62551168,
              0.12752352, 0.72212675, 0.77000486, 0.85273882, 0.15651705,
              0.12565476, 0.15770985, 0.83834639, 0.24424361, 0.6057172 ,
              0.84308914, 0.51781084, 0.19847465, 0.31807095, 0.51086236,
              0.65883429, 0.15243503, 0.09640095, 0.41626916, 0.60836945,
              0.66240313, 0.89248992, 0.1889588 , 0.51954309, 0.12637962,
              0.88361977, 0.39760371, 0.8371109 , 0.29385878, 0.72765715,
              0.15596997, 0.02600285, 0.38185904, 0.51271214, 0.35165412,
              0.6230585 , 0.9645755 , 0.23558713, 0.55447196, 0.32547865,
              0.66857479, 0.15468938, 0.27158519, 0.98936894, 0.31756112,
              0.78565069, 0.84550557, 0.53825359, 0.24700082, 0.23749251,
              0.06402594, 0.73323504, 0.40564343, 0.07781273, 0.59071433,
              0.98057565, 0.35753009, 0.68988188, 0.9142154 , 0.6091106 ,
              0.0851173 , 0.31264549, 0.52687574, 0.11615449, 0.47477962,
              0.6567335 , 0.14055182, 0.5075023 , 0.1623455 , 0.74628514,
              0.24406029, 0.25128978, 0.51960865, 0.1269657 , 0.56330489,
              0.06398625, 0.15312942, 0.44241442, 0.68783169, 0.48915232,
              0.7754011 , 0.8320206 , 0.1733462 , 0.96119817, 0.02691563])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([3.49396107e-01, 5.97441608e-01, 8.35257851e-01, 9.16920173e-01,
              9.23564977e-01, 3.15579018e-01, 5.20558889e-01, 4.17692682e-01,
              6.49406248e-01, 8.08585113e-01, 7.80893827e-01, 7.58584740e-01,
              3.82377498e-03, 1.18455515e-01, 6.50455746e-01, 1.62497533e-01,
              1.57252489e-01, 8.05316764e-01, 7.68764614e-01, 4.23158022e-01,
              7.58063373e-01, 7.73666579e-01, 3.68048631e-01, 6.39179235e-01,
              8.35917957e-01, 5.66652189e-01, 1.93346382e-02, 2.72054162e-02,
              2.26274260e-04, 9.74469841e-01, 9.77367968e-01, 2.72902467e-01,
              6.85845643e-02, 6.49271062e-02, 3.06228911e-01, 3.05646499e-01,
              5.55142218e-01, 6.54928341e-01, 2.10544131e-01, 5.71325915e-01,
              8.72370474e-01, 9.55011859e-01, 6.85003020e-01, 2.61888253e-01,
              5.43507426e-02, 3.88144788e-01, 8.30423799e-01, 6.05557360e-01,
              6.08697726e-01, 2.38493332e-01, 3.18696019e-01, 2.32336231e-01,
              8.54442591e-01, 4.57586757e-02, 7.10971701e-01, 2.51364543e-01,
              2.95969379e-01, 8.75396575e-01, 9.93894976e-02, 5.80259057e-01,
              2.07977572e-01, 1.56287094e-01, 9.27994792e-01, 5.12907841e-01,
              8.76262485e-01, 2.99545793e-01, 5.28749846e-01, 1.65797909e-01,
              4.79935320e-01, 7.53488728e-01, 5.23026247e-01, 1.20466380e-02,
              7.76571203e-02, 1.41907604e-01, 5.07112299e-01, 9.82004361e-01,
              9.93005717e-01, 8.28788313e-01, 5.95067917e-03, 6.30661845e-01,
              6.12782166e-01, 3.51397059e-01, 2.30385315e-01, 3.17394153e-01,
              2.09542344e-03, 8.49080336e-01, 1.05036774e-01, 7.41093716e-01,
              4.06628935e-01, 1.02884862e-01, 1.85010544e-01, 7.81318717e-02,
              3.69461823e-01, 6.64536033e-01, 8.45803184e-01, 7.12333502e-01,
              7.62207293e-01, 6.62202985e-01, 9.83095846e-01, 9.71703054e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.09461226, 0.57230613, 0.54921947, 0.52376255, 0.99161885,
              0.06606204, 0.19964188, 0.53688332, 0.06567866, 0.28600407,
              0.7197658 , 0.65161333, 0.15336039, 0.76931087, 0.68711014,
              0.58610689, 0.71345043, 0.01720077, 0.78231408, 0.27105909,
              0.17574098, 0.89254918, 0.49161121, 0.72609791, 0.10393613,
              0.15062352, 0.90690485, 0.39809604, 0.52530301, 0.82469905,
              0.39024539, 0.91457101, 0.10315834, 0.47155299, 0.10243599,
              0.00523447, 0.68799534, 0.16879912, 0.50529835, 0.18532136,
              0.92566869, 0.4786584 , 0.24359814, 0.65738357, 0.16514068,
              0.14275597, 0.89439625, 0.96172318, 0.20545801, 0.32081636,
              0.1991785 , 0.8549677 , 0.64614945, 0.75732996, 0.59271829,
              0.0531682 , 0.3254974 , 0.80682969, 0.94198848, 0.90246296,
              0.75637751, 0.53463474, 0.2909795 , 0.53613271, 0.31125866,
              0.58461244, 0.21718397, 0.16158694, 0.69102678, 0.71061123,
              0.80316448, 0.05111847, 0.61777229, 0.39135446, 0.20736918,
              0.89807781, 0.48032059, 0.74329052, 0.86132497, 0.74078505,
              0.68140094, 0.33050801, 0.36991739, 0.84357562, 0.18942774,
              0.18217572, 0.33651579, 0.62899998, 0.19959747, 0.99717882,
              0.04274368, 0.30718759, 0.40042254, 0.29545   , 0.51232783,
              0.93078101, 0.52076517, 0.15394856, 0.37900414, 0.43700565])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([4.54481210e-04, 4.91306872e-01, 2.48140278e-01, 8.05109432e-01,
              8.48360448e-01, 2.46788634e-01, 1.60609896e-02, 8.22976690e-01,
              7.29973407e-01, 7.88767442e-01, 7.80819820e-01, 3.88823734e-01,
              9.60642022e-01, 1.03337711e-01, 2.90402532e-01, 5.77499455e-01,
              9.81229807e-02, 8.12822008e-01, 9.96258232e-01, 4.60615900e-01,
              9.21370622e-01, 2.50434268e-01, 6.35035335e-01, 2.45660509e-01,
              1.56227575e-01, 4.39989376e-01, 3.49884845e-01, 1.63157474e-01,
              4.37032403e-01, 4.07173957e-01, 4.78790625e-01, 2.75013365e-01,
              9.39781092e-01, 2.65364591e-01, 6.09775317e-01, 1.57845520e-01,
              5.19546687e-01, 1.94589439e-01, 9.08785498e-01, 9.53710123e-01,
              4.93282552e-02, 2.80447605e-01, 9.58992772e-01, 3.95342775e-01,
              9.77903763e-01, 5.96968639e-01, 8.74309151e-01, 7.75920309e-01,
              2.79030859e-01, 6.13098400e-01, 2.48149929e-01, 1.30662926e-01,
              7.72197391e-01, 7.26707039e-01, 3.01529563e-01, 7.02184248e-02,
              3.71531198e-01, 1.84417928e-01, 4.68733865e-01, 6.99469046e-01,
              3.44273951e-01, 4.48584524e-01, 1.68363901e-01, 8.93297942e-01,
              1.19446299e-01, 2.43027553e-01, 1.63858254e-01, 7.67613222e-01,
              3.82807932e-01, 4.84338892e-01, 8.59906041e-01, 5.55804902e-02,
              6.42407321e-01, 9.34523592e-01, 3.41242348e-01, 1.12297758e-01,
              3.69209950e-01, 7.17469783e-01, 2.97136008e-01, 4.36893493e-01,
              4.77421657e-01, 5.91288871e-01, 2.11515302e-01, 1.95370408e-01,
              1.32018813e-01, 5.44996657e-02, 9.56222082e-01, 1.94870072e-01,
              4.53902808e-01, 4.86817018e-01, 4.25197552e-01, 9.74849396e-01,
              6.17936322e-02, 7.25354428e-01, 9.36485045e-01, 3.81659637e-01,
              1.03414308e-01, 3.78939124e-02, 5.48257438e-01, 5.91195441e-01])}]]


