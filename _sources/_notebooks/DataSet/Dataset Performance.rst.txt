
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='61ab847e-4de3-4a3c-b974-7c55d3db7504'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='4f39095c-2778-40ba-8187-9d29d4adbc86'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.407936739359027],
     [0.0366320867457606],
     [0.0799148699260677],
     [0.827753569827069],
     [0.761015893452439],
     [0.302517199211715],
     [0.661109552957498],
     [0.658757612102712],
     [0.329895038161759],
     [0.526661378498229],
     [0.0872683123309036],
     [0.449451996914622],
     [0.477694324996471],
     [0.925480239260837],
     [0.316897566321636],
     [0.590197853649806],
     [0.572483430531579],
     [0.202620640919004],
     [0.695885902845659],
     [0.842847651610189],
     [0.691186839471818],
     [0.163496542230179],
     [0.967704350669002],
     [0.783213346206157],
     [0.23441000365082],
     [0.287331433283536],
     [0.0480920919971598],
     [0.715728793404956],
     [0.92215034820483],
     [0.871358352021187],
     [0.525206326179104],
     [0.141988302740436],
     [0.76288405518817],
     [0.967096654261923],
     [0.11897088657434],
     [0.263277258545349],
     [0.698725360942509],
     [0.0234630810220225],
     [0.864171609242148],
     [0.543975235457731],
     [0.464149965952065],
     [0.255925818652589],
     [0.493803643384768],
     [0.334153377303467],
     [0.585594959505495],
     [0.130961291737946],
     [0.417211618778275],
     [0.717930021092551],
     [0.938278664788561],
     [0.916120523535412],
     [0.938059952787414],
     [0.298630188005144],
     [0.515341386432595],
     [0.780952016408325],
     [0.793815009764508],
     [0.612066326253819],
     [0.359617774763477],
     [0.557044344155902],
     [0.215315957957341],
     [0.92105475178345],
     [0.333587381414803],
     [0.899963282245776],
     [0.324161813524287],
     [0.00858308678634112],
     [0.985672410363854],
     [0.966948405922032],
     [0.55850009494211],
     [0.586839201838308],
     [0.601809686849795],
     [0.117671144841112],
     [0.151863332983372],
     [0.408197969287809],
     [0.00382096869170778],
     [0.314840995024968],
     [0.274135201067193],
     [0.622270312184533],
     [0.584105326353349],
     [0.828079467285101],
     [0.413175267560521],
     [0.120727499322123],
     [0.820741161571205],
     [0.564313942487783],
     [0.84198493398499],
     [0.620081650039732],
     [0.0605889351869039],
     [0.202300499706398],
     [0.520190956839215],
     [0.468718023258817],
     [0.682966556311457],
     [0.936547635471801],
     [0.386486621510701],
     [0.307114982567313],
     [0.829740358287653],
     [0.36559022839121],
     [0.68889782135557],
     [0.491393191137524],
     [0.690895269641155],
     [0.87307868041432],
     [0.426288901353888],
     [0.491975484401433]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.78853779])],
     [array([0.2768115])],
     [array([0.24524253])],
     [array([0.58668822])],
     [array([0.1027969])],
     [array([0.75959274])],
     [array([0.8563992])],
     [array([0.76601577])],
     [array([0.08595858])],
     [array([0.23331746])],
     [array([0.27335168])],
     [array([0.65216709])],
     [array([0.99877107])],
     [array([0.69610435])],
     [array([0.01930691])],
     [array([0.87564043])],
     [array([0.31102842])],
     [array([0.88327578])],
     [array([0.9849446])],
     [array([0.14001271])],
     [array([0.21156544])],
     [array([0.81340769])],
     [array([0.96363024])],
     [array([0.03245924])],
     [array([0.46768693])],
     [array([0.34036208])],
     [array([0.92209987])],
     [array([0.92129579])],
     [array([0.35737781])],
     [array([0.01436713])],
     [array([0.83180331])],
     [array([0.90875272])],
     [array([0.44471392])],
     [array([0.67649667])],
     [array([0.49848887])],
     [array([0.35037956])],
     [array([0.72544048])],
     [array([0.78076455])],
     [array([0.13980994])],
     [array([0.64296758])],
     [array([0.67928901])],
     [array([0.04598744])],
     [array([0.49256634])],
     [array([0.92735399])],
     [array([0.26341224])],
     [array([0.02873191])],
     [array([0.55382366])],
     [array([0.78666889])],
     [array([0.29372169])],
     [array([0.6445478])],
     [array([0.58470315])],
     [array([0.00090199])],
     [array([0.97225409])],
     [array([0.4043683])],
     [array([0.88148334])],
     [array([0.86158625])],
     [array([0.72584233])],
     [array([0.10502675])],
     [array([0.80270305])],
     [array([0.14170882])],
     [array([0.01750514])],
     [array([0.7100115])],
     [array([0.36481236])],
     [array([0.54327902])],
     [array([0.40491261])],
     [array([0.38889669])],
     [array([0.31149062])],
     [array([0.83820308])],
     [array([0.98413502])],
     [array([0.87833656])],
     [array([0.35203362])],
     [array([0.84793989])],
     [array([0.18597853])],
     [array([0.64592972])],
     [array([0.93565934])],
     [array([0.31592807])],
     [array([0.08690871])],
     [array([0.4609964])],
     [array([0.74682872])],
     [array([0.07643937])],
     [array([0.3070917])],
     [array([0.62408736])],
     [array([0.47322276])],
     [array([0.0092416])],
     [array([0.98274521])],
     [array([0.38687353])],
     [array([0.02622316])],
     [array([0.28031465])],
     [array([0.85216026])],
     [array([0.0951634])],
     [array([0.04661129])],
     [array([0.8271712])],
     [array([0.4185103])],
     [array([0.15907908])],
     [array([0.63357826])],
     [array([0.17958789])],
     [array([0.42121046])],
     [array([0.14768914])],
     [array([0.58628537])],
     [array([0.55164519])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([7.88537786e-01, 2.76811498e-01, 2.45242531e-01, 5.86688216e-01,
           1.02796899e-01, 7.59592741e-01, 8.56399200e-01, 7.66015773e-01,
           8.59585823e-02, 2.33317460e-01, 2.73351676e-01, 6.52167086e-01,
           9.98771075e-01, 6.96104352e-01, 1.93069066e-02, 8.75640427e-01,
           3.11028421e-01, 8.83275782e-01, 9.84944598e-01, 1.40012711e-01,
           2.11565443e-01, 8.13407686e-01, 9.63630243e-01, 3.24592371e-02,
           4.67686929e-01, 3.40362079e-01, 9.22099870e-01, 9.21295787e-01,
           3.57377808e-01, 1.43671261e-02, 8.31803310e-01, 9.08752721e-01,
           4.44713917e-01, 6.76496671e-01, 4.98488869e-01, 3.50379560e-01,
           7.25440483e-01, 7.80764549e-01, 1.39809942e-01, 6.42967575e-01,
           6.79289010e-01, 4.59874412e-02, 4.92566341e-01, 9.27353990e-01,
           2.63412241e-01, 2.87319130e-02, 5.53823658e-01, 7.86668891e-01,
           2.93721691e-01, 6.44547798e-01, 5.84703154e-01, 9.01991828e-04,
           9.72254088e-01, 4.04368299e-01, 8.81483335e-01, 8.61586254e-01,
           7.25842331e-01, 1.05026747e-01, 8.02703049e-01, 1.41708824e-01,
           1.75051449e-02, 7.10011499e-01, 3.64812357e-01, 5.43279018e-01,
           4.04912615e-01, 3.88896689e-01, 3.11490621e-01, 8.38203081e-01,
           9.84135022e-01, 8.78336562e-01, 3.52033620e-01, 8.47939892e-01,
           1.85978531e-01, 6.45929718e-01, 9.35659336e-01, 3.15928066e-01,
           8.69087129e-02, 4.60996398e-01, 7.46828721e-01, 7.64393732e-02,
           3.07091704e-01, 6.24087359e-01, 4.73222759e-01, 9.24159968e-03,
           9.82745215e-01, 3.86873532e-01, 2.62231648e-02, 2.80314651e-01,
           8.52160256e-01, 9.51634025e-02, 4.66112885e-02, 8.27171198e-01,
           4.18510296e-01, 1.59079082e-01, 6.33578257e-01, 1.79587890e-01,
           4.21210463e-01, 1.47689145e-01, 5.86285366e-01, 5.51645188e-01])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.40793674, 0.03663209, 0.07991487, 0.82775357, 0.76101589,
              0.3025172 , 0.66110955, 0.65875761, 0.32989504, 0.52666138,
              0.08726831, 0.449452  , 0.47769432, 0.92548024, 0.31689757,
              0.59019785, 0.57248343, 0.20262064, 0.6958859 , 0.84284765,
              0.69118684, 0.16349654, 0.96770435, 0.78321335, 0.23441   ,
              0.28733143, 0.04809209, 0.71572879, 0.92215035, 0.87135835,
              0.52520633, 0.1419883 , 0.76288406, 0.96709665, 0.11897089,
              0.26327726, 0.69872536, 0.02346308, 0.86417161, 0.54397524,
              0.46414997, 0.25592582, 0.49380364, 0.33415338, 0.58559496,
              0.13096129, 0.41721162, 0.71793002, 0.93827866, 0.91612052,
              0.93805995, 0.29863019, 0.51534139, 0.78095202, 0.79381501,
              0.61206633, 0.35961777, 0.55704434, 0.21531596, 0.92105475,
              0.33358738, 0.89996328, 0.32416181, 0.00858309, 0.98567241,
              0.96694841, 0.55850009, 0.5868392 , 0.60180969, 0.11767114,
              0.15186333, 0.40819797, 0.00382097, 0.314841  , 0.2741352 ,
              0.62227031, 0.58410533, 0.82807947, 0.41317527, 0.1207275 ,
              0.82074116, 0.56431394, 0.84198493, 0.62008165, 0.06058894,
              0.2023005 , 0.52019096, 0.46871802, 0.68296656, 0.93654764,
              0.38648662, 0.30711498, 0.82974036, 0.36559023, 0.68889782,
              0.49139319, 0.69089527, 0.87307868, 0.4262889 , 0.49197548])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.99329959, 0.49939314, 0.74794883, 0.42266431, 0.60485222,
              0.85381237, 0.39389717, 0.73047108, 0.87061225, 0.08466748,
              0.98856411, 0.9818581 , 0.08763046, 0.16905626, 0.47320686,
              0.83691074, 0.04819845, 0.29624381, 0.97699727, 0.46129286,
              0.09374198, 0.4049436 , 0.56782134, 0.24068657, 0.4149019 ,
              0.31725728, 0.8044674 , 0.5535161 , 0.13193933, 0.99626246,
              0.97678454, 0.67063113, 0.79169433, 0.98920882, 0.14863369,
              0.52931452, 0.92138334, 0.48714411, 0.438279  , 0.46417455,
              0.89800288, 0.91552998, 0.67607125, 0.26107216, 0.51493088,
              0.4792767 , 0.48358576, 0.34031414, 0.77410889, 0.77058183,
              0.2784411 , 0.53039524, 0.35712102, 0.99278813, 0.70764105,
              0.04770339, 0.73847852, 0.5731067 , 0.85875612, 0.68743985,
              0.04800429, 0.39698507, 0.05426926, 0.32888254, 0.7865943 ,
              0.00308866, 0.34200367, 0.29129619, 0.9135479 , 0.61384006,
              0.80918049, 0.35259213, 0.52103301, 0.15657118, 0.18531912,
              0.37545021, 0.58242157, 0.01028297, 0.53761831, 0.60169698,
              0.33404143, 0.85302081, 0.27622559, 0.8502574 , 0.92909034,
              0.4149195 , 0.38149847, 0.28604449, 0.47028099, 0.72946904,
              0.14970392, 0.00967586, 0.92853887, 0.50312499, 0.45418545,
              0.15151437, 0.80278674, 0.75562135, 0.80136943, 0.48928106])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.21451684, 0.43507372, 0.78667124, 0.63953682, 0.08715924,
              0.90245744, 0.45543149, 0.85813451, 0.2231003 , 0.43944142,
              0.40242257, 0.59183197, 0.40226971, 0.87477393, 0.9352921 ,
              0.13584547, 0.19378706, 0.50011334, 0.10720496, 0.46155405,
              0.30225847, 0.84766476, 0.72865648, 0.92980017, 0.36030952,
              0.18324742, 0.1641228 , 0.63635409, 0.40339877, 0.38612122,
              0.94300325, 0.77214788, 0.12252508, 0.84613956, 0.47537116,
              0.74281686, 0.80481531, 0.5724677 , 0.96197839, 0.03820251,
              0.80030365, 0.418569  , 0.06251648, 0.09763654, 0.91237114,
              0.84299656, 0.80642066, 0.79743844, 0.26948683, 0.87085612,
              0.08996325, 0.08577227, 0.92600407, 0.60112816, 0.12216914,
              0.01508284, 0.37652217, 0.92819977, 0.04380331, 0.86753322,
              0.06007689, 0.49011199, 0.03482557, 0.66178403, 0.98763813,
              0.39323571, 0.59289578, 0.69317837, 0.35155095, 0.69780519,
              0.52193851, 0.0566466 , 0.62357301, 0.81792541, 0.24730302,
              0.30026769, 0.54262434, 0.76316056, 0.33908304, 0.25609747,
              0.67197855, 0.46138533, 0.82349711, 0.71693852, 0.29454022,
              0.98607217, 0.83670298, 0.81450627, 0.21980318, 0.30991285,
              0.43318694, 0.28569933, 0.13833505, 0.9474158 , 0.44747165,
              0.99884553, 0.31418732, 0.3933986 , 0.80503683, 0.52859293])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.17779423, 0.41268847, 0.59444497, 0.61323423, 0.4866324 ,
              0.29663596, 0.09987875, 0.44641307, 0.03491079, 0.39773427,
              0.52706437, 0.4443464 , 0.86781278, 0.43782291, 0.22709081,
              0.46839653, 0.0253176 , 0.02577398, 0.51556159, 0.7338497 ,
              0.94768723, 0.36019259, 0.75840471, 0.71726161, 0.09588032,
              0.02552808, 0.89275785, 0.77974074, 0.06221583, 0.50884064,
              0.50335853, 0.49464933, 0.73322962, 0.42989802, 0.41426533,
              0.66374048, 0.54228067, 0.74306351, 0.24252911, 0.6203887 ,
              0.56848283, 0.91699524, 0.1874837 , 0.16548232, 0.84401293,
              0.13232718, 0.28535124, 0.77610003, 0.48460807, 0.08845298,
              0.23984452, 0.34638933, 0.60514365, 0.36185375, 0.81603243,
              0.30213463, 0.56491067, 0.19671813, 0.88451912, 0.26301661,
              0.85879397, 0.90423666, 0.71202988, 0.80987163, 0.44881174,
              0.87869303, 0.47613229, 0.76598916, 0.42040938, 0.87759298,
              0.57391012, 0.82812908, 0.20654937, 0.97144329, 0.70630221,
              0.41660248, 0.50781212, 0.61498117, 0.25402405, 0.1410383 ,
              0.56513343, 0.10621476, 0.32714338, 0.98085242, 0.14796411,
              0.03465507, 0.8285715 , 0.02607505, 0.3068755 , 0.23640375,
              0.51339657, 0.99287762, 0.51289712, 0.96256726, 0.53211998,
              0.12198057, 0.93212734, 0.70932338, 0.6222963 , 0.64332191])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.40793674, 0.03663209, 0.07991487, 0.82775357, 0.76101589,
              0.3025172 , 0.66110955, 0.65875761, 0.32989504, 0.52666138,
              0.08726831, 0.449452  , 0.47769432, 0.92548024, 0.31689757,
              0.59019785, 0.57248343, 0.20262064, 0.6958859 , 0.84284765,
              0.69118684, 0.16349654, 0.96770435, 0.78321335, 0.23441   ,
              0.28733143, 0.04809209, 0.71572879, 0.92215035, 0.87135835,
              0.52520633, 0.1419883 , 0.76288406, 0.96709665, 0.11897089,
              0.26327726, 0.69872536, 0.02346308, 0.86417161, 0.54397524,
              0.46414997, 0.25592582, 0.49380364, 0.33415338, 0.58559496,
              0.13096129, 0.41721162, 0.71793002, 0.93827866, 0.91612052,
              0.93805995, 0.29863019, 0.51534139, 0.78095202, 0.79381501,
              0.61206633, 0.35961777, 0.55704434, 0.21531596, 0.92105475,
              0.33358738, 0.89996328, 0.32416181, 0.00858309, 0.98567241,
              0.96694841, 0.55850009, 0.5868392 , 0.60180969, 0.11767114,
              0.15186333, 0.40819797, 0.00382097, 0.314841  , 0.2741352 ,
              0.62227031, 0.58410533, 0.82807947, 0.41317527, 0.1207275 ,
              0.82074116, 0.56431394, 0.84198493, 0.62008165, 0.06058894,
              0.2023005 , 0.52019096, 0.46871802, 0.68296656, 0.93654764,
              0.38648662, 0.30711498, 0.82974036, 0.36559023, 0.68889782,
              0.49139319, 0.69089527, 0.87307868, 0.4262889 , 0.49197548])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.99329959, 0.49939314, 0.74794883, 0.42266431, 0.60485222,
              0.85381237, 0.39389717, 0.73047108, 0.87061225, 0.08466748,
              0.98856411, 0.9818581 , 0.08763046, 0.16905626, 0.47320686,
              0.83691074, 0.04819845, 0.29624381, 0.97699727, 0.46129286,
              0.09374198, 0.4049436 , 0.56782134, 0.24068657, 0.4149019 ,
              0.31725728, 0.8044674 , 0.5535161 , 0.13193933, 0.99626246,
              0.97678454, 0.67063113, 0.79169433, 0.98920882, 0.14863369,
              0.52931452, 0.92138334, 0.48714411, 0.438279  , 0.46417455,
              0.89800288, 0.91552998, 0.67607125, 0.26107216, 0.51493088,
              0.4792767 , 0.48358576, 0.34031414, 0.77410889, 0.77058183,
              0.2784411 , 0.53039524, 0.35712102, 0.99278813, 0.70764105,
              0.04770339, 0.73847852, 0.5731067 , 0.85875612, 0.68743985,
              0.04800429, 0.39698507, 0.05426926, 0.32888254, 0.7865943 ,
              0.00308866, 0.34200367, 0.29129619, 0.9135479 , 0.61384006,
              0.80918049, 0.35259213, 0.52103301, 0.15657118, 0.18531912,
              0.37545021, 0.58242157, 0.01028297, 0.53761831, 0.60169698,
              0.33404143, 0.85302081, 0.27622559, 0.8502574 , 0.92909034,
              0.4149195 , 0.38149847, 0.28604449, 0.47028099, 0.72946904,
              0.14970392, 0.00967586, 0.92853887, 0.50312499, 0.45418545,
              0.15151437, 0.80278674, 0.75562135, 0.80136943, 0.48928106])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.21451684, 0.43507372, 0.78667124, 0.63953682, 0.08715924,
              0.90245744, 0.45543149, 0.85813451, 0.2231003 , 0.43944142,
              0.40242257, 0.59183197, 0.40226971, 0.87477393, 0.9352921 ,
              0.13584547, 0.19378706, 0.50011334, 0.10720496, 0.46155405,
              0.30225847, 0.84766476, 0.72865648, 0.92980017, 0.36030952,
              0.18324742, 0.1641228 , 0.63635409, 0.40339877, 0.38612122,
              0.94300325, 0.77214788, 0.12252508, 0.84613956, 0.47537116,
              0.74281686, 0.80481531, 0.5724677 , 0.96197839, 0.03820251,
              0.80030365, 0.418569  , 0.06251648, 0.09763654, 0.91237114,
              0.84299656, 0.80642066, 0.79743844, 0.26948683, 0.87085612,
              0.08996325, 0.08577227, 0.92600407, 0.60112816, 0.12216914,
              0.01508284, 0.37652217, 0.92819977, 0.04380331, 0.86753322,
              0.06007689, 0.49011199, 0.03482557, 0.66178403, 0.98763813,
              0.39323571, 0.59289578, 0.69317837, 0.35155095, 0.69780519,
              0.52193851, 0.0566466 , 0.62357301, 0.81792541, 0.24730302,
              0.30026769, 0.54262434, 0.76316056, 0.33908304, 0.25609747,
              0.67197855, 0.46138533, 0.82349711, 0.71693852, 0.29454022,
              0.98607217, 0.83670298, 0.81450627, 0.21980318, 0.30991285,
              0.43318694, 0.28569933, 0.13833505, 0.9474158 , 0.44747165,
              0.99884553, 0.31418732, 0.3933986 , 0.80503683, 0.52859293])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.91724737, 0.91228762, 0.45235936, 0.33206464, 0.56232528,
              0.4080439 , 0.82156558, 0.30617549, 0.74439493, 0.66552947,
              0.18341843, 0.47274254, 0.13595311, 0.61307135, 0.35039722,
              0.25257676, 0.10795959, 0.97807979, 0.17088991, 0.87502937,
              0.42213602, 0.88234414, 0.58126912, 0.77414124, 0.21716172,
              0.63804677, 0.64939623, 0.9748673 , 0.59500674, 0.76494756,
              0.41135803, 0.32482155, 0.85803592, 0.21737031, 0.51789576,
              0.82107783, 0.11728808, 0.41000192, 0.72708448, 0.12483235,
              0.88852316, 0.46522981, 0.49237338, 0.83403357, 0.12013291,
              0.30787612, 0.23167572, 0.68013195, 0.20559383, 0.77253516,
              0.03591776, 0.00345967, 0.24565571, 0.42786668, 0.57712103,
              0.87476616, 0.34535   , 0.8533092 , 0.26708345, 0.74981688,
              0.76486228, 0.75816033, 0.8704341 , 0.98403761, 0.57654212,
              0.80725855, 0.19888843, 0.9330992 , 0.15237084, 0.24287576,
              0.74135464, 0.06561285, 0.92857375, 0.82840831, 0.63803044,
              0.16375756, 0.32008729, 0.703148  , 0.49823854, 0.93498882,
              0.15576277, 0.53738285, 0.51734492, 0.5200758 , 0.69401442,
              0.22625087, 0.04733707, 0.41268514, 0.83627668, 0.06964168,
              0.25701511, 0.16730406, 0.1518534 , 0.81027763, 0.1628937 ,
              0.2974029 , 0.32977395, 0.02993437, 0.89112549, 0.68024219])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([7.88537786e-01, 2.76811498e-01, 2.45242531e-01, 5.86688216e-01,
              1.02796899e-01, 7.59592741e-01, 8.56399200e-01, 7.66015773e-01,
              8.59585823e-02, 2.33317460e-01, 2.73351676e-01, 6.52167086e-01,
              9.98771075e-01, 6.96104352e-01, 1.93069066e-02, 8.75640427e-01,
              3.11028421e-01, 8.83275782e-01, 9.84944598e-01, 1.40012711e-01,
              2.11565443e-01, 8.13407686e-01, 9.63630243e-01, 3.24592371e-02,
              4.67686929e-01, 3.40362079e-01, 9.22099870e-01, 9.21295787e-01,
              3.57377808e-01, 1.43671261e-02, 8.31803310e-01, 9.08752721e-01,
              4.44713917e-01, 6.76496671e-01, 4.98488869e-01, 3.50379560e-01,
              7.25440483e-01, 7.80764549e-01, 1.39809942e-01, 6.42967575e-01,
              6.79289010e-01, 4.59874412e-02, 4.92566341e-01, 9.27353990e-01,
              2.63412241e-01, 2.87319130e-02, 5.53823658e-01, 7.86668891e-01,
              2.93721691e-01, 6.44547798e-01, 5.84703154e-01, 9.01991828e-04,
              9.72254088e-01, 4.04368299e-01, 8.81483335e-01, 8.61586254e-01,
              7.25842331e-01, 1.05026747e-01, 8.02703049e-01, 1.41708824e-01,
              1.75051449e-02, 7.10011499e-01, 3.64812357e-01, 5.43279018e-01,
              4.04912615e-01, 3.88896689e-01, 3.11490621e-01, 8.38203081e-01,
              9.84135022e-01, 8.78336562e-01, 3.52033620e-01, 8.47939892e-01,
              1.85978531e-01, 6.45929718e-01, 9.35659336e-01, 3.15928066e-01,
              8.69087129e-02, 4.60996398e-01, 7.46828721e-01, 7.64393732e-02,
              3.07091704e-01, 6.24087359e-01, 4.73222759e-01, 9.24159968e-03,
              9.82745215e-01, 3.86873532e-01, 2.62231648e-02, 2.80314651e-01,
              8.52160256e-01, 9.51634025e-02, 4.66112885e-02, 8.27171198e-01,
              4.18510296e-01, 1.59079082e-01, 6.33578257e-01, 1.79587890e-01,
              4.21210463e-01, 1.47689145e-01, 5.86285366e-01, 5.51645188e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.35755859, 0.98929239, 0.40354999, 0.88717642, 0.87303998,
              0.50297065, 0.87423719, 0.85634449, 0.07953869, 0.67131181,
              0.70662267, 0.87326842, 0.73620215, 0.59062525, 0.85170999,
              0.74295497, 0.86805122, 0.38075917, 0.52413497, 0.7483721 ,
              0.12821814, 0.62931366, 0.29362953, 0.4913432 , 0.99623409,
              0.95639865, 0.62735415, 0.02648011, 0.92931788, 0.37465931,
              0.67479661, 0.42240454, 0.55675815, 0.73293569, 0.0545831 ,
              0.03876353, 0.00137338, 0.14947222, 0.9823786 , 0.12431138,
              0.38425555, 0.07221996, 0.6397316 , 0.64275047, 0.10846065,
              0.29973007, 0.60635611, 0.38072983, 0.7651221 , 0.59769486,
              0.69384743, 0.42754991, 0.54049531, 0.41800937, 0.01423728,
              0.17720079, 0.20382073, 0.65937536, 0.18585355, 0.20632962,
              0.11232102, 0.5002101 , 0.43280188, 0.21699067, 0.53622423,
              0.37318311, 0.281903  , 0.86101832, 0.94396531, 0.83339452,
              0.54568929, 0.19445228, 0.68599797, 0.47756133, 0.90062358,
              0.98426107, 0.42620313, 0.49354787, 0.60428933, 0.27722604,
              0.70442006, 0.49976343, 0.22929308, 0.55509161, 0.77770409,
              0.52152137, 0.22023055, 0.76357497, 0.07972244, 0.60594386,
              0.91210566, 0.40474734, 0.14664729, 0.2992383 , 0.66828338,
              0.52499461, 0.1001933 , 0.28431691, 0.49767635, 0.85973972])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.12266529, 0.3784328 , 0.134352  , 0.48419194, 0.63736875,
              0.14792251, 0.96262523, 0.82596357, 0.43194337, 0.51992221,
              0.78979724, 0.11448692, 0.61692341, 0.74371392, 0.6906973 ,
              0.28031897, 0.66313429, 0.66056241, 0.43312459, 0.33926088,
              0.67919935, 0.5895674 , 0.95261677, 0.94030865, 0.18520011,
              0.52020145, 0.97210046, 0.84864375, 0.38000537, 0.58818514,
              0.6323164 , 0.50939451, 0.37469668, 0.33983808, 0.96957876,
              0.57631393, 0.11341381, 0.44165565, 0.18259461, 0.22080307,
              0.73392342, 0.62938345, 0.40353748, 0.53556645, 0.85023303,
              0.31443761, 0.90003509, 0.8139311 , 0.91368743, 0.469727  ,
              0.78853439, 0.16847561, 0.83610121, 0.78405405, 0.00592504,
              0.95905635, 0.50027164, 0.56675241, 0.91726061, 0.03016527,
              0.98379723, 0.13634853, 0.01921605, 0.30839394, 0.21721794,
              0.10664349, 0.97881659, 0.81562414, 0.42689358, 0.28343604,
              0.19827285, 0.12891944, 0.19963054, 0.88320176, 0.00600801,
              0.24080365, 0.5942721 , 0.45140542, 0.24640133, 0.12085703,
              0.43096347, 0.42073307, 0.75733806, 0.81859269, 0.74248703,
              0.31424069, 0.65225362, 0.20119836, 0.63642772, 0.60529362,
              0.5931893 , 0.41635143, 0.55106882, 0.11434845, 0.90506375,
              0.5012299 , 0.06815352, 0.98437356, 0.10431418, 0.94672901])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.50920951, 0.69097837, 0.66117742, 0.30067429, 0.95500222,
              0.31513804, 0.1116949 , 0.55970533, 0.835824  , 0.78824719,
              0.82819398, 0.02818897, 0.73875459, 0.95700979, 0.23221571,
              0.76818928, 0.39547146, 0.57362089, 0.9390877 , 0.72244913,
              0.72581427, 0.85216117, 0.36420189, 0.56360493, 0.29439676,
              0.18729526, 0.29517606, 0.42646049, 0.16569478, 0.06507195,
              0.38221601, 0.66015782, 0.6368873 , 0.27858514, 0.76129768,
              0.38631264, 0.57867371, 0.13472447, 0.48728775, 0.27505383,
              0.62441691, 0.61375479, 0.16878501, 0.11532975, 0.32227145,
              0.57577505, 0.7372218 , 0.26878553, 0.78842772, 0.68148242,
              0.13056006, 0.50013777, 0.6879539 , 0.84361035, 0.06136105,
              0.36389556, 0.26116914, 0.58573189, 0.65936787, 0.10856325,
              0.56671886, 0.84987094, 0.97317991, 0.05794089, 0.94271688,
              0.67889483, 0.74942085, 0.05926302, 0.32844231, 0.81081522,
              0.05656356, 0.15303649, 0.27001927, 0.36408281, 0.41401806,
              0.18642903, 0.73410585, 0.08739506, 0.49569415, 0.64278854,
              0.95840453, 0.48788507, 0.86838536, 0.77723934, 0.14313126,
              0.76619747, 0.28024763, 0.01517819, 0.7832811 , 0.27066798,
              0.81036845, 0.88044677, 0.78117584, 0.33245971, 0.11260021,
              0.40907272, 0.71955207, 0.90393379, 0.22476724, 0.6303893 ])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([7.88537786e-01, 2.76811498e-01, 2.45242531e-01, 5.86688216e-01,
              1.02796899e-01, 7.59592741e-01, 8.56399200e-01, 7.66015773e-01,
              8.59585823e-02, 2.33317460e-01, 2.73351676e-01, 6.52167086e-01,
              9.98771075e-01, 6.96104352e-01, 1.93069066e-02, 8.75640427e-01,
              3.11028421e-01, 8.83275782e-01, 9.84944598e-01, 1.40012711e-01,
              2.11565443e-01, 8.13407686e-01, 9.63630243e-01, 3.24592371e-02,
              4.67686929e-01, 3.40362079e-01, 9.22099870e-01, 9.21295787e-01,
              3.57377808e-01, 1.43671261e-02, 8.31803310e-01, 9.08752721e-01,
              4.44713917e-01, 6.76496671e-01, 4.98488869e-01, 3.50379560e-01,
              7.25440483e-01, 7.80764549e-01, 1.39809942e-01, 6.42967575e-01,
              6.79289010e-01, 4.59874412e-02, 4.92566341e-01, 9.27353990e-01,
              2.63412241e-01, 2.87319130e-02, 5.53823658e-01, 7.86668891e-01,
              2.93721691e-01, 6.44547798e-01, 5.84703154e-01, 9.01991828e-04,
              9.72254088e-01, 4.04368299e-01, 8.81483335e-01, 8.61586254e-01,
              7.25842331e-01, 1.05026747e-01, 8.02703049e-01, 1.41708824e-01,
              1.75051449e-02, 7.10011499e-01, 3.64812357e-01, 5.43279018e-01,
              4.04912615e-01, 3.88896689e-01, 3.11490621e-01, 8.38203081e-01,
              9.84135022e-01, 8.78336562e-01, 3.52033620e-01, 8.47939892e-01,
              1.85978531e-01, 6.45929718e-01, 9.35659336e-01, 3.15928066e-01,
              8.69087129e-02, 4.60996398e-01, 7.46828721e-01, 7.64393732e-02,
              3.07091704e-01, 6.24087359e-01, 4.73222759e-01, 9.24159968e-03,
              9.82745215e-01, 3.86873532e-01, 2.62231648e-02, 2.80314651e-01,
              8.52160256e-01, 9.51634025e-02, 4.66112885e-02, 8.27171198e-01,
              4.18510296e-01, 1.59079082e-01, 6.33578257e-01, 1.79587890e-01,
              4.21210463e-01, 1.47689145e-01, 5.86285366e-01, 5.51645188e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.35755859, 0.98929239, 0.40354999, 0.88717642, 0.87303998,
              0.50297065, 0.87423719, 0.85634449, 0.07953869, 0.67131181,
              0.70662267, 0.87326842, 0.73620215, 0.59062525, 0.85170999,
              0.74295497, 0.86805122, 0.38075917, 0.52413497, 0.7483721 ,
              0.12821814, 0.62931366, 0.29362953, 0.4913432 , 0.99623409,
              0.95639865, 0.62735415, 0.02648011, 0.92931788, 0.37465931,
              0.67479661, 0.42240454, 0.55675815, 0.73293569, 0.0545831 ,
              0.03876353, 0.00137338, 0.14947222, 0.9823786 , 0.12431138,
              0.38425555, 0.07221996, 0.6397316 , 0.64275047, 0.10846065,
              0.29973007, 0.60635611, 0.38072983, 0.7651221 , 0.59769486,
              0.69384743, 0.42754991, 0.54049531, 0.41800937, 0.01423728,
              0.17720079, 0.20382073, 0.65937536, 0.18585355, 0.20632962,
              0.11232102, 0.5002101 , 0.43280188, 0.21699067, 0.53622423,
              0.37318311, 0.281903  , 0.86101832, 0.94396531, 0.83339452,
              0.54568929, 0.19445228, 0.68599797, 0.47756133, 0.90062358,
              0.98426107, 0.42620313, 0.49354787, 0.60428933, 0.27722604,
              0.70442006, 0.49976343, 0.22929308, 0.55509161, 0.77770409,
              0.52152137, 0.22023055, 0.76357497, 0.07972244, 0.60594386,
              0.91210566, 0.40474734, 0.14664729, 0.2992383 , 0.66828338,
              0.52499461, 0.1001933 , 0.28431691, 0.49767635, 0.85973972])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.12266529, 0.3784328 , 0.134352  , 0.48419194, 0.63736875,
              0.14792251, 0.96262523, 0.82596357, 0.43194337, 0.51992221,
              0.78979724, 0.11448692, 0.61692341, 0.74371392, 0.6906973 ,
              0.28031897, 0.66313429, 0.66056241, 0.43312459, 0.33926088,
              0.67919935, 0.5895674 , 0.95261677, 0.94030865, 0.18520011,
              0.52020145, 0.97210046, 0.84864375, 0.38000537, 0.58818514,
              0.6323164 , 0.50939451, 0.37469668, 0.33983808, 0.96957876,
              0.57631393, 0.11341381, 0.44165565, 0.18259461, 0.22080307,
              0.73392342, 0.62938345, 0.40353748, 0.53556645, 0.85023303,
              0.31443761, 0.90003509, 0.8139311 , 0.91368743, 0.469727  ,
              0.78853439, 0.16847561, 0.83610121, 0.78405405, 0.00592504,
              0.95905635, 0.50027164, 0.56675241, 0.91726061, 0.03016527,
              0.98379723, 0.13634853, 0.01921605, 0.30839394, 0.21721794,
              0.10664349, 0.97881659, 0.81562414, 0.42689358, 0.28343604,
              0.19827285, 0.12891944, 0.19963054, 0.88320176, 0.00600801,
              0.24080365, 0.5942721 , 0.45140542, 0.24640133, 0.12085703,
              0.43096347, 0.42073307, 0.75733806, 0.81859269, 0.74248703,
              0.31424069, 0.65225362, 0.20119836, 0.63642772, 0.60529362,
              0.5931893 , 0.41635143, 0.55106882, 0.11434845, 0.90506375,
              0.5012299 , 0.06815352, 0.98437356, 0.10431418, 0.94672901])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([5.15300907e-01, 4.58967242e-01, 7.29506296e-02, 7.55770172e-02,
              3.11397430e-02, 9.17654169e-01, 3.99990264e-01, 5.49519091e-01,
              8.41986674e-01, 3.75599642e-01, 5.79951083e-01, 4.14352803e-01,
              6.11821701e-01, 9.17423242e-01, 3.06635757e-01, 9.80616173e-02,
              7.96678739e-01, 7.87801346e-01, 2.15635755e-01, 3.81757930e-01,
              6.57972607e-01, 9.29113302e-01, 2.05498105e-01, 3.19720539e-01,
              6.00301120e-01, 3.08899360e-02, 1.88562946e-01, 5.55601991e-02,
              2.81643768e-01, 6.49247500e-01, 7.88371794e-01, 4.81915761e-01,
              9.94514192e-01, 1.17686462e-01, 7.92631565e-01, 4.91192441e-01,
              9.71321507e-01, 9.39776207e-02, 1.94824126e-01, 6.72757361e-01,
              8.10515784e-01, 9.98398181e-01, 9.56289863e-01, 6.76631213e-02,
              2.96509669e-02, 7.06261130e-01, 3.08896452e-01, 3.77965878e-02,
              8.46740308e-01, 8.51057720e-01, 9.90423427e-01, 7.77370983e-01,
              7.68607617e-01, 2.01038454e-01, 4.27575870e-01, 7.14323049e-01,
              8.95480797e-01, 1.22041827e-01, 1.66408741e-01, 1.00156837e-01,
              9.20500674e-01, 7.03700310e-01, 1.11987707e-01, 8.65102910e-01,
              4.64057062e-01, 5.33615133e-01, 8.39361654e-04, 1.50305838e-01,
              7.52891148e-01, 8.27363915e-01, 5.96697518e-01, 1.22441959e-01,
              6.85637060e-01, 2.55411260e-01, 1.11359010e-01, 8.21548612e-01,
              8.64631136e-01, 3.06573379e-01, 7.82198369e-01, 9.06677493e-01,
              6.08100074e-01, 6.84197727e-01, 3.43975118e-01, 8.17316527e-01,
              3.45394354e-01, 1.79678345e-01, 8.08312398e-02, 2.43138645e-01,
              4.47394860e-02, 3.20116516e-01, 1.25785978e-01, 1.16012254e-04,
              2.04794875e-01, 8.95874554e-01, 5.42200680e-01, 7.31333019e-01,
              6.34221951e-01, 2.84360894e-03, 4.84439176e-01, 8.73170633e-01])}]]


