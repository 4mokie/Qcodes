
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='02dc7f16-310d-4f3e-a634-b51208a0bd60'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='45c7067b-3390-4ce7-a40f-6af5890af61a'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.783546059443991],
     [0.961463443258705],
     [0.32923786729151],
     [0.968196018250371],
     [0.0679148091616001],
     [0.551007516155679],
     [0.746937540746425],
     [0.79817451589012],
     [0.220247183940512],
     [0.518115383815777],
     [0.505072865467864],
     [0.269469923667438],
     [0.696559130829938],
     [0.107888701558932],
     [0.299942075898579],
     [0.311319696773318],
     [0.551846178840897],
     [0.683717079441509],
     [0.682567340914355],
     [0.125011998999304],
     [0.869329416593716],
     [0.984139970761738],
     [0.326623168311905],
     [0.537387414751035],
     [0.872247102930649],
     [0.243626693799615],
     [0.941538203610564],
     [0.596754649992641],
     [0.263850739350752],
     [0.560528794396298],
     [0.959611767205118],
     [0.15384343184729],
     [0.378927697337885],
     [0.816415560697918],
     [0.184023262018325],
     [0.376296054861155],
     [0.316174314435054],
     [0.992410173526939],
     [0.476962813834533],
     [0.405420154288774],
     [0.430623898334889],
     [0.851303907180296],
     [0.694258850740436],
     [0.414615199554406],
     [0.275081388503242],
     [0.870349042886926],
     [0.168476920721008],
     [0.0673343135642502],
     [0.320237653943469],
     [0.978120577859412],
     [0.361186862853491],
     [0.191571204552751],
     [0.285259805477733],
     [0.0224230361693065],
     [0.341665810127916],
     [0.450319921086609],
     [0.0814243053591048],
     [0.199610948343695],
     [0.542134473355389],
     [0.680877005356605],
     [0.260167111292837],
     [0.1039679143545],
     [0.605802116186861],
     [0.256881673033877],
     [0.680005162382631],
     [0.196084032014848],
     [0.493734324016342],
     [0.370279937483229],
     [0.04187597312861],
     [0.007433352682918],
     [0.510605971551506],
     [0.892747207215466],
     [0.756345430815894],
     [0.368679769036877],
     [0.968977829554816],
     [0.360564050850494],
     [0.542767063147918],
     [0.27968961181702],
     [0.390043450713165],
     [0.539091946600539],
     [0.0207836886532602],
     [0.176504070063562],
     [0.315177634822637],
     [0.280802258271841],
     [0.339357720784602],
     [0.830954425852611],
     [0.345683846078883],
     [0.758348328367778],
     [0.422674448876969],
     [0.876901249031824],
     [0.067968204505795],
     [0.134477959495885],
     [0.898535422788777],
     [0.623757933640446],
     [0.818721246774778],
     [0.749131927110222],
     [0.678387203204263],
     [0.326935362061477],
     [0.821570157644561],
     [0.421620529191477]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.33073745])],
     [array([0.7624621])],
     [array([0.66499252])],
     [array([0.85899188])],
     [array([0.41935222])],
     [array([0.52774713])],
     [array([0.79938376])],
     [array([0.94753245])],
     [array([0.749953])],
     [array([0.88738564])],
     [array([0.72207943])],
     [array([0.43808159])],
     [array([0.483577])],
     [array([0.43138965])],
     [array([0.51830394])],
     [array([0.10629439])],
     [array([0.54394181])],
     [array([0.38165438])],
     [array([0.19702645])],
     [array([0.48419807])],
     [array([0.65648866])],
     [array([0.54761182])],
     [array([0.52388626])],
     [array([0.82947403])],
     [array([0.29537775])],
     [array([0.84227085])],
     [array([0.74837139])],
     [array([0.96431781])],
     [array([0.12649903])],
     [array([0.43797068])],
     [array([0.37853013])],
     [array([0.24655099])],
     [array([0.411392])],
     [array([0.84575391])],
     [array([0.95062669])],
     [array([0.73865583])],
     [array([0.78773059])],
     [array([0.55829783])],
     [array([0.97066662])],
     [array([0.6754695])],
     [array([0.98910265])],
     [array([0.49844001])],
     [array([0.79115649])],
     [array([0.58113633])],
     [array([0.97971249])],
     [array([0.74652377])],
     [array([0.19545833])],
     [array([0.05179705])],
     [array([0.27084586])],
     [array([0.90633257])],
     [array([0.33562584])],
     [array([0.88130849])],
     [array([0.15262657])],
     [array([0.71796454])],
     [array([0.01771338])],
     [array([0.5333739])],
     [array([0.01909685])],
     [array([0.19220802])],
     [array([0.60511958])],
     [array([0.17176114])],
     [array([0.84124253])],
     [array([0.73727586])],
     [array([0.76698841])],
     [array([0.17257321])],
     [array([0.4684227])],
     [array([0.2081868])],
     [array([0.58225156])],
     [array([0.43562502])],
     [array([0.66029314])],
     [array([0.09063727])],
     [array([0.58677366])],
     [array([0.83657276])],
     [array([0.66088477])],
     [array([0.56382341])],
     [array([0.79626784])],
     [array([0.15035503])],
     [array([0.51592104])],
     [array([0.56194803])],
     [array([0.46484841])],
     [array([0.63356073])],
     [array([0.97949128])],
     [array([0.20598726])],
     [array([0.63133496])],
     [array([0.31931539])],
     [array([0.68843843])],
     [array([0.40263051])],
     [array([0.54224246])],
     [array([0.45176865])],
     [array([0.9996706])],
     [array([0.48467329])],
     [array([0.00550101])],
     [array([0.20733616])],
     [array([0.93496754])],
     [array([0.85773017])],
     [array([0.74072287])],
     [array([0.86819892])],
     [array([0.70177802])],
     [array([0.0563797])],
     [array([0.23260072])],
     [array([0.79734569])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.33073745, 0.7624621 , 0.66499252, 0.85899188, 0.41935222,
           0.52774713, 0.79938376, 0.94753245, 0.749953  , 0.88738564,
           0.72207943, 0.43808159, 0.483577  , 0.43138965, 0.51830394,
           0.10629439, 0.54394181, 0.38165438, 0.19702645, 0.48419807,
           0.65648866, 0.54761182, 0.52388626, 0.82947403, 0.29537775,
           0.84227085, 0.74837139, 0.96431781, 0.12649903, 0.43797068,
           0.37853013, 0.24655099, 0.411392  , 0.84575391, 0.95062669,
           0.73865583, 0.78773059, 0.55829783, 0.97066662, 0.6754695 ,
           0.98910265, 0.49844001, 0.79115649, 0.58113633, 0.97971249,
           0.74652377, 0.19545833, 0.05179705, 0.27084586, 0.90633257,
           0.33562584, 0.88130849, 0.15262657, 0.71796454, 0.01771338,
           0.5333739 , 0.01909685, 0.19220802, 0.60511958, 0.17176114,
           0.84124253, 0.73727586, 0.76698841, 0.17257321, 0.4684227 ,
           0.2081868 , 0.58225156, 0.43562502, 0.66029314, 0.09063727,
           0.58677366, 0.83657276, 0.66088477, 0.56382341, 0.79626784,
           0.15035503, 0.51592104, 0.56194803, 0.46484841, 0.63356073,
           0.97949128, 0.20598726, 0.63133496, 0.31931539, 0.68843843,
           0.40263051, 0.54224246, 0.45176865, 0.9996706 , 0.48467329,
           0.00550101, 0.20733616, 0.93496754, 0.85773017, 0.74072287,
           0.86819892, 0.70177802, 0.0563797 , 0.23260072, 0.79734569])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.78354606, 0.96146344, 0.32923787, 0.96819602, 0.06791481,
              0.55100752, 0.74693754, 0.79817452, 0.22024718, 0.51811538,
              0.50507287, 0.26946992, 0.69655913, 0.1078887 , 0.29994208,
              0.3113197 , 0.55184618, 0.68371708, 0.68256734, 0.125012  ,
              0.86932942, 0.98413997, 0.32662317, 0.53738741, 0.8722471 ,
              0.24362669, 0.9415382 , 0.59675465, 0.26385074, 0.56052879,
              0.95961177, 0.15384343, 0.3789277 , 0.81641556, 0.18402326,
              0.37629605, 0.31617431, 0.99241017, 0.47696281, 0.40542015,
              0.4306239 , 0.85130391, 0.69425885, 0.4146152 , 0.27508139,
              0.87034904, 0.16847692, 0.06733431, 0.32023765, 0.97812058,
              0.36118686, 0.1915712 , 0.28525981, 0.02242304, 0.34166581,
              0.45031992, 0.08142431, 0.19961095, 0.54213447, 0.68087701,
              0.26016711, 0.10396791, 0.60580212, 0.25688167, 0.68000516,
              0.19608403, 0.49373432, 0.37027994, 0.04187597, 0.00743335,
              0.51060597, 0.89274721, 0.75634543, 0.36867977, 0.96897783,
              0.36056405, 0.54276706, 0.27968961, 0.39004345, 0.53909195,
              0.02078369, 0.17650407, 0.31517763, 0.28080226, 0.33935772,
              0.83095443, 0.34568385, 0.75834833, 0.42267445, 0.87690125,
              0.0679682 , 0.13447796, 0.89853542, 0.62375793, 0.81872125,
              0.74913193, 0.6783872 , 0.32693536, 0.82157016, 0.42162053])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.4779256 , 0.97926024, 0.63863103, 0.96297567, 0.00520405,
              0.2344134 , 0.0379305 , 0.64740866, 0.07664706, 0.39912652,
              0.34231761, 0.21112412, 0.08441241, 0.77288113, 0.04389614,
              0.28674345, 0.30273789, 0.71117868, 0.75002514, 0.72135699,
              0.88575446, 0.99787212, 0.05836702, 0.50429764, 0.22990729,
              0.14597297, 0.27930946, 0.04618836, 0.10674192, 0.2734845 ,
              0.83374974, 0.31924491, 0.46294552, 0.14701984, 0.91820071,
              0.96429063, 0.48917391, 0.62580368, 0.68720079, 0.51241707,
              0.51747609, 0.50123944, 0.81308499, 0.00624088, 0.66936613,
              0.9554083 , 0.1101422 , 0.92579123, 0.24001628, 0.69238194,
              0.57510183, 0.58617945, 0.69734694, 0.91116855, 0.60207248,
              0.70080855, 0.27044393, 0.88017058, 0.26191104, 0.25263771,
              0.32703015, 0.86277282, 0.09498108, 0.73909942, 0.93305813,
              0.30442516, 0.14679203, 0.47013889, 0.51709265, 0.86414878,
              0.86822906, 0.66247053, 0.26083012, 0.30880124, 0.98940302,
              0.57425749, 0.75625604, 0.62681402, 0.73414307, 0.29801315,
              0.41724268, 0.10218597, 0.31638558, 0.42777437, 0.20492124,
              0.64026872, 0.27124416, 0.95935714, 0.99234035, 0.00173013,
              0.28622619, 0.52619613, 0.01520182, 0.07451999, 0.77258703,
              0.25383672, 0.90291407, 0.72497899, 0.81199706, 0.98554929])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.93983633, 0.93786645, 0.74031666, 0.26670763, 0.52009561,
              0.83661259, 0.32164906, 0.86235603, 0.75073238, 0.8897118 ,
              0.79740748, 0.44724398, 0.65979222, 0.57736364, 0.59677674,
              0.87783105, 0.11726833, 0.39907263, 0.79235395, 0.00942355,
              0.56542075, 0.66648587, 0.88225029, 0.71887167, 0.8698505 ,
              0.29344595, 0.50151793, 0.50508506, 0.03155011, 0.91696912,
              0.19952015, 0.45221817, 0.42129196, 0.04958852, 0.47881812,
              0.47175094, 0.83792406, 0.58449647, 0.59619489, 0.89514072,
              0.46383142, 0.46932631, 0.53516784, 0.04174529, 0.25989313,
              0.8451936 , 0.71449195, 0.61830988, 0.66746922, 0.49187868,
              0.02021738, 0.83590881, 0.64423387, 0.37306528, 0.34552597,
              0.44329833, 0.62235497, 0.49425433, 0.89038272, 0.054374  ,
              0.48991639, 0.44440332, 0.67885501, 0.33700275, 0.13693726,
              0.4166921 , 0.41623642, 0.15860803, 0.69478346, 0.14406798,
              0.82081492, 0.37321404, 0.52754498, 0.29991225, 0.76996811,
              0.16307378, 0.02346242, 0.56730583, 0.91452533, 0.31380439,
              0.47676137, 0.46478143, 0.80989527, 0.79297868, 0.08721335,
              0.07557595, 0.01809059, 0.82250069, 0.55234936, 0.81186938,
              0.29970391, 0.87726588, 0.48594705, 0.72544438, 0.77912309,
              0.19965681, 0.8357468 , 0.18169892, 0.34748554, 0.16438152])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.40846511, 0.15309665, 0.94121395, 0.78554971, 0.60963928,
              0.17840439, 0.58930159, 0.0265664 , 0.21365689, 0.31035267,
              0.46475225, 0.26370194, 0.45432944, 0.78447599, 0.88783317,
              0.15811583, 0.46757702, 0.04441419, 0.11454321, 0.14996815,
              0.21612878, 0.74426591, 0.48374215, 0.09403123, 0.61285003,
              0.33011938, 0.7440077 , 0.13453939, 0.27746113, 0.8886719 ,
              0.90147591, 0.05630785, 0.29200677, 0.60154824, 0.67225982,
              0.48225106, 0.22496451, 0.76959701, 0.36129963, 0.71868294,
              0.80218071, 0.75640182, 0.8789245 , 0.2092971 , 0.30621193,
              0.03081632, 0.62574797, 0.74512404, 0.08849762, 0.88286295,
              0.26953026, 0.67288923, 0.1939034 , 0.57328727, 0.45997266,
              0.12066368, 0.45717096, 0.70472504, 0.61802304, 0.97750909,
              0.98034973, 0.34125611, 0.90460583, 0.98365917, 0.61435034,
              0.23066232, 0.55734553, 0.97682309, 0.67848891, 0.07032447,
              0.02212647, 0.08930422, 0.37804797, 0.77780936, 0.34417204,
              0.58433068, 0.41783163, 0.76317062, 0.91425204, 0.21243909,
              0.36836847, 0.56808866, 0.25511579, 0.05764001, 0.92966275,
              0.49502613, 0.59417046, 0.20050111, 0.67429511, 0.92371942,
              0.08560121, 0.68302945, 0.42906877, 0.80325084, 0.83960203,
              0.39752321, 0.8891612 , 0.41725989, 0.11626639, 0.9338477 ])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.78354606, 0.96146344, 0.32923787, 0.96819602, 0.06791481,
              0.55100752, 0.74693754, 0.79817452, 0.22024718, 0.51811538,
              0.50507287, 0.26946992, 0.69655913, 0.1078887 , 0.29994208,
              0.3113197 , 0.55184618, 0.68371708, 0.68256734, 0.125012  ,
              0.86932942, 0.98413997, 0.32662317, 0.53738741, 0.8722471 ,
              0.24362669, 0.9415382 , 0.59675465, 0.26385074, 0.56052879,
              0.95961177, 0.15384343, 0.3789277 , 0.81641556, 0.18402326,
              0.37629605, 0.31617431, 0.99241017, 0.47696281, 0.40542015,
              0.4306239 , 0.85130391, 0.69425885, 0.4146152 , 0.27508139,
              0.87034904, 0.16847692, 0.06733431, 0.32023765, 0.97812058,
              0.36118686, 0.1915712 , 0.28525981, 0.02242304, 0.34166581,
              0.45031992, 0.08142431, 0.19961095, 0.54213447, 0.68087701,
              0.26016711, 0.10396791, 0.60580212, 0.25688167, 0.68000516,
              0.19608403, 0.49373432, 0.37027994, 0.04187597, 0.00743335,
              0.51060597, 0.89274721, 0.75634543, 0.36867977, 0.96897783,
              0.36056405, 0.54276706, 0.27968961, 0.39004345, 0.53909195,
              0.02078369, 0.17650407, 0.31517763, 0.28080226, 0.33935772,
              0.83095443, 0.34568385, 0.75834833, 0.42267445, 0.87690125,
              0.0679682 , 0.13447796, 0.89853542, 0.62375793, 0.81872125,
              0.74913193, 0.6783872 , 0.32693536, 0.82157016, 0.42162053])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.4779256 , 0.97926024, 0.63863103, 0.96297567, 0.00520405,
              0.2344134 , 0.0379305 , 0.64740866, 0.07664706, 0.39912652,
              0.34231761, 0.21112412, 0.08441241, 0.77288113, 0.04389614,
              0.28674345, 0.30273789, 0.71117868, 0.75002514, 0.72135699,
              0.88575446, 0.99787212, 0.05836702, 0.50429764, 0.22990729,
              0.14597297, 0.27930946, 0.04618836, 0.10674192, 0.2734845 ,
              0.83374974, 0.31924491, 0.46294552, 0.14701984, 0.91820071,
              0.96429063, 0.48917391, 0.62580368, 0.68720079, 0.51241707,
              0.51747609, 0.50123944, 0.81308499, 0.00624088, 0.66936613,
              0.9554083 , 0.1101422 , 0.92579123, 0.24001628, 0.69238194,
              0.57510183, 0.58617945, 0.69734694, 0.91116855, 0.60207248,
              0.70080855, 0.27044393, 0.88017058, 0.26191104, 0.25263771,
              0.32703015, 0.86277282, 0.09498108, 0.73909942, 0.93305813,
              0.30442516, 0.14679203, 0.47013889, 0.51709265, 0.86414878,
              0.86822906, 0.66247053, 0.26083012, 0.30880124, 0.98940302,
              0.57425749, 0.75625604, 0.62681402, 0.73414307, 0.29801315,
              0.41724268, 0.10218597, 0.31638558, 0.42777437, 0.20492124,
              0.64026872, 0.27124416, 0.95935714, 0.99234035, 0.00173013,
              0.28622619, 0.52619613, 0.01520182, 0.07451999, 0.77258703,
              0.25383672, 0.90291407, 0.72497899, 0.81199706, 0.98554929])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.93983633, 0.93786645, 0.74031666, 0.26670763, 0.52009561,
              0.83661259, 0.32164906, 0.86235603, 0.75073238, 0.8897118 ,
              0.79740748, 0.44724398, 0.65979222, 0.57736364, 0.59677674,
              0.87783105, 0.11726833, 0.39907263, 0.79235395, 0.00942355,
              0.56542075, 0.66648587, 0.88225029, 0.71887167, 0.8698505 ,
              0.29344595, 0.50151793, 0.50508506, 0.03155011, 0.91696912,
              0.19952015, 0.45221817, 0.42129196, 0.04958852, 0.47881812,
              0.47175094, 0.83792406, 0.58449647, 0.59619489, 0.89514072,
              0.46383142, 0.46932631, 0.53516784, 0.04174529, 0.25989313,
              0.8451936 , 0.71449195, 0.61830988, 0.66746922, 0.49187868,
              0.02021738, 0.83590881, 0.64423387, 0.37306528, 0.34552597,
              0.44329833, 0.62235497, 0.49425433, 0.89038272, 0.054374  ,
              0.48991639, 0.44440332, 0.67885501, 0.33700275, 0.13693726,
              0.4166921 , 0.41623642, 0.15860803, 0.69478346, 0.14406798,
              0.82081492, 0.37321404, 0.52754498, 0.29991225, 0.76996811,
              0.16307378, 0.02346242, 0.56730583, 0.91452533, 0.31380439,
              0.47676137, 0.46478143, 0.80989527, 0.79297868, 0.08721335,
              0.07557595, 0.01809059, 0.82250069, 0.55234936, 0.81186938,
              0.29970391, 0.87726588, 0.48594705, 0.72544438, 0.77912309,
              0.19965681, 0.8357468 , 0.18169892, 0.34748554, 0.16438152])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.21080092, 0.13952799, 0.0625259 , 0.60528694, 0.84288043,
              0.91794432, 0.39690814, 0.96358947, 0.54541577, 0.95243815,
              0.63085011, 0.27786879, 0.61531599, 0.49362139, 0.07750828,
              0.99262252, 0.9183129 , 0.58788677, 0.87107153, 0.85212476,
              0.03586694, 0.9986929 , 0.07459151, 0.22437383, 0.14867315,
              0.02771123, 0.77536758, 0.35435791, 0.99005365, 0.62191945,
              0.19612291, 0.18840027, 0.82907063, 0.15295622, 0.59800114,
              0.37323902, 0.53687956, 0.09574266, 0.37317954, 0.88397815,
              0.11483966, 0.5674669 , 0.84725563, 0.27650429, 0.51872965,
              0.75455444, 0.12514957, 0.16564305, 0.39724422, 0.89152701,
              0.08985268, 0.23977759, 0.10202363, 0.06070872, 0.91151286,
              0.64785318, 0.61491937, 0.72104147, 0.06895807, 0.04231997,
              0.32849864, 0.84336778, 0.84637452, 0.76083463, 0.21017225,
              0.05896909, 0.6373683 , 0.48393675, 0.69215099, 0.87278851,
              0.39807782, 0.21291258, 0.00169007, 0.13829579, 0.09565459,
              0.77554168, 0.95895508, 0.54028524, 0.1464386 , 0.50147517,
              0.11716118, 0.81153551, 0.42516867, 0.07872696, 0.17591434,
              0.32970016, 0.55615174, 0.55554083, 0.42891195, 0.13584384,
              0.69888782, 0.12857614, 0.8559018 , 0.43591762, 0.78420176,
              0.01489754, 0.45618374, 0.39743189, 0.68233584, 0.14196564])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.33073745, 0.7624621 , 0.66499252, 0.85899188, 0.41935222,
              0.52774713, 0.79938376, 0.94753245, 0.749953  , 0.88738564,
              0.72207943, 0.43808159, 0.483577  , 0.43138965, 0.51830394,
              0.10629439, 0.54394181, 0.38165438, 0.19702645, 0.48419807,
              0.65648866, 0.54761182, 0.52388626, 0.82947403, 0.29537775,
              0.84227085, 0.74837139, 0.96431781, 0.12649903, 0.43797068,
              0.37853013, 0.24655099, 0.411392  , 0.84575391, 0.95062669,
              0.73865583, 0.78773059, 0.55829783, 0.97066662, 0.6754695 ,
              0.98910265, 0.49844001, 0.79115649, 0.58113633, 0.97971249,
              0.74652377, 0.19545833, 0.05179705, 0.27084586, 0.90633257,
              0.33562584, 0.88130849, 0.15262657, 0.71796454, 0.01771338,
              0.5333739 , 0.01909685, 0.19220802, 0.60511958, 0.17176114,
              0.84124253, 0.73727586, 0.76698841, 0.17257321, 0.4684227 ,
              0.2081868 , 0.58225156, 0.43562502, 0.66029314, 0.09063727,
              0.58677366, 0.83657276, 0.66088477, 0.56382341, 0.79626784,
              0.15035503, 0.51592104, 0.56194803, 0.46484841, 0.63356073,
              0.97949128, 0.20598726, 0.63133496, 0.31931539, 0.68843843,
              0.40263051, 0.54224246, 0.45176865, 0.9996706 , 0.48467329,
              0.00550101, 0.20733616, 0.93496754, 0.85773017, 0.74072287,
              0.86819892, 0.70177802, 0.0563797 , 0.23260072, 0.79734569])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.53010933, 0.5954108 , 0.0421309 , 0.77888679, 0.73706669,
              0.01978352, 0.75773824, 0.98898543, 0.10970263, 0.85394957,
              0.87397899, 0.12960195, 0.76492271, 0.66910446, 0.05231452,
              0.08158369, 0.519132  , 0.38008969, 0.29077348, 0.61392143,
              0.63457323, 0.14644433, 0.99517563, 0.08797041, 0.23675093,
              0.65181336, 0.32518159, 0.16680832, 0.60092324, 0.36311188,
              0.62861956, 0.42660847, 0.83213308, 0.3082064 , 0.30932087,
              0.91576122, 0.91484284, 0.35205703, 0.38491843, 0.87119615,
              0.48907181, 0.00832415, 0.36853062, 0.96805993, 0.7134517 ,
              0.80639952, 0.2305552 , 0.48555618, 0.58900955, 0.07451446,
              0.63179466, 0.55121887, 0.45812187, 0.6471334 , 0.52105505,
              0.6467443 , 0.55611862, 0.43931205, 0.26788931, 0.95643547,
              0.63979456, 0.46205188, 0.05229756, 0.2743466 , 0.91901058,
              0.56822939, 0.73117592, 0.76051933, 0.40542   , 0.19901967,
              0.06450073, 0.9922454 , 0.57267527, 0.47025937, 0.24261162,
              0.98862774, 0.97388322, 0.05605032, 0.94545551, 0.63813611,
              0.75251118, 0.38139238, 0.08808499, 0.11005814, 0.19513931,
              0.5734482 , 0.12019786, 0.66213146, 0.62284153, 0.58830434,
              0.02108697, 0.41480086, 0.38752316, 0.72803118, 0.59226305,
              0.77160896, 0.34521049, 0.93317821, 0.85713528, 0.311391  ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.86147545, 0.82714859, 0.67220556, 0.37609637, 0.63270946,
              0.28589237, 0.26527945, 0.24090421, 0.03943142, 0.86546174,
              0.37471671, 0.13201131, 0.35458138, 0.95743684, 0.35371737,
              0.05521846, 0.26741271, 0.863234  , 0.14423398, 0.62347139,
              0.08186886, 0.66459287, 0.2908353 , 0.41813621, 0.46051072,
              0.58363571, 0.06181784, 0.75409613, 0.20567222, 0.55072461,
              0.98657524, 0.45449538, 0.81725942, 0.90994018, 0.44827349,
              0.1257447 , 0.09892846, 0.2913099 , 0.05753357, 0.88763999,
              0.45723429, 0.79136538, 0.87822738, 0.48897138, 0.81964152,
              0.42520974, 0.13482051, 0.7765373 , 0.70617435, 0.72429414,
              0.82371018, 0.99283149, 0.69127561, 0.7649294 , 0.32575683,
              0.50029308, 0.20311996, 0.60697115, 0.01126282, 0.43854689,
              0.59340807, 0.41112693, 0.17942017, 0.26653276, 0.63697621,
              0.42045627, 0.59614016, 0.81568708, 0.30539296, 0.6988689 ,
              0.29166614, 0.94574197, 0.47546905, 0.20653311, 0.43633791,
              0.66675711, 0.59064941, 0.17382387, 0.92188171, 0.78399191,
              0.1498654 , 0.36138298, 0.89369709, 0.66188454, 0.03240816,
              0.94650348, 0.06246835, 0.69676426, 0.84405308, 0.52103175,
              0.9745612 , 0.64637866, 0.20183633, 0.80155852, 0.50029686,
              0.72227744, 0.89807055, 0.94607299, 0.61973356, 0.73329646])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.73637817, 0.66001771, 0.81955923, 0.73353249, 0.09135217,
              0.60910336, 0.63229588, 0.19441224, 0.29541503, 0.90760181,
              0.85465811, 0.70227543, 0.62122642, 0.06873521, 0.31236532,
              0.55056108, 0.87884349, 0.67880166, 0.14590055, 0.0451256 ,
              0.44854579, 0.9756929 , 0.52079463, 0.68165825, 0.40605173,
              0.46427136, 0.43555824, 0.36363272, 0.87690408, 0.28284994,
              0.4078651 , 0.95004632, 0.51617022, 0.5291218 , 0.35853863,
              0.65786468, 0.20673144, 0.44141645, 0.51701396, 0.67177408,
              0.89929399, 0.01947159, 0.06207514, 0.73686523, 0.59026224,
              0.30104742, 0.34124796, 0.05241437, 0.19201715, 0.86146853,
              0.05889709, 0.90689545, 0.71871632, 0.31002594, 0.11879466,
              0.75823218, 0.00270482, 0.11136167, 0.64462158, 0.54274577,
              0.63788913, 0.41525077, 0.68478969, 0.03827079, 0.34856553,
              0.56020249, 0.15400403, 0.12909567, 0.255437  , 0.08897765,
              0.51074505, 0.75486044, 0.98186176, 0.02961666, 0.7319241 ,
              0.83971159, 0.75590885, 0.025549  , 0.84870002, 0.77057294,
              0.79253924, 0.74709462, 0.86332835, 0.98251006, 0.90744667,
              0.66874737, 0.44580385, 0.90658235, 0.98462955, 0.25335736,
              0.44130079, 0.27372832, 0.88264975, 0.4720794 , 0.14691353,
              0.3169731 , 0.96640873, 0.9848552 , 0.33104079, 0.82386727])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.33073745, 0.7624621 , 0.66499252, 0.85899188, 0.41935222,
              0.52774713, 0.79938376, 0.94753245, 0.749953  , 0.88738564,
              0.72207943, 0.43808159, 0.483577  , 0.43138965, 0.51830394,
              0.10629439, 0.54394181, 0.38165438, 0.19702645, 0.48419807,
              0.65648866, 0.54761182, 0.52388626, 0.82947403, 0.29537775,
              0.84227085, 0.74837139, 0.96431781, 0.12649903, 0.43797068,
              0.37853013, 0.24655099, 0.411392  , 0.84575391, 0.95062669,
              0.73865583, 0.78773059, 0.55829783, 0.97066662, 0.6754695 ,
              0.98910265, 0.49844001, 0.79115649, 0.58113633, 0.97971249,
              0.74652377, 0.19545833, 0.05179705, 0.27084586, 0.90633257,
              0.33562584, 0.88130849, 0.15262657, 0.71796454, 0.01771338,
              0.5333739 , 0.01909685, 0.19220802, 0.60511958, 0.17176114,
              0.84124253, 0.73727586, 0.76698841, 0.17257321, 0.4684227 ,
              0.2081868 , 0.58225156, 0.43562502, 0.66029314, 0.09063727,
              0.58677366, 0.83657276, 0.66088477, 0.56382341, 0.79626784,
              0.15035503, 0.51592104, 0.56194803, 0.46484841, 0.63356073,
              0.97949128, 0.20598726, 0.63133496, 0.31931539, 0.68843843,
              0.40263051, 0.54224246, 0.45176865, 0.9996706 , 0.48467329,
              0.00550101, 0.20733616, 0.93496754, 0.85773017, 0.74072287,
              0.86819892, 0.70177802, 0.0563797 , 0.23260072, 0.79734569])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.53010933, 0.5954108 , 0.0421309 , 0.77888679, 0.73706669,
              0.01978352, 0.75773824, 0.98898543, 0.10970263, 0.85394957,
              0.87397899, 0.12960195, 0.76492271, 0.66910446, 0.05231452,
              0.08158369, 0.519132  , 0.38008969, 0.29077348, 0.61392143,
              0.63457323, 0.14644433, 0.99517563, 0.08797041, 0.23675093,
              0.65181336, 0.32518159, 0.16680832, 0.60092324, 0.36311188,
              0.62861956, 0.42660847, 0.83213308, 0.3082064 , 0.30932087,
              0.91576122, 0.91484284, 0.35205703, 0.38491843, 0.87119615,
              0.48907181, 0.00832415, 0.36853062, 0.96805993, 0.7134517 ,
              0.80639952, 0.2305552 , 0.48555618, 0.58900955, 0.07451446,
              0.63179466, 0.55121887, 0.45812187, 0.6471334 , 0.52105505,
              0.6467443 , 0.55611862, 0.43931205, 0.26788931, 0.95643547,
              0.63979456, 0.46205188, 0.05229756, 0.2743466 , 0.91901058,
              0.56822939, 0.73117592, 0.76051933, 0.40542   , 0.19901967,
              0.06450073, 0.9922454 , 0.57267527, 0.47025937, 0.24261162,
              0.98862774, 0.97388322, 0.05605032, 0.94545551, 0.63813611,
              0.75251118, 0.38139238, 0.08808499, 0.11005814, 0.19513931,
              0.5734482 , 0.12019786, 0.66213146, 0.62284153, 0.58830434,
              0.02108697, 0.41480086, 0.38752316, 0.72803118, 0.59226305,
              0.77160896, 0.34521049, 0.93317821, 0.85713528, 0.311391  ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.86147545, 0.82714859, 0.67220556, 0.37609637, 0.63270946,
              0.28589237, 0.26527945, 0.24090421, 0.03943142, 0.86546174,
              0.37471671, 0.13201131, 0.35458138, 0.95743684, 0.35371737,
              0.05521846, 0.26741271, 0.863234  , 0.14423398, 0.62347139,
              0.08186886, 0.66459287, 0.2908353 , 0.41813621, 0.46051072,
              0.58363571, 0.06181784, 0.75409613, 0.20567222, 0.55072461,
              0.98657524, 0.45449538, 0.81725942, 0.90994018, 0.44827349,
              0.1257447 , 0.09892846, 0.2913099 , 0.05753357, 0.88763999,
              0.45723429, 0.79136538, 0.87822738, 0.48897138, 0.81964152,
              0.42520974, 0.13482051, 0.7765373 , 0.70617435, 0.72429414,
              0.82371018, 0.99283149, 0.69127561, 0.7649294 , 0.32575683,
              0.50029308, 0.20311996, 0.60697115, 0.01126282, 0.43854689,
              0.59340807, 0.41112693, 0.17942017, 0.26653276, 0.63697621,
              0.42045627, 0.59614016, 0.81568708, 0.30539296, 0.6988689 ,
              0.29166614, 0.94574197, 0.47546905, 0.20653311, 0.43633791,
              0.66675711, 0.59064941, 0.17382387, 0.92188171, 0.78399191,
              0.1498654 , 0.36138298, 0.89369709, 0.66188454, 0.03240816,
              0.94650348, 0.06246835, 0.69676426, 0.84405308, 0.52103175,
              0.9745612 , 0.64637866, 0.20183633, 0.80155852, 0.50029686,
              0.72227744, 0.89807055, 0.94607299, 0.61973356, 0.73329646])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([8.97981249e-01, 4.23165449e-01, 2.97721175e-01, 4.02120012e-01,
              8.80350658e-01, 9.64289142e-01, 6.27701978e-01, 5.92481784e-01,
              7.47128066e-01, 4.88113036e-01, 1.69378466e-01, 8.12828409e-01,
              5.60562963e-01, 8.39393119e-01, 5.90947452e-02, 3.35820939e-01,
              9.76150394e-01, 3.42553913e-01, 6.14123609e-01, 8.99227759e-01,
              5.08754446e-01, 6.18643852e-01, 8.82143357e-01, 3.10254624e-02,
              3.86832401e-01, 9.03545946e-01, 2.05730240e-01, 1.15894496e-01,
              9.53493599e-01, 5.09495529e-01, 5.49849877e-01, 2.83721827e-01,
              1.57208004e-01, 8.34974287e-01, 4.77814427e-01, 9.57982972e-01,
              9.48161816e-01, 7.07775984e-01, 8.17032478e-01, 6.66673057e-01,
              8.07198850e-01, 7.05583634e-01, 4.49686243e-01, 6.74930826e-01,
              8.44123682e-02, 2.70549111e-01, 6.76061371e-01, 7.27006204e-01,
              2.85850796e-02, 5.34644852e-01, 7.96827452e-01, 3.42812047e-01,
              1.12528986e-01, 7.19113771e-01, 1.75974337e-01, 4.42191806e-01,
              3.42072274e-01, 4.33350155e-01, 3.91683923e-01, 3.14687710e-01,
              4.63881562e-01, 8.15080741e-01, 9.26489630e-01, 8.67970862e-01,
              5.00099699e-01, 8.69242643e-01, 8.80150312e-01, 4.48060419e-02,
              9.29495040e-01, 5.85244631e-01, 4.56700277e-01, 5.32564610e-02,
              4.80563764e-02, 1.05176193e-01, 8.41808059e-02, 6.78265453e-04,
              7.66826392e-01, 7.53976979e-01, 9.73096347e-01, 1.45798301e-01,
              5.90153318e-01, 2.64531100e-01, 2.19164092e-01, 5.82170376e-01,
              5.12635727e-01, 1.44579365e-01, 6.98289869e-01, 6.44561665e-01,
              9.61530905e-01, 7.03047917e-01, 6.46899966e-01, 4.37852852e-01,
              8.02960005e-02, 4.63906522e-01, 8.53676957e-01, 5.82737766e-01,
              6.31252352e-01, 6.22247306e-01, 4.35365848e-01, 9.18221579e-01])}]]


