
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='139f931b-abb3-40ac-b3c2-7bdd99d5c3a5'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='5bc0f7c0-0c23-41da-9947-9eabd03d4c75'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.181352233027847],
     [0.251425720103762],
     [0.362758893182547],
     [0.318321376298899],
     [0.194514761898233],
     [0.631373211914023],
     [0.245426280237878],
     [0.0726577705158205],
     [0.87713385249086],
     [0.134013987412348],
     [0.920043043721335],
     [0.512639139310994],
     [0.760019529269331],
     [0.422679417006127],
     [0.882339481450767],
     [0.778945393079893],
     [0.855541963675587],
     [0.86185435949083],
     [0.300866775205243],
     [0.54434892033239],
     [0.00296708127042733],
     [0.930542754933174],
     [0.103052033141387],
     [0.772279526571264],
     [0.525378745541752],
     [0.839621490682677],
     [0.228229752905026],
     [0.662174384347363],
     [0.747016970700511],
     [0.520907370194729],
     [0.955351046801522],
     [0.14331260801631],
     [0.305718707332579],
     [0.831189313463638],
     [0.739064674157238],
     [0.42955018885373],
     [0.882441429686842],
     [0.738144628146813],
     [0.181504090779308],
     [0.277804802646476],
     [0.860758191247678],
     [0.572855549887361],
     [0.524675960579625],
     [0.0630464297819291],
     [0.904696160367723],
     [0.23078997514824],
     [0.795664610847092],
     [0.736134012111237],
     [0.271541297983503],
     [0.648460864802013],
     [0.901702891081633],
     [0.0776672099208007],
     [0.407293921565062],
     [0.287051931713454],
     [0.14039521594766],
     [0.924782799699385],
     [0.955647345170958],
     [0.0426270505530414],
     [0.461830743993908],
     [0.0748433804452484],
     [0.934812748482763],
     [0.172217373798138],
     [0.326699306413624],
     [0.523157313881334],
     [0.0914846178423265],
     [0.69632447137353],
     [0.50187529799289],
     [0.618714354051139],
     [0.853841309459597],
     [0.183641537342122],
     [0.256526722688292],
     [0.406000045205332],
     [0.764329629278594],
     [0.577269787548602],
     [0.985209991833332],
     [0.0679745685842879],
     [0.679455563316822],
     [0.10931592115154],
     [0.404984965104254],
     [0.79061383515108],
     [0.906637079526741],
     [0.144803413635697],
     [0.14037654997813],
     [0.90667976714027],
     [0.831285252195017],
     [0.376353963423035],
     [0.702615635578423],
     [0.095005147663899],
     [0.979956013476157],
     [0.39928816328067],
     [0.286219268011282],
     [0.95189498319657],
     [0.981984397796415],
     [0.054698645080583],
     [0.828413745049117],
     [0.0459457982862752],
     [0.248436817837085],
     [0.246081701795348],
     [0.779923956417867],
     [0.20029316584761]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.23440955])],
     [array([ 0.48070455])],
     [array([ 0.84742202])],
     [array([ 0.46191312])],
     [array([ 0.46475492])],
     [array([ 0.34745936])],
     [array([ 0.92250873])],
     [array([ 0.0580208])],
     [array([ 0.31227806])],
     [array([ 0.04868461])],
     [array([ 0.47625283])],
     [array([ 0.57831057])],
     [array([ 0.85684301])],
     [array([ 0.93897952])],
     [array([ 0.84267773])],
     [array([ 0.47115063])],
     [array([ 0.67687236])],
     [array([ 0.7479757])],
     [array([ 0.16489497])],
     [array([ 0.1333227])],
     [array([ 0.06772435])],
     [array([ 0.47656118])],
     [array([ 0.07704697])],
     [array([ 0.75198662])],
     [array([ 0.48360185])],
     [array([ 0.12377536])],
     [array([ 0.40357767])],
     [array([ 0.20987159])],
     [array([ 0.50318639])],
     [array([ 0.60501385])],
     [array([ 0.47005433])],
     [array([ 0.01910386])],
     [array([ 0.11776523])],
     [array([ 0.15865739])],
     [array([ 0.72248464])],
     [array([ 0.44460205])],
     [array([ 0.73745837])],
     [array([ 0.77505338])],
     [array([ 0.43239208])],
     [array([ 0.5709569])],
     [array([ 0.22612825])],
     [array([ 0.19952363])],
     [array([ 0.19368357])],
     [array([ 0.92925927])],
     [array([ 0.02432468])],
     [array([ 0.25238489])],
     [array([ 0.52688733])],
     [array([ 0.80551001])],
     [array([ 0.29038625])],
     [array([ 0.59371182])],
     [array([ 0.47303153])],
     [array([ 0.75827379])],
     [array([ 0.46101674])],
     [array([ 0.93435093])],
     [array([ 0.82725596])],
     [array([ 0.4135999])],
     [array([ 0.95736648])],
     [array([ 0.44623016])],
     [array([ 0.30315762])],
     [array([ 0.24773479])],
     [array([ 0.14332689])],
     [array([ 0.51977999])],
     [array([ 0.94105244])],
     [array([ 0.00051496])],
     [array([ 0.96190567])],
     [array([ 0.34999811])],
     [array([ 0.88564995])],
     [array([ 0.58593053])],
     [array([ 0.75758097])],
     [array([ 0.82143996])],
     [array([ 0.77531387])],
     [array([ 0.78780088])],
     [array([ 0.89024765])],
     [array([ 0.60159559])],
     [array([ 0.49264594])],
     [array([ 0.64087852])],
     [array([ 0.6364221])],
     [array([ 0.35635605])],
     [array([ 0.15361807])],
     [array([ 0.63717763])],
     [array([ 0.3130578])],
     [array([ 0.72585166])],
     [array([ 0.53872596])],
     [array([ 0.46856314])],
     [array([ 0.41403136])],
     [array([ 0.21335979])],
     [array([ 0.21894604])],
     [array([ 0.17549171])],
     [array([ 0.06153021])],
     [array([ 0.70693583])],
     [array([ 0.64847332])],
     [array([ 0.32408736])],
     [array([ 0.36330073])],
     [array([ 0.2516108])],
     [array([ 0.59245114])],
     [array([ 0.71497143])],
     [array([ 0.99233307])],
     [array([ 0.32389483])],
     [array([ 0.03533546])],
     [array([ 0.53047808])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([  2.34409553e-01,   4.80704547e-01,   8.47422018e-01,
             4.61913123e-01,   4.64754916e-01,   3.47459358e-01,
             9.22508733e-01,   5.80207958e-02,   3.12278061e-01,
             4.86846095e-02,   4.76252830e-01,   5.78310572e-01,
             8.56843011e-01,   9.38979519e-01,   8.42677735e-01,
             4.71150629e-01,   6.76872365e-01,   7.47975700e-01,
             1.64894975e-01,   1.33322702e-01,   6.77243493e-02,
             4.76561184e-01,   7.70469711e-02,   7.51986622e-01,
             4.83601850e-01,   1.23775362e-01,   4.03577671e-01,
             2.09871594e-01,   5.03186390e-01,   6.05013849e-01,
             4.70054334e-01,   1.91038556e-02,   1.17765232e-01,
             1.58657385e-01,   7.22484644e-01,   4.44602048e-01,
             7.37458367e-01,   7.75053380e-01,   4.32392080e-01,
             5.70956899e-01,   2.26128249e-01,   1.99523625e-01,
             1.93683567e-01,   9.29259268e-01,   2.43246802e-02,
             2.52384885e-01,   5.26887333e-01,   8.05510008e-01,
             2.90386253e-01,   5.93711816e-01,   4.73031530e-01,
             7.58273785e-01,   4.61016743e-01,   9.34350927e-01,
             8.27255959e-01,   4.13599904e-01,   9.57366480e-01,
             4.46230156e-01,   3.03157622e-01,   2.47734791e-01,
             1.43326887e-01,   5.19779991e-01,   9.41052436e-01,
             5.14962001e-04,   9.61905675e-01,   3.49998109e-01,
             8.85649951e-01,   5.85930534e-01,   7.57580970e-01,
             8.21439956e-01,   7.75313874e-01,   7.87800881e-01,
             8.90247653e-01,   6.01595593e-01,   4.92645936e-01,
             6.40878519e-01,   6.36422102e-01,   3.56356050e-01,
             1.53618072e-01,   6.37177626e-01,   3.13057800e-01,
             7.25851656e-01,   5.38725956e-01,   4.68563138e-01,
             4.14031358e-01,   2.13359794e-01,   2.18946038e-01,
             1.75491711e-01,   6.15302079e-02,   7.06935832e-01,
             6.48473315e-01,   3.24087363e-01,   3.63300734e-01,
             2.51610799e-01,   5.92451137e-01,   7.14971430e-01,
             9.92333066e-01,   3.23894825e-01,   3.53354555e-02,
             5.30478085e-01])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.18135223,  0.25142572,  0.36275889,  0.31832138,  0.19451476,
               0.63137321,  0.24542628,  0.07265777,  0.87713385,  0.13401399,
               0.92004304,  0.51263914,  0.76001953,  0.42267942,  0.88233948,
               0.77894539,  0.85554196,  0.86185436,  0.30086678,  0.54434892,
               0.00296708,  0.93054275,  0.10305203,  0.77227953,  0.52537875,
               0.83962149,  0.22822975,  0.66217438,  0.74701697,  0.52090737,
               0.95535105,  0.14331261,  0.30571871,  0.83118931,  0.73906467,
               0.42955019,  0.88244143,  0.73814463,  0.18150409,  0.2778048 ,
               0.86075819,  0.57285555,  0.52467596,  0.06304643,  0.90469616,
               0.23078998,  0.79566461,  0.73613401,  0.2715413 ,  0.64846086,
               0.90170289,  0.07766721,  0.40729392,  0.28705193,  0.14039522,
               0.9247828 ,  0.95564735,  0.04262705,  0.46183074,  0.07484338,
               0.93481275,  0.17221737,  0.32669931,  0.52315731,  0.09148462,
               0.69632447,  0.5018753 ,  0.61871435,  0.85384131,  0.18364154,
               0.25652672,  0.40600005,  0.76432963,  0.57726979,  0.98520999,
               0.06797457,  0.67945556,  0.10931592,  0.40498497,  0.79061384,
               0.90663708,  0.14480341,  0.14037655,  0.90667977,  0.83128525,
               0.37635396,  0.70261564,  0.09500515,  0.97995601,  0.39928816,
               0.28621927,  0.95189498,  0.9819844 ,  0.05469865,  0.82841375,
               0.0459458 ,  0.24843682,  0.2460817 ,  0.77992396,  0.20029317])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.91231856,  0.35592299,  0.55694175,  0.32035863,  0.08193375,
               0.00381572,  0.35073075,  0.92985526,  0.39195393,  0.00456815,
               0.8870368 ,  0.36341793,  0.97634964,  0.74787292,  0.74584086,
               0.35143665,  0.93262651,  0.36319479,  0.45386683,  0.39950178,
               0.2678376 ,  0.46094507,  0.85638018,  0.94562815,  0.86569115,
               0.17429318,  0.69795606,  0.377674  ,  0.57465814,  0.40507242,
               0.75778912,  0.95513837,  0.19696539,  0.72653381,  0.5964851 ,
               0.61717376,  0.18354858,  0.32152691,  0.91332375,  0.51319708,
               0.74646153,  0.12972742,  0.72394538,  0.55283186,  0.55693539,
               0.76147634,  0.01275947,  0.92010261,  0.06437065,  0.74393207,
               0.65612709,  0.97284397,  0.77849333,  0.31345863,  0.86732929,
               0.39662075,  0.46426503,  0.07721408,  0.98426635,  0.69729925,
               0.71433554,  0.70570416,  0.50616206,  0.58831244,  0.91904006,
               0.71071802,  0.90197831,  0.07818483,  0.74218357,  0.55351611,
               0.8436216 ,  0.00244989,  0.39233073,  0.21287641,  0.08987999,
               0.80465774,  0.73553279,  0.62570066,  0.5331615 ,  0.33588677,
               0.04773696,  0.55887121,  0.45939193,  0.97683674,  0.74267075,
               0.51348967,  0.24405486,  0.85613404,  0.66933016,  0.14309568,
               0.39888173,  0.27289457,  0.07802262,  0.35580615,  0.655741  ,
               0.83210969,  0.8512329 ,  0.62206629,  0.9015798 ,  0.01172155])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.13903976,  0.26410075,  0.40844075,  0.42308772,  0.70072583,
               0.34520918,  0.39147242,  0.34660738,  0.51124097,  0.76865671,
               0.07876928,  0.07468621,  0.21269354,  0.29539847,  0.17355019,
               0.17518949,  0.37122077,  0.14395999,  0.40077559,  0.60850739,
               0.79503212,  0.13126368,  0.19063396,  0.22470881,  0.42975756,
               0.26681451,  0.65917275,  0.0761822 ,  0.60712336,  0.59336268,
               0.18469694,  0.1039166 ,  0.58803335,  0.16441036,  0.37431506,
               0.01894652,  0.01764494,  0.35287218,  0.60734375,  0.98668204,
               0.66098617,  0.076445  ,  0.33901488,  0.93781156,  0.80896646,
               0.1755953 ,  0.73016641,  0.01232105,  0.80609417,  0.68457885,
               0.28720615,  0.7774385 ,  0.05340248,  0.74731743,  0.3557436 ,
               0.93717166,  0.18239563,  0.54735067,  0.97175423,  0.68043308,
               0.81726442,  0.9782664 ,  0.57170824,  0.95055374,  0.94222235,
               0.11943687,  0.23436245,  0.60458479,  0.27513203,  0.68909665,
               0.29309193,  0.12161683,  0.31498913,  0.10191809,  0.64805248,
               0.56225262,  0.70215947,  0.80225566,  0.19166098,  0.18054898,
               0.78127296,  0.61834822,  0.71151468,  0.92132847,  0.68420202,
               0.7975242 ,  0.8695422 ,  0.65853021,  0.04911611,  0.90057342,
               0.58606289,  0.68768682,  0.22055335,  0.71899349,  0.38379792,
               0.2843145 ,  0.01747354,  0.18627448,  0.95928457,  0.93325373])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([  1.03963229e-01,   7.12545107e-01,   4.29186512e-01,
                5.46475869e-01,   6.28330760e-01,   2.54361576e-01,
                2.34521577e-01,   4.76456124e-01,   3.56278627e-01,
                5.27146756e-01,   7.33040390e-01,   6.61286212e-01,
                5.63453421e-01,   9.25434228e-01,   2.86815418e-01,
                8.39323509e-01,   6.28113230e-01,   4.04290576e-01,
                7.42015453e-01,   9.17460651e-01,   6.81821846e-01,
                1.58756644e-01,   8.94552184e-01,   8.90223266e-01,
                2.30535698e-01,   9.57515734e-01,   8.49015003e-01,
                3.95440195e-01,   4.82319861e-01,   3.04352817e-01,
                1.92171325e-03,   3.43256713e-01,   5.43927578e-02,
                5.26394657e-01,   5.51530504e-01,   3.40565076e-04,
                2.33753120e-01,   8.90624891e-01,   3.69732651e-01,
                8.25595838e-01,   1.52592600e-01,   6.18414411e-01,
                5.75570641e-01,   9.10389902e-01,   9.30061670e-01,
                3.12939048e-01,   7.02444770e-01,   4.83932407e-01,
                5.26205135e-01,   8.83274160e-01,   2.56865725e-02,
                9.32927837e-02,   6.15024977e-01,   4.63319335e-01,
                1.26355216e-01,   8.73882061e-01,   5.94490024e-01,
                1.61189344e-01,   1.93887507e-02,   9.31019758e-01,
                4.41072206e-01,   3.42964213e-01,   2.35336468e-01,
                7.07683731e-01,   8.84222531e-01,   3.36442156e-01,
                2.48346945e-01,   1.00456639e-01,   3.26595620e-01,
                1.33598060e-01,   7.28783203e-01,   6.62728649e-01,
                1.00730124e-01,   7.80802422e-01,   6.79673983e-01,
                3.85126440e-01,   3.44351063e-01,   7.64158035e-01,
                8.41575890e-01,   3.73609313e-02,   7.76248506e-01,
                8.60617864e-01,   9.02436395e-01,   5.81762122e-01,
                1.53912976e-01,   5.67347550e-01,   6.97642939e-01,
                5.31609590e-01,   9.62516443e-01,   1.83298462e-01,
                4.14170170e-01,   3.28098960e-01,   1.90832140e-02,
                2.70407174e-01,   2.47971746e-01,   5.91679359e-01,
                2.10574171e-02,   5.93393558e-01,   4.68230199e-01,
                6.60707795e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.18135223,  0.25142572,  0.36275889,  0.31832138,  0.19451476,
               0.63137321,  0.24542628,  0.07265777,  0.87713385,  0.13401399,
               0.92004304,  0.51263914,  0.76001953,  0.42267942,  0.88233948,
               0.77894539,  0.85554196,  0.86185436,  0.30086678,  0.54434892,
               0.00296708,  0.93054275,  0.10305203,  0.77227953,  0.52537875,
               0.83962149,  0.22822975,  0.66217438,  0.74701697,  0.52090737,
               0.95535105,  0.14331261,  0.30571871,  0.83118931,  0.73906467,
               0.42955019,  0.88244143,  0.73814463,  0.18150409,  0.2778048 ,
               0.86075819,  0.57285555,  0.52467596,  0.06304643,  0.90469616,
               0.23078998,  0.79566461,  0.73613401,  0.2715413 ,  0.64846086,
               0.90170289,  0.07766721,  0.40729392,  0.28705193,  0.14039522,
               0.9247828 ,  0.95564735,  0.04262705,  0.46183074,  0.07484338,
               0.93481275,  0.17221737,  0.32669931,  0.52315731,  0.09148462,
               0.69632447,  0.5018753 ,  0.61871435,  0.85384131,  0.18364154,
               0.25652672,  0.40600005,  0.76432963,  0.57726979,  0.98520999,
               0.06797457,  0.67945556,  0.10931592,  0.40498497,  0.79061384,
               0.90663708,  0.14480341,  0.14037655,  0.90667977,  0.83128525,
               0.37635396,  0.70261564,  0.09500515,  0.97995601,  0.39928816,
               0.28621927,  0.95189498,  0.9819844 ,  0.05469865,  0.82841375,
               0.0459458 ,  0.24843682,  0.2460817 ,  0.77992396,  0.20029317])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.91231856,  0.35592299,  0.55694175,  0.32035863,  0.08193375,
               0.00381572,  0.35073075,  0.92985526,  0.39195393,  0.00456815,
               0.8870368 ,  0.36341793,  0.97634964,  0.74787292,  0.74584086,
               0.35143665,  0.93262651,  0.36319479,  0.45386683,  0.39950178,
               0.2678376 ,  0.46094507,  0.85638018,  0.94562815,  0.86569115,
               0.17429318,  0.69795606,  0.377674  ,  0.57465814,  0.40507242,
               0.75778912,  0.95513837,  0.19696539,  0.72653381,  0.5964851 ,
               0.61717376,  0.18354858,  0.32152691,  0.91332375,  0.51319708,
               0.74646153,  0.12972742,  0.72394538,  0.55283186,  0.55693539,
               0.76147634,  0.01275947,  0.92010261,  0.06437065,  0.74393207,
               0.65612709,  0.97284397,  0.77849333,  0.31345863,  0.86732929,
               0.39662075,  0.46426503,  0.07721408,  0.98426635,  0.69729925,
               0.71433554,  0.70570416,  0.50616206,  0.58831244,  0.91904006,
               0.71071802,  0.90197831,  0.07818483,  0.74218357,  0.55351611,
               0.8436216 ,  0.00244989,  0.39233073,  0.21287641,  0.08987999,
               0.80465774,  0.73553279,  0.62570066,  0.5331615 ,  0.33588677,
               0.04773696,  0.55887121,  0.45939193,  0.97683674,  0.74267075,
               0.51348967,  0.24405486,  0.85613404,  0.66933016,  0.14309568,
               0.39888173,  0.27289457,  0.07802262,  0.35580615,  0.655741  ,
               0.83210969,  0.8512329 ,  0.62206629,  0.9015798 ,  0.01172155])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.13903976,  0.26410075,  0.40844075,  0.42308772,  0.70072583,
               0.34520918,  0.39147242,  0.34660738,  0.51124097,  0.76865671,
               0.07876928,  0.07468621,  0.21269354,  0.29539847,  0.17355019,
               0.17518949,  0.37122077,  0.14395999,  0.40077559,  0.60850739,
               0.79503212,  0.13126368,  0.19063396,  0.22470881,  0.42975756,
               0.26681451,  0.65917275,  0.0761822 ,  0.60712336,  0.59336268,
               0.18469694,  0.1039166 ,  0.58803335,  0.16441036,  0.37431506,
               0.01894652,  0.01764494,  0.35287218,  0.60734375,  0.98668204,
               0.66098617,  0.076445  ,  0.33901488,  0.93781156,  0.80896646,
               0.1755953 ,  0.73016641,  0.01232105,  0.80609417,  0.68457885,
               0.28720615,  0.7774385 ,  0.05340248,  0.74731743,  0.3557436 ,
               0.93717166,  0.18239563,  0.54735067,  0.97175423,  0.68043308,
               0.81726442,  0.9782664 ,  0.57170824,  0.95055374,  0.94222235,
               0.11943687,  0.23436245,  0.60458479,  0.27513203,  0.68909665,
               0.29309193,  0.12161683,  0.31498913,  0.10191809,  0.64805248,
               0.56225262,  0.70215947,  0.80225566,  0.19166098,  0.18054898,
               0.78127296,  0.61834822,  0.71151468,  0.92132847,  0.68420202,
               0.7975242 ,  0.8695422 ,  0.65853021,  0.04911611,  0.90057342,
               0.58606289,  0.68768682,  0.22055335,  0.71899349,  0.38379792,
               0.2843145 ,  0.01747354,  0.18627448,  0.95928457,  0.93325373])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.90453969,  0.95687855,  0.07167444,  0.8297966 ,  0.61805995,
               0.26283436,  0.89796315,  0.35552034,  0.96209439,  0.43848429,
               0.54196651,  0.4152363 ,  0.84033226,  0.045643  ,  0.55282368,
               0.42620858,  0.94105981,  0.06236093,  0.14094999,  0.85165902,
               0.11646121,  0.01643153,  0.63905758,  0.14523444,  0.89797129,
               0.91382314,  0.66449018,  0.14969556,  0.13323249,  0.52791918,
               0.10589813,  0.91296304,  0.63980016,  0.32799228,  0.90231871,
               0.40894482,  0.17678845,  0.71685348,  0.95553524,  0.25380381,
               0.78367701,  0.70270495,  0.41161579,  0.61125536,  0.63467908,
               0.46844613,  0.72528235,  0.07278075,  0.37320206,  0.3401917 ,
               0.69578198,  0.73114267,  0.82271707,  0.15064814,  0.60325904,
               0.25246476,  0.16956645,  0.02502958,  0.82919101,  0.40578598,
               0.624441  ,  0.0104886 ,  0.674713  ,  0.14898738,  0.53193105,
               0.05417902,  0.63454403,  0.31811627,  0.39141926,  0.2004807 ,
               0.96129163,  0.18497665,  0.27019202,  0.62493025,  0.72102116,
               0.58675718,  0.36282518,  0.24793608,  0.99386179,  0.84319725,
               0.93296627,  0.13676384,  0.06475534,  0.48175467,  0.46463003,
               0.37138118,  0.63193007,  0.21869581,  0.08833546,  0.96503258,
               0.10999668,  0.35224693,  0.25058727,  0.44946686,  0.19092079,
               0.30735568,  0.60776788,  0.29095065,  0.77395797,  0.89209776])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  2.34409553e-01,   4.80704547e-01,   8.47422018e-01,
                4.61913123e-01,   4.64754916e-01,   3.47459358e-01,
                9.22508733e-01,   5.80207958e-02,   3.12278061e-01,
                4.86846095e-02,   4.76252830e-01,   5.78310572e-01,
                8.56843011e-01,   9.38979519e-01,   8.42677735e-01,
                4.71150629e-01,   6.76872365e-01,   7.47975700e-01,
                1.64894975e-01,   1.33322702e-01,   6.77243493e-02,
                4.76561184e-01,   7.70469711e-02,   7.51986622e-01,
                4.83601850e-01,   1.23775362e-01,   4.03577671e-01,
                2.09871594e-01,   5.03186390e-01,   6.05013849e-01,
                4.70054334e-01,   1.91038556e-02,   1.17765232e-01,
                1.58657385e-01,   7.22484644e-01,   4.44602048e-01,
                7.37458367e-01,   7.75053380e-01,   4.32392080e-01,
                5.70956899e-01,   2.26128249e-01,   1.99523625e-01,
                1.93683567e-01,   9.29259268e-01,   2.43246802e-02,
                2.52384885e-01,   5.26887333e-01,   8.05510008e-01,
                2.90386253e-01,   5.93711816e-01,   4.73031530e-01,
                7.58273785e-01,   4.61016743e-01,   9.34350927e-01,
                8.27255959e-01,   4.13599904e-01,   9.57366480e-01,
                4.46230156e-01,   3.03157622e-01,   2.47734791e-01,
                1.43326887e-01,   5.19779991e-01,   9.41052436e-01,
                5.14962001e-04,   9.61905675e-01,   3.49998109e-01,
                8.85649951e-01,   5.85930534e-01,   7.57580970e-01,
                8.21439956e-01,   7.75313874e-01,   7.87800881e-01,
                8.90247653e-01,   6.01595593e-01,   4.92645936e-01,
                6.40878519e-01,   6.36422102e-01,   3.56356050e-01,
                1.53618072e-01,   6.37177626e-01,   3.13057800e-01,
                7.25851656e-01,   5.38725956e-01,   4.68563138e-01,
                4.14031358e-01,   2.13359794e-01,   2.18946038e-01,
                1.75491711e-01,   6.15302079e-02,   7.06935832e-01,
                6.48473315e-01,   3.24087363e-01,   3.63300734e-01,
                2.51610799e-01,   5.92451137e-01,   7.14971430e-01,
                9.92333066e-01,   3.23894825e-01,   3.53354555e-02,
                5.30478085e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([  7.88117276e-01,   5.21763080e-01,   5.67079907e-01,
                4.48988972e-01,   3.99619868e-01,   7.91325053e-01,
                7.64782632e-02,   8.36639261e-01,   7.58195372e-01,
                9.51447193e-01,   6.17998486e-01,   4.69408353e-01,
                4.09051606e-01,   5.63327530e-01,   9.13353679e-01,
                8.22146928e-01,   6.74633221e-01,   6.45483133e-01,
                4.24509081e-01,   7.83149122e-01,   9.18557449e-01,
                8.03479275e-01,   2.18071702e-01,   5.77350242e-01,
                9.61967001e-01,   9.46754460e-01,   5.23902701e-01,
                2.67985202e-01,   8.30926360e-01,   9.93879858e-01,
                8.80271000e-01,   1.02766987e-01,   2.95646896e-01,
                7.68414977e-01,   6.35174363e-01,   8.60916159e-01,
                7.35303073e-01,   6.76733801e-03,   9.19487530e-01,
                1.11994277e-01,   4.58195299e-02,   6.74408755e-02,
                3.75430117e-01,   8.86187639e-01,   7.22777310e-01,
                7.13645542e-01,   7.97990277e-01,   1.44094566e-01,
                1.30041784e-01,   8.85711736e-01,   7.27166363e-01,
                8.54416186e-01,   1.08653009e-01,   3.62827633e-01,
                3.49342495e-01,   4.54235292e-02,   6.93604665e-02,
                4.32150407e-04,   9.22630909e-01,   8.95374090e-01,
                1.78025661e-01,   4.09325372e-01,   3.98115562e-02,
                6.12244486e-02,   9.58629520e-01,   8.48582725e-01,
                3.34167500e-01,   5.96391278e-01,   4.35458687e-01,
                1.46614329e-01,   6.81652251e-01,   8.29661297e-01,
                5.67623951e-01,   5.87533558e-01,   4.61908827e-01,
                3.97390637e-01,   7.36878875e-01,   7.03963947e-01,
                7.85559584e-01,   8.70141793e-01,   3.36811243e-01,
                5.36977693e-01,   5.82669955e-01,   6.91212134e-01,
                8.23550874e-01,   5.84752292e-01,   6.79436790e-02,
                6.53408542e-01,   4.47612152e-01,   1.95308123e-01,
                9.63206780e-01,   8.08850168e-01,   6.65798118e-01,
                5.83259235e-01,   9.10151608e-02,   9.92429971e-01,
                9.43725634e-01,   5.08456854e-01,   6.53937925e-01,
                9.08177086e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.83750737,  0.7541033 ,  0.24264277,  0.88501017,  0.5136304 ,
               0.82852441,  0.26783551,  0.42653738,  0.76377849,  0.53119619,
               0.65168005,  0.02349444,  0.60859657,  0.82046208,  0.53688566,
               0.00490174,  0.57613896,  0.831299  ,  0.55937546,  0.81840818,
               0.48460399,  0.66916598,  0.48706007,  0.39939205,  0.96604202,
               0.18277823,  0.65187116,  0.97051729,  0.01088583,  0.63293914,
               0.90575545,  0.95904854,  0.62497938,  0.44722739,  0.85824473,
               0.35804746,  0.42249122,  0.20408627,  0.30666629,  0.72478902,
               0.53417882,  0.23695786,  0.76519322,  0.27958527,  0.90529682,
               0.09446389,  0.78760462,  0.8712119 ,  0.42332829,  0.2362425 ,
               0.34671797,  0.73462809,  0.65278687,  0.52820447,  0.75049674,
               0.2029097 ,  0.46521317,  0.57905022,  0.38438965,  0.93737617,
               0.77711592,  0.12134867,  0.407334  ,  0.28916044,  0.52702881,
               0.66409813,  0.19611178,  0.77557138,  0.53398364,  0.79816034,
               0.24851161,  0.79043127,  0.50818962,  0.40476972,  0.88316104,
               0.85986928,  0.10020713,  0.50384638,  0.50390028,  0.95562392,
               0.88604725,  0.45760728,  0.12988833,  0.88240734,  0.94383704,
               0.0209694 ,  0.42296958,  0.04370944,  0.53838615,  0.43674186,
               0.65967322,  0.80291486,  0.85289331,  0.47239039,  0.44392692,
               0.94523135,  0.85624022,  0.08452105,  0.29782011,  0.02680986])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.67890324,  0.83053871,  0.64624188,  0.81404576,  0.70129422,
               0.09133744,  0.82976907,  0.81363689,  0.61797276,  0.33954477,
               0.97463484,  0.99572019,  0.11244739,  0.84872246,  0.76102993,
               0.5819483 ,  0.24109404,  0.75498563,  0.92523913,  0.03129036,
               0.087364  ,  0.57708669,  0.95816601,  0.5640551 ,  0.83893643,
               0.45580542,  0.61645996,  0.00283213,  0.76592731,  0.72863833,
               0.55457786,  0.14228932,  0.77358993,  0.66799624,  0.10179233,
               0.03971952,  0.65136229,  0.71778987,  0.97901726,  0.22616177,
               0.14520537,  0.40608748,  0.24542969,  0.42607248,  0.66790024,
               0.50352975,  0.78669944,  0.71951601,  0.03340834,  0.25545093,
               0.73939204,  0.12298346,  0.59481878,  0.21229549,  0.0816005 ,
               0.2801752 ,  0.65465037,  0.40905576,  0.92066144,  0.84591059,
               0.52415897,  0.68872592,  0.42368381,  0.96704239,  0.68639022,
               0.9637901 ,  0.8489914 ,  0.60710985,  0.32213214,  0.15466777,
               0.73396959,  0.88488991,  0.5832664 ,  0.94943816,  0.89122598,
               0.27516848,  0.69749145,  0.3004322 ,  0.27935826,  0.48632209,
               0.84997212,  0.0549408 ,  0.28209276,  0.55480816,  0.59145958,
               0.55279905,  0.62846764,  0.28670138,  0.67888338,  0.16638197,
               0.30386244,  0.60267767,  0.91397538,  0.19133291,  0.79856806,
               0.40852071,  0.84454365,  0.22390173,  0.57089385,  0.35848604])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  2.34409553e-01,   4.80704547e-01,   8.47422018e-01,
                4.61913123e-01,   4.64754916e-01,   3.47459358e-01,
                9.22508733e-01,   5.80207958e-02,   3.12278061e-01,
                4.86846095e-02,   4.76252830e-01,   5.78310572e-01,
                8.56843011e-01,   9.38979519e-01,   8.42677735e-01,
                4.71150629e-01,   6.76872365e-01,   7.47975700e-01,
                1.64894975e-01,   1.33322702e-01,   6.77243493e-02,
                4.76561184e-01,   7.70469711e-02,   7.51986622e-01,
                4.83601850e-01,   1.23775362e-01,   4.03577671e-01,
                2.09871594e-01,   5.03186390e-01,   6.05013849e-01,
                4.70054334e-01,   1.91038556e-02,   1.17765232e-01,
                1.58657385e-01,   7.22484644e-01,   4.44602048e-01,
                7.37458367e-01,   7.75053380e-01,   4.32392080e-01,
                5.70956899e-01,   2.26128249e-01,   1.99523625e-01,
                1.93683567e-01,   9.29259268e-01,   2.43246802e-02,
                2.52384885e-01,   5.26887333e-01,   8.05510008e-01,
                2.90386253e-01,   5.93711816e-01,   4.73031530e-01,
                7.58273785e-01,   4.61016743e-01,   9.34350927e-01,
                8.27255959e-01,   4.13599904e-01,   9.57366480e-01,
                4.46230156e-01,   3.03157622e-01,   2.47734791e-01,
                1.43326887e-01,   5.19779991e-01,   9.41052436e-01,
                5.14962001e-04,   9.61905675e-01,   3.49998109e-01,
                8.85649951e-01,   5.85930534e-01,   7.57580970e-01,
                8.21439956e-01,   7.75313874e-01,   7.87800881e-01,
                8.90247653e-01,   6.01595593e-01,   4.92645936e-01,
                6.40878519e-01,   6.36422102e-01,   3.56356050e-01,
                1.53618072e-01,   6.37177626e-01,   3.13057800e-01,
                7.25851656e-01,   5.38725956e-01,   4.68563138e-01,
                4.14031358e-01,   2.13359794e-01,   2.18946038e-01,
                1.75491711e-01,   6.15302079e-02,   7.06935832e-01,
                6.48473315e-01,   3.24087363e-01,   3.63300734e-01,
                2.51610799e-01,   5.92451137e-01,   7.14971430e-01,
                9.92333066e-01,   3.23894825e-01,   3.53354555e-02,
                5.30478085e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([  7.88117276e-01,   5.21763080e-01,   5.67079907e-01,
                4.48988972e-01,   3.99619868e-01,   7.91325053e-01,
                7.64782632e-02,   8.36639261e-01,   7.58195372e-01,
                9.51447193e-01,   6.17998486e-01,   4.69408353e-01,
                4.09051606e-01,   5.63327530e-01,   9.13353679e-01,
                8.22146928e-01,   6.74633221e-01,   6.45483133e-01,
                4.24509081e-01,   7.83149122e-01,   9.18557449e-01,
                8.03479275e-01,   2.18071702e-01,   5.77350242e-01,
                9.61967001e-01,   9.46754460e-01,   5.23902701e-01,
                2.67985202e-01,   8.30926360e-01,   9.93879858e-01,
                8.80271000e-01,   1.02766987e-01,   2.95646896e-01,
                7.68414977e-01,   6.35174363e-01,   8.60916159e-01,
                7.35303073e-01,   6.76733801e-03,   9.19487530e-01,
                1.11994277e-01,   4.58195299e-02,   6.74408755e-02,
                3.75430117e-01,   8.86187639e-01,   7.22777310e-01,
                7.13645542e-01,   7.97990277e-01,   1.44094566e-01,
                1.30041784e-01,   8.85711736e-01,   7.27166363e-01,
                8.54416186e-01,   1.08653009e-01,   3.62827633e-01,
                3.49342495e-01,   4.54235292e-02,   6.93604665e-02,
                4.32150407e-04,   9.22630909e-01,   8.95374090e-01,
                1.78025661e-01,   4.09325372e-01,   3.98115562e-02,
                6.12244486e-02,   9.58629520e-01,   8.48582725e-01,
                3.34167500e-01,   5.96391278e-01,   4.35458687e-01,
                1.46614329e-01,   6.81652251e-01,   8.29661297e-01,
                5.67623951e-01,   5.87533558e-01,   4.61908827e-01,
                3.97390637e-01,   7.36878875e-01,   7.03963947e-01,
                7.85559584e-01,   8.70141793e-01,   3.36811243e-01,
                5.36977693e-01,   5.82669955e-01,   6.91212134e-01,
                8.23550874e-01,   5.84752292e-01,   6.79436790e-02,
                6.53408542e-01,   4.47612152e-01,   1.95308123e-01,
                9.63206780e-01,   8.08850168e-01,   6.65798118e-01,
                5.83259235e-01,   9.10151608e-02,   9.92429971e-01,
                9.43725634e-01,   5.08456854e-01,   6.53937925e-01,
                9.08177086e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.83750737,  0.7541033 ,  0.24264277,  0.88501017,  0.5136304 ,
               0.82852441,  0.26783551,  0.42653738,  0.76377849,  0.53119619,
               0.65168005,  0.02349444,  0.60859657,  0.82046208,  0.53688566,
               0.00490174,  0.57613896,  0.831299  ,  0.55937546,  0.81840818,
               0.48460399,  0.66916598,  0.48706007,  0.39939205,  0.96604202,
               0.18277823,  0.65187116,  0.97051729,  0.01088583,  0.63293914,
               0.90575545,  0.95904854,  0.62497938,  0.44722739,  0.85824473,
               0.35804746,  0.42249122,  0.20408627,  0.30666629,  0.72478902,
               0.53417882,  0.23695786,  0.76519322,  0.27958527,  0.90529682,
               0.09446389,  0.78760462,  0.8712119 ,  0.42332829,  0.2362425 ,
               0.34671797,  0.73462809,  0.65278687,  0.52820447,  0.75049674,
               0.2029097 ,  0.46521317,  0.57905022,  0.38438965,  0.93737617,
               0.77711592,  0.12134867,  0.407334  ,  0.28916044,  0.52702881,
               0.66409813,  0.19611178,  0.77557138,  0.53398364,  0.79816034,
               0.24851161,  0.79043127,  0.50818962,  0.40476972,  0.88316104,
               0.85986928,  0.10020713,  0.50384638,  0.50390028,  0.95562392,
               0.88604725,  0.45760728,  0.12988833,  0.88240734,  0.94383704,
               0.0209694 ,  0.42296958,  0.04370944,  0.53838615,  0.43674186,
               0.65967322,  0.80291486,  0.85289331,  0.47239039,  0.44392692,
               0.94523135,  0.85624022,  0.08452105,  0.29782011,  0.02680986])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.50499873,  0.64966296,  0.98653002,  0.68811936,  0.6447021 ,
               0.72150227,  0.61044622,  0.48125937,  0.31345108,  0.76263636,
               0.83617961,  0.33242998,  0.6949234 ,  0.20437809,  0.57779963,
               0.01467214,  0.55531805,  0.03131158,  0.22848638,  0.75133401,
               0.14460876,  0.26258485,  0.4417785 ,  0.71240016,  0.69626213,
               0.28197221,  0.23733243,  0.92805948,  0.93155842,  0.89253674,
               0.20104918,  0.23265969,  0.59365678,  0.75607961,  0.89723734,
               0.16443576,  0.47521612,  0.10363423,  0.97534515,  0.0762786 ,
               0.47558574,  0.42748203,  0.30364356,  0.04438721,  0.79807478,
               0.02050408,  0.74104765,  0.64632172,  0.03225118,  0.95952026,
               0.76381896,  0.29816177,  0.1839013 ,  0.63360228,  0.19527467,
               0.4730306 ,  0.2212438 ,  0.0270284 ,  0.05271783,  0.58361603,
               0.28776061,  0.21679346,  0.74650818,  0.38201882,  0.63166622,
               0.21545403,  0.71356815,  0.04649234,  0.10322656,  0.10833706,
               0.30717087,  0.30526077,  0.26424174,  0.04053012,  0.7709867 ,
               0.78303546,  0.71909707,  0.66384527,  0.68330005,  0.79318759,
               0.67765831,  0.41370316,  0.40338247,  0.37253518,  0.39362866,
               0.70897231,  0.88121415,  0.45858608,  0.00363108,  0.07517003,
               0.5346143 ,  0.05476259,  0.56182603,  0.52899643,  0.148961  ,
               0.03117562,  0.98945877,  0.23139936,  0.36254535,  0.58221523])}]]


