
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='7faba391-9dc6-4d43-801c-f74ec377c009'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='8401e2c7-92d3-4a8c-a52b-69e2d8aad6fe'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.266663671885541],
     [0.954001649509588],
     [0.683087635931165],
     [0.20670750210507],
     [0.884442785861452],
     [0.465061331927707],
     [0.231873224850469],
     [0.332902997809362],
     [0.354603786979606],
     [0.32448775418254],
     [0.281019695613381],
     [0.53221033341269],
     [0.0278104837587434],
     [0.534718616261505],
     [0.146959383878724],
     [0.923171966371618],
     [0.64596791258951],
     [0.700639824123954],
     [0.202569593169767],
     [0.40027829886652],
     [0.0449264128532187],
     [0.0349815278479566],
     [0.041718633472691],
     [0.913085093930082],
     [0.654129366289928],
     [0.887891115403404],
     [0.898638980287851],
     [0.341243442535376],
     [0.960166590782796],
     [0.0776156421161301],
     [0.543214244874244],
     [0.964027584468424],
     [0.431861071680503],
     [0.4094605239672],
     [0.354649308607431],
     [0.212657190310939],
     [0.394370246667367],
     [0.939588778840205],
     [0.842814764669419],
     [0.295916208585658],
     [0.996547525780374],
     [0.734380899169491],
     [0.196475579479029],
     [0.436444931559794],
     [0.554466318311422],
     [0.981284864527518],
     [0.00800666386994242],
     [0.573382468859744],
     [0.039855042835937],
     [0.133112801019843],
     [0.681745961441072],
     [0.731323603207068],
     [0.866277912910388],
     [0.371145473340705],
     [0.82159469352592],
     [0.693205500940066],
     [0.496030920995786],
     [0.746414560800789],
     [0.152529544780115],
     [0.701364485661063],
     [0.660929582674934],
     [0.479712148392558],
     [0.906438529286439],
     [0.507937938350955],
     [0.258832591170093],
     [0.398681195131198],
     [0.789116928275774],
     [0.990340099097372],
     [0.828571341214229],
     [0.778993255764421],
     [0.0758833093574061],
     [0.0288751830372908],
     [0.972065830718426],
     [0.715593405230816],
     [0.154578886607542],
     [0.909296492527582],
     [0.695106408126218],
     [0.648216884624971],
     [0.416850385399919],
     [0.817346911638405],
     [0.938739523566104],
     [0.334671204255574],
     [0.822540697711452],
     [0.382512856215273],
     [0.421635936408807],
     [0.595522369276867],
     [0.276578690268759],
     [0.163430771377171],
     [0.745512631239793],
     [0.985078634062373],
     [0.431017265838494],
     [0.534924451359787],
     [0.175169525746836],
     [0.554075041923985],
     [0.70762866444926],
     [0.275684983632555],
     [0.881024592647054],
     [0.242948598195425],
     [0.973898478104846],
     [0.560468603616895]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.62276285])],
     [array([0.95981975])],
     [array([0.13123692])],
     [array([0.94403269])],
     [array([0.99996035])],
     [array([0.90617541])],
     [array([0.16748292])],
     [array([0.4692246])],
     [array([0.78999598])],
     [array([0.01076012])],
     [array([0.56875236])],
     [array([0.59985743])],
     [array([0.23615334])],
     [array([0.76672967])],
     [array([0.68644279])],
     [array([0.59227571])],
     [array([0.92413374])],
     [array([0.63868689])],
     [array([0.58554977])],
     [array([0.96767634])],
     [array([0.47687905])],
     [array([0.29002359])],
     [array([0.79355394])],
     [array([0.84744695])],
     [array([0.44648068])],
     [array([0.69476211])],
     [array([0.70329173])],
     [array([0.0110455])],
     [array([0.44598652])],
     [array([0.33806213])],
     [array([0.97291888])],
     [array([0.78674652])],
     [array([0.09868592])],
     [array([0.31218357])],
     [array([0.96653374])],
     [array([0.15762292])],
     [array([0.24538079])],
     [array([0.22617801])],
     [array([0.68711248])],
     [array([0.66748006])],
     [array([0.60387874])],
     [array([0.97467747])],
     [array([0.08169054])],
     [array([0.05275255])],
     [array([0.5313997])],
     [array([0.34980062])],
     [array([0.6557426])],
     [array([0.99323489])],
     [array([0.46511456])],
     [array([0.04466934])],
     [array([0.27756238])],
     [array([0.89827089])],
     [array([0.69497801])],
     [array([0.57301666])],
     [array([0.12998648])],
     [array([0.29870018])],
     [array([0.09072637])],
     [array([0.97138973])],
     [array([0.50707396])],
     [array([0.61256375])],
     [array([0.96361795])],
     [array([0.12177345])],
     [array([0.69848873])],
     [array([0.17521957])],
     [array([0.26784822])],
     [array([0.71821337])],
     [array([0.64630771])],
     [array([0.57958808])],
     [array([0.43831997])],
     [array([0.66292238])],
     [array([0.82240246])],
     [array([0.56991271])],
     [array([0.36856432])],
     [array([0.02691617])],
     [array([0.1070548])],
     [array([0.85816989])],
     [array([0.16114913])],
     [array([0.58082758])],
     [array([0.78950896])],
     [array([0.77247732])],
     [array([0.80156307])],
     [array([0.72148481])],
     [array([0.34911207])],
     [array([0.33649899])],
     [array([0.87969204])],
     [array([0.65337264])],
     [array([0.2654469])],
     [array([0.32719571])],
     [array([0.3884566])],
     [array([0.08722938])],
     [array([0.95834632])],
     [array([0.78950703])],
     [array([0.74644105])],
     [array([0.6600411])],
     [array([0.13757572])],
     [array([0.30899279])],
     [array([0.99690508])],
     [array([0.19959027])],
     [array([0.97002727])],
     [array([0.18203077])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.62276285, 0.95981975, 0.13123692, 0.94403269, 0.99996035,
           0.90617541, 0.16748292, 0.4692246 , 0.78999598, 0.01076012,
           0.56875236, 0.59985743, 0.23615334, 0.76672967, 0.68644279,
           0.59227571, 0.92413374, 0.63868689, 0.58554977, 0.96767634,
           0.47687905, 0.29002359, 0.79355394, 0.84744695, 0.44648068,
           0.69476211, 0.70329173, 0.0110455 , 0.44598652, 0.33806213,
           0.97291888, 0.78674652, 0.09868592, 0.31218357, 0.96653374,
           0.15762292, 0.24538079, 0.22617801, 0.68711248, 0.66748006,
           0.60387874, 0.97467747, 0.08169054, 0.05275255, 0.5313997 ,
           0.34980062, 0.6557426 , 0.99323489, 0.46511456, 0.04466934,
           0.27756238, 0.89827089, 0.69497801, 0.57301666, 0.12998648,
           0.29870018, 0.09072637, 0.97138973, 0.50707396, 0.61256375,
           0.96361795, 0.12177345, 0.69848873, 0.17521957, 0.26784822,
           0.71821337, 0.64630771, 0.57958808, 0.43831997, 0.66292238,
           0.82240246, 0.56991271, 0.36856432, 0.02691617, 0.1070548 ,
           0.85816989, 0.16114913, 0.58082758, 0.78950896, 0.77247732,
           0.80156307, 0.72148481, 0.34911207, 0.33649899, 0.87969204,
           0.65337264, 0.2654469 , 0.32719571, 0.3884566 , 0.08722938,
           0.95834632, 0.78950703, 0.74644105, 0.6600411 , 0.13757572,
           0.30899279, 0.99690508, 0.19959027, 0.97002727, 0.18203077])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.26666367, 0.95400165, 0.68308764, 0.2067075 , 0.88444279,
              0.46506133, 0.23187322, 0.332903  , 0.35460379, 0.32448775,
              0.2810197 , 0.53221033, 0.02781048, 0.53471862, 0.14695938,
              0.92317197, 0.64596791, 0.70063982, 0.20256959, 0.4002783 ,
              0.04492641, 0.03498153, 0.04171863, 0.91308509, 0.65412937,
              0.88789112, 0.89863898, 0.34124344, 0.96016659, 0.07761564,
              0.54321424, 0.96402758, 0.43186107, 0.40946052, 0.35464931,
              0.21265719, 0.39437025, 0.93958878, 0.84281476, 0.29591621,
              0.99654753, 0.7343809 , 0.19647558, 0.43644493, 0.55446632,
              0.98128486, 0.00800666, 0.57338247, 0.03985504, 0.1331128 ,
              0.68174596, 0.7313236 , 0.86627791, 0.37114547, 0.82159469,
              0.6932055 , 0.49603092, 0.74641456, 0.15252954, 0.70136449,
              0.66092958, 0.47971215, 0.90643853, 0.50793794, 0.25883259,
              0.3986812 , 0.78911693, 0.9903401 , 0.82857134, 0.77899326,
              0.07588331, 0.02887518, 0.97206583, 0.71559341, 0.15457889,
              0.90929649, 0.69510641, 0.64821688, 0.41685039, 0.81734691,
              0.93873952, 0.3346712 , 0.8225407 , 0.38251286, 0.42163594,
              0.59552237, 0.27657869, 0.16343077, 0.74551263, 0.98507863,
              0.43101727, 0.53492445, 0.17516953, 0.55407504, 0.70762866,
              0.27568498, 0.88102459, 0.2429486 , 0.97389848, 0.5604686 ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.93561745, 0.99751105, 0.11417373, 0.27370711, 0.74809262,
              0.51147416, 0.7648735 , 0.63225503, 0.32637297, 0.91265207,
              0.35460365, 0.83352569, 0.13338845, 0.8542362 , 0.37313604,
              0.62752968, 0.21315505, 0.47785097, 0.42528324, 0.51051295,
              0.57579775, 0.25078841, 0.09318574, 0.27301771, 0.12897909,
              0.06099166, 0.96288739, 0.40765723, 0.38639945, 0.17211236,
              0.36993928, 0.97611889, 0.81089458, 0.24004949, 0.22954451,
              0.6413574 , 0.79242661, 0.87675144, 0.14712351, 0.52598807,
              0.85895424, 0.78384505, 0.25295378, 0.64637594, 0.96742095,
              0.14653958, 0.68919635, 0.27785666, 0.24748453, 0.50850092,
              0.23466963, 0.71088287, 0.30916666, 0.41351948, 0.64719828,
              0.35860534, 0.21741812, 0.73221385, 0.67927549, 0.93553763,
              0.89610713, 0.13049845, 0.38019521, 0.34626832, 0.17134712,
              0.08848499, 0.41097967, 0.48886581, 0.45501884, 0.76405034,
              0.35184055, 0.43023451, 0.80869484, 0.57679524, 0.84347509,
              0.71414719, 0.62546623, 0.86634922, 0.8390569 , 0.29467837,
              0.85834326, 0.06366466, 0.51650443, 0.36701138, 0.48792556,
              0.00576672, 0.84548237, 0.92493208, 0.40031338, 0.51498776,
              0.44200664, 0.51762627, 0.44349926, 0.4422783 , 0.54572788,
              0.9529645 , 0.64048572, 0.81009103, 0.67701603, 0.71234398])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.31183578, 0.63764351, 0.51111074, 0.38018547, 0.70458132,
              0.35282537, 0.3169376 , 0.47623104, 0.13809564, 0.63605812,
              0.417651  , 0.16659474, 0.47709353, 0.39800689, 0.66017825,
              0.20771589, 0.9716762 , 0.32286358, 0.67559573, 0.37717982,
              0.18487346, 0.62167723, 0.28875563, 0.04711868, 0.79095953,
              0.67967343, 0.67331314, 0.02474802, 0.88330887, 0.78352753,
              0.73345043, 0.65430493, 0.53296368, 0.88635556, 0.22990184,
              0.05668411, 0.23568684, 0.03584561, 0.30004765, 0.57966188,
              0.23755882, 0.72599502, 0.27834075, 0.79094334, 0.40591763,
              0.86162104, 0.72108454, 0.70689747, 0.35384227, 0.04456867,
              0.75976807, 0.23049174, 0.47617122, 0.87910782, 0.24630168,
              0.98673904, 0.05700552, 0.60266621, 0.84840322, 0.93897803,
              0.49489484, 0.69544105, 0.8578874 , 0.15973131, 0.61674524,
              0.85686093, 0.73067908, 0.1935423 , 0.53646443, 0.3008007 ,
              0.40921421, 0.9100247 , 0.8141033 , 0.01976606, 0.98027385,
              0.47137075, 0.13038934, 0.89257353, 0.0442121 , 0.21276591,
              0.13148585, 0.93519242, 0.88490513, 0.31259043, 0.77738334,
              0.75685143, 0.98995805, 0.98938082, 0.64841151, 0.35356807,
              0.29243008, 0.02730392, 0.775455  , 0.85803381, 0.40633565,
              0.58000254, 0.35950509, 0.52247939, 0.48150612, 0.50682369])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.20926244, 0.28344929, 0.75404728, 0.12566899, 0.92749522,
              0.57390695, 0.62842345, 0.23938593, 0.33816045, 0.38552811,
              0.69687283, 0.34576671, 0.12479667, 0.10883371, 0.88206544,
              0.7250714 , 0.33764219, 0.29212485, 0.95925464, 0.99538532,
              0.85356101, 0.70922509, 0.98072211, 0.10190073, 0.65099872,
              0.71155433, 0.71488397, 0.85089263, 0.61799658, 0.79053345,
              0.55760822, 0.68929025, 0.44742298, 0.95995428, 0.1898562 ,
              0.51390774, 0.00424403, 0.325634  , 0.98143162, 0.86401379,
              0.36471988, 0.64753192, 0.94749546, 0.09611241, 0.25627248,
              0.85303724, 0.47023948, 0.43301388, 0.90354954, 0.63034881,
              0.57886927, 0.9552084 , 0.343338  , 0.55823843, 0.89121758,
              0.9347222 , 0.93059843, 0.99142095, 0.48107822, 0.57316763,
              0.28098234, 0.25251969, 0.89553555, 0.88536043, 0.5174261 ,
              0.0031796 , 0.38106757, 0.68824505, 0.59826547, 0.21573371,
              0.45872379, 0.82440285, 0.27830705, 0.69536658, 0.08086297,
              0.04390042, 0.82749069, 0.16656013, 0.28622546, 0.51992392,
              0.68884787, 0.14491908, 0.07066792, 0.19082118, 0.5890059 ,
              0.48193652, 0.68396003, 0.38147   , 0.52564886, 0.21613939,
              0.25091406, 0.0599816 , 0.3001342 , 0.56289485, 0.32598184,
              0.95809289, 0.01182417, 0.89651822, 0.02054012, 0.32383983])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.26666367, 0.95400165, 0.68308764, 0.2067075 , 0.88444279,
              0.46506133, 0.23187322, 0.332903  , 0.35460379, 0.32448775,
              0.2810197 , 0.53221033, 0.02781048, 0.53471862, 0.14695938,
              0.92317197, 0.64596791, 0.70063982, 0.20256959, 0.4002783 ,
              0.04492641, 0.03498153, 0.04171863, 0.91308509, 0.65412937,
              0.88789112, 0.89863898, 0.34124344, 0.96016659, 0.07761564,
              0.54321424, 0.96402758, 0.43186107, 0.40946052, 0.35464931,
              0.21265719, 0.39437025, 0.93958878, 0.84281476, 0.29591621,
              0.99654753, 0.7343809 , 0.19647558, 0.43644493, 0.55446632,
              0.98128486, 0.00800666, 0.57338247, 0.03985504, 0.1331128 ,
              0.68174596, 0.7313236 , 0.86627791, 0.37114547, 0.82159469,
              0.6932055 , 0.49603092, 0.74641456, 0.15252954, 0.70136449,
              0.66092958, 0.47971215, 0.90643853, 0.50793794, 0.25883259,
              0.3986812 , 0.78911693, 0.9903401 , 0.82857134, 0.77899326,
              0.07588331, 0.02887518, 0.97206583, 0.71559341, 0.15457889,
              0.90929649, 0.69510641, 0.64821688, 0.41685039, 0.81734691,
              0.93873952, 0.3346712 , 0.8225407 , 0.38251286, 0.42163594,
              0.59552237, 0.27657869, 0.16343077, 0.74551263, 0.98507863,
              0.43101727, 0.53492445, 0.17516953, 0.55407504, 0.70762866,
              0.27568498, 0.88102459, 0.2429486 , 0.97389848, 0.5604686 ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.93561745, 0.99751105, 0.11417373, 0.27370711, 0.74809262,
              0.51147416, 0.7648735 , 0.63225503, 0.32637297, 0.91265207,
              0.35460365, 0.83352569, 0.13338845, 0.8542362 , 0.37313604,
              0.62752968, 0.21315505, 0.47785097, 0.42528324, 0.51051295,
              0.57579775, 0.25078841, 0.09318574, 0.27301771, 0.12897909,
              0.06099166, 0.96288739, 0.40765723, 0.38639945, 0.17211236,
              0.36993928, 0.97611889, 0.81089458, 0.24004949, 0.22954451,
              0.6413574 , 0.79242661, 0.87675144, 0.14712351, 0.52598807,
              0.85895424, 0.78384505, 0.25295378, 0.64637594, 0.96742095,
              0.14653958, 0.68919635, 0.27785666, 0.24748453, 0.50850092,
              0.23466963, 0.71088287, 0.30916666, 0.41351948, 0.64719828,
              0.35860534, 0.21741812, 0.73221385, 0.67927549, 0.93553763,
              0.89610713, 0.13049845, 0.38019521, 0.34626832, 0.17134712,
              0.08848499, 0.41097967, 0.48886581, 0.45501884, 0.76405034,
              0.35184055, 0.43023451, 0.80869484, 0.57679524, 0.84347509,
              0.71414719, 0.62546623, 0.86634922, 0.8390569 , 0.29467837,
              0.85834326, 0.06366466, 0.51650443, 0.36701138, 0.48792556,
              0.00576672, 0.84548237, 0.92493208, 0.40031338, 0.51498776,
              0.44200664, 0.51762627, 0.44349926, 0.4422783 , 0.54572788,
              0.9529645 , 0.64048572, 0.81009103, 0.67701603, 0.71234398])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.31183578, 0.63764351, 0.51111074, 0.38018547, 0.70458132,
              0.35282537, 0.3169376 , 0.47623104, 0.13809564, 0.63605812,
              0.417651  , 0.16659474, 0.47709353, 0.39800689, 0.66017825,
              0.20771589, 0.9716762 , 0.32286358, 0.67559573, 0.37717982,
              0.18487346, 0.62167723, 0.28875563, 0.04711868, 0.79095953,
              0.67967343, 0.67331314, 0.02474802, 0.88330887, 0.78352753,
              0.73345043, 0.65430493, 0.53296368, 0.88635556, 0.22990184,
              0.05668411, 0.23568684, 0.03584561, 0.30004765, 0.57966188,
              0.23755882, 0.72599502, 0.27834075, 0.79094334, 0.40591763,
              0.86162104, 0.72108454, 0.70689747, 0.35384227, 0.04456867,
              0.75976807, 0.23049174, 0.47617122, 0.87910782, 0.24630168,
              0.98673904, 0.05700552, 0.60266621, 0.84840322, 0.93897803,
              0.49489484, 0.69544105, 0.8578874 , 0.15973131, 0.61674524,
              0.85686093, 0.73067908, 0.1935423 , 0.53646443, 0.3008007 ,
              0.40921421, 0.9100247 , 0.8141033 , 0.01976606, 0.98027385,
              0.47137075, 0.13038934, 0.89257353, 0.0442121 , 0.21276591,
              0.13148585, 0.93519242, 0.88490513, 0.31259043, 0.77738334,
              0.75685143, 0.98995805, 0.98938082, 0.64841151, 0.35356807,
              0.29243008, 0.02730392, 0.775455  , 0.85803381, 0.40633565,
              0.58000254, 0.35950509, 0.52247939, 0.48150612, 0.50682369])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.54005214, 0.92972304, 0.7239255 , 0.26971205, 0.83454012,
              0.63432035, 0.54296827, 0.81428031, 0.86377656, 0.45654497,
              0.25282511, 0.5165076 , 0.62945899, 0.39366341, 0.14335436,
              0.20408943, 0.74851944, 0.83072588, 0.16825561, 0.88380405,
              0.27722264, 0.18606468, 0.73002483, 0.15058756, 0.12559064,
              0.51618621, 0.59370285, 0.20937858, 0.13184925, 0.30838494,
              0.99117518, 0.46375348, 0.21510961, 0.17559134, 0.91279037,
              0.69630451, 0.40162675, 0.53551466, 0.44366005, 0.96330367,
              0.09467049, 0.05948045, 0.64920396, 0.46176717, 0.09649476,
              0.40034881, 0.29104381, 0.22846411, 0.21733835, 0.67078267,
              0.26860911, 0.47589908, 0.51540894, 0.25093379, 0.54332   ,
              0.39154937, 0.84592981, 0.55737976, 0.58262485, 0.18264302,
              0.89875231, 0.07378111, 0.24253329, 0.084074  , 0.89658261,
              0.55608239, 0.45902252, 0.16672587, 0.08108771, 0.27149231,
              0.38852491, 0.74933503, 0.32322962, 0.21614677, 0.92488543,
              0.98832918, 0.84646311, 0.04673147, 0.86129918, 0.47224139,
              0.03961564, 0.3525373 , 0.66980766, 0.81698145, 0.2892222 ,
              0.01376413, 0.12845066, 0.67796579, 0.02970265, 0.78579593,
              0.25331871, 0.6851269 , 0.90424456, 0.21621144, 0.84340718,
              0.48972903, 0.10267866, 0.79884996, 0.54475929, 0.15373688])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.62276285, 0.95981975, 0.13123692, 0.94403269, 0.99996035,
              0.90617541, 0.16748292, 0.4692246 , 0.78999598, 0.01076012,
              0.56875236, 0.59985743, 0.23615334, 0.76672967, 0.68644279,
              0.59227571, 0.92413374, 0.63868689, 0.58554977, 0.96767634,
              0.47687905, 0.29002359, 0.79355394, 0.84744695, 0.44648068,
              0.69476211, 0.70329173, 0.0110455 , 0.44598652, 0.33806213,
              0.97291888, 0.78674652, 0.09868592, 0.31218357, 0.96653374,
              0.15762292, 0.24538079, 0.22617801, 0.68711248, 0.66748006,
              0.60387874, 0.97467747, 0.08169054, 0.05275255, 0.5313997 ,
              0.34980062, 0.6557426 , 0.99323489, 0.46511456, 0.04466934,
              0.27756238, 0.89827089, 0.69497801, 0.57301666, 0.12998648,
              0.29870018, 0.09072637, 0.97138973, 0.50707396, 0.61256375,
              0.96361795, 0.12177345, 0.69848873, 0.17521957, 0.26784822,
              0.71821337, 0.64630771, 0.57958808, 0.43831997, 0.66292238,
              0.82240246, 0.56991271, 0.36856432, 0.02691617, 0.1070548 ,
              0.85816989, 0.16114913, 0.58082758, 0.78950896, 0.77247732,
              0.80156307, 0.72148481, 0.34911207, 0.33649899, 0.87969204,
              0.65337264, 0.2654469 , 0.32719571, 0.3884566 , 0.08722938,
              0.95834632, 0.78950703, 0.74644105, 0.6600411 , 0.13757572,
              0.30899279, 0.99690508, 0.19959027, 0.97002727, 0.18203077])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.04168739, 0.09164846, 0.32318232, 0.14848647, 0.39069914,
              0.94635997, 0.01313364, 0.07264444, 0.62982696, 0.76168342,
              0.40720914, 0.38752348, 0.41558481, 0.63838178, 0.14277109,
              0.23231102, 0.54224227, 0.87639615, 0.54502595, 0.0115181 ,
              0.92306221, 0.5862492 , 0.0972142 , 0.73723795, 0.74379644,
              0.22454633, 0.94620054, 0.68092136, 0.31165444, 0.78565099,
              0.97142001, 0.06834597, 0.48884182, 0.82986535, 0.93436196,
              0.65050476, 0.58196359, 0.21133699, 0.93663694, 0.78648027,
              0.55179645, 0.29528494, 0.58201912, 0.15355197, 0.43520074,
              0.20289562, 0.56500126, 0.14980785, 0.67645298, 0.18056357,
              0.48100699, 0.33174241, 0.68468514, 0.75372548, 0.67817281,
              0.54708429, 0.03070833, 0.22978787, 0.60425412, 0.56621581,
              0.76965294, 0.35965571, 0.92627586, 0.16936832, 0.0433461 ,
              0.12758704, 0.64255415, 0.77967478, 0.37693443, 0.82705028,
              0.68403582, 0.56144193, 0.07774913, 0.59641281, 0.74687762,
              0.91209593, 0.46928616, 0.14027375, 0.44718215, 0.57154556,
              0.50736859, 0.18720067, 0.94720861, 0.56682369, 0.85560214,
              0.71016758, 0.99116707, 0.96725086, 0.40439049, 0.59523321,
              0.73888015, 0.54066641, 0.44854766, 0.93095638, 0.35003041,
              0.4444019 , 0.14713614, 0.94728778, 0.48689757, 0.53422089])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.15898451, 0.99097524, 0.10284347, 0.73087788, 0.84362428,
              0.19572867, 0.72661133, 0.25966454, 0.52603953, 0.38851969,
              0.39645885, 0.2779806 , 0.91418735, 0.4463149 , 0.9734522 ,
              0.71151508, 0.89323232, 0.0938764 , 0.39306277, 0.0133551 ,
              0.88602267, 0.05048088, 0.42561504, 0.32178331, 0.67956593,
              0.17259454, 0.66168835, 0.07343192, 0.27248609, 0.75881826,
              0.13521408, 0.89569559, 0.43449725, 0.77166201, 0.55850603,
              0.61694857, 0.67705051, 0.94410479, 0.48945165, 0.74478587,
              0.82879988, 0.56568882, 0.96541757, 0.01851249, 0.50242207,
              0.83688961, 0.03793228, 0.31181413, 0.48841064, 0.65892529,
              0.42441294, 0.93463746, 0.73154238, 0.39107125, 0.36848695,
              0.63289861, 0.10703841, 0.94221818, 0.17434144, 0.48340467,
              0.28934283, 0.60754803, 0.33952013, 0.47078001, 0.61468748,
              0.19348477, 0.15720639, 0.29812457, 0.02577146, 0.398566  ,
              0.25072534, 0.38879252, 0.60000113, 0.16087974, 0.85176937,
              0.74688006, 0.02312736, 0.70934878, 0.650238  , 0.70715455,
              0.07792408, 0.74150271, 0.13412589, 0.47818556, 0.14252757,
              0.56008355, 0.55821857, 0.48408967, 0.01845728, 0.93356388,
              0.80420143, 0.3466232 , 0.00544173, 0.85514879, 0.73264272,
              0.36035583, 0.08470746, 0.91634843, 0.15087901, 0.37623661])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.69623095, 0.11329622, 0.05528752, 0.33817908, 0.60357162,
              0.92707881, 0.12297091, 0.41628127, 0.40961493, 0.40689185,
              0.71492525, 0.23929309, 0.49716818, 0.88327967, 0.66697725,
              0.53894833, 0.42690798, 0.59895221, 0.88177094, 0.50403963,
              0.94159464, 0.72172896, 0.45741243, 0.96712188, 0.0289766 ,
              0.69615027, 0.3677245 , 0.79439625, 0.5377943 , 0.90012828,
              0.22438781, 0.36080849, 0.33099997, 0.7231699 , 0.10513928,
              0.22212189, 0.54531247, 0.69795638, 0.95615396, 0.70441633,
              0.83520382, 0.33353244, 0.23728004, 0.51553075, 0.17199714,
              0.91706263, 0.01902813, 0.17370524, 0.51836515, 0.88859689,
              0.45243494, 0.90474304, 0.02709612, 0.02683041, 0.11283115,
              0.81290967, 0.16881002, 0.79825206, 0.77017848, 0.82706737,
              0.85254353, 0.54171071, 0.32907401, 0.41177353, 0.02549715,
              0.10832414, 0.68242539, 0.81150194, 0.0613661 , 0.81098172,
              0.90050995, 0.38220627, 0.60935492, 0.35150104, 0.45999372,
              0.90098403, 0.20244989, 0.31526036, 0.99374491, 0.7596119 ,
              0.04698143, 0.98091583, 0.95180607, 0.36798735, 0.55539287,
              0.76098044, 0.59977577, 0.05813226, 0.75886765, 0.17766853,
              0.53586494, 0.22323218, 0.87310367, 0.67205133, 0.90007045,
              0.36974479, 0.31155058, 0.65913038, 0.46490612, 0.52625395])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.62276285, 0.95981975, 0.13123692, 0.94403269, 0.99996035,
              0.90617541, 0.16748292, 0.4692246 , 0.78999598, 0.01076012,
              0.56875236, 0.59985743, 0.23615334, 0.76672967, 0.68644279,
              0.59227571, 0.92413374, 0.63868689, 0.58554977, 0.96767634,
              0.47687905, 0.29002359, 0.79355394, 0.84744695, 0.44648068,
              0.69476211, 0.70329173, 0.0110455 , 0.44598652, 0.33806213,
              0.97291888, 0.78674652, 0.09868592, 0.31218357, 0.96653374,
              0.15762292, 0.24538079, 0.22617801, 0.68711248, 0.66748006,
              0.60387874, 0.97467747, 0.08169054, 0.05275255, 0.5313997 ,
              0.34980062, 0.6557426 , 0.99323489, 0.46511456, 0.04466934,
              0.27756238, 0.89827089, 0.69497801, 0.57301666, 0.12998648,
              0.29870018, 0.09072637, 0.97138973, 0.50707396, 0.61256375,
              0.96361795, 0.12177345, 0.69848873, 0.17521957, 0.26784822,
              0.71821337, 0.64630771, 0.57958808, 0.43831997, 0.66292238,
              0.82240246, 0.56991271, 0.36856432, 0.02691617, 0.1070548 ,
              0.85816989, 0.16114913, 0.58082758, 0.78950896, 0.77247732,
              0.80156307, 0.72148481, 0.34911207, 0.33649899, 0.87969204,
              0.65337264, 0.2654469 , 0.32719571, 0.3884566 , 0.08722938,
              0.95834632, 0.78950703, 0.74644105, 0.6600411 , 0.13757572,
              0.30899279, 0.99690508, 0.19959027, 0.97002727, 0.18203077])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.04168739, 0.09164846, 0.32318232, 0.14848647, 0.39069914,
              0.94635997, 0.01313364, 0.07264444, 0.62982696, 0.76168342,
              0.40720914, 0.38752348, 0.41558481, 0.63838178, 0.14277109,
              0.23231102, 0.54224227, 0.87639615, 0.54502595, 0.0115181 ,
              0.92306221, 0.5862492 , 0.0972142 , 0.73723795, 0.74379644,
              0.22454633, 0.94620054, 0.68092136, 0.31165444, 0.78565099,
              0.97142001, 0.06834597, 0.48884182, 0.82986535, 0.93436196,
              0.65050476, 0.58196359, 0.21133699, 0.93663694, 0.78648027,
              0.55179645, 0.29528494, 0.58201912, 0.15355197, 0.43520074,
              0.20289562, 0.56500126, 0.14980785, 0.67645298, 0.18056357,
              0.48100699, 0.33174241, 0.68468514, 0.75372548, 0.67817281,
              0.54708429, 0.03070833, 0.22978787, 0.60425412, 0.56621581,
              0.76965294, 0.35965571, 0.92627586, 0.16936832, 0.0433461 ,
              0.12758704, 0.64255415, 0.77967478, 0.37693443, 0.82705028,
              0.68403582, 0.56144193, 0.07774913, 0.59641281, 0.74687762,
              0.91209593, 0.46928616, 0.14027375, 0.44718215, 0.57154556,
              0.50736859, 0.18720067, 0.94720861, 0.56682369, 0.85560214,
              0.71016758, 0.99116707, 0.96725086, 0.40439049, 0.59523321,
              0.73888015, 0.54066641, 0.44854766, 0.93095638, 0.35003041,
              0.4444019 , 0.14713614, 0.94728778, 0.48689757, 0.53422089])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.15898451, 0.99097524, 0.10284347, 0.73087788, 0.84362428,
              0.19572867, 0.72661133, 0.25966454, 0.52603953, 0.38851969,
              0.39645885, 0.2779806 , 0.91418735, 0.4463149 , 0.9734522 ,
              0.71151508, 0.89323232, 0.0938764 , 0.39306277, 0.0133551 ,
              0.88602267, 0.05048088, 0.42561504, 0.32178331, 0.67956593,
              0.17259454, 0.66168835, 0.07343192, 0.27248609, 0.75881826,
              0.13521408, 0.89569559, 0.43449725, 0.77166201, 0.55850603,
              0.61694857, 0.67705051, 0.94410479, 0.48945165, 0.74478587,
              0.82879988, 0.56568882, 0.96541757, 0.01851249, 0.50242207,
              0.83688961, 0.03793228, 0.31181413, 0.48841064, 0.65892529,
              0.42441294, 0.93463746, 0.73154238, 0.39107125, 0.36848695,
              0.63289861, 0.10703841, 0.94221818, 0.17434144, 0.48340467,
              0.28934283, 0.60754803, 0.33952013, 0.47078001, 0.61468748,
              0.19348477, 0.15720639, 0.29812457, 0.02577146, 0.398566  ,
              0.25072534, 0.38879252, 0.60000113, 0.16087974, 0.85176937,
              0.74688006, 0.02312736, 0.70934878, 0.650238  , 0.70715455,
              0.07792408, 0.74150271, 0.13412589, 0.47818556, 0.14252757,
              0.56008355, 0.55821857, 0.48408967, 0.01845728, 0.93356388,
              0.80420143, 0.3466232 , 0.00544173, 0.85514879, 0.73264272,
              0.36035583, 0.08470746, 0.91634843, 0.15087901, 0.37623661])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.7301495 , 0.5675791 , 0.74472977, 0.37126229, 0.09861376,
              0.73495961, 0.03277087, 0.26148371, 0.62998544, 0.00910672,
              0.45705046, 0.76501901, 0.81922565, 0.7898571 , 0.21360435,
              0.44504843, 0.03228658, 0.51687364, 0.59005846, 0.7144045 ,
              0.60974668, 0.87009512, 0.40870915, 0.23982114, 0.90797948,
              0.7419169 , 0.29602671, 0.46731536, 0.54752692, 0.3659671 ,
              0.15991978, 0.35527081, 0.53369705, 0.42609596, 0.23098702,
              0.08936019, 0.24314653, 0.99000115, 0.30616007, 0.93190441,
              0.32682739, 0.41333118, 0.73546141, 0.94849004, 0.29015876,
              0.2560853 , 0.06052704, 0.0757319 , 0.63064872, 0.39631515,
              0.66645542, 0.11946167, 0.15394931, 0.55340036, 0.81735926,
              0.52365137, 0.95091188, 0.45904776, 0.68318241, 0.58881826,
              0.96833819, 0.73830005, 0.7160008 , 0.51006208, 0.20020215,
              0.90211329, 0.43931863, 0.73785897, 0.44712603, 0.08044838,
              0.90951299, 0.51885605, 0.51747265, 0.31947222, 0.94167666,
              0.13483417, 0.89897403, 0.6749547 , 0.92398546, 0.33613229,
              0.51610411, 0.403569  , 0.14181595, 0.13332323, 0.910573  ,
              0.21988371, 0.57729292, 0.69107144, 0.62393278, 0.24367905,
              0.7125301 , 0.28821025, 0.11670325, 0.12582567, 0.36331552,
              0.20810134, 0.04904492, 0.92255984, 0.71879538, 0.092242  ])}]]


