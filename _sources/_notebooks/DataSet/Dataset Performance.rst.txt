
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='7b7bf9c6-08a5-4cf8-8d46-d9f78682bffc'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='ee1ba584-aa70-440c-9b1c-6e885bc6fd71'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.866913840787951],
     [0.897740086646077],
     [0.229595970276094],
     [0.4508587345541],
     [0.0403103429778854],
     [0.543118099651864],
     [0.682735138912951],
     [0.93313937128994],
     [0.965143511521168],
     [0.961883931196231],
     [0.492353449887177],
     [0.195099576908428],
     [0.245145673048311],
     [0.673415600206844],
     [0.568653909373753],
     [0.903339631104332],
     [0.659573802565925],
     [0.662544710077005],
     [0.137526136410457],
     [0.0035890787243289],
     [0.135130548287895],
     [0.832631884099191],
     [0.0809393964776323],
     [0.510037014461252],
     [0.122365449226261],
     [0.00841829179106368],
     [0.0496891492171992],
     [0.533207995780092],
     [0.00696479684714169],
     [0.344403627689467],
     [0.141234623051081],
     [0.936026784820796],
     [0.0504721790956634],
     [0.484500872098435],
     [0.474403574913351],
     [0.301130968586036],
     [0.198204555084782],
     [0.193953083689244],
     [0.696839943815694],
     [0.148775858235703],
     [0.00926717613172989],
     [0.787736272513834],
     [0.0629698215999696],
     [0.148365258185524],
     [0.532995623564959],
     [0.353310430210458],
     [0.383756985334606],
     [0.195075271935399],
     [0.178171975858732],
     [0.31689178328302],
     [0.586559804969463],
     [0.375838106800599],
     [0.712497799443371],
     [0.199356829031375],
     [0.750641844982426],
     [0.60279943719977],
     [0.00888386606306535],
     [0.113791621411469],
     [0.281999916148523],
     [0.79668090070219],
     [0.128142493071348],
     [0.375064891242568],
     [0.126504097989992],
     [0.870185139216312],
     [0.229546827226614],
     [0.585536018392847],
     [0.595477672571376],
     [0.718606372109068],
     [0.409532451561722],
     [0.709742593070192],
     [0.122109878636491],
     [0.557213328187123],
     [0.170544562209849],
     [0.790498619882656],
     [0.815218351195771],
     [0.230491650023079],
     [0.666309540390258],
     [0.112535524318681],
     [0.548049522081151],
     [0.85126129506984],
     [0.867557946279121],
     [0.280022842331968],
     [0.673479062397794],
     [0.910827488597816],
     [0.424303346864026],
     [0.769057046744759],
     [0.277174744144576],
     [0.650890159592223],
     [0.233349891533771],
     [0.591246860861232],
     [0.325457299599548],
     [0.686407553954952],
     [0.261913069441033],
     [0.508927287915537],
     [0.9496752515247],
     [0.710026028245845],
     [0.92195178061547],
     [0.522849842840485],
     [0.778178617086394],
     [0.643178542038448]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.76204032])],
     [array([0.86689656])],
     [array([0.50871784])],
     [array([0.5564296])],
     [array([0.96831575])],
     [array([0.02553302])],
     [array([0.63179691])],
     [array([0.80055231])],
     [array([0.00306687])],
     [array([0.11435221])],
     [array([0.4265893])],
     [array([0.42702133])],
     [array([0.92734422])],
     [array([0.47645042])],
     [array([0.64212291])],
     [array([0.2800274])],
     [array([0.89297565])],
     [array([0.30896163])],
     [array([0.63916038])],
     [array([0.52250385])],
     [array([0.98949216])],
     [array([0.71260142])],
     [array([0.40654593])],
     [array([0.71766382])],
     [array([0.95203818])],
     [array([0.86693636])],
     [array([0.3278353])],
     [array([0.46991862])],
     [array([0.95041438])],
     [array([0.36259969])],
     [array([0.25804986])],
     [array([0.79425667])],
     [array([0.65776638])],
     [array([0.51727667])],
     [array([0.30419624])],
     [array([0.44361212])],
     [array([0.65707465])],
     [array([0.18255746])],
     [array([0.50424853])],
     [array([0.08621065])],
     [array([0.7349307])],
     [array([0.64748862])],
     [array([0.94972542])],
     [array([0.07241093])],
     [array([0.21347362])],
     [array([0.58762733])],
     [array([0.96239203])],
     [array([0.83024688])],
     [array([0.01144283])],
     [array([0.17663593])],
     [array([0.43842001])],
     [array([0.13065651])],
     [array([0.70763613])],
     [array([0.58466629])],
     [array([0.47902169])],
     [array([0.71833766])],
     [array([0.40895265])],
     [array([0.12501856])],
     [array([0.60155906])],
     [array([0.36467088])],
     [array([0.12827967])],
     [array([0.27816261])],
     [array([0.740967])],
     [array([0.16632772])],
     [array([0.35712761])],
     [array([0.18799684])],
     [array([0.41622718])],
     [array([0.15847479])],
     [array([0.41910208])],
     [array([0.6790972])],
     [array([0.15582994])],
     [array([0.90351729])],
     [array([0.80097746])],
     [array([0.08576261])],
     [array([0.85430874])],
     [array([0.04197035])],
     [array([0.62486461])],
     [array([0.59877859])],
     [array([0.14335411])],
     [array([0.33268225])],
     [array([0.77734669])],
     [array([0.78411301])],
     [array([0.1613936])],
     [array([0.56842894])],
     [array([0.48671402])],
     [array([0.11698684])],
     [array([0.35716329])],
     [array([0.39919182])],
     [array([0.18322432])],
     [array([0.79396339])],
     [array([0.91651573])],
     [array([0.10420299])],
     [array([0.15338223])],
     [array([0.94419307])],
     [array([0.22369839])],
     [array([0.85384227])],
     [array([0.10396298])],
     [array([0.22624975])],
     [array([0.75530248])],
     [array([0.86048107])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.76204032, 0.86689656, 0.50871784, 0.5564296 , 0.96831575,
           0.02553302, 0.63179691, 0.80055231, 0.00306687, 0.11435221,
           0.4265893 , 0.42702133, 0.92734422, 0.47645042, 0.64212291,
           0.2800274 , 0.89297565, 0.30896163, 0.63916038, 0.52250385,
           0.98949216, 0.71260142, 0.40654593, 0.71766382, 0.95203818,
           0.86693636, 0.3278353 , 0.46991862, 0.95041438, 0.36259969,
           0.25804986, 0.79425667, 0.65776638, 0.51727667, 0.30419624,
           0.44361212, 0.65707465, 0.18255746, 0.50424853, 0.08621065,
           0.7349307 , 0.64748862, 0.94972542, 0.07241093, 0.21347362,
           0.58762733, 0.96239203, 0.83024688, 0.01144283, 0.17663593,
           0.43842001, 0.13065651, 0.70763613, 0.58466629, 0.47902169,
           0.71833766, 0.40895265, 0.12501856, 0.60155906, 0.36467088,
           0.12827967, 0.27816261, 0.740967  , 0.16632772, 0.35712761,
           0.18799684, 0.41622718, 0.15847479, 0.41910208, 0.6790972 ,
           0.15582994, 0.90351729, 0.80097746, 0.08576261, 0.85430874,
           0.04197035, 0.62486461, 0.59877859, 0.14335411, 0.33268225,
           0.77734669, 0.78411301, 0.1613936 , 0.56842894, 0.48671402,
           0.11698684, 0.35716329, 0.39919182, 0.18322432, 0.79396339,
           0.91651573, 0.10420299, 0.15338223, 0.94419307, 0.22369839,
           0.85384227, 0.10396298, 0.22624975, 0.75530248, 0.86048107])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.86691384, 0.89774009, 0.22959597, 0.45085873, 0.04031034,
              0.5431181 , 0.68273514, 0.93313937, 0.96514351, 0.96188393,
              0.49235345, 0.19509958, 0.24514567, 0.6734156 , 0.56865391,
              0.90333963, 0.6595738 , 0.66254471, 0.13752614, 0.00358908,
              0.13513055, 0.83263188, 0.0809394 , 0.51003701, 0.12236545,
              0.00841829, 0.04968915, 0.533208  , 0.0069648 , 0.34440363,
              0.14123462, 0.93602678, 0.05047218, 0.48450087, 0.47440357,
              0.30113097, 0.19820456, 0.19395308, 0.69683994, 0.14877586,
              0.00926718, 0.78773627, 0.06296982, 0.14836526, 0.53299562,
              0.35331043, 0.38375699, 0.19507527, 0.17817198, 0.31689178,
              0.5865598 , 0.37583811, 0.7124978 , 0.19935683, 0.75064184,
              0.60279944, 0.00888387, 0.11379162, 0.28199992, 0.7966809 ,
              0.12814249, 0.37506489, 0.1265041 , 0.87018514, 0.22954683,
              0.58553602, 0.59547767, 0.71860637, 0.40953245, 0.70974259,
              0.12210988, 0.55721333, 0.17054456, 0.79049862, 0.81521835,
              0.23049165, 0.66630954, 0.11253552, 0.54804952, 0.8512613 ,
              0.86755795, 0.28002284, 0.67347906, 0.91082749, 0.42430335,
              0.76905705, 0.27717474, 0.65089016, 0.23334989, 0.59124686,
              0.3254573 , 0.68640755, 0.26191307, 0.50892729, 0.94967525,
              0.71002603, 0.92195178, 0.52284984, 0.77817862, 0.64317854])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.88987045, 0.34882476, 0.99638681, 0.61373868, 0.85503687,
              0.37039838, 0.89423681, 0.78614181, 0.93715978, 0.85171209,
              0.78397565, 0.3598405 , 0.11406684, 0.35626654, 0.727939  ,
              0.36613229, 0.46194401, 0.51749881, 0.16652872, 0.50890555,
              0.69229634, 0.65888972, 0.95421801, 0.07622025, 0.55991623,
              0.59642268, 0.29089879, 0.8813541 , 0.72248579, 0.15094638,
              0.66462658, 0.05157738, 0.85356681, 0.13293385, 0.29098524,
              0.22650365, 0.49193272, 0.39836527, 0.58086048, 0.98184483,
              0.89525608, 0.80315238, 0.60802216, 0.22875113, 0.73121856,
              0.59499503, 0.84945642, 0.05246165, 0.5220655 , 0.73666423,
              0.89140038, 0.17899733, 0.58121054, 0.9197409 , 0.11922495,
              0.64079916, 0.60739674, 0.42504883, 0.51680916, 0.43863345,
              0.03087309, 0.72779596, 0.64003648, 0.91264657, 0.2363974 ,
              0.08827107, 0.26618897, 0.18388666, 0.17302335, 0.81818025,
              0.69521845, 0.55279359, 0.8655626 , 0.24153493, 0.46010737,
              0.18387284, 0.0017161 , 0.77404276, 0.06569415, 0.7425614 ,
              0.72629446, 0.15210885, 0.41566164, 0.47822359, 0.23443386,
              0.74605638, 0.64087039, 0.55956289, 0.14554686, 0.43676681,
              0.75677495, 0.42935547, 0.00533201, 0.39547242, 0.33042244,
              0.96875194, 0.67679336, 0.5469693 , 0.27299028, 0.16126758])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.91211746, 0.77227043, 0.90051916, 0.69400923, 0.76892679,
              0.65100624, 0.91757428, 0.13829353, 0.13441385, 0.67429402,
              0.97942621, 0.38528888, 0.5557514 , 0.46131446, 0.79945772,
              0.87429019, 0.89003099, 0.7083906 , 0.02385833, 0.95997869,
              0.63038667, 0.99719359, 0.83819323, 0.00924329, 0.11737454,
              0.20747787, 0.34833072, 0.94796168, 0.20337111, 0.80848773,
              0.71672563, 0.76937903, 0.20762338, 0.20493343, 0.02523126,
              0.60493499, 0.00978012, 0.70102367, 0.5797299 , 0.57316704,
              0.4646249 , 0.98932069, 0.01011056, 0.92413874, 0.19942952,
              0.0630711 , 0.82342623, 0.63771724, 0.92941578, 0.71462882,
              0.88247171, 0.13899865, 0.49273937, 0.61290453, 0.2417424 ,
              0.08225138, 0.09910336, 0.12155797, 0.08265496, 0.45398892,
              0.25161789, 0.40508964, 0.21482683, 0.93883808, 0.62614031,
              0.97507254, 0.86537086, 0.98605056, 0.82250342, 0.8292971 ,
              0.10553184, 0.68137905, 0.18287042, 0.54279512, 0.04285887,
              0.94018961, 0.93503097, 0.2254063 , 0.57174225, 0.56816155,
              0.51001448, 0.77104758, 0.71023186, 0.60589649, 0.70628406,
              0.74234659, 0.97948157, 0.59352841, 0.97555938, 0.93734789,
              0.41781379, 0.21926581, 0.62693094, 0.87613536, 0.18383235,
              0.71516525, 0.44032398, 0.3847174 , 0.20016562, 0.62285847])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.1421913 , 0.28160372, 0.958748  , 0.8468293 , 0.90336961,
              0.72212577, 0.06612822, 0.58981905, 0.52181769, 0.03227721,
              0.46810941, 0.53569585, 0.97916295, 0.4735091 , 0.40432078,
              0.44240111, 0.36212592, 0.53103282, 0.93036842, 0.60589571,
              0.99769778, 0.99745744, 0.67311424, 0.75737371, 0.45046234,
              0.07422329, 0.61283073, 0.66856483, 0.7203559 , 0.35463847,
              0.9167608 , 0.1375315 , 0.9672074 , 0.93057447, 0.0362981 ,
              0.87388374, 0.13204599, 0.91753245, 0.73601445, 0.74600893,
              0.55904516, 0.69753701, 0.64916585, 0.09256741, 0.87433525,
              0.63491058, 0.69160468, 0.68327734, 0.17637669, 0.89762802,
              0.34872915, 0.87436011, 0.11474176, 0.83480283, 0.28387072,
              0.10386761, 0.08001096, 0.9852933 , 0.24063196, 0.96929314,
              0.09584434, 0.78158653, 0.65180908, 0.41074092, 0.12644834,
              0.9162061 , 0.04516367, 0.37748155, 0.14536444, 0.08772061,
              0.86011385, 0.44844437, 0.59172921, 0.14430796, 0.09698159,
              0.36346288, 0.36860502, 0.76406406, 0.40596717, 0.24836376,
              0.42854897, 0.83808509, 0.07213686, 0.66931518, 0.3614695 ,
              0.77585538, 0.76731756, 0.28063962, 0.80925816, 0.94241794,
              0.85449357, 0.48582302, 0.96745845, 0.59369753, 0.48747753,
              0.5692956 , 0.22720508, 0.36598084, 0.356074  , 0.23977335])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.86691384, 0.89774009, 0.22959597, 0.45085873, 0.04031034,
              0.5431181 , 0.68273514, 0.93313937, 0.96514351, 0.96188393,
              0.49235345, 0.19509958, 0.24514567, 0.6734156 , 0.56865391,
              0.90333963, 0.6595738 , 0.66254471, 0.13752614, 0.00358908,
              0.13513055, 0.83263188, 0.0809394 , 0.51003701, 0.12236545,
              0.00841829, 0.04968915, 0.533208  , 0.0069648 , 0.34440363,
              0.14123462, 0.93602678, 0.05047218, 0.48450087, 0.47440357,
              0.30113097, 0.19820456, 0.19395308, 0.69683994, 0.14877586,
              0.00926718, 0.78773627, 0.06296982, 0.14836526, 0.53299562,
              0.35331043, 0.38375699, 0.19507527, 0.17817198, 0.31689178,
              0.5865598 , 0.37583811, 0.7124978 , 0.19935683, 0.75064184,
              0.60279944, 0.00888387, 0.11379162, 0.28199992, 0.7966809 ,
              0.12814249, 0.37506489, 0.1265041 , 0.87018514, 0.22954683,
              0.58553602, 0.59547767, 0.71860637, 0.40953245, 0.70974259,
              0.12210988, 0.55721333, 0.17054456, 0.79049862, 0.81521835,
              0.23049165, 0.66630954, 0.11253552, 0.54804952, 0.8512613 ,
              0.86755795, 0.28002284, 0.67347906, 0.91082749, 0.42430335,
              0.76905705, 0.27717474, 0.65089016, 0.23334989, 0.59124686,
              0.3254573 , 0.68640755, 0.26191307, 0.50892729, 0.94967525,
              0.71002603, 0.92195178, 0.52284984, 0.77817862, 0.64317854])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.88987045, 0.34882476, 0.99638681, 0.61373868, 0.85503687,
              0.37039838, 0.89423681, 0.78614181, 0.93715978, 0.85171209,
              0.78397565, 0.3598405 , 0.11406684, 0.35626654, 0.727939  ,
              0.36613229, 0.46194401, 0.51749881, 0.16652872, 0.50890555,
              0.69229634, 0.65888972, 0.95421801, 0.07622025, 0.55991623,
              0.59642268, 0.29089879, 0.8813541 , 0.72248579, 0.15094638,
              0.66462658, 0.05157738, 0.85356681, 0.13293385, 0.29098524,
              0.22650365, 0.49193272, 0.39836527, 0.58086048, 0.98184483,
              0.89525608, 0.80315238, 0.60802216, 0.22875113, 0.73121856,
              0.59499503, 0.84945642, 0.05246165, 0.5220655 , 0.73666423,
              0.89140038, 0.17899733, 0.58121054, 0.9197409 , 0.11922495,
              0.64079916, 0.60739674, 0.42504883, 0.51680916, 0.43863345,
              0.03087309, 0.72779596, 0.64003648, 0.91264657, 0.2363974 ,
              0.08827107, 0.26618897, 0.18388666, 0.17302335, 0.81818025,
              0.69521845, 0.55279359, 0.8655626 , 0.24153493, 0.46010737,
              0.18387284, 0.0017161 , 0.77404276, 0.06569415, 0.7425614 ,
              0.72629446, 0.15210885, 0.41566164, 0.47822359, 0.23443386,
              0.74605638, 0.64087039, 0.55956289, 0.14554686, 0.43676681,
              0.75677495, 0.42935547, 0.00533201, 0.39547242, 0.33042244,
              0.96875194, 0.67679336, 0.5469693 , 0.27299028, 0.16126758])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.91211746, 0.77227043, 0.90051916, 0.69400923, 0.76892679,
              0.65100624, 0.91757428, 0.13829353, 0.13441385, 0.67429402,
              0.97942621, 0.38528888, 0.5557514 , 0.46131446, 0.79945772,
              0.87429019, 0.89003099, 0.7083906 , 0.02385833, 0.95997869,
              0.63038667, 0.99719359, 0.83819323, 0.00924329, 0.11737454,
              0.20747787, 0.34833072, 0.94796168, 0.20337111, 0.80848773,
              0.71672563, 0.76937903, 0.20762338, 0.20493343, 0.02523126,
              0.60493499, 0.00978012, 0.70102367, 0.5797299 , 0.57316704,
              0.4646249 , 0.98932069, 0.01011056, 0.92413874, 0.19942952,
              0.0630711 , 0.82342623, 0.63771724, 0.92941578, 0.71462882,
              0.88247171, 0.13899865, 0.49273937, 0.61290453, 0.2417424 ,
              0.08225138, 0.09910336, 0.12155797, 0.08265496, 0.45398892,
              0.25161789, 0.40508964, 0.21482683, 0.93883808, 0.62614031,
              0.97507254, 0.86537086, 0.98605056, 0.82250342, 0.8292971 ,
              0.10553184, 0.68137905, 0.18287042, 0.54279512, 0.04285887,
              0.94018961, 0.93503097, 0.2254063 , 0.57174225, 0.56816155,
              0.51001448, 0.77104758, 0.71023186, 0.60589649, 0.70628406,
              0.74234659, 0.97948157, 0.59352841, 0.97555938, 0.93734789,
              0.41781379, 0.21926581, 0.62693094, 0.87613536, 0.18383235,
              0.71516525, 0.44032398, 0.3847174 , 0.20016562, 0.62285847])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.9447097 , 0.30894841, 0.79468138, 0.54135745, 0.49219055,
              0.52575294, 0.69833846, 0.31746107, 0.31850746, 0.80731274,
              0.05328016, 0.80627922, 0.73396119, 0.18316269, 0.76149603,
              0.00490755, 0.6751715 , 0.63733701, 0.547473  , 0.9551689 ,
              0.10066107, 0.27711964, 0.60468786, 0.90138328, 0.38337162,
              0.9419083 , 0.14967527, 0.2536278 , 0.41083778, 0.7782543 ,
              0.12669849, 0.32658297, 0.78637627, 0.16784605, 0.27158474,
              0.60630503, 0.50685469, 0.70948954, 0.00200339, 0.50004733,
              0.89339928, 0.61299884, 0.84183071, 0.0958547 , 0.85616184,
              0.07060826, 0.34006436, 0.08699834, 0.59749392, 0.70812358,
              0.41707816, 0.47591015, 0.32165059, 0.84379678, 0.97229909,
              0.77132047, 0.65627916, 0.75815984, 0.94411112, 0.44348584,
              0.61372131, 0.68585226, 0.38748478, 0.41945305, 0.87380027,
              0.98452251, 0.08861439, 0.91657317, 0.26103223, 0.57195755,
              0.70884278, 0.98485477, 0.10225994, 0.5342871 , 0.04964967,
              0.42542992, 0.55774198, 0.18265054, 0.82144869, 0.97376882,
              0.54362658, 0.84942095, 0.43278711, 0.09575465, 0.61150365,
              0.88237525, 0.32775178, 0.35275513, 0.78772884, 0.12621367,
              0.9721012 , 0.62291605, 0.16177838, 0.09839178, 0.94239852,
              0.88668591, 0.25083616, 0.65742885, 0.96161684, 0.06480436])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.76204032, 0.86689656, 0.50871784, 0.5564296 , 0.96831575,
              0.02553302, 0.63179691, 0.80055231, 0.00306687, 0.11435221,
              0.4265893 , 0.42702133, 0.92734422, 0.47645042, 0.64212291,
              0.2800274 , 0.89297565, 0.30896163, 0.63916038, 0.52250385,
              0.98949216, 0.71260142, 0.40654593, 0.71766382, 0.95203818,
              0.86693636, 0.3278353 , 0.46991862, 0.95041438, 0.36259969,
              0.25804986, 0.79425667, 0.65776638, 0.51727667, 0.30419624,
              0.44361212, 0.65707465, 0.18255746, 0.50424853, 0.08621065,
              0.7349307 , 0.64748862, 0.94972542, 0.07241093, 0.21347362,
              0.58762733, 0.96239203, 0.83024688, 0.01144283, 0.17663593,
              0.43842001, 0.13065651, 0.70763613, 0.58466629, 0.47902169,
              0.71833766, 0.40895265, 0.12501856, 0.60155906, 0.36467088,
              0.12827967, 0.27816261, 0.740967  , 0.16632772, 0.35712761,
              0.18799684, 0.41622718, 0.15847479, 0.41910208, 0.6790972 ,
              0.15582994, 0.90351729, 0.80097746, 0.08576261, 0.85430874,
              0.04197035, 0.62486461, 0.59877859, 0.14335411, 0.33268225,
              0.77734669, 0.78411301, 0.1613936 , 0.56842894, 0.48671402,
              0.11698684, 0.35716329, 0.39919182, 0.18322432, 0.79396339,
              0.91651573, 0.10420299, 0.15338223, 0.94419307, 0.22369839,
              0.85384227, 0.10396298, 0.22624975, 0.75530248, 0.86048107])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.04688093, 0.11873212, 0.91518289, 0.72951267, 0.68636126,
              0.99078822, 0.08499512, 0.70257394, 0.0041508 , 0.23408723,
              0.51065409, 0.16515039, 0.29151918, 0.90247319, 0.25270882,
              0.27260075, 0.50461599, 0.11978959, 0.60389965, 0.79454703,
              0.3001384 , 0.87263428, 0.95702862, 0.26713226, 0.77019284,
              0.09513304, 0.36880095, 0.6907009 , 0.58094761, 0.73232821,
              0.18748469, 0.93807926, 0.05120939, 0.21274341, 0.85176958,
              0.55284425, 0.55017954, 0.22578908, 0.37144432, 0.45213859,
              0.54465289, 0.77336612, 0.42880882, 0.86176132, 0.60439164,
              0.94394505, 0.77744649, 0.86810486, 0.95743521, 0.88396995,
              0.63081727, 0.11361746, 0.15959512, 0.01329257, 0.97929996,
              0.95558135, 0.07137152, 0.2251429 , 0.56820665, 0.53019482,
              0.50669286, 0.365978  , 0.94150952, 0.78399918, 0.66933582,
              0.87038345, 0.17348124, 0.4959472 , 0.5896996 , 0.29249161,
              0.03823561, 0.91431687, 0.72879422, 0.4638919 , 0.03121823,
              0.09598747, 0.18805174, 0.4963644 , 0.06946617, 0.84985881,
              0.76970186, 0.72557769, 0.79033516, 0.86322793, 0.39767363,
              0.50046079, 0.22688713, 0.16101192, 0.45389412, 0.99979323,
              0.26915838, 0.97534224, 0.08289602, 0.08629304, 0.90260295,
              0.16693868, 0.49569993, 0.27487679, 0.83799126, 0.37180564])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.12790977, 0.78065151, 0.44346975, 0.19753713, 0.12444175,
              0.35344167, 0.97891304, 0.79766406, 0.09594778, 0.67874543,
              0.69544254, 0.77268268, 0.24287637, 0.22403898, 0.92405147,
              0.26808259, 0.9187837 , 0.12670914, 0.85632868, 0.28109194,
              0.5814249 , 0.96025286, 0.07938962, 0.20858681, 0.43065696,
              0.06028686, 0.43849329, 0.78148296, 0.98782648, 0.8823105 ,
              0.42713106, 0.68858745, 0.82191014, 0.36273479, 0.07166002,
              0.46623398, 0.12700068, 0.4727936 , 0.14239988, 0.88162205,
              0.75212318, 0.42333807, 0.27790706, 0.74185466, 0.49092655,
              0.75566727, 0.20546828, 0.32791256, 0.09226608, 0.22872998,
              0.47085819, 0.5207397 , 0.7038014 , 0.07018439, 0.56981263,
              0.05763169, 0.9852995 , 0.18653764, 0.14336145, 0.22021384,
              0.14519637, 0.54656407, 0.92495607, 0.8882271 , 0.39373606,
              0.25705722, 0.87942215, 0.4454067 , 0.12674071, 0.66184425,
              0.20249804, 0.30646687, 0.12672252, 0.86549921, 0.00855462,
              0.35112747, 0.99583254, 0.76938669, 0.5040341 , 0.61004051,
              0.48047335, 0.4907814 , 0.06703931, 0.54091511, 0.97547191,
              0.4093967 , 0.63961867, 0.99133665, 0.30053355, 0.2995972 ,
              0.39240869, 0.30195107, 0.25674106, 0.50557784, 0.53318141,
              0.46583841, 0.90102545, 0.85237981, 0.81138111, 0.87921078])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.9048276 , 0.78709628, 0.22600687, 0.82784594, 0.6027852 ,
              0.93604793, 0.23646429, 0.48248075, 0.87883116, 0.98118789,
              0.94874516, 0.92206855, 0.85710037, 0.14084213, 0.26896134,
              0.99974398, 0.43942112, 0.07002525, 0.41963925, 0.1201808 ,
              0.39464272, 0.92659508, 0.88332727, 0.34736402, 0.16302811,
              0.74315134, 0.40582926, 0.57137177, 0.24906777, 0.87932977,
              0.03567679, 0.46261181, 0.69661711, 0.74127438, 0.21997838,
              0.31694318, 0.93633904, 0.44203647, 0.40418894, 0.13350856,
              0.75932861, 0.03038412, 0.40384195, 0.57961716, 0.66637131,
              0.49806885, 0.35862561, 0.0407101 , 0.41266835, 0.46997509,
              0.48245051, 0.8537989 , 0.42725407, 0.63797941, 0.04383538,
              0.46059819, 0.73553627, 0.1122608 , 0.32358428, 0.49774378,
              0.71022999, 0.02240392, 0.32045749, 0.98263499, 0.76160707,
              0.28355954, 0.96171346, 0.03954912, 0.49546937, 0.07832779,
              0.40315782, 0.68497569, 0.16733973, 0.31912123, 0.60532703,
              0.56769829, 0.86429208, 0.52225761, 0.73453505, 0.52042193,
              0.24906964, 0.91241459, 0.29057023, 0.13537941, 0.71214008,
              0.7730951 , 0.38870335, 0.25770183, 0.02044277, 0.77597812,
              0.60587978, 0.2350342 , 0.14238294, 0.61311061, 0.85091305,
              0.14788629, 0.08733187, 0.84747446, 0.89713297, 0.15783931])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.76204032, 0.86689656, 0.50871784, 0.5564296 , 0.96831575,
              0.02553302, 0.63179691, 0.80055231, 0.00306687, 0.11435221,
              0.4265893 , 0.42702133, 0.92734422, 0.47645042, 0.64212291,
              0.2800274 , 0.89297565, 0.30896163, 0.63916038, 0.52250385,
              0.98949216, 0.71260142, 0.40654593, 0.71766382, 0.95203818,
              0.86693636, 0.3278353 , 0.46991862, 0.95041438, 0.36259969,
              0.25804986, 0.79425667, 0.65776638, 0.51727667, 0.30419624,
              0.44361212, 0.65707465, 0.18255746, 0.50424853, 0.08621065,
              0.7349307 , 0.64748862, 0.94972542, 0.07241093, 0.21347362,
              0.58762733, 0.96239203, 0.83024688, 0.01144283, 0.17663593,
              0.43842001, 0.13065651, 0.70763613, 0.58466629, 0.47902169,
              0.71833766, 0.40895265, 0.12501856, 0.60155906, 0.36467088,
              0.12827967, 0.27816261, 0.740967  , 0.16632772, 0.35712761,
              0.18799684, 0.41622718, 0.15847479, 0.41910208, 0.6790972 ,
              0.15582994, 0.90351729, 0.80097746, 0.08576261, 0.85430874,
              0.04197035, 0.62486461, 0.59877859, 0.14335411, 0.33268225,
              0.77734669, 0.78411301, 0.1613936 , 0.56842894, 0.48671402,
              0.11698684, 0.35716329, 0.39919182, 0.18322432, 0.79396339,
              0.91651573, 0.10420299, 0.15338223, 0.94419307, 0.22369839,
              0.85384227, 0.10396298, 0.22624975, 0.75530248, 0.86048107])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.04688093, 0.11873212, 0.91518289, 0.72951267, 0.68636126,
              0.99078822, 0.08499512, 0.70257394, 0.0041508 , 0.23408723,
              0.51065409, 0.16515039, 0.29151918, 0.90247319, 0.25270882,
              0.27260075, 0.50461599, 0.11978959, 0.60389965, 0.79454703,
              0.3001384 , 0.87263428, 0.95702862, 0.26713226, 0.77019284,
              0.09513304, 0.36880095, 0.6907009 , 0.58094761, 0.73232821,
              0.18748469, 0.93807926, 0.05120939, 0.21274341, 0.85176958,
              0.55284425, 0.55017954, 0.22578908, 0.37144432, 0.45213859,
              0.54465289, 0.77336612, 0.42880882, 0.86176132, 0.60439164,
              0.94394505, 0.77744649, 0.86810486, 0.95743521, 0.88396995,
              0.63081727, 0.11361746, 0.15959512, 0.01329257, 0.97929996,
              0.95558135, 0.07137152, 0.2251429 , 0.56820665, 0.53019482,
              0.50669286, 0.365978  , 0.94150952, 0.78399918, 0.66933582,
              0.87038345, 0.17348124, 0.4959472 , 0.5896996 , 0.29249161,
              0.03823561, 0.91431687, 0.72879422, 0.4638919 , 0.03121823,
              0.09598747, 0.18805174, 0.4963644 , 0.06946617, 0.84985881,
              0.76970186, 0.72557769, 0.79033516, 0.86322793, 0.39767363,
              0.50046079, 0.22688713, 0.16101192, 0.45389412, 0.99979323,
              0.26915838, 0.97534224, 0.08289602, 0.08629304, 0.90260295,
              0.16693868, 0.49569993, 0.27487679, 0.83799126, 0.37180564])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.12790977, 0.78065151, 0.44346975, 0.19753713, 0.12444175,
              0.35344167, 0.97891304, 0.79766406, 0.09594778, 0.67874543,
              0.69544254, 0.77268268, 0.24287637, 0.22403898, 0.92405147,
              0.26808259, 0.9187837 , 0.12670914, 0.85632868, 0.28109194,
              0.5814249 , 0.96025286, 0.07938962, 0.20858681, 0.43065696,
              0.06028686, 0.43849329, 0.78148296, 0.98782648, 0.8823105 ,
              0.42713106, 0.68858745, 0.82191014, 0.36273479, 0.07166002,
              0.46623398, 0.12700068, 0.4727936 , 0.14239988, 0.88162205,
              0.75212318, 0.42333807, 0.27790706, 0.74185466, 0.49092655,
              0.75566727, 0.20546828, 0.32791256, 0.09226608, 0.22872998,
              0.47085819, 0.5207397 , 0.7038014 , 0.07018439, 0.56981263,
              0.05763169, 0.9852995 , 0.18653764, 0.14336145, 0.22021384,
              0.14519637, 0.54656407, 0.92495607, 0.8882271 , 0.39373606,
              0.25705722, 0.87942215, 0.4454067 , 0.12674071, 0.66184425,
              0.20249804, 0.30646687, 0.12672252, 0.86549921, 0.00855462,
              0.35112747, 0.99583254, 0.76938669, 0.5040341 , 0.61004051,
              0.48047335, 0.4907814 , 0.06703931, 0.54091511, 0.97547191,
              0.4093967 , 0.63961867, 0.99133665, 0.30053355, 0.2995972 ,
              0.39240869, 0.30195107, 0.25674106, 0.50557784, 0.53318141,
              0.46583841, 0.90102545, 0.85237981, 0.81138111, 0.87921078])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.9874607 , 0.85311528, 0.59486602, 0.25634627, 0.32703825,
              0.66841754, 0.1381215 , 0.95307641, 0.82382355, 0.87425017,
              0.95053641, 0.29246309, 0.09705884, 0.5891456 , 0.05324199,
              0.40379779, 0.1235496 , 0.17042714, 0.53968912, 0.35051978,
              0.98415108, 0.11139   , 0.94618258, 0.18124665, 0.11763863,
              0.30085561, 0.45010233, 0.93175439, 0.71744822, 0.26332087,
              0.11995296, 0.48774889, 0.25803713, 0.66740338, 0.53895143,
              0.72398792, 0.82987512, 0.3117471 , 0.19268802, 0.47091017,
              0.79529132, 0.45597447, 0.8955464 , 0.25916589, 0.25228581,
              0.85327883, 0.6933701 , 0.53942879, 0.02576298, 0.44746617,
              0.67898354, 0.44897822, 0.07660153, 0.88717623, 0.47449617,
              0.16885617, 0.48813175, 0.03547435, 0.7154344 , 0.7055702 ,
              0.71932145, 0.60034142, 0.60512108, 0.91611533, 0.30216637,
              0.17453353, 0.62026584, 0.69792279, 0.55183436, 0.84194244,
              0.26835655, 0.30902519, 0.94424093, 0.88338332, 0.29882226,
              0.41769477, 0.81806953, 0.92296842, 0.29051315, 0.41289258,
              0.91316896, 0.79269685, 0.36197657, 0.0693562 , 0.79886071,
              0.62693047, 0.5705994 , 0.25275302, 0.99212317, 0.4214459 ,
              0.67403902, 0.52002206, 0.64566653, 0.89478111, 0.88299667,
              0.74912123, 0.91289181, 0.70202718, 0.88678075, 0.62442213])}]]


