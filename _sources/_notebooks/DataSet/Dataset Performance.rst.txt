
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='206c0b6f-7933-493e-b913-a74cf638669f'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='5e179ab7-6af2-4f3a-a89a-ed91d9835bba'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.982027169282138],
     [0.347523930355021],
     [0.518798363816466],
     [0.855671096047947],
     [0.967697954978031],
     [0.607952639474182],
     [0.152209392573598],
     [0.838765273415206],
     [0.297403599778619],
     [0.665603916613762],
     [0.446103499893486],
     [0.616686807316859],
     [0.120135110128478],
     [0.676106167914899],
     [0.336088217538541],
     [0.603558263576578],
     [0.5110255986206],
     [0.651427938205701],
     [0.479798153404836],
     [0.523624851731831],
     [0.406795978543058],
     [0.728515216386933],
     [0.382417707596728],
     [0.627810822332594],
     [0.667511519745999],
     [0.306971803773513],
     [0.788865389579252],
     [0.724204560254767],
     [0.733442682233376],
     [0.112986790699375],
     [0.0754275146376674],
     [0.644624152595906],
     [0.0598960158963165],
     [0.209216142256111],
     [0.726412597651235],
     [0.359555743941207],
     [0.755710153377917],
     [0.840438920136905],
     [0.0308851860803387],
     [0.554156564361791],
     [0.000472638042974927],
     [0.547139643678756],
     [0.452242991128289],
     [0.218975779826608],
     [0.490179955231339],
     [0.865528454258578],
     [0.99581043100894],
     [0.175748082868023],
     [0.371029546363419],
     [0.472766686819843],
     [0.253634092864467],
     [0.588118448615659],
     [0.546102746893251],
     [0.166297580049397],
     [0.616678624324607],
     [0.718485425061031],
     [0.824035071232133],
     [0.0649275321577577],
     [0.0877659666733724],
     [0.462918171692005],
     [0.324369224323036],
     [0.538010534997737],
     [0.998217457823521],
     [0.576264328319273],
     [0.529093912341886],
     [0.657822016605382],
     [0.630517902098711],
     [0.996147287512785],
     [0.224945862310264],
     [0.448368194565613],
     [0.619355373300447],
     [0.0480279864041891],
     [0.32217461431247],
     [0.175173957745497],
     [0.0269195536750112],
     [0.62620666022638],
     [0.673512321332396],
     [0.260849052138911],
     [0.546144682156105],
     [0.860968717895299],
     [0.176245002747685],
     [0.389571970619763],
     [0.0697733841131277],
     [0.938042018526163],
     [0.0290917702787021],
     [0.890789774267566],
     [0.986883761070795],
     [0.295998992103033],
     [0.586621671875717],
     [0.36072536474188],
     [0.419050693443207],
     [0.943601255128571],
     [0.0251789816551948],
     [0.45437285878676],
     [0.535887054551277],
     [0.387296743267769],
     [0.051107876974103],
     [0.402880826631699],
     [0.871184641137971],
     [0.0947539669740092]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.25689145])],
     [array([0.64670723])],
     [array([0.73501957])],
     [array([0.5831291])],
     [array([0.22611159])],
     [array([0.04705111])],
     [array([0.07308451])],
     [array([0.42117388])],
     [array([0.83763392])],
     [array([0.24448348])],
     [array([0.29353644])],
     [array([0.21229779])],
     [array([0.88685678])],
     [array([0.80343242])],
     [array([0.30359647])],
     [array([0.52736652])],
     [array([0.46915395])],
     [array([0.61635995])],
     [array([0.18205483])],
     [array([0.93355452])],
     [array([0.37713229])],
     [array([0.6776699])],
     [array([0.60658467])],
     [array([0.99961405])],
     [array([0.70905315])],
     [array([0.32807866])],
     [array([0.59112128])],
     [array([0.52513976])],
     [array([0.6827555])],
     [array([0.3081815])],
     [array([0.84574083])],
     [array([0.86467233])],
     [array([0.76806449])],
     [array([0.26161189])],
     [array([0.08327227])],
     [array([0.59570289])],
     [array([0.92966522])],
     [array([0.76637151])],
     [array([0.43557365])],
     [array([0.57233483])],
     [array([0.06857508])],
     [array([0.75769015])],
     [array([0.26128518])],
     [array([0.1841514])],
     [array([0.43708616])],
     [array([0.65954503])],
     [array([0.39720604])],
     [array([0.94801406])],
     [array([0.43581968])],
     [array([0.6260427])],
     [array([0.89421078])],
     [array([0.59096117])],
     [array([0.12625632])],
     [array([0.75168041])],
     [array([0.82923325])],
     [array([0.78799025])],
     [array([0.81502074])],
     [array([0.49869817])],
     [array([0.74995256])],
     [array([0.74301857])],
     [array([0.84434255])],
     [array([0.450269])],
     [array([0.08917182])],
     [array([0.5291338])],
     [array([0.90109328])],
     [array([0.70131319])],
     [array([0.74405002])],
     [array([0.6747646])],
     [array([0.07060523])],
     [array([0.98511106])],
     [array([0.89592258])],
     [array([0.83953542])],
     [array([0.68327106])],
     [array([0.54631258])],
     [array([0.01377041])],
     [array([0.20116132])],
     [array([0.32451311])],
     [array([0.71743617])],
     [array([0.26978678])],
     [array([0.5193362])],
     [array([0.35428363])],
     [array([0.03971621])],
     [array([0.07472663])],
     [array([0.69709654])],
     [array([0.44789169])],
     [array([0.9922203])],
     [array([0.44840278])],
     [array([0.59441951])],
     [array([0.41091937])],
     [array([0.31139254])],
     [array([0.42466555])],
     [array([0.88458842])],
     [array([0.45994466])],
     [array([0.08988466])],
     [array([0.91953759])],
     [array([0.40056113])],
     [array([0.6108871])],
     [array([0.42475151])],
     [array([0.95246403])],
     [array([0.58905133])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.25689145, 0.64670723, 0.73501957, 0.5831291 , 0.22611159,
           0.04705111, 0.07308451, 0.42117388, 0.83763392, 0.24448348,
           0.29353644, 0.21229779, 0.88685678, 0.80343242, 0.30359647,
           0.52736652, 0.46915395, 0.61635995, 0.18205483, 0.93355452,
           0.37713229, 0.6776699 , 0.60658467, 0.99961405, 0.70905315,
           0.32807866, 0.59112128, 0.52513976, 0.6827555 , 0.3081815 ,
           0.84574083, 0.86467233, 0.76806449, 0.26161189, 0.08327227,
           0.59570289, 0.92966522, 0.76637151, 0.43557365, 0.57233483,
           0.06857508, 0.75769015, 0.26128518, 0.1841514 , 0.43708616,
           0.65954503, 0.39720604, 0.94801406, 0.43581968, 0.6260427 ,
           0.89421078, 0.59096117, 0.12625632, 0.75168041, 0.82923325,
           0.78799025, 0.81502074, 0.49869817, 0.74995256, 0.74301857,
           0.84434255, 0.450269  , 0.08917182, 0.5291338 , 0.90109328,
           0.70131319, 0.74405002, 0.6747646 , 0.07060523, 0.98511106,
           0.89592258, 0.83953542, 0.68327106, 0.54631258, 0.01377041,
           0.20116132, 0.32451311, 0.71743617, 0.26978678, 0.5193362 ,
           0.35428363, 0.03971621, 0.07472663, 0.69709654, 0.44789169,
           0.9922203 , 0.44840278, 0.59441951, 0.41091937, 0.31139254,
           0.42466555, 0.88458842, 0.45994466, 0.08988466, 0.91953759,
           0.40056113, 0.6108871 , 0.42475151, 0.95246403, 0.58905133])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([9.82027169e-01, 3.47523930e-01, 5.18798364e-01, 8.55671096e-01,
              9.67697955e-01, 6.07952639e-01, 1.52209393e-01, 8.38765273e-01,
              2.97403600e-01, 6.65603917e-01, 4.46103500e-01, 6.16686807e-01,
              1.20135110e-01, 6.76106168e-01, 3.36088218e-01, 6.03558264e-01,
              5.11025599e-01, 6.51427938e-01, 4.79798153e-01, 5.23624852e-01,
              4.06795979e-01, 7.28515216e-01, 3.82417708e-01, 6.27810822e-01,
              6.67511520e-01, 3.06971804e-01, 7.88865390e-01, 7.24204560e-01,
              7.33442682e-01, 1.12986791e-01, 7.54275146e-02, 6.44624153e-01,
              5.98960159e-02, 2.09216142e-01, 7.26412598e-01, 3.59555744e-01,
              7.55710153e-01, 8.40438920e-01, 3.08851861e-02, 5.54156564e-01,
              4.72638043e-04, 5.47139644e-01, 4.52242991e-01, 2.18975780e-01,
              4.90179955e-01, 8.65528454e-01, 9.95810431e-01, 1.75748083e-01,
              3.71029546e-01, 4.72766687e-01, 2.53634093e-01, 5.88118449e-01,
              5.46102747e-01, 1.66297580e-01, 6.16678624e-01, 7.18485425e-01,
              8.24035071e-01, 6.49275322e-02, 8.77659667e-02, 4.62918172e-01,
              3.24369224e-01, 5.38010535e-01, 9.98217458e-01, 5.76264328e-01,
              5.29093912e-01, 6.57822017e-01, 6.30517902e-01, 9.96147288e-01,
              2.24945862e-01, 4.48368195e-01, 6.19355373e-01, 4.80279864e-02,
              3.22174614e-01, 1.75173958e-01, 2.69195537e-02, 6.26206660e-01,
              6.73512321e-01, 2.60849052e-01, 5.46144682e-01, 8.60968718e-01,
              1.76245003e-01, 3.89571971e-01, 6.97733841e-02, 9.38042019e-01,
              2.90917703e-02, 8.90789774e-01, 9.86883761e-01, 2.95998992e-01,
              5.86621672e-01, 3.60725365e-01, 4.19050693e-01, 9.43601255e-01,
              2.51789817e-02, 4.54372859e-01, 5.35887055e-01, 3.87296743e-01,
              5.11078770e-02, 4.02880827e-01, 8.71184641e-01, 9.47539670e-02])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.73869258, 0.00257611, 0.9895605 , 0.21997178, 0.3096077 ,
              0.86955036, 0.57152189, 0.80228199, 0.36198336, 0.76145376,
              0.88540183, 0.32049376, 0.33773836, 0.85166488, 0.03337649,
              0.08065627, 0.28717509, 0.08046819, 0.84164066, 0.28278183,
              0.76927869, 0.90484011, 0.92557626, 0.20037525, 0.57384557,
              0.27288633, 0.879485  , 0.51050095, 0.73788597, 0.96111966,
              0.46393266, 0.60526542, 0.79711803, 0.04105036, 0.15587481,
              0.35704358, 0.59064323, 0.68472179, 0.55829854, 0.79541148,
              0.95989947, 0.3528965 , 0.39422583, 0.03019724, 0.831656  ,
              0.8294194 , 0.49710282, 0.73555677, 0.82199683, 0.36720222,
              0.7406713 , 0.70418931, 0.01207119, 0.15991947, 0.7673769 ,
              0.87698858, 0.17295567, 0.80812706, 0.31315599, 0.42582003,
              0.15220634, 0.13755707, 0.71266644, 0.29538991, 0.79565237,
              0.91817485, 0.99000607, 0.49536522, 0.41894342, 0.47764211,
              0.08535273, 0.75978177, 0.57451023, 0.74507055, 0.63075344,
              0.4833736 , 0.90086084, 0.67422636, 0.64277975, 0.71370885,
              0.11646702, 0.9497178 , 0.98089664, 0.91244464, 0.43870412,
              0.95979945, 0.03114858, 0.20712362, 0.90421155, 0.93757698,
              0.00578957, 0.98003445, 0.23656859, 0.94251779, 0.36960053,
              0.87096745, 0.5388275 , 0.43298086, 0.28560714, 0.7392659 ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.82473689, 0.01896374, 0.17360193, 0.13529839, 0.51289735,
              0.48229282, 0.24757314, 0.60184747, 0.97500428, 0.79024971,
              0.08460991, 0.15861767, 0.40349089, 0.07917511, 0.37088019,
              0.94439284, 0.28865441, 0.91163301, 0.49914655, 0.38149646,
              0.41051394, 0.04817165, 0.99798609, 0.39220396, 0.37970785,
              0.08031626, 0.16640176, 0.81166815, 0.35743972, 0.80064993,
              0.34759396, 0.37928801, 0.28312653, 0.49027148, 0.78057344,
              0.34304239, 0.6419022 , 0.7430112 , 0.42250326, 0.19662238,
              0.68687729, 0.87888343, 0.13989327, 0.05008839, 0.34997371,
              0.66513056, 0.30635948, 0.87908017, 0.05536942, 0.98118482,
              0.91794425, 0.97318227, 0.47398999, 0.68910406, 0.97241237,
              0.1509626 , 0.53676846, 0.1868738 , 0.93041136, 0.03468972,
              0.70391992, 0.08468419, 0.59138576, 0.44615715, 0.52769234,
              0.55373893, 0.7845942 , 0.76199671, 0.35836378, 0.37782133,
              0.9169725 , 0.97629916, 0.77092231, 0.22073005, 0.7980481 ,
              0.88197081, 0.96222533, 0.72806184, 0.88475795, 0.60505388,
              0.15464367, 0.5205861 , 0.65771925, 0.64438726, 0.75246309,
              0.13112083, 0.46910651, 0.70609052, 0.13313242, 0.90051784,
              0.5104058 , 0.04873019, 0.43485066, 0.59316367, 0.62717978,
              0.52335554, 0.71858144, 0.61787485, 0.30816884, 0.91073257])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.1956237 , 0.44018603, 0.15356265, 0.71003721, 0.14511964,
              0.65579873, 0.78122276, 0.5046947 , 0.95658512, 0.60414683,
              0.21587762, 0.56295025, 0.55200908, 0.08108711, 0.22541924,
              0.21010844, 0.41086958, 0.68487124, 0.61654464, 0.83470794,
              0.96243569, 0.28549559, 0.52893359, 0.46427791, 0.98906973,
              0.6167079 , 0.89101657, 0.42920285, 0.09623393, 0.58495187,
              0.46150161, 0.5204245 , 0.5409265 , 0.32691098, 0.8090796 ,
              0.6718606 , 0.55445356, 0.27425543, 0.84876691, 0.32735193,
              0.56576089, 0.84469356, 0.9067373 , 0.92218723, 0.33523329,
              0.33121408, 0.51068872, 0.90368757, 0.71411559, 0.39085012,
              0.3396144 , 0.97684302, 0.53770752, 0.3802005 , 0.22682437,
              0.78237631, 0.69876084, 0.30327288, 0.47227859, 0.85800301,
              0.56010566, 0.76499555, 0.57070666, 0.59139017, 0.31690843,
              0.25102824, 0.6018402 , 0.65436437, 0.50220256, 0.00941255,
              0.13647022, 0.2087386 , 0.06148652, 0.25634406, 0.94579342,
              0.23379386, 0.93825014, 0.84780147, 0.5968877 , 0.33815794,
              0.86784109, 0.15473077, 0.91482507, 0.42599842, 0.15479214,
              0.0518979 , 0.81933039, 0.29031442, 0.42535233, 0.24545132,
              0.3904184 , 0.45959978, 0.26932831, 0.03260646, 0.28466885,
              0.72767939, 0.85068217, 0.96785212, 0.98424458, 0.48301797])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([9.82027169e-01, 3.47523930e-01, 5.18798364e-01, 8.55671096e-01,
              9.67697955e-01, 6.07952639e-01, 1.52209393e-01, 8.38765273e-01,
              2.97403600e-01, 6.65603917e-01, 4.46103500e-01, 6.16686807e-01,
              1.20135110e-01, 6.76106168e-01, 3.36088218e-01, 6.03558264e-01,
              5.11025599e-01, 6.51427938e-01, 4.79798153e-01, 5.23624852e-01,
              4.06795979e-01, 7.28515216e-01, 3.82417708e-01, 6.27810822e-01,
              6.67511520e-01, 3.06971804e-01, 7.88865390e-01, 7.24204560e-01,
              7.33442682e-01, 1.12986791e-01, 7.54275146e-02, 6.44624153e-01,
              5.98960159e-02, 2.09216142e-01, 7.26412598e-01, 3.59555744e-01,
              7.55710153e-01, 8.40438920e-01, 3.08851861e-02, 5.54156564e-01,
              4.72638043e-04, 5.47139644e-01, 4.52242991e-01, 2.18975780e-01,
              4.90179955e-01, 8.65528454e-01, 9.95810431e-01, 1.75748083e-01,
              3.71029546e-01, 4.72766687e-01, 2.53634093e-01, 5.88118449e-01,
              5.46102747e-01, 1.66297580e-01, 6.16678624e-01, 7.18485425e-01,
              8.24035071e-01, 6.49275322e-02, 8.77659667e-02, 4.62918172e-01,
              3.24369224e-01, 5.38010535e-01, 9.98217458e-01, 5.76264328e-01,
              5.29093912e-01, 6.57822017e-01, 6.30517902e-01, 9.96147288e-01,
              2.24945862e-01, 4.48368195e-01, 6.19355373e-01, 4.80279864e-02,
              3.22174614e-01, 1.75173958e-01, 2.69195537e-02, 6.26206660e-01,
              6.73512321e-01, 2.60849052e-01, 5.46144682e-01, 8.60968718e-01,
              1.76245003e-01, 3.89571971e-01, 6.97733841e-02, 9.38042019e-01,
              2.90917703e-02, 8.90789774e-01, 9.86883761e-01, 2.95998992e-01,
              5.86621672e-01, 3.60725365e-01, 4.19050693e-01, 9.43601255e-01,
              2.51789817e-02, 4.54372859e-01, 5.35887055e-01, 3.87296743e-01,
              5.11078770e-02, 4.02880827e-01, 8.71184641e-01, 9.47539670e-02])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.73869258, 0.00257611, 0.9895605 , 0.21997178, 0.3096077 ,
              0.86955036, 0.57152189, 0.80228199, 0.36198336, 0.76145376,
              0.88540183, 0.32049376, 0.33773836, 0.85166488, 0.03337649,
              0.08065627, 0.28717509, 0.08046819, 0.84164066, 0.28278183,
              0.76927869, 0.90484011, 0.92557626, 0.20037525, 0.57384557,
              0.27288633, 0.879485  , 0.51050095, 0.73788597, 0.96111966,
              0.46393266, 0.60526542, 0.79711803, 0.04105036, 0.15587481,
              0.35704358, 0.59064323, 0.68472179, 0.55829854, 0.79541148,
              0.95989947, 0.3528965 , 0.39422583, 0.03019724, 0.831656  ,
              0.8294194 , 0.49710282, 0.73555677, 0.82199683, 0.36720222,
              0.7406713 , 0.70418931, 0.01207119, 0.15991947, 0.7673769 ,
              0.87698858, 0.17295567, 0.80812706, 0.31315599, 0.42582003,
              0.15220634, 0.13755707, 0.71266644, 0.29538991, 0.79565237,
              0.91817485, 0.99000607, 0.49536522, 0.41894342, 0.47764211,
              0.08535273, 0.75978177, 0.57451023, 0.74507055, 0.63075344,
              0.4833736 , 0.90086084, 0.67422636, 0.64277975, 0.71370885,
              0.11646702, 0.9497178 , 0.98089664, 0.91244464, 0.43870412,
              0.95979945, 0.03114858, 0.20712362, 0.90421155, 0.93757698,
              0.00578957, 0.98003445, 0.23656859, 0.94251779, 0.36960053,
              0.87096745, 0.5388275 , 0.43298086, 0.28560714, 0.7392659 ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.82473689, 0.01896374, 0.17360193, 0.13529839, 0.51289735,
              0.48229282, 0.24757314, 0.60184747, 0.97500428, 0.79024971,
              0.08460991, 0.15861767, 0.40349089, 0.07917511, 0.37088019,
              0.94439284, 0.28865441, 0.91163301, 0.49914655, 0.38149646,
              0.41051394, 0.04817165, 0.99798609, 0.39220396, 0.37970785,
              0.08031626, 0.16640176, 0.81166815, 0.35743972, 0.80064993,
              0.34759396, 0.37928801, 0.28312653, 0.49027148, 0.78057344,
              0.34304239, 0.6419022 , 0.7430112 , 0.42250326, 0.19662238,
              0.68687729, 0.87888343, 0.13989327, 0.05008839, 0.34997371,
              0.66513056, 0.30635948, 0.87908017, 0.05536942, 0.98118482,
              0.91794425, 0.97318227, 0.47398999, 0.68910406, 0.97241237,
              0.1509626 , 0.53676846, 0.1868738 , 0.93041136, 0.03468972,
              0.70391992, 0.08468419, 0.59138576, 0.44615715, 0.52769234,
              0.55373893, 0.7845942 , 0.76199671, 0.35836378, 0.37782133,
              0.9169725 , 0.97629916, 0.77092231, 0.22073005, 0.7980481 ,
              0.88197081, 0.96222533, 0.72806184, 0.88475795, 0.60505388,
              0.15464367, 0.5205861 , 0.65771925, 0.64438726, 0.75246309,
              0.13112083, 0.46910651, 0.70609052, 0.13313242, 0.90051784,
              0.5104058 , 0.04873019, 0.43485066, 0.59316367, 0.62717978,
              0.52335554, 0.71858144, 0.61787485, 0.30816884, 0.91073257])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.41264477, 0.34753582, 0.507213  , 0.32114683, 0.35891029,
              0.41046337, 0.09672045, 0.28739394, 0.5684614 , 0.1643818 ,
              0.05656496, 0.24436111, 0.78451209, 0.65768257, 0.41298765,
              0.35456621, 0.16742841, 0.13915422, 0.13299147, 0.8030393 ,
              0.93883417, 0.47705785, 0.55532833, 0.21806153, 0.28636106,
              0.69315706, 0.1296306 , 0.36726787, 0.3865171 , 0.18247399,
              0.77153841, 0.06155467, 0.52683431, 0.45910119, 0.73110947,
              0.22097799, 0.58886177, 0.39714578, 0.19655395, 0.18540033,
              0.8760623 , 0.44657076, 0.70825337, 0.51507184, 0.27163645,
              0.58170272, 0.17444056, 0.63388544, 0.6038169 , 0.76057537,
              0.95563906, 0.59148487, 0.84856024, 0.49458571, 0.87027739,
              0.05237617, 0.33427831, 0.77991841, 0.55395491, 0.73340768,
              0.78383329, 0.69454347, 0.35703008, 0.17432075, 0.55536055,
              0.82490254, 0.85673504, 0.52772029, 0.04151204, 0.26245268,
              0.40766911, 0.01913687, 0.19771328, 0.18551354, 0.97249479,
              0.60814167, 0.53887596, 0.50386287, 0.48359909, 0.83582519,
              0.94900958, 0.96642521, 0.88595029, 0.77053338, 0.10694453,
              0.00192431, 0.4651936 , 0.61385126, 0.08674481, 0.64673403,
              0.94606591, 0.5386589 , 0.85920765, 0.75673073, 0.18220325,
              0.20239622, 0.25320651, 0.12518052, 0.90362662, 0.98395961])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.25689145, 0.64670723, 0.73501957, 0.5831291 , 0.22611159,
              0.04705111, 0.07308451, 0.42117388, 0.83763392, 0.24448348,
              0.29353644, 0.21229779, 0.88685678, 0.80343242, 0.30359647,
              0.52736652, 0.46915395, 0.61635995, 0.18205483, 0.93355452,
              0.37713229, 0.6776699 , 0.60658467, 0.99961405, 0.70905315,
              0.32807866, 0.59112128, 0.52513976, 0.6827555 , 0.3081815 ,
              0.84574083, 0.86467233, 0.76806449, 0.26161189, 0.08327227,
              0.59570289, 0.92966522, 0.76637151, 0.43557365, 0.57233483,
              0.06857508, 0.75769015, 0.26128518, 0.1841514 , 0.43708616,
              0.65954503, 0.39720604, 0.94801406, 0.43581968, 0.6260427 ,
              0.89421078, 0.59096117, 0.12625632, 0.75168041, 0.82923325,
              0.78799025, 0.81502074, 0.49869817, 0.74995256, 0.74301857,
              0.84434255, 0.450269  , 0.08917182, 0.5291338 , 0.90109328,
              0.70131319, 0.74405002, 0.6747646 , 0.07060523, 0.98511106,
              0.89592258, 0.83953542, 0.68327106, 0.54631258, 0.01377041,
              0.20116132, 0.32451311, 0.71743617, 0.26978678, 0.5193362 ,
              0.35428363, 0.03971621, 0.07472663, 0.69709654, 0.44789169,
              0.9922203 , 0.44840278, 0.59441951, 0.41091937, 0.31139254,
              0.42466555, 0.88458842, 0.45994466, 0.08988466, 0.91953759,
              0.40056113, 0.6108871 , 0.42475151, 0.95246403, 0.58905133])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.13629348, 0.39755116, 0.75193293, 0.49083843, 0.48737237,
              0.58363321, 0.64695566, 0.19475618, 0.88000271, 0.54632313,
              0.37531583, 0.33954573, 0.37401652, 0.10762807, 0.23679314,
              0.88814348, 0.22627127, 0.40512162, 0.61060756, 0.03780083,
              0.71076648, 0.85112875, 0.66861233, 0.14564979, 0.58054372,
              0.991568  , 0.63587284, 0.26452497, 0.32845239, 0.7801363 ,
              0.85934568, 0.72285307, 0.97923246, 0.57141799, 0.93664352,
              0.69092436, 0.65456502, 0.59307585, 0.66745106, 0.79867578,
              0.9509216 , 0.35248717, 0.74247225, 0.81851282, 0.23456801,
              0.8665355 , 0.60016811, 0.76679304, 0.43231674, 0.1184244 ,
              0.20369405, 0.54082087, 0.35407894, 0.3388273 , 0.46619348,
              0.23889087, 0.45737328, 0.39465677, 0.91418008, 0.69595094,
              0.52516285, 0.78352801, 0.20303236, 0.70707549, 0.95188761,
              0.72199067, 0.68431751, 0.46924101, 0.62018459, 0.00528081,
              0.10094966, 0.03825438, 0.54283578, 0.8807303 , 0.73612915,
              0.91501047, 0.80654909, 0.03984929, 0.26414081, 0.02637171,
              0.87581378, 0.67200053, 0.14609279, 0.76114456, 0.24660871,
              0.77991416, 0.85269667, 0.96825644, 0.24219641, 0.77713311,
              0.90923023, 0.0482009 , 0.82180939, 0.41032558, 0.17867318,
              0.91680643, 0.04727599, 0.34294034, 0.14372765, 0.93728871])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.54075094, 0.6440761 , 0.36221633, 0.90706927, 0.7659498 ,
              0.80601779, 0.68802934, 0.15791206, 0.77740712, 0.22681886,
              0.34677222, 0.38927784, 0.45802155, 0.32622605, 0.12576878,
              0.50387581, 0.74801982, 0.49826869, 0.76525769, 0.07425317,
              0.71146808, 0.38771491, 0.9610985 , 0.99616927, 0.64005438,
              0.51407706, 0.32762787, 0.52142328, 0.22195134, 0.52327447,
              0.91901156, 0.18316589, 0.60810554, 0.31234371, 0.14433677,
              0.84011899, 0.36637692, 0.33928414, 0.66346504, 0.6280294 ,
              0.57477543, 0.8373752 , 0.98249037, 0.90541169, 0.36777353,
              0.55867035, 0.23010623, 0.61390387, 0.37584507, 0.61393635,
              0.78095813, 0.78894138, 0.64316863, 0.99381826, 0.20098299,
              0.98606842, 0.94225019, 0.72700489, 0.60094638, 0.29256115,
              0.27829484, 0.19740734, 0.09200247, 0.11095653, 0.50909368,
              0.268442  , 0.16036517, 0.3075231 , 0.58733935, 0.10734733,
              0.8816163 , 0.41107648, 0.77863477, 0.56382643, 0.16851646,
              0.73860354, 0.05064321, 0.81107768, 0.74013291, 0.2713283 ,
              0.92268848, 0.79588057, 0.31323535, 0.86832139, 0.676425  ,
              0.17473969, 0.7744675 , 0.52442506, 0.46585862, 0.44711673,
              0.00658756, 0.82529981, 0.67697725, 0.10592764, 0.54139738,
              0.25878315, 0.68870108, 0.53160837, 0.00758208, 0.97774424])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.1576638 , 0.62084982, 0.73454819, 0.76167213, 0.9817364 ,
              0.1556896 , 0.56025246, 0.3539625 , 0.10916246, 0.23725479,
              0.34496327, 0.75482452, 0.14541041, 0.09147156, 0.01734933,
              0.32413385, 0.00898535, 0.30014371, 0.52625924, 0.20106734,
              0.40608982, 0.95735589, 0.04786694, 0.87052564, 0.81851593,
              0.06149017, 0.57822129, 0.1972834 , 0.63716343, 0.80016618,
              0.1509448 , 0.40324527, 0.77789491, 0.85486953, 0.27028679,
              0.81210769, 0.08390626, 0.5462376 , 0.48031678, 0.24588085,
              0.29630135, 0.13216573, 0.04982545, 0.89525825, 0.56051481,
              0.80729191, 0.9765939 , 0.15356113, 0.81842617, 0.20642177,
              0.79971273, 0.26172388, 0.3577534 , 0.13693797, 0.71637054,
              0.56954729, 0.40302101, 0.83781423, 0.02258779, 0.08313116,
              0.15503888, 0.98168576, 0.65735906, 0.17118278, 0.51540503,
              0.88329455, 0.08073336, 0.04732465, 0.70096408, 0.4006799 ,
              0.70841499, 0.54406658, 0.05972379, 0.3670946 , 0.57566457,
              0.09906924, 0.40635375, 0.68694215, 0.81897825, 0.65484134,
              0.84562433, 0.24512862, 0.51152683, 0.95343771, 0.7154068 ,
              0.91740504, 0.57008261, 0.41194301, 0.87150115, 0.006553  ,
              0.13803495, 0.20324466, 0.78585554, 0.64897842, 0.13477108,
              0.88739038, 0.71836824, 0.81739541, 0.34976154, 0.33994928])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.25689145, 0.64670723, 0.73501957, 0.5831291 , 0.22611159,
              0.04705111, 0.07308451, 0.42117388, 0.83763392, 0.24448348,
              0.29353644, 0.21229779, 0.88685678, 0.80343242, 0.30359647,
              0.52736652, 0.46915395, 0.61635995, 0.18205483, 0.93355452,
              0.37713229, 0.6776699 , 0.60658467, 0.99961405, 0.70905315,
              0.32807866, 0.59112128, 0.52513976, 0.6827555 , 0.3081815 ,
              0.84574083, 0.86467233, 0.76806449, 0.26161189, 0.08327227,
              0.59570289, 0.92966522, 0.76637151, 0.43557365, 0.57233483,
              0.06857508, 0.75769015, 0.26128518, 0.1841514 , 0.43708616,
              0.65954503, 0.39720604, 0.94801406, 0.43581968, 0.6260427 ,
              0.89421078, 0.59096117, 0.12625632, 0.75168041, 0.82923325,
              0.78799025, 0.81502074, 0.49869817, 0.74995256, 0.74301857,
              0.84434255, 0.450269  , 0.08917182, 0.5291338 , 0.90109328,
              0.70131319, 0.74405002, 0.6747646 , 0.07060523, 0.98511106,
              0.89592258, 0.83953542, 0.68327106, 0.54631258, 0.01377041,
              0.20116132, 0.32451311, 0.71743617, 0.26978678, 0.5193362 ,
              0.35428363, 0.03971621, 0.07472663, 0.69709654, 0.44789169,
              0.9922203 , 0.44840278, 0.59441951, 0.41091937, 0.31139254,
              0.42466555, 0.88458842, 0.45994466, 0.08988466, 0.91953759,
              0.40056113, 0.6108871 , 0.42475151, 0.95246403, 0.58905133])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.13629348, 0.39755116, 0.75193293, 0.49083843, 0.48737237,
              0.58363321, 0.64695566, 0.19475618, 0.88000271, 0.54632313,
              0.37531583, 0.33954573, 0.37401652, 0.10762807, 0.23679314,
              0.88814348, 0.22627127, 0.40512162, 0.61060756, 0.03780083,
              0.71076648, 0.85112875, 0.66861233, 0.14564979, 0.58054372,
              0.991568  , 0.63587284, 0.26452497, 0.32845239, 0.7801363 ,
              0.85934568, 0.72285307, 0.97923246, 0.57141799, 0.93664352,
              0.69092436, 0.65456502, 0.59307585, 0.66745106, 0.79867578,
              0.9509216 , 0.35248717, 0.74247225, 0.81851282, 0.23456801,
              0.8665355 , 0.60016811, 0.76679304, 0.43231674, 0.1184244 ,
              0.20369405, 0.54082087, 0.35407894, 0.3388273 , 0.46619348,
              0.23889087, 0.45737328, 0.39465677, 0.91418008, 0.69595094,
              0.52516285, 0.78352801, 0.20303236, 0.70707549, 0.95188761,
              0.72199067, 0.68431751, 0.46924101, 0.62018459, 0.00528081,
              0.10094966, 0.03825438, 0.54283578, 0.8807303 , 0.73612915,
              0.91501047, 0.80654909, 0.03984929, 0.26414081, 0.02637171,
              0.87581378, 0.67200053, 0.14609279, 0.76114456, 0.24660871,
              0.77991416, 0.85269667, 0.96825644, 0.24219641, 0.77713311,
              0.90923023, 0.0482009 , 0.82180939, 0.41032558, 0.17867318,
              0.91680643, 0.04727599, 0.34294034, 0.14372765, 0.93728871])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.54075094, 0.6440761 , 0.36221633, 0.90706927, 0.7659498 ,
              0.80601779, 0.68802934, 0.15791206, 0.77740712, 0.22681886,
              0.34677222, 0.38927784, 0.45802155, 0.32622605, 0.12576878,
              0.50387581, 0.74801982, 0.49826869, 0.76525769, 0.07425317,
              0.71146808, 0.38771491, 0.9610985 , 0.99616927, 0.64005438,
              0.51407706, 0.32762787, 0.52142328, 0.22195134, 0.52327447,
              0.91901156, 0.18316589, 0.60810554, 0.31234371, 0.14433677,
              0.84011899, 0.36637692, 0.33928414, 0.66346504, 0.6280294 ,
              0.57477543, 0.8373752 , 0.98249037, 0.90541169, 0.36777353,
              0.55867035, 0.23010623, 0.61390387, 0.37584507, 0.61393635,
              0.78095813, 0.78894138, 0.64316863, 0.99381826, 0.20098299,
              0.98606842, 0.94225019, 0.72700489, 0.60094638, 0.29256115,
              0.27829484, 0.19740734, 0.09200247, 0.11095653, 0.50909368,
              0.268442  , 0.16036517, 0.3075231 , 0.58733935, 0.10734733,
              0.8816163 , 0.41107648, 0.77863477, 0.56382643, 0.16851646,
              0.73860354, 0.05064321, 0.81107768, 0.74013291, 0.2713283 ,
              0.92268848, 0.79588057, 0.31323535, 0.86832139, 0.676425  ,
              0.17473969, 0.7744675 , 0.52442506, 0.46585862, 0.44711673,
              0.00658756, 0.82529981, 0.67697725, 0.10592764, 0.54139738,
              0.25878315, 0.68870108, 0.53160837, 0.00758208, 0.97774424])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.65028504, 0.10431197, 0.78493644, 0.73597791, 0.46360283,
              0.46276712, 0.87091567, 0.74279394, 0.78523312, 0.03691657,
              0.30097967, 0.33858825, 0.10605661, 0.60385359, 0.97848163,
              0.89074667, 0.11773396, 0.63928779, 0.21556149, 0.89671351,
              0.93775697, 0.0496829 , 0.28649527, 0.25626571, 0.12138135,
              0.49972923, 0.81166261, 0.78506994, 0.78441798, 0.94553492,
              0.25377849, 0.65957247, 0.11646697, 0.21464675, 0.66671981,
              0.97193542, 0.60917599, 0.4906904 , 0.7015816 , 0.19595772,
              0.94233939, 0.87968625, 0.5997462 , 0.15687146, 0.84588011,
              0.29336541, 0.82065309, 0.66225782, 0.78045317, 0.64985979,
              0.76646167, 0.24158489, 0.79178015, 0.70102808, 0.34820632,
              0.79317246, 0.89763083, 0.2745038 , 0.57841024, 0.98751165,
              0.55912892, 0.88168764, 0.26299912, 0.53355344, 0.55967478,
              0.68589206, 0.37073373, 0.89753019, 0.6546274 , 0.90418081,
              0.72011641, 0.17480056, 0.44215532, 0.1891347 , 0.0143359 ,
              0.93594254, 0.21719569, 0.30267254, 0.30515555, 0.75442458,
              0.50782628, 0.16567487, 0.08493326, 0.72677424, 0.69803115,
              0.07515245, 0.0220116 , 0.27668996, 0.49397306, 0.75733071,
              0.15672951, 0.32573187, 0.11221366, 0.24159328, 0.05229896,
              0.09595739, 0.97350705, 0.66274445, 0.46016263, 0.61167018])}]]


