
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='6a927479-f8d5-4242-85ff-d8f463dd23e5'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='6b01efa3-1f22-4538-97eb-c76b4351cba0'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.687589416945958],
     [0.772681458822243],
     [0.599565088097439],
     [0.150451422698067],
     [0.722272981877633],
     [0.19469721822215],
     [0.515642864697429],
     [0.00707527071712022],
     [0.645261731590923],
     [0.991049137933118],
     [0.797829647441453],
     [0.88137424748663],
     [0.734559800120813],
     [0.783712535768696],
     [0.533264983177012],
     [0.578813483419944],
     [0.193400067567722],
     [0.472612623443617],
     [0.190350572216306],
     [0.232861371035573],
     [0.749683834639861],
     [0.683597240291901],
     [0.180539843849061],
     [0.563944793931834],
     [0.383418962854947],
     [0.855088217330735],
     [0.677105990811634],
     [0.277167954483109],
     [0.127636121203524],
     [0.343746610477053],
     [0.401006670056731],
     [0.317579463054242],
     [0.586373200605995],
     [0.291854665560564],
     [0.797256184767016],
     [0.332761839507557],
     [0.196593401063285],
     [0.397058905251035],
     [0.894503675382718],
     [0.86674395391542],
     [0.575145379251442],
     [0.0160775530533817],
     [0.69653842254504],
     [0.206630198451829],
     [0.903217008428823],
     [0.464288879994574],
     [0.284274172137564],
     [0.195884794798586],
     [0.736051604851544],
     [0.391282942632969],
     [0.847548371661187],
     [0.902457128343238],
     [0.89143696343478],
     [0.990068809042906],
     [0.943116324488021],
     [0.309875202045451],
     [0.526363612058852],
     [0.61069800581289],
     [0.856143767539313],
     [0.0566183905026081],
     [0.757111670134393],
     [0.712116903429808],
     [0.0312107672663681],
     [0.152861337017409],
     [0.52417370213584],
     [0.739008064891389],
     [0.0958411418835667],
     [0.198801374744799],
     [0.683480986525282],
     [0.705430553756831],
     [0.757276105759828],
     [0.138431630307498],
     [0.93115122364875],
     [0.302520343538913],
     [0.277254303705409],
     [0.041475497548956],
     [0.933781325097053],
     [0.954480156695099],
     [0.524215940166483],
     [0.378855814148195],
     [0.392647354536686],
     [0.429241491497386],
     [0.12645590639697],
     [0.352846476764568],
     [0.084282580270973],
     [0.145039721531865],
     [0.298742705090075],
     [0.984623764681262],
     [0.397131271845355],
     [0.286870418351119],
     [0.685522016860078],
     [0.446359537543513],
     [0.252288284426703],
     [0.507979840557063],
     [0.900501223843055],
     [0.159743970175601],
     [0.28220194931128],
     [0.395247029869601],
     [0.939303147939975],
     [0.107875366354121]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.0709679])],
     [array([0.94581209])],
     [array([0.23243991])],
     [array([0.13305832])],
     [array([0.00103611])],
     [array([0.40409457])],
     [array([0.88971727])],
     [array([0.69705161])],
     [array([0.00159177])],
     [array([0.06209332])],
     [array([0.57794897])],
     [array([0.45467882])],
     [array([0.60152009])],
     [array([0.13361303])],
     [array([0.9470803])],
     [array([0.17830668])],
     [array([0.73215562])],
     [array([0.96169065])],
     [array([0.07008983])],
     [array([0.83238997])],
     [array([0.82807788])],
     [array([0.58809514])],
     [array([0.21091936])],
     [array([0.08419775])],
     [array([0.87529908])],
     [array([0.10128504])],
     [array([0.61709477])],
     [array([0.86802459])],
     [array([0.98430488])],
     [array([0.37064695])],
     [array([0.52147678])],
     [array([0.10648518])],
     [array([0.15235274])],
     [array([0.67167293])],
     [array([0.6584587])],
     [array([0.83612407])],
     [array([0.11770271])],
     [array([0.31366259])],
     [array([0.32839078])],
     [array([0.50816658])],
     [array([0.86668849])],
     [array([0.75258745])],
     [array([0.19551432])],
     [array([0.43439123])],
     [array([0.42897275])],
     [array([0.79232773])],
     [array([0.11598512])],
     [array([0.94749862])],
     [array([0.55100916])],
     [array([0.55663837])],
     [array([0.19914041])],
     [array([0.70442862])],
     [array([0.80665138])],
     [array([0.89383386])],
     [array([0.41065255])],
     [array([0.60340695])],
     [array([0.1210445])],
     [array([0.06950411])],
     [array([0.19181453])],
     [array([0.50353153])],
     [array([0.48700899])],
     [array([0.0799728])],
     [array([0.7257785])],
     [array([0.61709142])],
     [array([0.12678902])],
     [array([0.83817557])],
     [array([0.77793324])],
     [array([0.17934726])],
     [array([0.8962749])],
     [array([0.51325538])],
     [array([0.7255411])],
     [array([0.80786034])],
     [array([0.68260106])],
     [array([0.34682116])],
     [array([0.10509457])],
     [array([0.48871394])],
     [array([0.50709904])],
     [array([0.4426765])],
     [array([0.03850228])],
     [array([0.19013305])],
     [array([0.62139998])],
     [array([0.0496592])],
     [array([0.2587928])],
     [array([0.26266651])],
     [array([0.49402851])],
     [array([0.41384276])],
     [array([0.98827002])],
     [array([0.21489051])],
     [array([0.18616891])],
     [array([0.27334565])],
     [array([0.30262117])],
     [array([0.16416361])],
     [array([0.13059003])],
     [array([0.76885989])],
     [array([0.67089697])],
     [array([0.09973917])],
     [array([0.54863625])],
     [array([0.78921531])],
     [array([0.28242786])],
     [array([0.98806329])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.0709679 , 0.94581209, 0.23243991, 0.13305832, 0.00103611,
           0.40409457, 0.88971727, 0.69705161, 0.00159177, 0.06209332,
           0.57794897, 0.45467882, 0.60152009, 0.13361303, 0.9470803 ,
           0.17830668, 0.73215562, 0.96169065, 0.07008983, 0.83238997,
           0.82807788, 0.58809514, 0.21091936, 0.08419775, 0.87529908,
           0.10128504, 0.61709477, 0.86802459, 0.98430488, 0.37064695,
           0.52147678, 0.10648518, 0.15235274, 0.67167293, 0.6584587 ,
           0.83612407, 0.11770271, 0.31366259, 0.32839078, 0.50816658,
           0.86668849, 0.75258745, 0.19551432, 0.43439123, 0.42897275,
           0.79232773, 0.11598512, 0.94749862, 0.55100916, 0.55663837,
           0.19914041, 0.70442862, 0.80665138, 0.89383386, 0.41065255,
           0.60340695, 0.1210445 , 0.06950411, 0.19181453, 0.50353153,
           0.48700899, 0.0799728 , 0.7257785 , 0.61709142, 0.12678902,
           0.83817557, 0.77793324, 0.17934726, 0.8962749 , 0.51325538,
           0.7255411 , 0.80786034, 0.68260106, 0.34682116, 0.10509457,
           0.48871394, 0.50709904, 0.4426765 , 0.03850228, 0.19013305,
           0.62139998, 0.0496592 , 0.2587928 , 0.26266651, 0.49402851,
           0.41384276, 0.98827002, 0.21489051, 0.18616891, 0.27334565,
           0.30262117, 0.16416361, 0.13059003, 0.76885989, 0.67089697,
           0.09973917, 0.54863625, 0.78921531, 0.28242786, 0.98806329])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.68758942, 0.77268146, 0.59956509, 0.15045142, 0.72227298,
              0.19469722, 0.51564286, 0.00707527, 0.64526173, 0.99104914,
              0.79782965, 0.88137425, 0.7345598 , 0.78371254, 0.53326498,
              0.57881348, 0.19340007, 0.47261262, 0.19035057, 0.23286137,
              0.74968383, 0.68359724, 0.18053984, 0.56394479, 0.38341896,
              0.85508822, 0.67710599, 0.27716795, 0.12763612, 0.34374661,
              0.40100667, 0.31757946, 0.5863732 , 0.29185467, 0.79725618,
              0.33276184, 0.1965934 , 0.39705891, 0.89450368, 0.86674395,
              0.57514538, 0.01607755, 0.69653842, 0.2066302 , 0.90321701,
              0.46428888, 0.28427417, 0.19588479, 0.7360516 , 0.39128294,
              0.84754837, 0.90245713, 0.89143696, 0.99006881, 0.94311632,
              0.3098752 , 0.52636361, 0.61069801, 0.85614377, 0.05661839,
              0.75711167, 0.7121169 , 0.03121077, 0.15286134, 0.5241737 ,
              0.73900806, 0.09584114, 0.19880137, 0.68348099, 0.70543055,
              0.75727611, 0.13843163, 0.93115122, 0.30252034, 0.2772543 ,
              0.0414755 , 0.93378133, 0.95448016, 0.52421594, 0.37885581,
              0.39264735, 0.42924149, 0.12645591, 0.35284648, 0.08428258,
              0.14503972, 0.29874271, 0.98462376, 0.39713127, 0.28687042,
              0.68552202, 0.44635954, 0.25228828, 0.50797984, 0.90050122,
              0.15974397, 0.28220195, 0.39524703, 0.93930315, 0.10787537])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.01696015, 0.79567831, 0.8831317 , 0.61065372, 0.2659963 ,
              0.87503192, 0.23711048, 0.02077897, 0.41803652, 0.94687356,
              0.49561228, 0.67907187, 0.39917537, 0.55016367, 0.64910499,
              0.6555029 , 0.92981397, 0.90758028, 0.14602648, 0.1378241 ,
              0.8032277 , 0.11892492, 0.78120049, 0.3350503 , 0.78426642,
              0.90725234, 0.13910633, 0.15156841, 0.73056459, 0.30428428,
              0.10511158, 0.00254082, 0.50417594, 0.75462483, 0.04528884,
              0.68750329, 0.42710197, 0.94448126, 0.17471531, 0.54199948,
              0.00585125, 0.11527599, 0.19765971, 0.00789515, 0.24024595,
              0.03342477, 0.04516935, 0.83730672, 0.41382032, 0.10089019,
              0.43568034, 0.89417132, 0.5991827 , 0.95894254, 0.52274134,
              0.09925758, 0.91225016, 0.82496758, 0.3200486 , 0.87995248,
              0.73036088, 0.95878169, 0.73061693, 0.9066054 , 0.03908067,
              0.0299179 , 0.94214925, 0.2885342 , 0.18423247, 0.88060334,
              0.68420833, 0.00693569, 0.58507953, 0.25889166, 0.78327273,
              0.10543077, 0.62534375, 0.01016742, 0.14011821, 0.26743307,
              0.91260674, 0.64824891, 0.78590936, 0.08737562, 0.17690418,
              0.16008718, 0.95820226, 0.4212884 , 0.52284221, 0.31991695,
              0.85249139, 0.30472245, 0.32984725, 0.50707665, 0.43629966,
              0.80967754, 0.33268521, 0.68813718, 0.79019067, 0.3910542 ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.4030151 , 0.22321616, 0.77940015, 0.89986246, 0.79040114,
              0.03562371, 0.62587226, 0.54487981, 0.23314317, 0.33627261,
              0.3311029 , 0.53263948, 0.89858108, 0.20920517, 0.04235138,
              0.73913006, 0.1765355 , 0.57966069, 0.25756338, 0.09974033,
              0.17613279, 0.45860443, 0.96129808, 0.31991205, 0.97084161,
              0.85959357, 0.38238467, 0.84523256, 0.18318116, 0.92944201,
              0.77018888, 0.33957955, 0.70999845, 0.53503445, 0.95690806,
              0.05939023, 0.10206688, 0.99883525, 0.6188425 , 0.68435894,
              0.65844197, 0.04588856, 0.50293045, 0.75356083, 0.14738762,
              0.76370166, 0.62192935, 0.6534746 , 0.62301954, 0.73960346,
              0.56447932, 0.20580647, 0.97562027, 0.13157419, 0.33064632,
              0.02965386, 0.71328979, 0.35491419, 0.5339873 , 0.59079367,
              0.83925395, 0.58941578, 0.20156093, 0.33581708, 0.98770857,
              0.52653369, 0.85160327, 0.11510504, 0.81633298, 0.48004725,
              0.29355036, 0.90520937, 0.78180557, 0.10517138, 0.8007235 ,
              0.49525703, 0.70018637, 0.16935515, 0.33403267, 0.38359569,
              0.48363614, 0.4546128 , 0.74498445, 0.65790835, 0.42757656,
              0.51642422, 0.99292417, 0.66883108, 0.01584656, 0.93161423,
              0.97067847, 0.0183229 , 0.59456925, 0.68420072, 0.74916195,
              0.88399416, 0.45622302, 0.76218288, 0.35449354, 0.90757391])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([6.17900370e-01, 3.19730332e-01, 7.22114090e-01, 9.32787297e-01,
              5.17647454e-01, 7.71824725e-01, 2.91371784e-01, 7.60884478e-02,
              2.01553659e-01, 6.56901472e-01, 3.97435473e-01, 5.49915728e-02,
              7.28320460e-01, 7.87088898e-01, 2.93164551e-01, 6.45630503e-01,
              5.51625874e-01, 8.49062268e-01, 6.50253070e-01, 1.76918450e-01,
              4.70862425e-01, 9.96148043e-01, 5.20709172e-01, 2.08774139e-03,
              5.67046224e-03, 8.34814758e-01, 5.02078481e-02, 5.37913139e-01,
              4.65782241e-01, 6.34011985e-01, 8.65162563e-01, 1.96287530e-01,
              7.60172602e-01, 3.63160453e-01, 6.31732671e-01, 4.35635847e-01,
              7.16524034e-01, 1.49923210e-01, 6.88524427e-02, 4.78021494e-01,
              9.18142958e-01, 8.76108467e-01, 8.14052531e-01, 8.33722314e-01,
              1.81075707e-01, 6.59273065e-01, 1.08843045e-01, 6.48245199e-01,
              5.03460287e-01, 5.80979230e-01, 4.63084710e-01, 9.01651093e-02,
              4.84897838e-01, 9.76743723e-01, 8.95264467e-01, 8.44358239e-01,
              1.69372612e-02, 2.88062976e-01, 1.93747640e-01, 9.26943805e-01,
              5.23645388e-01, 1.53425001e-01, 7.62950375e-02, 7.39520562e-01,
              8.41090209e-01, 4.96415229e-01, 7.78084057e-02, 4.64702551e-01,
              8.25159857e-02, 2.58238316e-01, 6.42430736e-01, 6.44379749e-01,
              4.29747708e-01, 2.25337163e-01, 2.83139608e-01, 5.34856879e-01,
              3.95434126e-04, 5.35664924e-01, 5.18710404e-01, 8.46599693e-01,
              1.99041759e-02, 1.21087347e-01, 5.12565207e-01, 9.68626343e-01,
              9.74246479e-01, 4.37489762e-01, 3.45111880e-01, 9.64718515e-01,
              3.40022613e-01, 2.58843166e-01, 1.88386403e-01, 2.20836490e-01,
              6.38252621e-01, 9.82779362e-02, 1.40584940e-01, 1.48906488e-01,
              3.02220099e-01, 6.24313860e-01, 9.99938130e-01, 3.17311187e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.68758942, 0.77268146, 0.59956509, 0.15045142, 0.72227298,
              0.19469722, 0.51564286, 0.00707527, 0.64526173, 0.99104914,
              0.79782965, 0.88137425, 0.7345598 , 0.78371254, 0.53326498,
              0.57881348, 0.19340007, 0.47261262, 0.19035057, 0.23286137,
              0.74968383, 0.68359724, 0.18053984, 0.56394479, 0.38341896,
              0.85508822, 0.67710599, 0.27716795, 0.12763612, 0.34374661,
              0.40100667, 0.31757946, 0.5863732 , 0.29185467, 0.79725618,
              0.33276184, 0.1965934 , 0.39705891, 0.89450368, 0.86674395,
              0.57514538, 0.01607755, 0.69653842, 0.2066302 , 0.90321701,
              0.46428888, 0.28427417, 0.19588479, 0.7360516 , 0.39128294,
              0.84754837, 0.90245713, 0.89143696, 0.99006881, 0.94311632,
              0.3098752 , 0.52636361, 0.61069801, 0.85614377, 0.05661839,
              0.75711167, 0.7121169 , 0.03121077, 0.15286134, 0.5241737 ,
              0.73900806, 0.09584114, 0.19880137, 0.68348099, 0.70543055,
              0.75727611, 0.13843163, 0.93115122, 0.30252034, 0.2772543 ,
              0.0414755 , 0.93378133, 0.95448016, 0.52421594, 0.37885581,
              0.39264735, 0.42924149, 0.12645591, 0.35284648, 0.08428258,
              0.14503972, 0.29874271, 0.98462376, 0.39713127, 0.28687042,
              0.68552202, 0.44635954, 0.25228828, 0.50797984, 0.90050122,
              0.15974397, 0.28220195, 0.39524703, 0.93930315, 0.10787537])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.01696015, 0.79567831, 0.8831317 , 0.61065372, 0.2659963 ,
              0.87503192, 0.23711048, 0.02077897, 0.41803652, 0.94687356,
              0.49561228, 0.67907187, 0.39917537, 0.55016367, 0.64910499,
              0.6555029 , 0.92981397, 0.90758028, 0.14602648, 0.1378241 ,
              0.8032277 , 0.11892492, 0.78120049, 0.3350503 , 0.78426642,
              0.90725234, 0.13910633, 0.15156841, 0.73056459, 0.30428428,
              0.10511158, 0.00254082, 0.50417594, 0.75462483, 0.04528884,
              0.68750329, 0.42710197, 0.94448126, 0.17471531, 0.54199948,
              0.00585125, 0.11527599, 0.19765971, 0.00789515, 0.24024595,
              0.03342477, 0.04516935, 0.83730672, 0.41382032, 0.10089019,
              0.43568034, 0.89417132, 0.5991827 , 0.95894254, 0.52274134,
              0.09925758, 0.91225016, 0.82496758, 0.3200486 , 0.87995248,
              0.73036088, 0.95878169, 0.73061693, 0.9066054 , 0.03908067,
              0.0299179 , 0.94214925, 0.2885342 , 0.18423247, 0.88060334,
              0.68420833, 0.00693569, 0.58507953, 0.25889166, 0.78327273,
              0.10543077, 0.62534375, 0.01016742, 0.14011821, 0.26743307,
              0.91260674, 0.64824891, 0.78590936, 0.08737562, 0.17690418,
              0.16008718, 0.95820226, 0.4212884 , 0.52284221, 0.31991695,
              0.85249139, 0.30472245, 0.32984725, 0.50707665, 0.43629966,
              0.80967754, 0.33268521, 0.68813718, 0.79019067, 0.3910542 ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.4030151 , 0.22321616, 0.77940015, 0.89986246, 0.79040114,
              0.03562371, 0.62587226, 0.54487981, 0.23314317, 0.33627261,
              0.3311029 , 0.53263948, 0.89858108, 0.20920517, 0.04235138,
              0.73913006, 0.1765355 , 0.57966069, 0.25756338, 0.09974033,
              0.17613279, 0.45860443, 0.96129808, 0.31991205, 0.97084161,
              0.85959357, 0.38238467, 0.84523256, 0.18318116, 0.92944201,
              0.77018888, 0.33957955, 0.70999845, 0.53503445, 0.95690806,
              0.05939023, 0.10206688, 0.99883525, 0.6188425 , 0.68435894,
              0.65844197, 0.04588856, 0.50293045, 0.75356083, 0.14738762,
              0.76370166, 0.62192935, 0.6534746 , 0.62301954, 0.73960346,
              0.56447932, 0.20580647, 0.97562027, 0.13157419, 0.33064632,
              0.02965386, 0.71328979, 0.35491419, 0.5339873 , 0.59079367,
              0.83925395, 0.58941578, 0.20156093, 0.33581708, 0.98770857,
              0.52653369, 0.85160327, 0.11510504, 0.81633298, 0.48004725,
              0.29355036, 0.90520937, 0.78180557, 0.10517138, 0.8007235 ,
              0.49525703, 0.70018637, 0.16935515, 0.33403267, 0.38359569,
              0.48363614, 0.4546128 , 0.74498445, 0.65790835, 0.42757656,
              0.51642422, 0.99292417, 0.66883108, 0.01584656, 0.93161423,
              0.97067847, 0.0183229 , 0.59456925, 0.68420072, 0.74916195,
              0.88399416, 0.45622302, 0.76218288, 0.35449354, 0.90757391])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.77288884, 0.91852519, 0.26300296, 0.13007212, 0.45880364,
              0.17092589, 0.76984259, 0.0827775 , 0.24793505, 0.72197168,
              0.84587524, 0.43585336, 0.39522502, 0.58867486, 0.5846403 ,
              0.99673031, 0.01001698, 0.1709145 , 0.81329108, 0.44340642,
              0.01468915, 0.29440275, 0.90742144, 0.34210987, 0.58694308,
              0.27171919, 0.52856672, 0.80182554, 0.19953458, 0.73111312,
              0.68233947, 0.38462356, 0.57398731, 0.16297936, 0.46497144,
              0.07644299, 0.34487382, 0.88118334, 0.05398018, 0.56723405,
              0.84475569, 0.75664359, 0.39024782, 0.9385264 , 0.87955754,
              0.94832102, 0.5824128 , 0.87786655, 0.75636909, 0.58114794,
              0.76696221, 0.88462221, 0.54263738, 0.63515781, 0.97022015,
              0.17302126, 0.20614323, 0.69697309, 0.07959204, 0.00243521,
              0.03563228, 0.62392203, 0.79616389, 0.20529666, 0.86521483,
              0.24527045, 0.77187667, 0.64859365, 0.17533852, 0.1777719 ,
              0.97958063, 0.55344562, 0.12259968, 0.20275019, 0.10146674,
              0.79191446, 0.45112038, 0.82424204, 0.67552292, 0.62953493,
              0.45904118, 0.96092517, 0.02303668, 0.21409106, 0.99720133,
              0.35519615, 0.31835979, 0.17239572, 0.21943483, 0.97120539,
              0.78593254, 0.68674403, 0.65159005, 0.09744761, 0.28744869,
              0.94020424, 0.44215686, 0.6968321 , 0.91308895, 0.17421818])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.0709679 , 0.94581209, 0.23243991, 0.13305832, 0.00103611,
              0.40409457, 0.88971727, 0.69705161, 0.00159177, 0.06209332,
              0.57794897, 0.45467882, 0.60152009, 0.13361303, 0.9470803 ,
              0.17830668, 0.73215562, 0.96169065, 0.07008983, 0.83238997,
              0.82807788, 0.58809514, 0.21091936, 0.08419775, 0.87529908,
              0.10128504, 0.61709477, 0.86802459, 0.98430488, 0.37064695,
              0.52147678, 0.10648518, 0.15235274, 0.67167293, 0.6584587 ,
              0.83612407, 0.11770271, 0.31366259, 0.32839078, 0.50816658,
              0.86668849, 0.75258745, 0.19551432, 0.43439123, 0.42897275,
              0.79232773, 0.11598512, 0.94749862, 0.55100916, 0.55663837,
              0.19914041, 0.70442862, 0.80665138, 0.89383386, 0.41065255,
              0.60340695, 0.1210445 , 0.06950411, 0.19181453, 0.50353153,
              0.48700899, 0.0799728 , 0.7257785 , 0.61709142, 0.12678902,
              0.83817557, 0.77793324, 0.17934726, 0.8962749 , 0.51325538,
              0.7255411 , 0.80786034, 0.68260106, 0.34682116, 0.10509457,
              0.48871394, 0.50709904, 0.4426765 , 0.03850228, 0.19013305,
              0.62139998, 0.0496592 , 0.2587928 , 0.26266651, 0.49402851,
              0.41384276, 0.98827002, 0.21489051, 0.18616891, 0.27334565,
              0.30262117, 0.16416361, 0.13059003, 0.76885989, 0.67089697,
              0.09973917, 0.54863625, 0.78921531, 0.28242786, 0.98806329])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.00199548, 0.93465302, 0.50708255, 0.03249189, 0.35746056,
              0.43594052, 0.19428615, 0.48568311, 0.74057041, 0.07589644,
              0.86120057, 0.83876663, 0.39516627, 0.75115478, 0.2941889 ,
              0.61033356, 0.67092302, 0.82333821, 0.17921263, 0.38832679,
              0.19057205, 0.86289678, 0.92134489, 0.10822082, 0.4552875 ,
              0.67675041, 0.75930388, 0.14601185, 0.01021421, 0.20237122,
              0.58827631, 0.23947123, 0.90004086, 0.43745667, 0.60580335,
              0.56846513, 0.95565718, 0.60673899, 0.5699005 , 0.10767318,
              0.73637109, 0.1449057 , 0.02626268, 0.13457164, 0.87447542,
              0.68432186, 0.71008122, 0.10458558, 0.15740652, 0.27251621,
              0.78835824, 0.75391549, 0.40124054, 0.91117921, 0.70510668,
              0.86193656, 0.77195173, 0.28267622, 0.5460015 , 0.72330286,
              0.30553552, 0.59441887, 0.85538344, 0.15888369, 0.78834026,
              0.38067509, 0.77925674, 0.20916635, 0.66817496, 0.33716957,
              0.83601486, 0.1860409 , 0.77986573, 0.82727943, 0.7805515 ,
              0.67528883, 0.07235462, 0.9637296 , 0.07589491, 0.9876936 ,
              0.756735  , 0.73900794, 0.6325589 , 0.32567911, 0.00621104,
              0.12666349, 0.80748788, 0.38903202, 0.30638047, 0.55415893,
              0.93563866, 0.03276031, 0.65237014, 0.42108198, 0.03256874,
              0.12066655, 0.65239515, 0.27338002, 0.75423137, 0.60884541])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([5.23875923e-02, 1.67584870e-01, 3.46909187e-01, 4.63552949e-01,
              2.67013325e-01, 2.67642615e-01, 3.89507409e-01, 1.67527638e-01,
              5.74273547e-01, 5.14386273e-01, 4.17491793e-01, 3.73325647e-01,
              6.10894854e-01, 7.31976546e-01, 3.45678208e-01, 9.29578427e-01,
              2.36121120e-01, 2.18349948e-01, 7.61794251e-01, 3.07616915e-01,
              1.14120320e-02, 4.07524168e-01, 7.11784071e-01, 5.93601567e-01,
              7.93670859e-01, 4.28566484e-01, 8.11426523e-01, 7.36416754e-01,
              2.55236456e-01, 9.35962267e-01, 2.77692994e-01, 6.70803153e-04,
              3.91691172e-01, 6.38432922e-02, 4.18507170e-01, 4.38560332e-02,
              7.66872336e-01, 3.33723594e-01, 1.09676545e-01, 9.78410007e-01,
              3.60650202e-01, 1.71834652e-02, 1.82256703e-01, 1.58758781e-01,
              3.98883791e-01, 9.72644327e-01, 3.38942443e-01, 9.11108312e-01,
              4.70343366e-01, 4.22612556e-01, 1.29606465e-02, 7.83180647e-02,
              2.61192486e-01, 7.47586373e-01, 6.25143877e-01, 2.84914103e-01,
              6.22566644e-01, 2.89824612e-01, 1.29279253e-02, 9.22277139e-01,
              2.05854452e-01, 2.21828650e-01, 1.72190523e-01, 9.91270136e-01,
              4.28758630e-01, 8.35416765e-01, 5.22509422e-01, 2.00317830e-02,
              6.41045779e-01, 3.76123200e-01, 1.04640021e-02, 7.72516572e-01,
              3.37872786e-01, 7.36689913e-01, 2.52729920e-01, 1.56964980e-01,
              6.77625193e-01, 9.70125275e-01, 2.93148714e-01, 8.19652072e-01,
              9.31728341e-01, 9.50718441e-01, 3.26133804e-01, 4.19902190e-03,
              1.48416604e-01, 8.85324092e-01, 3.67929785e-01, 4.16961323e-01,
              3.50274002e-01, 3.16594979e-01, 8.35279659e-01, 2.64848596e-01,
              2.50301033e-01, 9.96987667e-01, 3.30866444e-01, 1.93053932e-01,
              7.05033268e-01, 4.01663104e-01, 9.80407830e-01, 7.95934003e-01])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([1.28360579e-01, 3.20107104e-01, 7.22567576e-02, 9.45126792e-01,
              7.79239026e-01, 6.25614662e-01, 1.40938294e-01, 1.53869912e-01,
              3.56867162e-01, 2.93424535e-01, 8.10869125e-01, 3.94417655e-01,
              6.23740610e-01, 4.28320532e-01, 7.14663461e-01, 1.59499355e-02,
              2.91275717e-01, 1.94478753e-01, 8.03467181e-01, 1.57191357e-01,
              6.05325862e-01, 2.74833030e-01, 7.43401040e-01, 9.37022570e-01,
              7.78502760e-01, 4.53111762e-01, 2.50774869e-01, 7.22816067e-01,
              5.34934225e-01, 5.18116174e-01, 3.70554936e-01, 3.26300294e-02,
              7.18567311e-01, 8.36016400e-01, 5.46967759e-03, 3.89949166e-01,
              6.81052269e-01, 8.02344950e-01, 8.16056625e-01, 5.70867842e-01,
              5.66923938e-01, 8.19784931e-01, 4.51591897e-01, 9.07646330e-01,
              2.13466028e-01, 8.81343246e-01, 5.53040058e-01, 7.61173263e-01,
              1.05609930e-01, 7.72784826e-01, 7.51312999e-01, 7.09431264e-01,
              1.12053811e-02, 4.33381858e-01, 3.68788300e-01, 1.90649576e-02,
              7.45640729e-01, 7.07192616e-01, 7.53628183e-01, 4.31366144e-01,
              3.75371767e-01, 9.64557485e-01, 8.10733927e-01, 1.85094185e-01,
              3.84339502e-01, 2.15860307e-04, 9.32931838e-01, 6.64594892e-01,
              8.31347940e-01, 7.14317160e-01, 9.13903197e-01, 7.93489400e-01,
              6.05571248e-02, 5.85069045e-01, 9.35806340e-01, 5.52529840e-01,
              2.88916361e-01, 9.02291693e-01, 2.37410400e-01, 7.28977563e-01,
              5.44694173e-01, 1.01416861e-01, 8.24412997e-01, 9.89601412e-01,
              3.32092040e-01, 8.14674898e-01, 7.31505740e-01, 8.74483673e-01,
              7.17230213e-01, 5.92123079e-01, 2.33043827e-02, 9.96212796e-01,
              7.62729959e-01, 4.09057675e-02, 2.98201178e-01, 8.41553540e-01,
              2.13216707e-01, 5.83425529e-01, 8.07820728e-01, 5.07939250e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.0709679 , 0.94581209, 0.23243991, 0.13305832, 0.00103611,
              0.40409457, 0.88971727, 0.69705161, 0.00159177, 0.06209332,
              0.57794897, 0.45467882, 0.60152009, 0.13361303, 0.9470803 ,
              0.17830668, 0.73215562, 0.96169065, 0.07008983, 0.83238997,
              0.82807788, 0.58809514, 0.21091936, 0.08419775, 0.87529908,
              0.10128504, 0.61709477, 0.86802459, 0.98430488, 0.37064695,
              0.52147678, 0.10648518, 0.15235274, 0.67167293, 0.6584587 ,
              0.83612407, 0.11770271, 0.31366259, 0.32839078, 0.50816658,
              0.86668849, 0.75258745, 0.19551432, 0.43439123, 0.42897275,
              0.79232773, 0.11598512, 0.94749862, 0.55100916, 0.55663837,
              0.19914041, 0.70442862, 0.80665138, 0.89383386, 0.41065255,
              0.60340695, 0.1210445 , 0.06950411, 0.19181453, 0.50353153,
              0.48700899, 0.0799728 , 0.7257785 , 0.61709142, 0.12678902,
              0.83817557, 0.77793324, 0.17934726, 0.8962749 , 0.51325538,
              0.7255411 , 0.80786034, 0.68260106, 0.34682116, 0.10509457,
              0.48871394, 0.50709904, 0.4426765 , 0.03850228, 0.19013305,
              0.62139998, 0.0496592 , 0.2587928 , 0.26266651, 0.49402851,
              0.41384276, 0.98827002, 0.21489051, 0.18616891, 0.27334565,
              0.30262117, 0.16416361, 0.13059003, 0.76885989, 0.67089697,
              0.09973917, 0.54863625, 0.78921531, 0.28242786, 0.98806329])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.00199548, 0.93465302, 0.50708255, 0.03249189, 0.35746056,
              0.43594052, 0.19428615, 0.48568311, 0.74057041, 0.07589644,
              0.86120057, 0.83876663, 0.39516627, 0.75115478, 0.2941889 ,
              0.61033356, 0.67092302, 0.82333821, 0.17921263, 0.38832679,
              0.19057205, 0.86289678, 0.92134489, 0.10822082, 0.4552875 ,
              0.67675041, 0.75930388, 0.14601185, 0.01021421, 0.20237122,
              0.58827631, 0.23947123, 0.90004086, 0.43745667, 0.60580335,
              0.56846513, 0.95565718, 0.60673899, 0.5699005 , 0.10767318,
              0.73637109, 0.1449057 , 0.02626268, 0.13457164, 0.87447542,
              0.68432186, 0.71008122, 0.10458558, 0.15740652, 0.27251621,
              0.78835824, 0.75391549, 0.40124054, 0.91117921, 0.70510668,
              0.86193656, 0.77195173, 0.28267622, 0.5460015 , 0.72330286,
              0.30553552, 0.59441887, 0.85538344, 0.15888369, 0.78834026,
              0.38067509, 0.77925674, 0.20916635, 0.66817496, 0.33716957,
              0.83601486, 0.1860409 , 0.77986573, 0.82727943, 0.7805515 ,
              0.67528883, 0.07235462, 0.9637296 , 0.07589491, 0.9876936 ,
              0.756735  , 0.73900794, 0.6325589 , 0.32567911, 0.00621104,
              0.12666349, 0.80748788, 0.38903202, 0.30638047, 0.55415893,
              0.93563866, 0.03276031, 0.65237014, 0.42108198, 0.03256874,
              0.12066655, 0.65239515, 0.27338002, 0.75423137, 0.60884541])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([5.23875923e-02, 1.67584870e-01, 3.46909187e-01, 4.63552949e-01,
              2.67013325e-01, 2.67642615e-01, 3.89507409e-01, 1.67527638e-01,
              5.74273547e-01, 5.14386273e-01, 4.17491793e-01, 3.73325647e-01,
              6.10894854e-01, 7.31976546e-01, 3.45678208e-01, 9.29578427e-01,
              2.36121120e-01, 2.18349948e-01, 7.61794251e-01, 3.07616915e-01,
              1.14120320e-02, 4.07524168e-01, 7.11784071e-01, 5.93601567e-01,
              7.93670859e-01, 4.28566484e-01, 8.11426523e-01, 7.36416754e-01,
              2.55236456e-01, 9.35962267e-01, 2.77692994e-01, 6.70803153e-04,
              3.91691172e-01, 6.38432922e-02, 4.18507170e-01, 4.38560332e-02,
              7.66872336e-01, 3.33723594e-01, 1.09676545e-01, 9.78410007e-01,
              3.60650202e-01, 1.71834652e-02, 1.82256703e-01, 1.58758781e-01,
              3.98883791e-01, 9.72644327e-01, 3.38942443e-01, 9.11108312e-01,
              4.70343366e-01, 4.22612556e-01, 1.29606465e-02, 7.83180647e-02,
              2.61192486e-01, 7.47586373e-01, 6.25143877e-01, 2.84914103e-01,
              6.22566644e-01, 2.89824612e-01, 1.29279253e-02, 9.22277139e-01,
              2.05854452e-01, 2.21828650e-01, 1.72190523e-01, 9.91270136e-01,
              4.28758630e-01, 8.35416765e-01, 5.22509422e-01, 2.00317830e-02,
              6.41045779e-01, 3.76123200e-01, 1.04640021e-02, 7.72516572e-01,
              3.37872786e-01, 7.36689913e-01, 2.52729920e-01, 1.56964980e-01,
              6.77625193e-01, 9.70125275e-01, 2.93148714e-01, 8.19652072e-01,
              9.31728341e-01, 9.50718441e-01, 3.26133804e-01, 4.19902190e-03,
              1.48416604e-01, 8.85324092e-01, 3.67929785e-01, 4.16961323e-01,
              3.50274002e-01, 3.16594979e-01, 8.35279659e-01, 2.64848596e-01,
              2.50301033e-01, 9.96987667e-01, 3.30866444e-01, 1.93053932e-01,
              7.05033268e-01, 4.01663104e-01, 9.80407830e-01, 7.95934003e-01])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.6906868 , 0.23784424, 0.42291209, 0.70167192, 0.15396448,
              0.04574805, 0.18884375, 0.1810725 , 0.82754114, 0.26708829,
              0.28887821, 0.66894513, 0.36140406, 0.05299932, 0.87543154,
              0.48283326, 0.13948836, 0.73937479, 0.36625565, 0.87059151,
              0.45850381, 0.54880496, 0.65135393, 0.23073204, 0.07174875,
              0.83299793, 0.47513921, 0.27840858, 0.98062435, 0.57714561,
              0.79672555, 0.01572865, 0.68976236, 0.13453463, 0.5592701 ,
              0.86084809, 0.40907788, 0.67603425, 0.13972631, 0.41744897,
              0.01162113, 0.73214588, 0.2520673 , 0.60388528, 0.71649291,
              0.78101815, 0.52425093, 0.62462268, 0.64950763, 0.34998461,
              0.48195124, 0.83996192, 0.29636014, 0.71501018, 0.23708875,
              0.03771327, 0.00501116, 0.7939535 , 0.21026068, 0.77289196,
              0.63116022, 0.03485952, 0.01801315, 0.68854348, 0.59450258,
              0.82873153, 0.92544952, 0.42246793, 0.21394462, 0.99527694,
              0.9449268 , 0.72785262, 0.18595762, 0.36821372, 0.36533584,
              0.99098292, 0.17457547, 0.89044914, 0.37167471, 0.04983796,
              0.10700551, 0.16806887, 0.21605755, 0.93510975, 0.33921904,
              0.62313087, 0.67679558, 0.74732372, 0.81911981, 0.08731534,
              0.02711027, 0.79865408, 0.04988085, 0.37511313, 0.82559798,
              0.05232714, 0.04142092, 0.94951434, 0.54605846, 0.7175068 ])}]]


