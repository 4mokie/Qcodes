
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='aceed987-16b2-429f-a9c6-4514c4c8862b'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='5c7a8831-3e74-4061-bc72-caaa9b35f908'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.138708985155961],
     [0.416498964263162],
     [0.150478672462883],
     [0.467448151582012],
     [0.258021395388992],
     [0.916497844119897],
     [0.0296946578319643],
     [0.959281352489482],
     [0.492886147383057],
     [0.512694034528913],
     [0.268652323561299],
     [0.344551642591211],
     [0.282019525202647],
     [0.786802895004986],
     [0.163208191689802],
     [0.587159772905482],
     [0.976737717255716],
     [0.254022071264748],
     [0.217542770911747],
     [0.801029056972123],
     [0.533700307831295],
     [0.389075312767804],
     [0.767426098554008],
     [0.788375789433845],
     [0.964581463434465],
     [0.197975003849886],
     [0.863858014272007],
     [0.191672406312167],
     [0.652547393757361],
     [0.551713120959732],
     [0.168994083208684],
     [0.185089148982488],
     [0.978397263819671],
     [0.66864073023897],
     [0.417880017232776],
     [0.893162599951869],
     [0.316903564953351],
     [0.388175997265203],
     [0.172279999883979],
     [0.796055885932003],
     [0.103764013459123],
     [0.86762276298156],
     [0.994466588473436],
     [0.680911030941051],
     [0.00752019098111889],
     [0.935021940406148],
     [0.792961904608929],
     [0.528479987489089],
     [0.678264108499673],
     [0.191949307224616],
     [0.472260954054912],
     [0.243054782820131],
     [0.173828807708499],
     [0.773831508842134],
     [0.00813916424755157],
     [0.901088097577205],
     [0.733348294100678],
     [0.768534603652328],
     [0.750810054819215],
     [0.509664457558815],
     [0.00469235332056173],
     [0.0277230752355329],
     [0.144824600017992],
     [0.186901817386479],
     [0.906506267056061],
     [0.521561800041231],
     [0.132911349421628],
     [0.389382048732523],
     [0.37526934449036],
     [0.853254699972015],
     [0.660816526720268],
     [0.569356279941661],
     [0.840236085891254],
     [0.282145164899974],
     [0.390523834593531],
     [0.141306648597555],
     [0.210435153679029],
     [0.901690148556001],
     [0.379598397851377],
     [0.821305560650671],
     [0.592060214741129],
     [0.127033786533583],
     [0.95572059939325],
     [0.840950372288636],
     [0.586129645588669],
     [0.419492308454567],
     [0.381151109592033],
     [0.14285536236234],
     [0.469189740597205],
     [0.770905955842443],
     [0.728171779228984],
     [0.312489518537421],
     [0.389940401011905],
     [0.90929557225835],
     [0.824381943065209],
     [0.858354617506155],
     [0.610197025309149],
     [0.584678397256885],
     [0.646737686560021],
     [0.0658153465907011]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.27615494])],
     [array([0.74432223])],
     [array([0.46300573])],
     [array([0.11655812])],
     [array([0.03803861])],
     [array([0.13650843])],
     [array([0.87971136])],
     [array([0.78594747])],
     [array([0.58747215])],
     [array([0.95607859])],
     [array([0.92306166])],
     [array([0.69339892])],
     [array([0.33197056])],
     [array([0.68601275])],
     [array([0.6843514])],
     [array([0.83886408])],
     [array([0.03038819])],
     [array([0.16237105])],
     [array([0.21542457])],
     [array([0.58138444])],
     [array([0.44168434])],
     [array([0.30534951])],
     [array([0.72145956])],
     [array([0.67153135])],
     [array([0.9334764])],
     [array([0.64029837])],
     [array([0.52433201])],
     [array([0.18734828])],
     [array([0.6819535])],
     [array([0.35351364])],
     [array([0.27989668])],
     [array([0.63922974])],
     [array([0.5938874])],
     [array([0.00627357])],
     [array([0.49684095])],
     [array([0.3961879])],
     [array([0.15536427])],
     [array([0.92949899])],
     [array([0.06919386])],
     [array([0.65028575])],
     [array([0.96045621])],
     [array([0.67942522])],
     [array([0.330047])],
     [array([0.6425422])],
     [array([0.84357216])],
     [array([0.25486396])],
     [array([0.9361096])],
     [array([0.56251127])],
     [array([0.19815333])],
     [array([0.90539056])],
     [array([0.9397505])],
     [array([0.20884987])],
     [array([0.85606459])],
     [array([0.7409197])],
     [array([0.94365836])],
     [array([0.66292308])],
     [array([0.05910238])],
     [array([0.50522843])],
     [array([0.31170295])],
     [array([0.35553819])],
     [array([0.72635638])],
     [array([0.05325498])],
     [array([0.69640488])],
     [array([0.18912544])],
     [array([0.57922589])],
     [array([0.69201718])],
     [array([0.19782863])],
     [array([0.25642902])],
     [array([0.70962763])],
     [array([0.30428791])],
     [array([0.63408599])],
     [array([0.40044493])],
     [array([0.28234139])],
     [array([0.72568668])],
     [array([0.92040636])],
     [array([0.45038738])],
     [array([0.66716499])],
     [array([0.07030921])],
     [array([0.81618014])],
     [array([0.44641826])],
     [array([0.14793998])],
     [array([0.12487852])],
     [array([0.25335632])],
     [array([0.43085964])],
     [array([0.68744161])],
     [array([0.5496425])],
     [array([0.0110288])],
     [array([0.73048434])],
     [array([0.44892493])],
     [array([0.79208919])],
     [array([0.40127785])],
     [array([0.01577981])],
     [array([0.62814038])],
     [array([0.41178224])],
     [array([0.53532022])],
     [array([0.87231884])],
     [array([0.59542711])],
     [array([0.76545108])],
     [array([0.43858416])],
     [array([0.76510712])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.27615494, 0.74432223, 0.46300573, 0.11655812, 0.03803861,
           0.13650843, 0.87971136, 0.78594747, 0.58747215, 0.95607859,
           0.92306166, 0.69339892, 0.33197056, 0.68601275, 0.6843514 ,
           0.83886408, 0.03038819, 0.16237105, 0.21542457, 0.58138444,
           0.44168434, 0.30534951, 0.72145956, 0.67153135, 0.9334764 ,
           0.64029837, 0.52433201, 0.18734828, 0.6819535 , 0.35351364,
           0.27989668, 0.63922974, 0.5938874 , 0.00627357, 0.49684095,
           0.3961879 , 0.15536427, 0.92949899, 0.06919386, 0.65028575,
           0.96045621, 0.67942522, 0.330047  , 0.6425422 , 0.84357216,
           0.25486396, 0.9361096 , 0.56251127, 0.19815333, 0.90539056,
           0.9397505 , 0.20884987, 0.85606459, 0.7409197 , 0.94365836,
           0.66292308, 0.05910238, 0.50522843, 0.31170295, 0.35553819,
           0.72635638, 0.05325498, 0.69640488, 0.18912544, 0.57922589,
           0.69201718, 0.19782863, 0.25642902, 0.70962763, 0.30428791,
           0.63408599, 0.40044493, 0.28234139, 0.72568668, 0.92040636,
           0.45038738, 0.66716499, 0.07030921, 0.81618014, 0.44641826,
           0.14793998, 0.12487852, 0.25335632, 0.43085964, 0.68744161,
           0.5496425 , 0.0110288 , 0.73048434, 0.44892493, 0.79208919,
           0.40127785, 0.01577981, 0.62814038, 0.41178224, 0.53532022,
           0.87231884, 0.59542711, 0.76545108, 0.43858416, 0.76510712])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.13870899, 0.41649896, 0.15047867, 0.46744815, 0.2580214 ,
              0.91649784, 0.02969466, 0.95928135, 0.49288615, 0.51269403,
              0.26865232, 0.34455164, 0.28201953, 0.7868029 , 0.16320819,
              0.58715977, 0.97673772, 0.25402207, 0.21754277, 0.80102906,
              0.53370031, 0.38907531, 0.7674261 , 0.78837579, 0.96458146,
              0.197975  , 0.86385801, 0.19167241, 0.65254739, 0.55171312,
              0.16899408, 0.18508915, 0.97839726, 0.66864073, 0.41788002,
              0.8931626 , 0.31690356, 0.388176  , 0.17228   , 0.79605589,
              0.10376401, 0.86762276, 0.99446659, 0.68091103, 0.00752019,
              0.93502194, 0.7929619 , 0.52847999, 0.67826411, 0.19194931,
              0.47226095, 0.24305478, 0.17382881, 0.77383151, 0.00813916,
              0.9010881 , 0.73334829, 0.7685346 , 0.75081005, 0.50966446,
              0.00469235, 0.02772308, 0.1448246 , 0.18690182, 0.90650627,
              0.5215618 , 0.13291135, 0.38938205, 0.37526934, 0.8532547 ,
              0.66081653, 0.56935628, 0.84023609, 0.28214516, 0.39052383,
              0.14130665, 0.21043515, 0.90169015, 0.3795984 , 0.82130556,
              0.59206021, 0.12703379, 0.9557206 , 0.84095037, 0.58612965,
              0.41949231, 0.38115111, 0.14285536, 0.46918974, 0.77090596,
              0.72817178, 0.31248952, 0.3899404 , 0.90929557, 0.82438194,
              0.85835462, 0.61019703, 0.5846784 , 0.64673769, 0.06581535])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.35659984, 0.3729261 , 0.38843452, 0.4522177 , 0.07651938,
              0.10514691, 0.33637811, 0.39958096, 0.13189811, 0.45825826,
              0.69245767, 0.3062977 , 0.07168572, 0.53231044, 0.12081398,
              0.19839962, 0.52215586, 0.87484833, 0.17646667, 0.11080227,
              0.63773312, 0.18226454, 0.40506667, 0.63354763, 0.48687785,
              0.75437369, 0.51015091, 0.58506166, 0.85096392, 0.32984713,
              0.0118291 , 0.72293055, 0.98424758, 0.62198783, 0.1243375 ,
              0.20249047, 0.22325879, 0.95030025, 0.9081426 , 0.79486688,
              0.3597156 , 0.33883398, 0.52559451, 0.80202291, 0.55929339,
              0.24855935, 0.75747452, 0.84184772, 0.84490546, 0.87559151,
              0.02348893, 0.33726015, 0.78317932, 0.67076086, 0.93670656,
              0.32260508, 0.919178  , 0.95163088, 0.98383895, 0.23922016,
              0.46676111, 0.69729284, 0.40727798, 0.5873642 , 0.97034477,
              0.9778058 , 0.95126507, 0.16785595, 0.37969661, 0.99887544,
              0.95983036, 0.76085458, 0.77105041, 0.3973085 , 0.64981715,
              0.32802921, 0.19215612, 0.05425591, 0.67878682, 0.57143386,
              0.41333884, 0.03605877, 0.65065154, 0.79588103, 0.05008889,
              0.25712839, 0.81012594, 0.68505775, 0.51609969, 0.7843358 ,
              0.0262308 , 0.68948646, 0.64693915, 0.49250081, 0.61025639,
              0.34407836, 0.51476991, 0.40737412, 0.0128589 , 0.49312137])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.79036387, 0.47774644, 0.3338734 , 0.97718358, 0.64022221,
              0.2339291 , 0.64000938, 0.40412183, 0.96033196, 0.64815015,
              0.55353466, 0.75405004, 0.94135395, 0.93916133, 0.34816509,
              0.91093797, 0.38295303, 0.94297054, 0.4674829 , 0.01908275,
              0.99214987, 0.55616585, 0.0642542 , 0.95460228, 0.95801563,
              0.24105247, 0.8128027 , 0.30309784, 0.56047851, 0.73410867,
              0.96266605, 0.72812141, 0.7096283 , 0.1312228 , 0.50773631,
              0.05499909, 0.92399533, 0.05981734, 0.94535427, 0.11022157,
              0.26462928, 0.74362051, 0.09413228, 0.71303797, 0.97623248,
              0.10510459, 0.89590393, 0.84273424, 0.89781112, 0.59204972,
              0.64302495, 0.85264763, 0.13078522, 0.29421625, 0.14075522,
              0.02503866, 0.90083238, 0.9551957 , 0.26398178, 0.44686968,
              0.82132439, 0.34033536, 0.24696455, 0.03393515, 0.95875791,
              0.19907559, 0.96121326, 0.8695515 , 0.70551516, 0.57056221,
              0.78925495, 0.78974344, 0.45555531, 0.21710182, 0.30846315,
              0.9335552 , 0.42915967, 0.86635536, 0.12493202, 0.49040486,
              0.14899616, 0.75992412, 0.41676258, 0.49967636, 0.90498418,
              0.99511673, 0.85590072, 0.83028103, 0.02188235, 0.68251267,
              0.51864025, 0.61783422, 0.20500668, 0.11650938, 0.2613273 ,
              0.31543558, 0.1144814 , 0.88398857, 0.34313362, 0.0886    ])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.65381388, 0.47837802, 0.75997599, 0.93461534, 0.78714617,
              0.46672103, 0.48591934, 0.27406967, 0.99636402, 0.04342009,
              0.87920423, 0.29508024, 0.89849232, 0.96875088, 0.02167746,
              0.14568222, 0.28894281, 0.77000167, 0.47836239, 0.61308672,
              0.39182725, 0.27048965, 0.97086696, 0.40052373, 0.70891003,
              0.95582161, 0.25456319, 0.43359956, 0.0439082 , 0.74792015,
              0.71317   , 0.61482548, 0.55318   , 0.25775976, 0.30803645,
              0.7551245 , 0.82006389, 0.06751154, 0.05910892, 0.12569097,
              0.6087515 , 0.44515803, 0.14092994, 0.88768118, 0.11111749,
              0.05609102, 0.52389014, 0.02571267, 0.73262513, 0.17240636,
              0.49932738, 0.39276709, 0.77195819, 0.28989731, 0.78660323,
              0.09128381, 0.06041646, 0.53304261, 0.2754178 , 0.23089677,
              0.0446669 , 0.12671314, 0.55061144, 0.40290669, 0.24246711,
              0.57516358, 0.4675287 , 0.21002667, 0.95190696, 0.57445484,
              0.14279453, 0.73128244, 0.56780047, 0.93727188, 0.30143422,
              0.6909338 , 0.75667495, 0.38570108, 0.9480798 , 0.38822501,
              0.49097836, 0.05937027, 0.78827247, 0.90734208, 0.86937023,
              0.7936513 , 0.2856183 , 0.74300441, 0.79101961, 0.40816146,
              0.42524681, 0.75628386, 0.67994918, 0.21927343, 0.15016691,
              0.48274219, 0.34907551, 0.75984672, 0.9791248 , 0.71436114])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.13870899, 0.41649896, 0.15047867, 0.46744815, 0.2580214 ,
              0.91649784, 0.02969466, 0.95928135, 0.49288615, 0.51269403,
              0.26865232, 0.34455164, 0.28201953, 0.7868029 , 0.16320819,
              0.58715977, 0.97673772, 0.25402207, 0.21754277, 0.80102906,
              0.53370031, 0.38907531, 0.7674261 , 0.78837579, 0.96458146,
              0.197975  , 0.86385801, 0.19167241, 0.65254739, 0.55171312,
              0.16899408, 0.18508915, 0.97839726, 0.66864073, 0.41788002,
              0.8931626 , 0.31690356, 0.388176  , 0.17228   , 0.79605589,
              0.10376401, 0.86762276, 0.99446659, 0.68091103, 0.00752019,
              0.93502194, 0.7929619 , 0.52847999, 0.67826411, 0.19194931,
              0.47226095, 0.24305478, 0.17382881, 0.77383151, 0.00813916,
              0.9010881 , 0.73334829, 0.7685346 , 0.75081005, 0.50966446,
              0.00469235, 0.02772308, 0.1448246 , 0.18690182, 0.90650627,
              0.5215618 , 0.13291135, 0.38938205, 0.37526934, 0.8532547 ,
              0.66081653, 0.56935628, 0.84023609, 0.28214516, 0.39052383,
              0.14130665, 0.21043515, 0.90169015, 0.3795984 , 0.82130556,
              0.59206021, 0.12703379, 0.9557206 , 0.84095037, 0.58612965,
              0.41949231, 0.38115111, 0.14285536, 0.46918974, 0.77090596,
              0.72817178, 0.31248952, 0.3899404 , 0.90929557, 0.82438194,
              0.85835462, 0.61019703, 0.5846784 , 0.64673769, 0.06581535])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.35659984, 0.3729261 , 0.38843452, 0.4522177 , 0.07651938,
              0.10514691, 0.33637811, 0.39958096, 0.13189811, 0.45825826,
              0.69245767, 0.3062977 , 0.07168572, 0.53231044, 0.12081398,
              0.19839962, 0.52215586, 0.87484833, 0.17646667, 0.11080227,
              0.63773312, 0.18226454, 0.40506667, 0.63354763, 0.48687785,
              0.75437369, 0.51015091, 0.58506166, 0.85096392, 0.32984713,
              0.0118291 , 0.72293055, 0.98424758, 0.62198783, 0.1243375 ,
              0.20249047, 0.22325879, 0.95030025, 0.9081426 , 0.79486688,
              0.3597156 , 0.33883398, 0.52559451, 0.80202291, 0.55929339,
              0.24855935, 0.75747452, 0.84184772, 0.84490546, 0.87559151,
              0.02348893, 0.33726015, 0.78317932, 0.67076086, 0.93670656,
              0.32260508, 0.919178  , 0.95163088, 0.98383895, 0.23922016,
              0.46676111, 0.69729284, 0.40727798, 0.5873642 , 0.97034477,
              0.9778058 , 0.95126507, 0.16785595, 0.37969661, 0.99887544,
              0.95983036, 0.76085458, 0.77105041, 0.3973085 , 0.64981715,
              0.32802921, 0.19215612, 0.05425591, 0.67878682, 0.57143386,
              0.41333884, 0.03605877, 0.65065154, 0.79588103, 0.05008889,
              0.25712839, 0.81012594, 0.68505775, 0.51609969, 0.7843358 ,
              0.0262308 , 0.68948646, 0.64693915, 0.49250081, 0.61025639,
              0.34407836, 0.51476991, 0.40737412, 0.0128589 , 0.49312137])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.79036387, 0.47774644, 0.3338734 , 0.97718358, 0.64022221,
              0.2339291 , 0.64000938, 0.40412183, 0.96033196, 0.64815015,
              0.55353466, 0.75405004, 0.94135395, 0.93916133, 0.34816509,
              0.91093797, 0.38295303, 0.94297054, 0.4674829 , 0.01908275,
              0.99214987, 0.55616585, 0.0642542 , 0.95460228, 0.95801563,
              0.24105247, 0.8128027 , 0.30309784, 0.56047851, 0.73410867,
              0.96266605, 0.72812141, 0.7096283 , 0.1312228 , 0.50773631,
              0.05499909, 0.92399533, 0.05981734, 0.94535427, 0.11022157,
              0.26462928, 0.74362051, 0.09413228, 0.71303797, 0.97623248,
              0.10510459, 0.89590393, 0.84273424, 0.89781112, 0.59204972,
              0.64302495, 0.85264763, 0.13078522, 0.29421625, 0.14075522,
              0.02503866, 0.90083238, 0.9551957 , 0.26398178, 0.44686968,
              0.82132439, 0.34033536, 0.24696455, 0.03393515, 0.95875791,
              0.19907559, 0.96121326, 0.8695515 , 0.70551516, 0.57056221,
              0.78925495, 0.78974344, 0.45555531, 0.21710182, 0.30846315,
              0.9335552 , 0.42915967, 0.86635536, 0.12493202, 0.49040486,
              0.14899616, 0.75992412, 0.41676258, 0.49967636, 0.90498418,
              0.99511673, 0.85590072, 0.83028103, 0.02188235, 0.68251267,
              0.51864025, 0.61783422, 0.20500668, 0.11650938, 0.2613273 ,
              0.31543558, 0.1144814 , 0.88398857, 0.34313362, 0.0886    ])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.31805155, 0.615364  , 0.03408053, 0.61613866, 0.96608633,
              0.30352483, 0.62493298, 0.38711402, 0.72636839, 0.23173816,
              0.93394435, 0.50668884, 0.61510578, 0.99147163, 0.34796869,
              0.3584286 , 0.69808689, 0.92574425, 0.25699877, 0.68187958,
              0.49923679, 0.95632375, 0.32155081, 0.39195997, 0.27653689,
              0.82355864, 0.74794928, 0.85607684, 0.01354077, 0.6708008 ,
              0.31419881, 0.22128174, 0.94098574, 0.71448818, 0.2223161 ,
              0.04056642, 0.26763483, 0.30300747, 0.81720167, 0.02599035,
              0.283738  , 0.36943854, 0.0091929 , 0.95488068, 0.58548798,
              0.94668834, 0.79993699, 0.19891652, 0.15802369, 0.42915333,
              0.76289049, 0.68816994, 0.64308292, 0.12934997, 0.11672795,
              0.04906596, 0.96071003, 0.11832602, 0.90043024, 0.58213692,
              0.85284555, 0.4079381 , 0.99867295, 0.86697076, 0.10655016,
              0.16938102, 0.80106462, 0.21687944, 0.40310334, 0.12290568,
              0.88393571, 0.81120698, 0.82654238, 0.47679569, 0.00413475,
              0.29359129, 0.33998079, 0.85650816, 0.9366291 , 0.79547903,
              0.71210375, 0.07870973, 0.331722  , 0.58800962, 0.950176  ,
              0.9529746 , 0.47195744, 0.37257042, 0.95830067, 0.5716396 ,
              0.193374  , 0.63160506, 0.35973957, 0.79369145, 0.4783221 ,
              0.52893343, 0.93298695, 0.62506411, 0.13023681, 0.6584236 ])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.27615494, 0.74432223, 0.46300573, 0.11655812, 0.03803861,
              0.13650843, 0.87971136, 0.78594747, 0.58747215, 0.95607859,
              0.92306166, 0.69339892, 0.33197056, 0.68601275, 0.6843514 ,
              0.83886408, 0.03038819, 0.16237105, 0.21542457, 0.58138444,
              0.44168434, 0.30534951, 0.72145956, 0.67153135, 0.9334764 ,
              0.64029837, 0.52433201, 0.18734828, 0.6819535 , 0.35351364,
              0.27989668, 0.63922974, 0.5938874 , 0.00627357, 0.49684095,
              0.3961879 , 0.15536427, 0.92949899, 0.06919386, 0.65028575,
              0.96045621, 0.67942522, 0.330047  , 0.6425422 , 0.84357216,
              0.25486396, 0.9361096 , 0.56251127, 0.19815333, 0.90539056,
              0.9397505 , 0.20884987, 0.85606459, 0.7409197 , 0.94365836,
              0.66292308, 0.05910238, 0.50522843, 0.31170295, 0.35553819,
              0.72635638, 0.05325498, 0.69640488, 0.18912544, 0.57922589,
              0.69201718, 0.19782863, 0.25642902, 0.70962763, 0.30428791,
              0.63408599, 0.40044493, 0.28234139, 0.72568668, 0.92040636,
              0.45038738, 0.66716499, 0.07030921, 0.81618014, 0.44641826,
              0.14793998, 0.12487852, 0.25335632, 0.43085964, 0.68744161,
              0.5496425 , 0.0110288 , 0.73048434, 0.44892493, 0.79208919,
              0.40127785, 0.01577981, 0.62814038, 0.41178224, 0.53532022,
              0.87231884, 0.59542711, 0.76545108, 0.43858416, 0.76510712])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([7.42588766e-01, 7.77003228e-01, 2.76070472e-01, 6.52054733e-01,
              3.49289311e-01, 9.92388027e-01, 9.80119533e-01, 6.47114701e-01,
              2.89767962e-01, 5.24426748e-01, 2.58240850e-01, 2.06533028e-01,
              1.87470790e-01, 1.72714403e-01, 1.49701533e-01, 2.53722767e-03,
              2.42360697e-01, 3.97780958e-01, 3.53279573e-01, 3.46259473e-01,
              1.48687679e-01, 5.84394128e-02, 4.36429466e-01, 4.35065033e-01,
              3.03150251e-01, 3.92123784e-01, 2.08476623e-01, 4.75936248e-01,
              1.20805276e-01, 8.82455617e-01, 4.10615502e-01, 1.79048281e-01,
              9.58730145e-01, 6.95185803e-02, 5.22754073e-02, 8.39520173e-01,
              5.70501028e-01, 4.64489724e-01, 4.36077039e-01, 5.70277064e-01,
              5.65199207e-01, 5.61929927e-01, 9.03996815e-01, 7.39376845e-01,
              5.73589957e-01, 2.23056480e-01, 4.13205259e-01, 8.97059044e-01,
              4.53856888e-02, 2.68614320e-01, 7.41490964e-01, 2.12046302e-02,
              3.68186461e-01, 2.27916979e-02, 7.33106484e-01, 1.59595387e-01,
              7.42616438e-01, 6.05396660e-01, 2.81411691e-01, 5.22652734e-01,
              3.72716676e-01, 5.39578568e-01, 4.87483295e-02, 5.38353198e-01,
              1.15642781e-01, 7.01677284e-01, 1.92531470e-01, 8.98267308e-01,
              3.34076707e-02, 1.65690091e-01, 9.26470577e-01, 9.20219629e-01,
              1.50346655e-02, 7.33206904e-01, 7.00721620e-01, 1.34547249e-01,
              1.29501150e-02, 8.80255464e-01, 1.05688053e-01, 9.32874203e-02,
              2.10753087e-01, 5.62674735e-01, 7.54823594e-01, 4.33928928e-04,
              6.01707720e-01, 9.53056269e-01, 3.38716745e-01, 8.13921352e-01,
              1.18586049e-01, 7.63875230e-01, 8.86603551e-01, 8.47350458e-02,
              3.57031146e-01, 5.07765447e-01, 1.90441128e-01, 6.90736162e-01,
              6.27016336e-01, 8.20349174e-01, 1.85272639e-03, 6.99726367e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.57554695, 0.44285807, 0.511179  , 0.64968972, 0.94794391,
              0.8024397 , 0.66334252, 0.80508794, 0.35135974, 0.19269945,
              0.91201283, 0.68236901, 0.04807939, 0.54976241, 0.45652395,
              0.35935705, 0.13962628, 0.03275938, 0.31851205, 0.74198709,
              0.8397089 , 0.93076814, 0.38506788, 0.44649919, 0.45106599,
              0.31280644, 0.0812762 , 0.08549119, 0.27987492, 0.2114242 ,
              0.67405819, 0.79891748, 0.6281262 , 0.72322425, 0.65529374,
              0.44052336, 0.86076217, 0.19067476, 0.64083114, 0.63088573,
              0.83805979, 0.92676843, 0.26848064, 0.00768708, 0.81253583,
              0.94352502, 0.97256581, 0.82864325, 0.19529752, 0.71209383,
              0.48000851, 0.35476765, 0.88447104, 0.22501569, 0.34369674,
              0.75132559, 0.56714173, 0.87990386, 0.76591691, 0.4751876 ,
              0.48693627, 0.54716272, 0.19157211, 0.55108087, 0.47968123,
              0.19264434, 0.73899787, 0.45677093, 0.23726718, 0.0354129 ,
              0.57947991, 0.79171973, 0.00809583, 0.71858267, 0.47960599,
              0.22307418, 0.63991383, 0.99992532, 0.7914092 , 0.02014231,
              0.16152108, 0.6987119 , 0.61908908, 0.77709917, 0.83491149,
              0.00163663, 0.16154607, 0.39273406, 0.04592497, 0.07018324,
              0.12244228, 0.22900606, 0.26701081, 0.84605235, 0.78710217,
              0.11117453, 0.15364006, 0.58000721, 0.06651706, 0.9859146 ])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.61866006, 0.75940019, 0.30954467, 0.84869161, 0.14030271,
              0.04999631, 0.03065592, 0.41816676, 0.23630224, 0.51264992,
              0.72686337, 0.73477123, 0.31396779, 0.71980133, 0.34558676,
              0.42765017, 0.98581737, 0.7360194 , 0.93060602, 0.77594973,
              0.98995462, 0.09806973, 0.24723039, 0.642162  , 0.29543023,
              0.71717106, 0.82596537, 0.8137206 , 0.168267  , 0.36252767,
              0.28733647, 0.81500841, 0.67404731, 0.0877121 , 0.06771956,
              0.82560147, 0.76879388, 0.91764701, 0.98786845, 0.69059098,
              0.53177149, 0.46505236, 0.60729149, 0.89470034, 0.30224284,
              0.30628963, 0.65138957, 0.33908051, 0.21271207, 0.59989855,
              0.57204522, 0.89608041, 0.8998803 , 0.77141573, 0.44724957,
              0.66501218, 0.29832883, 0.93929964, 0.9209777 , 0.84992936,
              0.61125712, 0.86611206, 0.13251557, 0.14798371, 0.93888607,
              0.82508023, 0.54855855, 0.23592895, 0.51889691, 0.99677011,
              0.23124789, 0.16318037, 0.67252268, 0.33061037, 0.74087189,
              0.87377676, 0.0872086 , 0.18802323, 0.4630757 , 0.94048967,
              0.24235292, 0.60836282, 0.48381143, 0.99724682, 0.30734065,
              0.25433269, 0.84216632, 0.60403796, 0.2338312 , 0.50172172,
              0.25822352, 0.3350126 , 0.1552572 , 0.17610312, 0.42745921,
              0.5801444 , 0.62555638, 0.35666053, 0.11215522, 0.6634201 ])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.27615494, 0.74432223, 0.46300573, 0.11655812, 0.03803861,
              0.13650843, 0.87971136, 0.78594747, 0.58747215, 0.95607859,
              0.92306166, 0.69339892, 0.33197056, 0.68601275, 0.6843514 ,
              0.83886408, 0.03038819, 0.16237105, 0.21542457, 0.58138444,
              0.44168434, 0.30534951, 0.72145956, 0.67153135, 0.9334764 ,
              0.64029837, 0.52433201, 0.18734828, 0.6819535 , 0.35351364,
              0.27989668, 0.63922974, 0.5938874 , 0.00627357, 0.49684095,
              0.3961879 , 0.15536427, 0.92949899, 0.06919386, 0.65028575,
              0.96045621, 0.67942522, 0.330047  , 0.6425422 , 0.84357216,
              0.25486396, 0.9361096 , 0.56251127, 0.19815333, 0.90539056,
              0.9397505 , 0.20884987, 0.85606459, 0.7409197 , 0.94365836,
              0.66292308, 0.05910238, 0.50522843, 0.31170295, 0.35553819,
              0.72635638, 0.05325498, 0.69640488, 0.18912544, 0.57922589,
              0.69201718, 0.19782863, 0.25642902, 0.70962763, 0.30428791,
              0.63408599, 0.40044493, 0.28234139, 0.72568668, 0.92040636,
              0.45038738, 0.66716499, 0.07030921, 0.81618014, 0.44641826,
              0.14793998, 0.12487852, 0.25335632, 0.43085964, 0.68744161,
              0.5496425 , 0.0110288 , 0.73048434, 0.44892493, 0.79208919,
              0.40127785, 0.01577981, 0.62814038, 0.41178224, 0.53532022,
              0.87231884, 0.59542711, 0.76545108, 0.43858416, 0.76510712])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([7.42588766e-01, 7.77003228e-01, 2.76070472e-01, 6.52054733e-01,
              3.49289311e-01, 9.92388027e-01, 9.80119533e-01, 6.47114701e-01,
              2.89767962e-01, 5.24426748e-01, 2.58240850e-01, 2.06533028e-01,
              1.87470790e-01, 1.72714403e-01, 1.49701533e-01, 2.53722767e-03,
              2.42360697e-01, 3.97780958e-01, 3.53279573e-01, 3.46259473e-01,
              1.48687679e-01, 5.84394128e-02, 4.36429466e-01, 4.35065033e-01,
              3.03150251e-01, 3.92123784e-01, 2.08476623e-01, 4.75936248e-01,
              1.20805276e-01, 8.82455617e-01, 4.10615502e-01, 1.79048281e-01,
              9.58730145e-01, 6.95185803e-02, 5.22754073e-02, 8.39520173e-01,
              5.70501028e-01, 4.64489724e-01, 4.36077039e-01, 5.70277064e-01,
              5.65199207e-01, 5.61929927e-01, 9.03996815e-01, 7.39376845e-01,
              5.73589957e-01, 2.23056480e-01, 4.13205259e-01, 8.97059044e-01,
              4.53856888e-02, 2.68614320e-01, 7.41490964e-01, 2.12046302e-02,
              3.68186461e-01, 2.27916979e-02, 7.33106484e-01, 1.59595387e-01,
              7.42616438e-01, 6.05396660e-01, 2.81411691e-01, 5.22652734e-01,
              3.72716676e-01, 5.39578568e-01, 4.87483295e-02, 5.38353198e-01,
              1.15642781e-01, 7.01677284e-01, 1.92531470e-01, 8.98267308e-01,
              3.34076707e-02, 1.65690091e-01, 9.26470577e-01, 9.20219629e-01,
              1.50346655e-02, 7.33206904e-01, 7.00721620e-01, 1.34547249e-01,
              1.29501150e-02, 8.80255464e-01, 1.05688053e-01, 9.32874203e-02,
              2.10753087e-01, 5.62674735e-01, 7.54823594e-01, 4.33928928e-04,
              6.01707720e-01, 9.53056269e-01, 3.38716745e-01, 8.13921352e-01,
              1.18586049e-01, 7.63875230e-01, 8.86603551e-01, 8.47350458e-02,
              3.57031146e-01, 5.07765447e-01, 1.90441128e-01, 6.90736162e-01,
              6.27016336e-01, 8.20349174e-01, 1.85272639e-03, 6.99726367e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.57554695, 0.44285807, 0.511179  , 0.64968972, 0.94794391,
              0.8024397 , 0.66334252, 0.80508794, 0.35135974, 0.19269945,
              0.91201283, 0.68236901, 0.04807939, 0.54976241, 0.45652395,
              0.35935705, 0.13962628, 0.03275938, 0.31851205, 0.74198709,
              0.8397089 , 0.93076814, 0.38506788, 0.44649919, 0.45106599,
              0.31280644, 0.0812762 , 0.08549119, 0.27987492, 0.2114242 ,
              0.67405819, 0.79891748, 0.6281262 , 0.72322425, 0.65529374,
              0.44052336, 0.86076217, 0.19067476, 0.64083114, 0.63088573,
              0.83805979, 0.92676843, 0.26848064, 0.00768708, 0.81253583,
              0.94352502, 0.97256581, 0.82864325, 0.19529752, 0.71209383,
              0.48000851, 0.35476765, 0.88447104, 0.22501569, 0.34369674,
              0.75132559, 0.56714173, 0.87990386, 0.76591691, 0.4751876 ,
              0.48693627, 0.54716272, 0.19157211, 0.55108087, 0.47968123,
              0.19264434, 0.73899787, 0.45677093, 0.23726718, 0.0354129 ,
              0.57947991, 0.79171973, 0.00809583, 0.71858267, 0.47960599,
              0.22307418, 0.63991383, 0.99992532, 0.7914092 , 0.02014231,
              0.16152108, 0.6987119 , 0.61908908, 0.77709917, 0.83491149,
              0.00163663, 0.16154607, 0.39273406, 0.04592497, 0.07018324,
              0.12244228, 0.22900606, 0.26701081, 0.84605235, 0.78710217,
              0.11117453, 0.15364006, 0.58000721, 0.06651706, 0.9859146 ])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.57904563, 0.29841501, 0.3536225 , 0.1430076 , 0.83397999,
              0.78211383, 0.91235378, 0.20306068, 0.16688578, 0.37460673,
              0.2367384 , 0.00399309, 0.4008668 , 0.45616049, 0.1211122 ,
              0.12084712, 0.01477881, 0.15654505, 0.27724573, 0.57686704,
              0.65229023, 0.78264583, 0.42280772, 0.94604938, 0.98789307,
              0.0015413 , 0.47900785, 0.07810705, 0.05488876, 0.35281429,
              0.48046366, 0.72084999, 0.45893051, 0.62254598, 0.6385811 ,
              0.52101827, 0.5075951 , 0.56737096, 0.58548075, 0.45695257,
              0.78893355, 0.2807417 , 0.11678386, 0.47182078, 0.12025757,
              0.91745963, 0.5874905 , 0.18442708, 0.33307138, 0.06902584,
              0.19326808, 0.67523427, 0.95998544, 0.0442593 , 0.0533271 ,
              0.17883587, 0.44972892, 0.13270634, 0.79813077, 0.83256765,
              0.84578971, 0.88828725, 0.7254377 , 0.9213709 , 0.88491151,
              0.30687196, 0.31438385, 0.45209219, 0.74947388, 0.38771652,
              0.79172307, 0.09888262, 0.30807394, 0.57808613, 0.50962863,
              0.39777015, 0.0086892 , 0.34480921, 0.098454  , 0.11310067,
              0.96288458, 0.83684738, 0.60585898, 0.84352417, 0.99136431,
              0.00232791, 0.29830961, 0.09639816, 0.89816833, 0.46996899,
              0.09317387, 0.3551299 , 0.76935262, 0.07975057, 0.48897933,
              0.13666558, 0.57234262, 0.43981607, 0.70702398, 0.46771551])}]]


