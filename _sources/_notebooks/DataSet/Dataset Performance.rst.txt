
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='e828ae25-0e4c-4d21-8b1a-09c2771b4e44'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='f0a69f45-2087-4e59-8822-ceab3276ea37'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.0746025498381481],
     [0.670374317613513],
     [0.528546182658778],
     [0.749644184187471],
     [0.4450097955206],
     [0.492556700872474],
     [0.355568741597165],
     [0.806114322478093],
     [0.885836435232581],
     [0.210375193585074],
     [0.596295607703916],
     [0.35979375003049],
     [0.653470446704363],
     [0.939302240605629],
     [0.824852876601499],
     [0.843580034934882],
     [0.185616871737782],
     [0.095235176750135],
     [0.689636336325315],
     [0.557786704923909],
     [0.977793935583754],
     [0.374784399389025],
     [0.130172527558318],
     [0.697112805573575],
     [0.495286385649538],
     [0.572255954593445],
     [0.372048350401855],
     [0.446336275675805],
     [0.70164740845033],
     [0.170982603883179],
     [0.16883542857248],
     [0.592641835807487],
     [0.850506758713984],
     [0.173923475913701],
     [0.429267867931853],
     [0.259382191129396],
     [0.897355981227731],
     [0.275389346651881],
     [0.314484404690477],
     [0.21901109276908],
     [0.653624509515501],
     [0.0284701132538842],
     [0.753326798130338],
     [0.990522920144382],
     [0.157469147444485],
     [0.822470738674487],
     [0.246430612169178],
     [0.57259861686524],
     [0.415358536649356],
     [0.147563269824003],
     [0.753870042060306],
     [0.378884426097984],
     [0.51799505017532],
     [0.0364068087760935],
     [0.797174882158945],
     [0.121249802976522],
     [0.458229061387871],
     [0.653061339671671],
     [0.706168106793706],
     [0.57191274490552],
     [0.371583678019705],
     [0.760343943452084],
     [0.351867322696343],
     [0.328578631851418],
     [0.249615420829472],
     [0.123471040563447],
     [0.424461747960274],
     [0.673465609196836],
     [0.873195774670049],
     [0.0138424147900851],
     [0.0858639241268297],
     [0.940388662228862],
     [0.796790136909296],
     [0.838377161466876],
     [0.243821251222467],
     [0.956104563146791],
     [0.576032286564926],
     [0.961276951320251],
     [0.476706974736163],
     [0.76332602807458],
     [0.8062889762026],
     [0.899197831693016],
     [0.14837477583793],
     [0.860401947605164],
     [0.257815494931917],
     [0.630326155110647],
     [0.683330383213638],
     [0.979430036265141],
     [0.942935594708496],
     [0.909236524818975],
     [0.722012881799181],
     [0.02219989527215],
     [0.113873914103403],
     [0.0859253424755441],
     [0.229845122886911],
     [0.452027766099319],
     [0.883141358653199],
     [0.354555334663779],
     [0.763999226942439],
     [0.668675588837754]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.76378778])],
     [array([0.89954118])],
     [array([0.04129054])],
     [array([0.43078941])],
     [array([0.20520152])],
     [array([0.82020717])],
     [array([0.45671605])],
     [array([0.62321602])],
     [array([0.66850309])],
     [array([0.72967615])],
     [array([0.78286899])],
     [array([0.60577632])],
     [array([0.97982826])],
     [array([0.14673944])],
     [array([0.3101124])],
     [array([0.20718171])],
     [array([0.67660302])],
     [array([0.77965131])],
     [array([0.26436201])],
     [array([0.44946305])],
     [array([0.20092893])],
     [array([0.12976746])],
     [array([0.96865535])],
     [array([0.49980411])],
     [array([0.64333914])],
     [array([0.75341605])],
     [array([0.30760954])],
     [array([0.0942053])],
     [array([0.11731875])],
     [array([0.93248566])],
     [array([0.32185956])],
     [array([0.52196249])],
     [array([0.58521491])],
     [array([0.26660222])],
     [array([0.44934741])],
     [array([0.29335533])],
     [array([0.26168185])],
     [array([0.57954486])],
     [array([0.32056106])],
     [array([0.72444506])],
     [array([0.20802299])],
     [array([0.89436335])],
     [array([0.67246857])],
     [array([0.83120257])],
     [array([0.88456838])],
     [array([0.32246581])],
     [array([0.21693405])],
     [array([0.96965198])],
     [array([0.12841299])],
     [array([0.48943938])],
     [array([0.52875555])],
     [array([0.11136266])],
     [array([0.46293636])],
     [array([0.42390045])],
     [array([0.20614827])],
     [array([0.35874663])],
     [array([0.97182408])],
     [array([0.94080365])],
     [array([0.69439805])],
     [array([0.96508716])],
     [array([0.05252029])],
     [array([0.70706307])],
     [array([0.46976029])],
     [array([0.28959582])],
     [array([0.33748092])],
     [array([0.86358539])],
     [array([0.87363594])],
     [array([0.37705305])],
     [array([0.20227358])],
     [array([0.10018953])],
     [array([0.07487901])],
     [array([0.26768131])],
     [array([0.26040713])],
     [array([0.87460185])],
     [array([0.04880732])],
     [array([0.23243981])],
     [array([0.27477917])],
     [array([0.10578161])],
     [array([0.98518464])],
     [array([0.24096641])],
     [array([0.53323907])],
     [array([0.64866435])],
     [array([0.18372209])],
     [array([0.39030742])],
     [array([0.13262657])],
     [array([0.29409472])],
     [array([0.884978])],
     [array([0.68819935])],
     [array([0.08029239])],
     [array([0.86782444])],
     [array([0.68417751])],
     [array([0.59330591])],
     [array([0.61608531])],
     [array([0.23189519])],
     [array([0.45162606])],
     [array([0.24939428])],
     [array([0.51216849])],
     [array([0.66977654])],
     [array([0.7535112])],
     [array([0.63107809])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.76378778, 0.89954118, 0.04129054, 0.43078941, 0.20520152,
           0.82020717, 0.45671605, 0.62321602, 0.66850309, 0.72967615,
           0.78286899, 0.60577632, 0.97982826, 0.14673944, 0.3101124 ,
           0.20718171, 0.67660302, 0.77965131, 0.26436201, 0.44946305,
           0.20092893, 0.12976746, 0.96865535, 0.49980411, 0.64333914,
           0.75341605, 0.30760954, 0.0942053 , 0.11731875, 0.93248566,
           0.32185956, 0.52196249, 0.58521491, 0.26660222, 0.44934741,
           0.29335533, 0.26168185, 0.57954486, 0.32056106, 0.72444506,
           0.20802299, 0.89436335, 0.67246857, 0.83120257, 0.88456838,
           0.32246581, 0.21693405, 0.96965198, 0.12841299, 0.48943938,
           0.52875555, 0.11136266, 0.46293636, 0.42390045, 0.20614827,
           0.35874663, 0.97182408, 0.94080365, 0.69439805, 0.96508716,
           0.05252029, 0.70706307, 0.46976029, 0.28959582, 0.33748092,
           0.86358539, 0.87363594, 0.37705305, 0.20227358, 0.10018953,
           0.07487901, 0.26768131, 0.26040713, 0.87460185, 0.04880732,
           0.23243981, 0.27477917, 0.10578161, 0.98518464, 0.24096641,
           0.53323907, 0.64866435, 0.18372209, 0.39030742, 0.13262657,
           0.29409472, 0.884978  , 0.68819935, 0.08029239, 0.86782444,
           0.68417751, 0.59330591, 0.61608531, 0.23189519, 0.45162606,
           0.24939428, 0.51216849, 0.66977654, 0.7535112 , 0.63107809])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.07460255, 0.67037432, 0.52854618, 0.74964418, 0.4450098 ,
              0.4925567 , 0.35556874, 0.80611432, 0.88583644, 0.21037519,
              0.59629561, 0.35979375, 0.65347045, 0.93930224, 0.82485288,
              0.84358003, 0.18561687, 0.09523518, 0.68963634, 0.5577867 ,
              0.97779394, 0.3747844 , 0.13017253, 0.69711281, 0.49528639,
              0.57225595, 0.37204835, 0.44633628, 0.70164741, 0.1709826 ,
              0.16883543, 0.59264184, 0.85050676, 0.17392348, 0.42926787,
              0.25938219, 0.89735598, 0.27538935, 0.3144844 , 0.21901109,
              0.65362451, 0.02847011, 0.7533268 , 0.99052292, 0.15746915,
              0.82247074, 0.24643061, 0.57259862, 0.41535854, 0.14756327,
              0.75387004, 0.37888443, 0.51799505, 0.03640681, 0.79717488,
              0.1212498 , 0.45822906, 0.65306134, 0.70616811, 0.57191274,
              0.37158368, 0.76034394, 0.35186732, 0.32857863, 0.24961542,
              0.12347104, 0.42446175, 0.67346561, 0.87319577, 0.01384241,
              0.08586392, 0.94038866, 0.79679014, 0.83837716, 0.24382125,
              0.95610456, 0.57603229, 0.96127695, 0.47670697, 0.76332603,
              0.80628898, 0.89919783, 0.14837478, 0.86040195, 0.25781549,
              0.63032616, 0.68333038, 0.97943004, 0.94293559, 0.90923652,
              0.72201288, 0.0221999 , 0.11387391, 0.08592534, 0.22984512,
              0.45202777, 0.88314136, 0.35455533, 0.76399923, 0.66867559])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([9.47595739e-01, 3.36134722e-02, 7.35739856e-04, 9.54036573e-01,
              9.57039511e-02, 6.77628789e-01, 7.22533424e-01, 3.95770358e-01,
              1.81946652e-01, 9.59772815e-01, 8.76755872e-01, 3.70438037e-01,
              9.92579407e-02, 2.02332236e-01, 1.68859096e-01, 3.19556795e-01,
              1.32273887e-01, 9.53103467e-01, 8.36299953e-02, 4.87041419e-01,
              9.38120269e-01, 3.24133158e-01, 6.79425734e-01, 1.13718868e-01,
              7.23685907e-01, 4.91354472e-01, 7.19113136e-01, 7.27942556e-01,
              6.26762296e-02, 8.07371746e-01, 3.45576109e-01, 1.63298672e-01,
              3.98899874e-02, 7.00658236e-01, 2.13351766e-02, 4.46764551e-01,
              7.19947239e-01, 1.13072732e-02, 2.10660751e-01, 4.82773396e-01,
              7.86762345e-01, 3.19175176e-01, 1.38892362e-01, 7.64376783e-01,
              9.96804094e-01, 4.10377807e-01, 1.28244529e-01, 1.60554017e-01,
              7.55729208e-01, 5.41465451e-01, 9.65733912e-03, 4.60401397e-01,
              5.53041981e-01, 8.62285461e-01, 8.19668915e-01, 2.57033339e-01,
              6.77503974e-01, 6.49819461e-01, 5.03433868e-01, 8.67875966e-01,
              3.65731126e-01, 8.43303427e-01, 4.72261532e-01, 1.41835234e-01,
              1.10858517e-01, 8.22126935e-01, 6.17330594e-01, 8.08566759e-01,
              1.91553200e-01, 4.45130243e-01, 7.59834214e-01, 6.56516444e-01,
              2.84866180e-01, 3.65381578e-01, 6.02332222e-02, 2.22864822e-01,
              3.71417059e-01, 7.92175791e-02, 9.63193572e-01, 3.46968155e-01,
              5.69340445e-01, 3.59240552e-01, 6.84236232e-01, 2.26629921e-02,
              3.68120425e-01, 8.68734489e-01, 8.96336359e-01, 1.80542511e-02,
              6.93697757e-01, 9.06773229e-01, 5.04746925e-01, 3.02478518e-01,
              5.51047029e-01, 6.47380079e-01, 9.31284021e-01, 5.73417817e-01,
              3.10881391e-01, 2.65709695e-01, 9.37249468e-02, 5.59566677e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.30929804, 0.21762592, 0.01872946, 0.14010217, 0.58246949,
              0.49553315, 0.96697166, 0.87407472, 0.27851632, 0.94059853,
              0.38535019, 0.35874751, 0.51970419, 0.41039551, 0.84338202,
              0.07810269, 0.61479624, 0.77728351, 0.03841868, 0.84759916,
              0.03085277, 0.89199478, 0.40650443, 0.29689403, 0.35516593,
              0.34087535, 0.59447678, 0.59509287, 0.94220588, 0.48546219,
              0.17754403, 0.43799302, 0.91454137, 0.78924525, 0.57542273,
              0.36353145, 0.51047485, 0.26240913, 0.31292226, 0.44300028,
              0.09767789, 0.78175308, 0.33536905, 0.37554429, 0.34602289,
              0.0106925 , 0.91257174, 0.86479305, 0.91026396, 0.20847315,
              0.61633951, 0.80450922, 0.74059128, 0.87420742, 0.21700729,
              0.37428245, 0.38696732, 0.38473156, 0.71650121, 0.26858025,
              0.09832045, 0.47820079, 0.56615268, 0.89815082, 0.55568407,
              0.5489936 , 0.61183253, 0.44730309, 0.7139683 , 0.96262314,
              0.94266489, 0.5301218 , 0.91659898, 0.72193741, 0.67538119,
              0.31651564, 0.15785878, 0.92615297, 0.8287053 , 0.64013147,
              0.70479825, 0.14831885, 0.11042187, 0.94017861, 0.41597375,
              0.49540224, 0.90473308, 0.21617676, 0.4378603 , 0.12773844,
              0.98639597, 0.63712597, 0.31160411, 0.72779145, 0.82102369,
              0.02499957, 0.91224394, 0.8993799 , 0.16489385, 0.5893223 ])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.77748501, 0.72633052, 0.15323204, 0.2387581 , 0.43629628,
              0.7410648 , 0.00979741, 0.50495747, 0.51711442, 0.2531668 ,
              0.41030651, 0.37974381, 0.84517186, 0.95301754, 0.10113077,
              0.0502474 , 0.78100018, 0.14471416, 0.91014644, 0.750066  ,
              0.54025995, 0.43966431, 0.49749664, 0.78858539, 0.76663439,
              0.17492821, 0.9247368 , 0.32546034, 0.915026  , 0.57178645,
              0.46334726, 0.15446408, 0.63352533, 0.67722228, 0.24400283,
              0.89317268, 0.455954  , 0.12324183, 0.13702692, 0.95525661,
              0.04770758, 0.79335027, 0.11403858, 0.24583214, 0.85391705,
              0.27568059, 0.42948308, 0.98561017, 0.15832725, 0.86538783,
              0.97290021, 0.47330106, 0.91341309, 0.12850969, 0.08224225,
              0.19247136, 0.82606717, 0.88231498, 0.84381316, 0.81947808,
              0.98743788, 0.1904719 , 0.25420834, 0.24847971, 0.7206352 ,
              0.01393935, 0.94933352, 0.48543587, 0.29968198, 0.35628604,
              0.05958086, 0.02342201, 0.68084942, 0.89795471, 0.9074572 ,
              0.1177534 , 0.20762139, 0.57892386, 0.70426898, 0.93370838,
              0.25976021, 0.82933635, 0.44017728, 0.82535721, 0.9021303 ,
              0.41686114, 0.88569468, 0.61311039, 0.51992108, 0.6409252 ,
              0.65920297, 0.95535771, 0.65057507, 0.97292124, 0.91597276,
              0.94134415, 0.05814136, 0.89853072, 0.31421941, 0.97948575])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.07460255, 0.67037432, 0.52854618, 0.74964418, 0.4450098 ,
              0.4925567 , 0.35556874, 0.80611432, 0.88583644, 0.21037519,
              0.59629561, 0.35979375, 0.65347045, 0.93930224, 0.82485288,
              0.84358003, 0.18561687, 0.09523518, 0.68963634, 0.5577867 ,
              0.97779394, 0.3747844 , 0.13017253, 0.69711281, 0.49528639,
              0.57225595, 0.37204835, 0.44633628, 0.70164741, 0.1709826 ,
              0.16883543, 0.59264184, 0.85050676, 0.17392348, 0.42926787,
              0.25938219, 0.89735598, 0.27538935, 0.3144844 , 0.21901109,
              0.65362451, 0.02847011, 0.7533268 , 0.99052292, 0.15746915,
              0.82247074, 0.24643061, 0.57259862, 0.41535854, 0.14756327,
              0.75387004, 0.37888443, 0.51799505, 0.03640681, 0.79717488,
              0.1212498 , 0.45822906, 0.65306134, 0.70616811, 0.57191274,
              0.37158368, 0.76034394, 0.35186732, 0.32857863, 0.24961542,
              0.12347104, 0.42446175, 0.67346561, 0.87319577, 0.01384241,
              0.08586392, 0.94038866, 0.79679014, 0.83837716, 0.24382125,
              0.95610456, 0.57603229, 0.96127695, 0.47670697, 0.76332603,
              0.80628898, 0.89919783, 0.14837478, 0.86040195, 0.25781549,
              0.63032616, 0.68333038, 0.97943004, 0.94293559, 0.90923652,
              0.72201288, 0.0221999 , 0.11387391, 0.08592534, 0.22984512,
              0.45202777, 0.88314136, 0.35455533, 0.76399923, 0.66867559])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([9.47595739e-01, 3.36134722e-02, 7.35739856e-04, 9.54036573e-01,
              9.57039511e-02, 6.77628789e-01, 7.22533424e-01, 3.95770358e-01,
              1.81946652e-01, 9.59772815e-01, 8.76755872e-01, 3.70438037e-01,
              9.92579407e-02, 2.02332236e-01, 1.68859096e-01, 3.19556795e-01,
              1.32273887e-01, 9.53103467e-01, 8.36299953e-02, 4.87041419e-01,
              9.38120269e-01, 3.24133158e-01, 6.79425734e-01, 1.13718868e-01,
              7.23685907e-01, 4.91354472e-01, 7.19113136e-01, 7.27942556e-01,
              6.26762296e-02, 8.07371746e-01, 3.45576109e-01, 1.63298672e-01,
              3.98899874e-02, 7.00658236e-01, 2.13351766e-02, 4.46764551e-01,
              7.19947239e-01, 1.13072732e-02, 2.10660751e-01, 4.82773396e-01,
              7.86762345e-01, 3.19175176e-01, 1.38892362e-01, 7.64376783e-01,
              9.96804094e-01, 4.10377807e-01, 1.28244529e-01, 1.60554017e-01,
              7.55729208e-01, 5.41465451e-01, 9.65733912e-03, 4.60401397e-01,
              5.53041981e-01, 8.62285461e-01, 8.19668915e-01, 2.57033339e-01,
              6.77503974e-01, 6.49819461e-01, 5.03433868e-01, 8.67875966e-01,
              3.65731126e-01, 8.43303427e-01, 4.72261532e-01, 1.41835234e-01,
              1.10858517e-01, 8.22126935e-01, 6.17330594e-01, 8.08566759e-01,
              1.91553200e-01, 4.45130243e-01, 7.59834214e-01, 6.56516444e-01,
              2.84866180e-01, 3.65381578e-01, 6.02332222e-02, 2.22864822e-01,
              3.71417059e-01, 7.92175791e-02, 9.63193572e-01, 3.46968155e-01,
              5.69340445e-01, 3.59240552e-01, 6.84236232e-01, 2.26629921e-02,
              3.68120425e-01, 8.68734489e-01, 8.96336359e-01, 1.80542511e-02,
              6.93697757e-01, 9.06773229e-01, 5.04746925e-01, 3.02478518e-01,
              5.51047029e-01, 6.47380079e-01, 9.31284021e-01, 5.73417817e-01,
              3.10881391e-01, 2.65709695e-01, 9.37249468e-02, 5.59566677e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.30929804, 0.21762592, 0.01872946, 0.14010217, 0.58246949,
              0.49553315, 0.96697166, 0.87407472, 0.27851632, 0.94059853,
              0.38535019, 0.35874751, 0.51970419, 0.41039551, 0.84338202,
              0.07810269, 0.61479624, 0.77728351, 0.03841868, 0.84759916,
              0.03085277, 0.89199478, 0.40650443, 0.29689403, 0.35516593,
              0.34087535, 0.59447678, 0.59509287, 0.94220588, 0.48546219,
              0.17754403, 0.43799302, 0.91454137, 0.78924525, 0.57542273,
              0.36353145, 0.51047485, 0.26240913, 0.31292226, 0.44300028,
              0.09767789, 0.78175308, 0.33536905, 0.37554429, 0.34602289,
              0.0106925 , 0.91257174, 0.86479305, 0.91026396, 0.20847315,
              0.61633951, 0.80450922, 0.74059128, 0.87420742, 0.21700729,
              0.37428245, 0.38696732, 0.38473156, 0.71650121, 0.26858025,
              0.09832045, 0.47820079, 0.56615268, 0.89815082, 0.55568407,
              0.5489936 , 0.61183253, 0.44730309, 0.7139683 , 0.96262314,
              0.94266489, 0.5301218 , 0.91659898, 0.72193741, 0.67538119,
              0.31651564, 0.15785878, 0.92615297, 0.8287053 , 0.64013147,
              0.70479825, 0.14831885, 0.11042187, 0.94017861, 0.41597375,
              0.49540224, 0.90473308, 0.21617676, 0.4378603 , 0.12773844,
              0.98639597, 0.63712597, 0.31160411, 0.72779145, 0.82102369,
              0.02499957, 0.91224394, 0.8993799 , 0.16489385, 0.5893223 ])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.69017857, 0.29305863, 0.83098145, 0.12652975, 0.98007364,
              0.62943839, 0.30090637, 0.56199549, 0.14501888, 0.3575729 ,
              0.69725798, 0.61628722, 0.64930146, 0.57772168, 0.27348311,
              0.23550025, 0.77406348, 0.85642765, 0.76773202, 0.79081245,
              0.63484101, 0.68488562, 0.41492278, 0.49515434, 0.79539234,
              0.27347016, 0.01193011, 0.51695582, 0.2249447 , 0.4619935 ,
              0.12756943, 0.80676863, 0.98722171, 0.70002556, 0.64520216,
              0.12821557, 0.13377675, 0.2676852 , 0.55250425, 0.24597747,
              0.55898509, 0.27608629, 0.56017915, 0.68507785, 0.86208834,
              0.10522664, 0.24375612, 0.43335905, 0.35059678, 0.28501068,
              0.43165043, 0.39559076, 0.83467716, 0.06416109, 0.50900473,
              0.01456241, 0.29339111, 0.00913684, 0.71074765, 0.0982852 ,
              0.98199607, 0.80514417, 0.18598742, 0.98104502, 0.00255703,
              0.65567795, 0.40658082, 0.84463315, 0.1129621 , 0.01722682,
              0.74561545, 0.31683594, 0.55006665, 0.66568761, 0.45846108,
              0.99877244, 0.80270683, 0.28101712, 0.65706642, 0.79895152,
              0.3177297 , 0.77233379, 0.58992757, 0.79725413, 0.96080262,
              0.92950323, 0.34011388, 0.10707615, 0.22585695, 0.67990399,
              0.29331826, 0.3883777 , 0.30476651, 0.42010177, 0.37477313,
              0.59521941, 0.38390815, 0.96919757, 0.28647314, 0.81876863])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.76378778, 0.89954118, 0.04129054, 0.43078941, 0.20520152,
              0.82020717, 0.45671605, 0.62321602, 0.66850309, 0.72967615,
              0.78286899, 0.60577632, 0.97982826, 0.14673944, 0.3101124 ,
              0.20718171, 0.67660302, 0.77965131, 0.26436201, 0.44946305,
              0.20092893, 0.12976746, 0.96865535, 0.49980411, 0.64333914,
              0.75341605, 0.30760954, 0.0942053 , 0.11731875, 0.93248566,
              0.32185956, 0.52196249, 0.58521491, 0.26660222, 0.44934741,
              0.29335533, 0.26168185, 0.57954486, 0.32056106, 0.72444506,
              0.20802299, 0.89436335, 0.67246857, 0.83120257, 0.88456838,
              0.32246581, 0.21693405, 0.96965198, 0.12841299, 0.48943938,
              0.52875555, 0.11136266, 0.46293636, 0.42390045, 0.20614827,
              0.35874663, 0.97182408, 0.94080365, 0.69439805, 0.96508716,
              0.05252029, 0.70706307, 0.46976029, 0.28959582, 0.33748092,
              0.86358539, 0.87363594, 0.37705305, 0.20227358, 0.10018953,
              0.07487901, 0.26768131, 0.26040713, 0.87460185, 0.04880732,
              0.23243981, 0.27477917, 0.10578161, 0.98518464, 0.24096641,
              0.53323907, 0.64866435, 0.18372209, 0.39030742, 0.13262657,
              0.29409472, 0.884978  , 0.68819935, 0.08029239, 0.86782444,
              0.68417751, 0.59330591, 0.61608531, 0.23189519, 0.45162606,
              0.24939428, 0.51216849, 0.66977654, 0.7535112 , 0.63107809])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.83219266, 0.93158937, 0.61562917, 0.33772035, 0.96333614,
              0.31638927, 0.25683614, 0.54478061, 0.36552309, 0.20971113,
              0.41948484, 0.82654839, 0.96442076, 0.81361971, 0.6461019 ,
              0.96134943, 0.20556913, 0.70154078, 0.80266622, 0.9458063 ,
              0.28359936, 0.37106516, 0.26039591, 0.89547677, 0.17051616,
              0.38659233, 0.55309611, 0.89084966, 0.68890287, 0.93713413,
              0.3996173 , 0.98074157, 0.52807861, 0.94714371, 0.73436029,
              0.17916075, 0.51512763, 0.55106839, 0.98220421, 0.6621908 ,
              0.61569398, 0.81640441, 0.51065936, 0.57698829, 0.44730124,
              0.05863443, 0.17395278, 0.5514652 , 0.16926159, 0.0171073 ,
              0.72013973, 0.19970785, 0.41579466, 0.01190485, 0.02600419,
              0.67907428, 0.72421783, 0.18325497, 0.66645308, 0.40027132,
              0.83738355, 0.5547114 , 0.3016128 , 0.58149423, 0.60814203,
              0.61070386, 0.8507059 , 0.88561871, 0.21788784, 0.6425014 ,
              0.51181166, 0.33487804, 0.77354288, 0.99424161, 0.96437555,
              0.4424625 , 0.21055787, 0.4938758 , 0.80680802, 0.88136672,
              0.5494563 , 0.40229936, 0.42603129, 0.13156267, 0.15067252,
              0.37534087, 0.27655451, 0.85041195, 0.90992649, 0.63144451,
              0.98037116, 0.14274791, 0.83447297, 0.2198414 , 0.95298937,
              0.92747177, 0.18395685, 0.79182285, 0.40370628, 0.77637647])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.57511502, 0.81457169, 0.82120107, 0.71790573, 0.29768431,
              0.17393996, 0.68107207, 0.81136095, 0.75973362, 0.90830654,
              0.40255363, 0.54989502, 0.15395854, 0.03621779, 0.9004393 ,
              0.86996304, 0.85966574, 0.88145811, 0.46058494, 0.75521173,
              0.03095827, 0.57451507, 0.93486116, 0.00315579, 0.44023894,
              0.82632982, 0.0411815 , 0.01301487, 0.66546003, 0.13843045,
              0.52200674, 0.11630252, 0.67911332, 0.05764746, 0.91608983,
              0.93226717, 0.34459743, 0.82591365, 0.48106094, 0.21630864,
              0.61551066, 0.43187914, 0.30817599, 0.68273542, 0.62931647,
              0.79157543, 0.06681476, 0.79104915, 0.25251213, 0.38529152,
              0.77340808, 0.91146112, 0.93978989, 0.51768719, 0.89222504,
              0.41255107, 0.43635317, 0.93932722, 0.96589189, 0.1553985 ,
              0.04806427, 0.62062237, 0.07657349, 0.36806958, 0.94393443,
              0.0125639 , 0.11687637, 0.73590329, 0.80833552, 0.12116034,
              0.4355881 , 0.68612111, 0.56281798, 0.34522597, 0.12842366,
              0.91853664, 0.60095339, 0.29601394, 0.22303583, 0.80019137,
              0.27545632, 0.20438684, 0.19423444, 0.03162668, 0.86228521,
              0.20924969, 0.01986986, 0.16061707, 0.82803806, 0.10615275,
              0.14155115, 0.77189836, 0.4340493 , 0.26997209, 0.334859  ,
              0.12601978, 0.39011106, 0.31081695, 0.51976751, 0.31282844])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.18137463, 0.2231943 , 0.80132732, 0.93980211, 0.77618348,
              0.73068287, 0.53079658, 0.70627308, 0.70239759, 0.13259339,
              0.15447009, 0.89453188, 0.14122123, 0.55214412, 0.68250045,
              0.12609462, 0.96172765, 0.80002195, 0.7828993 , 0.56551277,
              0.3599975 , 0.10186973, 0.34718001, 0.85708629, 0.72013492,
              0.84480243, 0.43904626, 0.79535567, 0.41409279, 0.52322888,
              0.03669619, 0.79220049, 0.46948573, 0.92311073, 0.1912544 ,
              0.04370002, 0.05104533, 0.53432018, 0.3526223 , 0.67871203,
              0.75530154, 0.93110321, 0.38278318, 0.69079951, 0.86591152,
              0.85094825, 0.30973428, 0.65427239, 0.35927365, 0.32158003,
              0.06287854, 0.09542978, 0.65519911, 0.46274719, 0.75385945,
              0.873549  , 0.35500592, 0.62973829, 0.50074355, 0.31599011,
              0.89845114, 0.04382876, 0.85799319, 0.37886033, 0.6022564 ,
              0.89020515, 0.66432223, 0.8443953 , 0.19244316, 0.96850663,
              0.20667953, 0.06594662, 0.08480418, 0.82442209, 0.15277285,
              0.71184221, 0.70470322, 0.90643458, 0.92839699, 0.49511695,
              0.70750851, 0.97301847, 0.0209842 , 0.44892475, 0.24922869,
              0.32430724, 0.59390307, 0.89039169, 0.16843846, 0.70717406,
              0.14280128, 0.0148719 , 0.74124848, 0.75997645, 0.82089385,
              0.06385282, 0.57392017, 0.1780415 , 0.49387358, 0.5217876 ])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.76378778, 0.89954118, 0.04129054, 0.43078941, 0.20520152,
              0.82020717, 0.45671605, 0.62321602, 0.66850309, 0.72967615,
              0.78286899, 0.60577632, 0.97982826, 0.14673944, 0.3101124 ,
              0.20718171, 0.67660302, 0.77965131, 0.26436201, 0.44946305,
              0.20092893, 0.12976746, 0.96865535, 0.49980411, 0.64333914,
              0.75341605, 0.30760954, 0.0942053 , 0.11731875, 0.93248566,
              0.32185956, 0.52196249, 0.58521491, 0.26660222, 0.44934741,
              0.29335533, 0.26168185, 0.57954486, 0.32056106, 0.72444506,
              0.20802299, 0.89436335, 0.67246857, 0.83120257, 0.88456838,
              0.32246581, 0.21693405, 0.96965198, 0.12841299, 0.48943938,
              0.52875555, 0.11136266, 0.46293636, 0.42390045, 0.20614827,
              0.35874663, 0.97182408, 0.94080365, 0.69439805, 0.96508716,
              0.05252029, 0.70706307, 0.46976029, 0.28959582, 0.33748092,
              0.86358539, 0.87363594, 0.37705305, 0.20227358, 0.10018953,
              0.07487901, 0.26768131, 0.26040713, 0.87460185, 0.04880732,
              0.23243981, 0.27477917, 0.10578161, 0.98518464, 0.24096641,
              0.53323907, 0.64866435, 0.18372209, 0.39030742, 0.13262657,
              0.29409472, 0.884978  , 0.68819935, 0.08029239, 0.86782444,
              0.68417751, 0.59330591, 0.61608531, 0.23189519, 0.45162606,
              0.24939428, 0.51216849, 0.66977654, 0.7535112 , 0.63107809])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.83219266, 0.93158937, 0.61562917, 0.33772035, 0.96333614,
              0.31638927, 0.25683614, 0.54478061, 0.36552309, 0.20971113,
              0.41948484, 0.82654839, 0.96442076, 0.81361971, 0.6461019 ,
              0.96134943, 0.20556913, 0.70154078, 0.80266622, 0.9458063 ,
              0.28359936, 0.37106516, 0.26039591, 0.89547677, 0.17051616,
              0.38659233, 0.55309611, 0.89084966, 0.68890287, 0.93713413,
              0.3996173 , 0.98074157, 0.52807861, 0.94714371, 0.73436029,
              0.17916075, 0.51512763, 0.55106839, 0.98220421, 0.6621908 ,
              0.61569398, 0.81640441, 0.51065936, 0.57698829, 0.44730124,
              0.05863443, 0.17395278, 0.5514652 , 0.16926159, 0.0171073 ,
              0.72013973, 0.19970785, 0.41579466, 0.01190485, 0.02600419,
              0.67907428, 0.72421783, 0.18325497, 0.66645308, 0.40027132,
              0.83738355, 0.5547114 , 0.3016128 , 0.58149423, 0.60814203,
              0.61070386, 0.8507059 , 0.88561871, 0.21788784, 0.6425014 ,
              0.51181166, 0.33487804, 0.77354288, 0.99424161, 0.96437555,
              0.4424625 , 0.21055787, 0.4938758 , 0.80680802, 0.88136672,
              0.5494563 , 0.40229936, 0.42603129, 0.13156267, 0.15067252,
              0.37534087, 0.27655451, 0.85041195, 0.90992649, 0.63144451,
              0.98037116, 0.14274791, 0.83447297, 0.2198414 , 0.95298937,
              0.92747177, 0.18395685, 0.79182285, 0.40370628, 0.77637647])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.57511502, 0.81457169, 0.82120107, 0.71790573, 0.29768431,
              0.17393996, 0.68107207, 0.81136095, 0.75973362, 0.90830654,
              0.40255363, 0.54989502, 0.15395854, 0.03621779, 0.9004393 ,
              0.86996304, 0.85966574, 0.88145811, 0.46058494, 0.75521173,
              0.03095827, 0.57451507, 0.93486116, 0.00315579, 0.44023894,
              0.82632982, 0.0411815 , 0.01301487, 0.66546003, 0.13843045,
              0.52200674, 0.11630252, 0.67911332, 0.05764746, 0.91608983,
              0.93226717, 0.34459743, 0.82591365, 0.48106094, 0.21630864,
              0.61551066, 0.43187914, 0.30817599, 0.68273542, 0.62931647,
              0.79157543, 0.06681476, 0.79104915, 0.25251213, 0.38529152,
              0.77340808, 0.91146112, 0.93978989, 0.51768719, 0.89222504,
              0.41255107, 0.43635317, 0.93932722, 0.96589189, 0.1553985 ,
              0.04806427, 0.62062237, 0.07657349, 0.36806958, 0.94393443,
              0.0125639 , 0.11687637, 0.73590329, 0.80833552, 0.12116034,
              0.4355881 , 0.68612111, 0.56281798, 0.34522597, 0.12842366,
              0.91853664, 0.60095339, 0.29601394, 0.22303583, 0.80019137,
              0.27545632, 0.20438684, 0.19423444, 0.03162668, 0.86228521,
              0.20924969, 0.01986986, 0.16061707, 0.82803806, 0.10615275,
              0.14155115, 0.77189836, 0.4340493 , 0.26997209, 0.334859  ,
              0.12601978, 0.39011106, 0.31081695, 0.51976751, 0.31282844])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.89067765, 0.1151818 , 0.51907595, 0.37857646, 0.89445201,
              0.56117702, 0.21923088, 0.14241666, 0.89180659, 0.38013211,
              0.52557299, 0.41988572, 0.97670287, 0.44389891, 0.70577961,
              0.02986867, 0.85336945, 0.92672831, 0.57724868, 0.36371779,
              0.84029186, 0.99812357, 0.35556074, 0.26996408, 0.56691104,
              0.31322009, 0.00724279, 0.63040546, 0.89067464, 0.03765125,
              0.20497696, 0.21840518, 0.55408702, 0.98613488, 0.7342301 ,
              0.13067253, 0.39255716, 0.68257773, 0.86197396, 0.43590482,
              0.51024797, 0.51712359, 0.8162871 , 0.04305742, 0.48315559,
              0.21038874, 0.155218  , 0.79952007, 0.73543015, 0.74815237,
              0.81712442, 0.21364288, 0.07140444, 0.67886034, 0.33384874,
              0.93616918, 0.57746064, 0.63264731, 0.01788807, 0.5314354 ,
              0.40554536, 0.47794265, 0.14870345, 0.94951372, 0.52870579,
              0.16205142, 0.59091887, 0.61649121, 0.33235531, 0.44254393,
              0.8289977 , 0.80022265, 0.52678756, 0.2711252 , 0.24321773,
              0.39391946, 0.91993197, 0.3670999 , 0.32936227, 0.95642764,
              0.2638068 , 0.3862068 , 0.47535936, 0.48542953, 0.93447536,
              0.62148237, 0.06240807, 0.24496981, 0.24367162, 0.92351634,
              0.86144837, 0.56477345, 0.86213785, 0.72034196, 0.49205661,
              0.7168778 , 0.2603197 , 0.04102719, 0.54629722, 0.56688164])}]]


