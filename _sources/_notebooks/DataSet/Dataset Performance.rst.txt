
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='6f361b2d-24bf-4908-b642-45ca88d32ccc'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='4e83a879-3853-46ef-b24c-413480fc9419'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.638099851129341],
     [0.759331836439296],
     [0.0975583846754018],
     [0.921973403600473],
     [0.499514954854479],
     [0.447956975059633],
     [0.961933693177035],
     [0.150794919827395],
     [0.488309198390207],
     [0.677957351184158],
     [0.0503869057636506],
     [0.476562734715692],
     [0.202627938631405],
     [0.482721823327563],
     [0.330420753289546],
     [0.514019644086502],
     [0.414610657417109],
     [0.0646802290674048],
     [0.522065778772584],
     [0.570923024679669],
     [0.808911426602579],
     [0.983991681879736],
     [0.187086845393187],
     [0.0580703729508206],
     [0.218791308577588],
     [0.582789715062628],
     [0.353302419128252],
     [0.496728445739827],
     [0.142366219493437],
     [0.31246009736342],
     [0.561564674439032],
     [0.253986468195095],
     [0.918626835194228],
     [0.263069222759336],
     [0.25107505755538],
     [0.553116625226556],
     [0.0254555738174536],
     [0.348251116090448],
     [0.940877138579595],
     [0.319574904765175],
     [0.482066090783527],
     [0.0701767165255405],
     [0.201632875258892],
     [0.768630217248261],
     [0.872934691210852],
     [0.954417765759604],
     [0.00039389094218556],
     [0.7366076879004],
     [0.771958549327315],
     [0.791363958572091],
     [0.495807377793317],
     [0.343807142727352],
     [0.62773492659373],
     [0.894574256758935],
     [0.673150343788961],
     [0.0586318299676568],
     [0.98180572209465],
     [0.985497144314359],
     [0.48332033222388],
     [0.182974542242061],
     [0.728252543464129],
     [0.962197096010854],
     [0.131434954718045],
     [0.609446852108814],
     [0.809289652785647],
     [0.125168311953443],
     [0.983075584803372],
     [0.227014360943479],
     [0.373387255487083],
     [0.672079189319165],
     [0.557699469864389],
     [0.633240017417527],
     [0.517458113765136],
     [0.271740494563697],
     [0.237018032272636],
     [0.203290491646891],
     [0.875476133254579],
     [0.659461790214303],
     [0.146793131000932],
     [0.46409850736655],
     [0.355097977990737],
     [0.0671771482552924],
     [0.635034923589825],
     [0.141756288096524],
     [0.0174026498664692],
     [0.740935171427415],
     [0.0410102536831604],
     [0.702742156001529],
     [0.541372396704069],
     [0.886319884665456],
     [0.0594257583893006],
     [0.604341684568397],
     [0.109879956639817],
     [0.916857160746541],
     [0.956070379135361],
     [0.769639988806001],
     [0.0335835902376371],
     [0.851413715794786],
     [0.708383660809987],
     [0.355219178707248]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.2119847])],
     [array([ 0.51542667])],
     [array([ 0.41746889])],
     [array([ 0.33672232])],
     [array([ 0.49183645])],
     [array([ 0.78222384])],
     [array([ 0.87893085])],
     [array([ 0.30374536])],
     [array([ 0.37800799])],
     [array([ 0.38103551])],
     [array([ 0.62140084])],
     [array([ 0.66436655])],
     [array([ 0.52346528])],
     [array([ 0.03215542])],
     [array([ 0.32851032])],
     [array([ 0.5783899])],
     [array([ 0.75375158])],
     [array([ 0.90265626])],
     [array([ 0.4214148])],
     [array([ 0.64639749])],
     [array([ 0.15245373])],
     [array([ 0.16910521])],
     [array([ 0.7444888])],
     [array([ 0.42574797])],
     [array([ 0.99725939])],
     [array([ 0.65368448])],
     [array([ 0.52569342])],
     [array([ 0.67936776])],
     [array([ 0.47570424])],
     [array([ 0.58650583])],
     [array([ 0.75554201])],
     [array([ 0.5641775])],
     [array([ 0.77218952])],
     [array([ 0.69306913])],
     [array([ 0.40420981])],
     [array([ 0.6697571])],
     [array([ 0.81070378])],
     [array([ 0.18346356])],
     [array([ 0.06000107])],
     [array([ 0.33630503])],
     [array([ 0.02015839])],
     [array([ 0.32294299])],
     [array([ 0.09495223])],
     [array([ 0.90687349])],
     [array([ 0.19414698])],
     [array([ 0.52565924])],
     [array([ 0.45226215])],
     [array([ 0.24763786])],
     [array([ 0.02212242])],
     [array([ 0.32775192])],
     [array([ 0.66545431])],
     [array([ 0.59162818])],
     [array([ 0.78057396])],
     [array([ 0.12748529])],
     [array([ 0.71968767])],
     [array([ 0.71029742])],
     [array([ 0.9433969])],
     [array([ 0.55078053])],
     [array([ 0.34024648])],
     [array([ 0.36619342])],
     [array([ 0.55004924])],
     [array([ 0.56565569])],
     [array([ 0.91377483])],
     [array([ 0.7226127])],
     [array([ 0.51326534])],
     [array([ 0.15138399])],
     [array([ 0.81691687])],
     [array([ 0.02381177])],
     [array([ 0.04947954])],
     [array([ 0.48039721])],
     [array([ 0.2403467])],
     [array([ 0.54915713])],
     [array([ 0.28926903])],
     [array([ 0.63668047])],
     [array([ 0.54901251])],
     [array([ 0.03735447])],
     [array([ 0.23225585])],
     [array([ 0.64540899])],
     [array([ 0.32568041])],
     [array([ 0.79647298])],
     [array([ 0.1427245])],
     [array([ 0.53482345])],
     [array([ 0.35761576])],
     [array([ 0.64820047])],
     [array([ 0.28653294])],
     [array([ 0.96557814])],
     [array([ 0.8073086])],
     [array([ 0.19446652])],
     [array([ 0.36937451])],
     [array([ 0.3625857])],
     [array([ 0.68552884])],
     [array([ 0.59373943])],
     [array([ 0.3532523])],
     [array([ 0.50141723])],
     [array([ 0.69458679])],
     [array([ 0.22936585])],
     [array([ 0.57600967])],
     [array([ 0.88329364])],
     [array([ 0.21317168])],
     [array([ 0.92381457])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.2119847 ,  0.51542667,  0.41746889,  0.33672232,  0.49183645,
            0.78222384,  0.87893085,  0.30374536,  0.37800799,  0.38103551,
            0.62140084,  0.66436655,  0.52346528,  0.03215542,  0.32851032,
            0.5783899 ,  0.75375158,  0.90265626,  0.4214148 ,  0.64639749,
            0.15245373,  0.16910521,  0.7444888 ,  0.42574797,  0.99725939,
            0.65368448,  0.52569342,  0.67936776,  0.47570424,  0.58650583,
            0.75554201,  0.5641775 ,  0.77218952,  0.69306913,  0.40420981,
            0.6697571 ,  0.81070378,  0.18346356,  0.06000107,  0.33630503,
            0.02015839,  0.32294299,  0.09495223,  0.90687349,  0.19414698,
            0.52565924,  0.45226215,  0.24763786,  0.02212242,  0.32775192,
            0.66545431,  0.59162818,  0.78057396,  0.12748529,  0.71968767,
            0.71029742,  0.9433969 ,  0.55078053,  0.34024648,  0.36619342,
            0.55004924,  0.56565569,  0.91377483,  0.7226127 ,  0.51326534,
            0.15138399,  0.81691687,  0.02381177,  0.04947954,  0.48039721,
            0.2403467 ,  0.54915713,  0.28926903,  0.63668047,  0.54901251,
            0.03735447,  0.23225585,  0.64540899,  0.32568041,  0.79647298,
            0.1427245 ,  0.53482345,  0.35761576,  0.64820047,  0.28653294,
            0.96557814,  0.8073086 ,  0.19446652,  0.36937451,  0.3625857 ,
            0.68552884,  0.59373943,  0.3532523 ,  0.50141723,  0.69458679,
            0.22936585,  0.57600967,  0.88329364,  0.21317168,  0.92381457])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  6.38099851e-01,   7.59331836e-01,   9.75583847e-02,
                9.21973404e-01,   4.99514955e-01,   4.47956975e-01,
                9.61933693e-01,   1.50794920e-01,   4.88309198e-01,
                6.77957351e-01,   5.03869058e-02,   4.76562735e-01,
                2.02627939e-01,   4.82721823e-01,   3.30420753e-01,
                5.14019644e-01,   4.14610657e-01,   6.46802291e-02,
                5.22065779e-01,   5.70923025e-01,   8.08911427e-01,
                9.83991682e-01,   1.87086845e-01,   5.80703730e-02,
                2.18791309e-01,   5.82789715e-01,   3.53302419e-01,
                4.96728446e-01,   1.42366219e-01,   3.12460097e-01,
                5.61564674e-01,   2.53986468e-01,   9.18626835e-01,
                2.63069223e-01,   2.51075058e-01,   5.53116625e-01,
                2.54555738e-02,   3.48251116e-01,   9.40877139e-01,
                3.19574905e-01,   4.82066091e-01,   7.01767165e-02,
                2.01632875e-01,   7.68630217e-01,   8.72934691e-01,
                9.54417766e-01,   3.93890942e-04,   7.36607688e-01,
                7.71958549e-01,   7.91363959e-01,   4.95807378e-01,
                3.43807143e-01,   6.27734927e-01,   8.94574257e-01,
                6.73150344e-01,   5.86318300e-02,   9.81805722e-01,
                9.85497144e-01,   4.83320332e-01,   1.82974542e-01,
                7.28252543e-01,   9.62197096e-01,   1.31434955e-01,
                6.09446852e-01,   8.09289653e-01,   1.25168312e-01,
                9.83075585e-01,   2.27014361e-01,   3.73387255e-01,
                6.72079189e-01,   5.57699470e-01,   6.33240017e-01,
                5.17458114e-01,   2.71740495e-01,   2.37018032e-01,
                2.03290492e-01,   8.75476133e-01,   6.59461790e-01,
                1.46793131e-01,   4.64098507e-01,   3.55097978e-01,
                6.71771483e-02,   6.35034924e-01,   1.41756288e-01,
                1.74026499e-02,   7.40935171e-01,   4.10102537e-02,
                7.02742156e-01,   5.41372397e-01,   8.86319885e-01,
                5.94257584e-02,   6.04341685e-01,   1.09879957e-01,
                9.16857161e-01,   9.56070379e-01,   7.69639989e-01,
                3.35835902e-02,   8.51413716e-01,   7.08383661e-01,
                3.55219179e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.84298586,  0.4062938 ,  0.74138048,  0.56570761,  0.56947097,
               0.18942136,  0.4232422 ,  0.15276962,  0.66607213,  0.36227997,
               0.34584716,  0.7651799 ,  0.14843971,  0.46586067,  0.2580152 ,
               0.19606572,  0.20871093,  0.90628186,  0.8558334 ,  0.03036561,
               0.31750695,  0.49505761,  0.41287003,  0.69401184,  0.12482616,
               0.39221194,  0.57650856,  0.15853844,  0.50964673,  0.4454477 ,
               0.82143822,  0.39118773,  0.9361573 ,  0.69900546,  0.35361219,
               0.72985754,  0.86572825,  0.24621547,  0.63776277,  0.2123661 ,
               0.83467324,  0.5147381 ,  0.11607991,  0.7666335 ,  0.58140864,
               0.45104359,  0.50382415,  0.4399169 ,  0.04136845,  0.91682225,
               0.07862378,  0.45806406,  0.17981349,  0.30237532,  0.67563458,
               0.46509525,  0.35301252,  0.04811321,  0.74239028,  0.92559956,
               0.32549186,  0.65782592,  0.002547  ,  0.87368887,  0.10360461,
               0.92383822,  0.17473444,  0.6210541 ,  0.54327178,  0.8236603 ,
               0.00682835,  0.94728608,  0.37534848,  0.19396151,  0.5792447 ,
               0.68901916,  0.65835854,  0.38081874,  0.72946295,  0.48428701,
               0.38561102,  0.17302469,  0.23511416,  0.02317772,  0.32420351,
               0.82274526,  0.86049599,  0.72044907,  0.82908066,  0.61945676,
               0.37288493,  0.35400738,  0.38326876,  0.03103946,  0.10120521,
               0.41040129,  0.08032277,  0.10776109,  0.26584842,  0.88088995])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.34754736,  0.83559562,  0.66103472,  0.46151763,  0.74725622,
               0.0813217 ,  0.84687499,  0.40885731,  0.24326062,  0.36105713,
               0.9310192 ,  0.89426277,  0.84849141,  0.27043871,  0.26164831,
               0.84223842,  0.40289837,  0.79850157,  0.16142516,  0.49313757,
               0.90715331,  0.26330733,  0.42110487,  0.23635031,  0.04862965,
               0.89970899,  0.97087397,  0.4211022 ,  0.1814219 ,  0.05155168,
               0.80176859,  0.22513339,  0.64034186,  0.07292765,  0.19520025,
               0.36388469,  0.6072484 ,  0.65212787,  0.79626045,  0.89162368,
               0.74587797,  0.85692396,  0.04819003,  0.43498348,  0.52866702,
               0.57231435,  0.93621414,  0.818004  ,  0.05724858,  0.80692252,
               0.00830783,  0.32434539,  0.66721391,  0.65372467,  0.88183384,
               0.05957459,  0.34604806,  0.68168779,  0.64425902,  0.41993905,
               0.37076732,  0.33367944,  0.9242231 ,  0.22045868,  0.32296879,
               0.80069828,  0.3908916 ,  0.65865634,  0.8458827 ,  0.67735012,
               0.15821525,  0.96660005,  0.42639991,  0.01480199,  0.00364044,
               0.82502411,  0.6945248 ,  0.82808478,  0.5899369 ,  0.7245209 ,
               0.37576557,  0.55039098,  0.8707209 ,  0.73619234,  0.49774939,
               0.26840459,  0.93408323,  0.72754615,  0.21888112,  0.69388192,
               0.55955947,  0.80660002,  0.07945773,  0.20612224,  0.50513245,
               0.04435377,  0.10285215,  0.89205466,  0.79129852,  0.89752051])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.84440615,  0.24495634,  0.18002909,  0.45440768,  0.27981745,
               0.10877144,  0.2175404 ,  0.98354771,  0.63959432,  0.57624742,
               0.43275151,  0.60719935,  0.36087915,  0.6101406 ,  0.26549611,
               0.96398061,  0.10365973,  0.28827365,  0.25710474,  0.01844193,
               0.34237183,  0.9475374 ,  0.6610261 ,  0.07114321,  0.92128009,
               0.88390505,  0.41934314,  0.50367317,  0.91277604,  0.26603595,
               0.53595324,  0.02430939,  0.60214428,  0.88623706,  0.28201198,
               0.46436558,  0.5150089 ,  0.40949214,  0.29806515,  0.17333232,
               0.82687122,  0.97281216,  0.04906723,  0.58716055,  0.05892543,
               0.00335161,  0.53235175,  0.29435645,  0.18169485,  0.93889359,
               0.38168508,  0.681636  ,  0.93741454,  0.36137232,  0.61085939,
               0.91671789,  0.9824539 ,  0.65915033,  0.68647828,  0.55063551,
               0.62094947,  0.65248731,  0.22811959,  0.46307346,  0.08718819,
               0.84264739,  0.02794805,  0.11815514,  0.64608603,  0.98427676,
               0.97119825,  0.10083485,  0.49549582,  0.8147987 ,  0.52249743,
               0.85039744,  0.21568984,  0.06490634,  0.18288473,  0.56969404,
               0.32894234,  0.66845235,  0.54236165,  0.27138253,  0.08749534,
               0.38689327,  0.56008271,  0.18326678,  0.65083678,  0.51464682,
               0.76526826,  0.03150607,  0.85295115,  0.1906826 ,  0.69690097,
               0.00241803,  0.92844502,  0.85784241,  0.8790229 ,  0.80396687])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  6.38099851e-01,   7.59331836e-01,   9.75583847e-02,
                9.21973404e-01,   4.99514955e-01,   4.47956975e-01,
                9.61933693e-01,   1.50794920e-01,   4.88309198e-01,
                6.77957351e-01,   5.03869058e-02,   4.76562735e-01,
                2.02627939e-01,   4.82721823e-01,   3.30420753e-01,
                5.14019644e-01,   4.14610657e-01,   6.46802291e-02,
                5.22065779e-01,   5.70923025e-01,   8.08911427e-01,
                9.83991682e-01,   1.87086845e-01,   5.80703730e-02,
                2.18791309e-01,   5.82789715e-01,   3.53302419e-01,
                4.96728446e-01,   1.42366219e-01,   3.12460097e-01,
                5.61564674e-01,   2.53986468e-01,   9.18626835e-01,
                2.63069223e-01,   2.51075058e-01,   5.53116625e-01,
                2.54555738e-02,   3.48251116e-01,   9.40877139e-01,
                3.19574905e-01,   4.82066091e-01,   7.01767165e-02,
                2.01632875e-01,   7.68630217e-01,   8.72934691e-01,
                9.54417766e-01,   3.93890942e-04,   7.36607688e-01,
                7.71958549e-01,   7.91363959e-01,   4.95807378e-01,
                3.43807143e-01,   6.27734927e-01,   8.94574257e-01,
                6.73150344e-01,   5.86318300e-02,   9.81805722e-01,
                9.85497144e-01,   4.83320332e-01,   1.82974542e-01,
                7.28252543e-01,   9.62197096e-01,   1.31434955e-01,
                6.09446852e-01,   8.09289653e-01,   1.25168312e-01,
                9.83075585e-01,   2.27014361e-01,   3.73387255e-01,
                6.72079189e-01,   5.57699470e-01,   6.33240017e-01,
                5.17458114e-01,   2.71740495e-01,   2.37018032e-01,
                2.03290492e-01,   8.75476133e-01,   6.59461790e-01,
                1.46793131e-01,   4.64098507e-01,   3.55097978e-01,
                6.71771483e-02,   6.35034924e-01,   1.41756288e-01,
                1.74026499e-02,   7.40935171e-01,   4.10102537e-02,
                7.02742156e-01,   5.41372397e-01,   8.86319885e-01,
                5.94257584e-02,   6.04341685e-01,   1.09879957e-01,
                9.16857161e-01,   9.56070379e-01,   7.69639989e-01,
                3.35835902e-02,   8.51413716e-01,   7.08383661e-01,
                3.55219179e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.84298586,  0.4062938 ,  0.74138048,  0.56570761,  0.56947097,
               0.18942136,  0.4232422 ,  0.15276962,  0.66607213,  0.36227997,
               0.34584716,  0.7651799 ,  0.14843971,  0.46586067,  0.2580152 ,
               0.19606572,  0.20871093,  0.90628186,  0.8558334 ,  0.03036561,
               0.31750695,  0.49505761,  0.41287003,  0.69401184,  0.12482616,
               0.39221194,  0.57650856,  0.15853844,  0.50964673,  0.4454477 ,
               0.82143822,  0.39118773,  0.9361573 ,  0.69900546,  0.35361219,
               0.72985754,  0.86572825,  0.24621547,  0.63776277,  0.2123661 ,
               0.83467324,  0.5147381 ,  0.11607991,  0.7666335 ,  0.58140864,
               0.45104359,  0.50382415,  0.4399169 ,  0.04136845,  0.91682225,
               0.07862378,  0.45806406,  0.17981349,  0.30237532,  0.67563458,
               0.46509525,  0.35301252,  0.04811321,  0.74239028,  0.92559956,
               0.32549186,  0.65782592,  0.002547  ,  0.87368887,  0.10360461,
               0.92383822,  0.17473444,  0.6210541 ,  0.54327178,  0.8236603 ,
               0.00682835,  0.94728608,  0.37534848,  0.19396151,  0.5792447 ,
               0.68901916,  0.65835854,  0.38081874,  0.72946295,  0.48428701,
               0.38561102,  0.17302469,  0.23511416,  0.02317772,  0.32420351,
               0.82274526,  0.86049599,  0.72044907,  0.82908066,  0.61945676,
               0.37288493,  0.35400738,  0.38326876,  0.03103946,  0.10120521,
               0.41040129,  0.08032277,  0.10776109,  0.26584842,  0.88088995])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.34754736,  0.83559562,  0.66103472,  0.46151763,  0.74725622,
               0.0813217 ,  0.84687499,  0.40885731,  0.24326062,  0.36105713,
               0.9310192 ,  0.89426277,  0.84849141,  0.27043871,  0.26164831,
               0.84223842,  0.40289837,  0.79850157,  0.16142516,  0.49313757,
               0.90715331,  0.26330733,  0.42110487,  0.23635031,  0.04862965,
               0.89970899,  0.97087397,  0.4211022 ,  0.1814219 ,  0.05155168,
               0.80176859,  0.22513339,  0.64034186,  0.07292765,  0.19520025,
               0.36388469,  0.6072484 ,  0.65212787,  0.79626045,  0.89162368,
               0.74587797,  0.85692396,  0.04819003,  0.43498348,  0.52866702,
               0.57231435,  0.93621414,  0.818004  ,  0.05724858,  0.80692252,
               0.00830783,  0.32434539,  0.66721391,  0.65372467,  0.88183384,
               0.05957459,  0.34604806,  0.68168779,  0.64425902,  0.41993905,
               0.37076732,  0.33367944,  0.9242231 ,  0.22045868,  0.32296879,
               0.80069828,  0.3908916 ,  0.65865634,  0.8458827 ,  0.67735012,
               0.15821525,  0.96660005,  0.42639991,  0.01480199,  0.00364044,
               0.82502411,  0.6945248 ,  0.82808478,  0.5899369 ,  0.7245209 ,
               0.37576557,  0.55039098,  0.8707209 ,  0.73619234,  0.49774939,
               0.26840459,  0.93408323,  0.72754615,  0.21888112,  0.69388192,
               0.55955947,  0.80660002,  0.07945773,  0.20612224,  0.50513245,
               0.04435377,  0.10285215,  0.89205466,  0.79129852,  0.89752051])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.43351939,  0.64517023,  0.44352827,  0.74237019,  0.74582042,
               0.85963784,  0.67467901,  0.07287447,  0.2819658 ,  0.22682893,
               0.05397905,  0.08003541,  0.00234558,  0.53422991,  0.66763807,
               0.64583459,  0.54975485,  0.02931509,  0.48315374,  0.95737024,
               0.26374701,  0.59595108,  0.18216534,  0.2822124 ,  0.41345356,
               0.55412619,  0.65075414,  0.93938027,  0.81876265,  0.17144587,
               0.18268008,  0.10985548,  0.50223005,  0.08369463,  0.39948383,
               0.60797371,  0.06426898,  0.60642464,  0.63003303,  0.56299966,
               0.25545728,  0.8809207 ,  0.96388474,  0.3009234 ,  0.55168958,
               0.6342027 ,  0.6524536 ,  0.89047628,  0.15597908,  0.05198727,
               0.03688936,  0.71303367,  0.60499601,  0.64452108,  0.68141855,
               0.30571858,  0.1790974 ,  0.96639241,  0.67075584,  0.70076106,
               0.64375231,  0.58530237,  0.564258  ,  0.88921634,  0.34272517,
               0.36902018,  0.93516279,  0.79777011,  0.02807602,  0.68268285,
               0.3112544 ,  0.25670731,  0.62367367,  0.96878078,  0.70500763,
               0.44939655,  0.68457485,  0.94142791,  0.54723021,  0.40181953,
               0.78635551,  0.10888901,  0.72349513,  0.75412113,  0.90974522,
               0.26379791,  0.7156776 ,  0.33955935,  0.83229964,  0.53437256,
               0.76983167,  0.66319112,  0.4704595 ,  0.56470563,  0.74106137,
               0.28821163,  0.22844364,  0.27632229,  0.10675974,  0.59494659])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.2119847 ,  0.51542667,  0.41746889,  0.33672232,  0.49183645,
               0.78222384,  0.87893085,  0.30374536,  0.37800799,  0.38103551,
               0.62140084,  0.66436655,  0.52346528,  0.03215542,  0.32851032,
               0.5783899 ,  0.75375158,  0.90265626,  0.4214148 ,  0.64639749,
               0.15245373,  0.16910521,  0.7444888 ,  0.42574797,  0.99725939,
               0.65368448,  0.52569342,  0.67936776,  0.47570424,  0.58650583,
               0.75554201,  0.5641775 ,  0.77218952,  0.69306913,  0.40420981,
               0.6697571 ,  0.81070378,  0.18346356,  0.06000107,  0.33630503,
               0.02015839,  0.32294299,  0.09495223,  0.90687349,  0.19414698,
               0.52565924,  0.45226215,  0.24763786,  0.02212242,  0.32775192,
               0.66545431,  0.59162818,  0.78057396,  0.12748529,  0.71968767,
               0.71029742,  0.9433969 ,  0.55078053,  0.34024648,  0.36619342,
               0.55004924,  0.56565569,  0.91377483,  0.7226127 ,  0.51326534,
               0.15138399,  0.81691687,  0.02381177,  0.04947954,  0.48039721,
               0.2403467 ,  0.54915713,  0.28926903,  0.63668047,  0.54901251,
               0.03735447,  0.23225585,  0.64540899,  0.32568041,  0.79647298,
               0.1427245 ,  0.53482345,  0.35761576,  0.64820047,  0.28653294,
               0.96557814,  0.8073086 ,  0.19446652,  0.36937451,  0.3625857 ,
               0.68552884,  0.59373943,  0.3532523 ,  0.50141723,  0.69458679,
               0.22936585,  0.57600967,  0.88329364,  0.21317168,  0.92381457])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([  8.45747465e-01,   1.88367963e-01,   2.45750781e-01,
                5.28729094e-02,   5.62191080e-01,   1.14126910e-01,
                7.27123449e-01,   1.33424791e-01,   7.22101878e-01,
                4.66835915e-04,   9.37545994e-01,   8.39665972e-01,
                8.58898796e-02,   1.58541050e-01,   8.01863323e-01,
                6.76022663e-01,   1.20057502e-01,   8.95906437e-01,
                4.62967620e-01,   7.82165359e-01,   5.09244193e-01,
                9.57084310e-01,   9.85242333e-01,   5.98686452e-01,
                6.22820763e-01,   9.33305671e-01,   7.36232944e-01,
                9.89227905e-01,   3.87627255e-01,   1.46216163e-01,
                6.44944825e-01,   9.19141004e-01,   9.09558545e-01,
                7.57273518e-01,   8.21734763e-01,   6.26073109e-01,
                9.52398484e-01,   3.45385873e-01,   3.75512576e-01,
                4.93237095e-01,   8.03377183e-01,   3.14284397e-01,
                1.06289026e-01,   7.50328856e-01,   5.47622699e-01,
                8.20107932e-01,   5.88342111e-01,   3.67198239e-01,
                4.57736106e-01,   8.22744915e-01,   5.28036304e-01,
                9.05316806e-01,   3.11422861e-01,   9.81622977e-01,
                9.83990572e-01,   5.57237673e-01,   5.15965476e-01,
                8.29739854e-01,   1.35735018e-01,   2.59583468e-01,
                1.67610889e-01,   4.07036586e-01,   9.00815661e-01,
                9.17269984e-01,   3.09285294e-01,   3.86887809e-01,
                3.27860240e-01,   5.04622083e-01,   3.44919237e-02,
                7.93213986e-01,   1.00350609e-01,   3.02193169e-01,
                3.65097826e-02,   9.74047188e-01,   9.20422841e-02,
                3.54571557e-01,   3.67294185e-01,   1.35090541e-02,
                6.75132101e-02,   9.98060261e-01,   9.00149468e-01,
                5.44206208e-02,   6.01361404e-01,   9.87797437e-01,
                8.78423274e-01,   3.08907677e-01,   2.79302129e-01,
                8.96231085e-01,   9.81295985e-01,   1.39321818e-01,
                3.04952799e-01,   7.58393468e-01,   3.00624189e-01,
                1.90895237e-01,   5.35113927e-01,   6.27270077e-01,
                9.04411711e-01,   9.02611189e-01,   3.98017312e-01,
                5.66927813e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([  7.33557731e-01,   1.66595952e-01,   9.36759003e-01,
                8.76715404e-01,   2.35099393e-01,   3.04099412e-01,
                9.78180868e-01,   1.22873435e-02,   7.37797039e-01,
                8.65756819e-01,   2.51677116e-01,   7.32747924e-01,
                8.52191967e-01,   6.18013540e-01,   7.64022107e-03,
                2.34381448e-01,   1.89343227e-01,   7.60772458e-01,
                4.37784314e-01,   8.24196208e-01,   8.66157759e-01,
                5.89901009e-01,   5.41713608e-01,   1.12148016e-01,
                1.46549221e-01,   5.24052700e-01,   9.75556301e-01,
                8.41829534e-01,   8.04393315e-01,   6.93984477e-01,
                2.81669885e-03,   1.10581743e-01,   1.76721782e-01,
                4.72995364e-01,   1.47727825e-01,   8.36460900e-01,
                4.12881978e-02,   2.89413828e-03,   1.38740628e-01,
                9.34186708e-01,   9.08744296e-01,   6.28993732e-01,
                5.20151339e-02,   2.91976911e-01,   1.67567278e-02,
                4.70635946e-01,   4.17697828e-01,   8.60352612e-01,
                5.97878133e-01,   2.70247584e-01,   2.85075060e-01,
                9.81574916e-01,   2.88855200e-02,   8.92707980e-01,
                3.29500838e-01,   9.82508880e-01,   6.85045905e-01,
                7.09546829e-01,   8.64084414e-01,   1.27551880e-01,
                6.69652208e-01,   5.31829430e-01,   1.86541570e-01,
                2.29490550e-01,   7.36552497e-01,   8.07914267e-01,
                5.80106079e-01,   7.06890252e-01,   6.13066384e-01,
                3.06284039e-01,   5.82702963e-01,   1.03889166e-01,
                8.05589110e-01,   6.10720887e-01,   6.81609872e-01,
                7.95330119e-01,   5.88804534e-01,   7.63924500e-06,
                6.12994892e-01,   1.07299865e-01,   4.18917934e-01,
                6.98751029e-01,   1.51672340e-01,   9.66674769e-01,
                3.64651469e-01,   4.25029060e-01,   6.50987530e-01,
                4.24070174e-01,   3.10834862e-01,   9.77547058e-01,
                5.51949446e-01,   9.52608501e-01,   6.31823040e-01,
                4.01923894e-01,   6.47238868e-01,   8.30222630e-01,
                2.19836733e-01,   8.15768730e-01,   6.29306817e-01,
                9.81112098e-01])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.63394968,  0.54080518,  0.08481252,  0.51955897,  0.75320752,
               0.49017003,  0.41396061,  0.44967754,  0.31950465,  0.6095263 ,
               0.9687421 ,  0.03682131,  0.47423519,  0.55291464,  0.72749659,
               0.94207312,  0.19649027,  0.70852465,  0.4442655 ,  0.01447996,
               0.49494987,  0.40723564,  0.01429735,  0.66923581,  0.68123505,
               0.51201187,  0.60326556,  0.74667904,  0.75223243,  0.27269933,
               0.44339892,  0.6732274 ,  0.54032875,  0.84895339,  0.31997819,
               0.4321923 ,  0.3403811 ,  0.58698603,  0.41562878,  0.99580456,
               0.6556831 ,  0.80972728,  0.62962853,  0.64607712,  0.14070946,
               0.78937227,  0.04198197,  0.89394103,  0.36500905,  0.36915759,
               0.50012698,  0.91195626,  0.39872185,  0.74452926,  0.79514069,
               0.86024125,  0.58696149,  0.73496059,  0.5680967 ,  0.64012035,
               0.23510595,  0.84568957,  0.78983428,  0.76928498,  0.3163931 ,
               0.85158247,  0.78102828,  0.77017118,  0.54417351,  0.26454444,
               0.98944742,  0.03968285,  0.75494017,  0.12027638,  0.31769887,
               0.4180352 ,  0.33224831,  0.20158842,  0.58646558,  0.35467573,
               0.62404225,  0.3799616 ,  0.43800364,  0.61089252,  0.62379108,
               0.3970628 ,  0.30943755,  0.03265717,  0.70783898,  0.27533564,
               0.57776237,  0.41789699,  0.93176344,  0.92785372,  0.1913683 ,
               0.21624807,  0.08275466,  0.23386839,  0.76335445,  0.66000571])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.2119847 ,  0.51542667,  0.41746889,  0.33672232,  0.49183645,
               0.78222384,  0.87893085,  0.30374536,  0.37800799,  0.38103551,
               0.62140084,  0.66436655,  0.52346528,  0.03215542,  0.32851032,
               0.5783899 ,  0.75375158,  0.90265626,  0.4214148 ,  0.64639749,
               0.15245373,  0.16910521,  0.7444888 ,  0.42574797,  0.99725939,
               0.65368448,  0.52569342,  0.67936776,  0.47570424,  0.58650583,
               0.75554201,  0.5641775 ,  0.77218952,  0.69306913,  0.40420981,
               0.6697571 ,  0.81070378,  0.18346356,  0.06000107,  0.33630503,
               0.02015839,  0.32294299,  0.09495223,  0.90687349,  0.19414698,
               0.52565924,  0.45226215,  0.24763786,  0.02212242,  0.32775192,
               0.66545431,  0.59162818,  0.78057396,  0.12748529,  0.71968767,
               0.71029742,  0.9433969 ,  0.55078053,  0.34024648,  0.36619342,
               0.55004924,  0.56565569,  0.91377483,  0.7226127 ,  0.51326534,
               0.15138399,  0.81691687,  0.02381177,  0.04947954,  0.48039721,
               0.2403467 ,  0.54915713,  0.28926903,  0.63668047,  0.54901251,
               0.03735447,  0.23225585,  0.64540899,  0.32568041,  0.79647298,
               0.1427245 ,  0.53482345,  0.35761576,  0.64820047,  0.28653294,
               0.96557814,  0.8073086 ,  0.19446652,  0.36937451,  0.3625857 ,
               0.68552884,  0.59373943,  0.3532523 ,  0.50141723,  0.69458679,
               0.22936585,  0.57600967,  0.88329364,  0.21317168,  0.92381457])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([  8.45747465e-01,   1.88367963e-01,   2.45750781e-01,
                5.28729094e-02,   5.62191080e-01,   1.14126910e-01,
                7.27123449e-01,   1.33424791e-01,   7.22101878e-01,
                4.66835915e-04,   9.37545994e-01,   8.39665972e-01,
                8.58898796e-02,   1.58541050e-01,   8.01863323e-01,
                6.76022663e-01,   1.20057502e-01,   8.95906437e-01,
                4.62967620e-01,   7.82165359e-01,   5.09244193e-01,
                9.57084310e-01,   9.85242333e-01,   5.98686452e-01,
                6.22820763e-01,   9.33305671e-01,   7.36232944e-01,
                9.89227905e-01,   3.87627255e-01,   1.46216163e-01,
                6.44944825e-01,   9.19141004e-01,   9.09558545e-01,
                7.57273518e-01,   8.21734763e-01,   6.26073109e-01,
                9.52398484e-01,   3.45385873e-01,   3.75512576e-01,
                4.93237095e-01,   8.03377183e-01,   3.14284397e-01,
                1.06289026e-01,   7.50328856e-01,   5.47622699e-01,
                8.20107932e-01,   5.88342111e-01,   3.67198239e-01,
                4.57736106e-01,   8.22744915e-01,   5.28036304e-01,
                9.05316806e-01,   3.11422861e-01,   9.81622977e-01,
                9.83990572e-01,   5.57237673e-01,   5.15965476e-01,
                8.29739854e-01,   1.35735018e-01,   2.59583468e-01,
                1.67610889e-01,   4.07036586e-01,   9.00815661e-01,
                9.17269984e-01,   3.09285294e-01,   3.86887809e-01,
                3.27860240e-01,   5.04622083e-01,   3.44919237e-02,
                7.93213986e-01,   1.00350609e-01,   3.02193169e-01,
                3.65097826e-02,   9.74047188e-01,   9.20422841e-02,
                3.54571557e-01,   3.67294185e-01,   1.35090541e-02,
                6.75132101e-02,   9.98060261e-01,   9.00149468e-01,
                5.44206208e-02,   6.01361404e-01,   9.87797437e-01,
                8.78423274e-01,   3.08907677e-01,   2.79302129e-01,
                8.96231085e-01,   9.81295985e-01,   1.39321818e-01,
                3.04952799e-01,   7.58393468e-01,   3.00624189e-01,
                1.90895237e-01,   5.35113927e-01,   6.27270077e-01,
                9.04411711e-01,   9.02611189e-01,   3.98017312e-01,
                5.66927813e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([  7.33557731e-01,   1.66595952e-01,   9.36759003e-01,
                8.76715404e-01,   2.35099393e-01,   3.04099412e-01,
                9.78180868e-01,   1.22873435e-02,   7.37797039e-01,
                8.65756819e-01,   2.51677116e-01,   7.32747924e-01,
                8.52191967e-01,   6.18013540e-01,   7.64022107e-03,
                2.34381448e-01,   1.89343227e-01,   7.60772458e-01,
                4.37784314e-01,   8.24196208e-01,   8.66157759e-01,
                5.89901009e-01,   5.41713608e-01,   1.12148016e-01,
                1.46549221e-01,   5.24052700e-01,   9.75556301e-01,
                8.41829534e-01,   8.04393315e-01,   6.93984477e-01,
                2.81669885e-03,   1.10581743e-01,   1.76721782e-01,
                4.72995364e-01,   1.47727825e-01,   8.36460900e-01,
                4.12881978e-02,   2.89413828e-03,   1.38740628e-01,
                9.34186708e-01,   9.08744296e-01,   6.28993732e-01,
                5.20151339e-02,   2.91976911e-01,   1.67567278e-02,
                4.70635946e-01,   4.17697828e-01,   8.60352612e-01,
                5.97878133e-01,   2.70247584e-01,   2.85075060e-01,
                9.81574916e-01,   2.88855200e-02,   8.92707980e-01,
                3.29500838e-01,   9.82508880e-01,   6.85045905e-01,
                7.09546829e-01,   8.64084414e-01,   1.27551880e-01,
                6.69652208e-01,   5.31829430e-01,   1.86541570e-01,
                2.29490550e-01,   7.36552497e-01,   8.07914267e-01,
                5.80106079e-01,   7.06890252e-01,   6.13066384e-01,
                3.06284039e-01,   5.82702963e-01,   1.03889166e-01,
                8.05589110e-01,   6.10720887e-01,   6.81609872e-01,
                7.95330119e-01,   5.88804534e-01,   7.63924500e-06,
                6.12994892e-01,   1.07299865e-01,   4.18917934e-01,
                6.98751029e-01,   1.51672340e-01,   9.66674769e-01,
                3.64651469e-01,   4.25029060e-01,   6.50987530e-01,
                4.24070174e-01,   3.10834862e-01,   9.77547058e-01,
                5.51949446e-01,   9.52608501e-01,   6.31823040e-01,
                4.01923894e-01,   6.47238868e-01,   8.30222630e-01,
                2.19836733e-01,   8.15768730e-01,   6.29306817e-01,
                9.81112098e-01])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.97344515,  0.66638582,  0.55988427,  0.81511227,  0.40776682,
               0.12209199,  0.11313772,  0.83701868,  0.37080891,  0.74925476,
               0.27428313,  0.21258431,  0.90449335,  0.1414717 ,  0.97932529,
               0.53893021,  0.72590032,  0.85434472,  0.1590675 ,  0.80898856,
               0.19366437,  0.6930977 ,  0.18947122,  0.81038513,  0.23186362,
               0.72606121,  0.43998051,  0.78478673,  0.44590387,  0.61157387,
               0.71605115,  0.22694907,  0.27494258,  0.13374868,  0.3568042 ,
               0.26718994,  0.56669657,  0.89961352,  0.60571856,  0.56851589,
               0.25418279,  0.45051596,  0.20736612,  0.4430263 ,  0.19205903,
               0.80738382,  0.29142574,  0.22495959,  0.55384206,  0.7789314 ,
               0.12953138,  0.81660747,  0.68309755,  0.76439648,  0.68792873,
               0.66186411,  0.63566611,  0.38741993,  0.70620683,  0.68965418,
               0.54836731,  0.55222432,  0.82302369,  0.10676678,  0.46562062,
               0.15436565,  0.03939035,  0.11786757,  0.32721218,  0.8043506 ,
               0.14565396,  0.10468544,  0.4823427 ,  0.81595781,  0.68532676,
               0.55297992,  0.95070103,  0.78042227,  0.58683043,  0.21098524,
               0.55106837,  0.18003126,  0.33646998,  0.18941664,  0.55078141,
               0.75703679,  0.49019143,  0.47935202,  0.53351804,  0.52282544,
               0.01977955,  0.86252714,  0.74613908,  0.46285243,  0.29335453,
               0.77441174,  0.65594234,  0.74235736,  0.46215401,  0.54675264])}]]


