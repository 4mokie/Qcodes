
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='a839837c-5523-4070-b1be-414576f7fdcb'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='8930b7e4-28f4-410a-8589-9d5c633d2308'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.256854179531989],
     [0.222739136422723],
     [0.43585871517987],
     [0.890524921996191],
     [0.699702043351112],
     [0.058440050442698],
     [0.896012535012153],
     [0.940690959252916],
     [0.277198356444103],
     [0.934083623872535],
     [0.398895570839263],
     [0.890236857714205],
     [0.963861401603361],
     [0.600100135705549],
     [0.366726550092612],
     [0.853692415688995],
     [0.940402015685815],
     [0.213484941240838],
     [0.950581041086805],
     [0.578824044602576],
     [0.782861050045065],
     [0.130368019484665],
     [0.732969369811208],
     [0.89176053246648],
     [0.376428127420541],
     [0.595617087158347],
     [0.228071934421441],
     [0.887175702761349],
     [0.491352663742811],
     [0.956323379072159],
     [0.67591634159191],
     [0.758371711916867],
     [0.459793574922736],
     [0.721810356033283],
     [0.961285604887037],
     [0.367972184895643],
     [0.171441495878943],
     [0.475978536922994],
     [0.541965975226468],
     [0.810228874135839],
     [0.468191825050658],
     [0.206069301974318],
     [0.467282882384318],
     [0.477692234652157],
     [0.345316530094466],
     [0.489881905062048],
     [0.293098736180832],
     [0.838514023790718],
     [0.315526452188155],
     [0.365466749463632],
     [0.918063212745194],
     [0.920558098056733],
     [0.853547267167675],
     [0.708624902360772],
     [0.892311300859201],
     [0.834240475242263],
     [0.627565863342319],
     [0.443166858653057],
     [0.164112091084803],
     [0.798991541235462],
     [0.726095781267153],
     [0.580284404714604],
     [0.87473415599529],
     [0.595850599697577],
     [0.122393760717042],
     [0.63429517291089],
     [0.192333760254865],
     [0.565596445721524],
     [0.881976787675725],
     [0.128441955744975],
     [0.330158082034565],
     [0.329258852793035],
     [0.736478500225779],
     [0.562836590346783],
     [0.88257232694181],
     [0.922604717274684],
     [0.279306742086122],
     [0.795449784064767],
     [0.84947911860022],
     [0.457804475619115],
     [0.0347093311033192],
     [0.0921297080592655],
     [0.263464401617508],
     [0.766080840028631],
     [0.263188557563458],
     [0.780283426169438],
     [0.894698389158722],
     [0.291509104318513],
     [0.664910695037897],
     [0.930392582141881],
     [0.914394565184851],
     [0.0893467519586189],
     [0.0131890744531384],
     [0.501587306679296],
     [0.306523296913516],
     [0.528797474067363],
     [0.930867036295427],
     [0.92824014253918],
     [0.712499050688916],
     [0.183148127289622]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.55295215])],
     [array([0.65315389])],
     [array([0.09129992])],
     [array([0.6732251])],
     [array([0.34799099])],
     [array([0.5216041])],
     [array([0.58104853])],
     [array([0.18082216])],
     [array([0.40234369])],
     [array([0.27983704])],
     [array([0.7113184])],
     [array([0.74343814])],
     [array([0.26206518])],
     [array([0.60336864])],
     [array([0.56660393])],
     [array([0.89102871])],
     [array([0.59849362])],
     [array([0.71882743])],
     [array([0.74812215])],
     [array([0.9059177])],
     [array([0.83024981])],
     [array([0.29806524])],
     [array([0.18613566])],
     [array([0.6015606])],
     [array([0.37296923])],
     [array([0.82402697])],
     [array([0.10468008])],
     [array([0.34138181])],
     [array([0.62082271])],
     [array([0.03129381])],
     [array([0.61698864])],
     [array([0.07664799])],
     [array([0.60556328])],
     [array([0.59837526])],
     [array([0.76556964])],
     [array([0.41089289])],
     [array([0.86864412])],
     [array([0.22107153])],
     [array([0.0944202])],
     [array([0.18296327])],
     [array([0.80502886])],
     [array([0.83485971])],
     [array([0.14043409])],
     [array([0.9638825])],
     [array([0.37179737])],
     [array([0.69792811])],
     [array([0.93547228])],
     [array([0.9212181])],
     [array([0.51331802])],
     [array([0.32036274])],
     [array([0.56771167])],
     [array([0.0849847])],
     [array([0.04526608])],
     [array([0.21580231])],
     [array([0.24037181])],
     [array([0.87959097])],
     [array([0.17246679])],
     [array([0.91096877])],
     [array([0.22050222])],
     [array([0.55225485])],
     [array([0.24007661])],
     [array([0.77995715])],
     [array([0.5185349])],
     [array([0.06211368])],
     [array([0.8168653])],
     [array([0.07348704])],
     [array([0.16288638])],
     [array([0.43302526])],
     [array([0.76098369])],
     [array([0.42890311])],
     [array([0.86207396])],
     [array([0.68744418])],
     [array([0.75485466])],
     [array([0.90593199])],
     [array([0.83641788])],
     [array([0.27204085])],
     [array([0.63369561])],
     [array([0.31288218])],
     [array([0.19592504])],
     [array([0.59345277])],
     [array([0.44682465])],
     [array([0.46416095])],
     [array([0.437675])],
     [array([0.91259689])],
     [array([0.83628637])],
     [array([0.08634312])],
     [array([0.17707211])],
     [array([0.26947358])],
     [array([0.3993127])],
     [array([0.09851628])],
     [array([0.80087149])],
     [array([0.65652293])],
     [array([0.66857862])],
     [array([0.3076843])],
     [array([0.10026867])],
     [array([0.55431509])],
     [array([0.4040703])],
     [array([0.00077567])],
     [array([0.84632351])],
     [array([0.29869472])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([5.52952151e-01, 6.53153892e-01, 9.12999220e-02, 6.73225097e-01,
           3.47990989e-01, 5.21604101e-01, 5.81048527e-01, 1.80822162e-01,
           4.02343694e-01, 2.79837038e-01, 7.11318402e-01, 7.43438140e-01,
           2.62065177e-01, 6.03368643e-01, 5.66603929e-01, 8.91028706e-01,
           5.98493616e-01, 7.18827435e-01, 7.48122155e-01, 9.05917701e-01,
           8.30249813e-01, 2.98065242e-01, 1.86135662e-01, 6.01560602e-01,
           3.72969232e-01, 8.24026972e-01, 1.04680083e-01, 3.41381812e-01,
           6.20822715e-01, 3.12938085e-02, 6.16988641e-01, 7.66479933e-02,
           6.05563278e-01, 5.98375263e-01, 7.65569640e-01, 4.10892890e-01,
           8.68644120e-01, 2.21071525e-01, 9.44202028e-02, 1.82963269e-01,
           8.05028864e-01, 8.34859715e-01, 1.40434090e-01, 9.63882497e-01,
           3.71797367e-01, 6.97928110e-01, 9.35472282e-01, 9.21218095e-01,
           5.13318019e-01, 3.20362741e-01, 5.67711672e-01, 8.49846962e-02,
           4.52660753e-02, 2.15802313e-01, 2.40371805e-01, 8.79590965e-01,
           1.72466793e-01, 9.10968769e-01, 2.20502219e-01, 5.52254851e-01,
           2.40076607e-01, 7.79957154e-01, 5.18534896e-01, 6.21136801e-02,
           8.16865304e-01, 7.34870355e-02, 1.62886383e-01, 4.33025256e-01,
           7.60983686e-01, 4.28903108e-01, 8.62073961e-01, 6.87444181e-01,
           7.54854663e-01, 9.05931990e-01, 8.36417879e-01, 2.72040849e-01,
           6.33695608e-01, 3.12882177e-01, 1.95925042e-01, 5.93452774e-01,
           4.46824647e-01, 4.64160947e-01, 4.37675002e-01, 9.12596890e-01,
           8.36286367e-01, 8.63431240e-02, 1.77072115e-01, 2.69473580e-01,
           3.99312701e-01, 9.85162806e-02, 8.00871490e-01, 6.56522926e-01,
           6.68578621e-01, 3.07684299e-01, 1.00268675e-01, 5.54315091e-01,
           4.04070299e-01, 7.75673037e-04, 8.46323511e-01, 2.98694718e-01])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.25685418, 0.22273914, 0.43585872, 0.89052492, 0.69970204,
              0.05844005, 0.89601254, 0.94069096, 0.27719836, 0.93408362,
              0.39889557, 0.89023686, 0.9638614 , 0.60010014, 0.36672655,
              0.85369242, 0.94040202, 0.21348494, 0.95058104, 0.57882404,
              0.78286105, 0.13036802, 0.73296937, 0.89176053, 0.37642813,
              0.59561709, 0.22807193, 0.8871757 , 0.49135266, 0.95632338,
              0.67591634, 0.75837171, 0.45979357, 0.72181036, 0.9612856 ,
              0.36797218, 0.1714415 , 0.47597854, 0.54196598, 0.81022887,
              0.46819183, 0.2060693 , 0.46728288, 0.47769223, 0.34531653,
              0.48988191, 0.29309874, 0.83851402, 0.31552645, 0.36546675,
              0.91806321, 0.9205581 , 0.85354727, 0.7086249 , 0.8923113 ,
              0.83424048, 0.62756586, 0.44316686, 0.16411209, 0.79899154,
              0.72609578, 0.5802844 , 0.87473416, 0.5958506 , 0.12239376,
              0.63429517, 0.19233376, 0.56559645, 0.88197679, 0.12844196,
              0.33015808, 0.32925885, 0.7364785 , 0.56283659, 0.88257233,
              0.92260472, 0.27930674, 0.79544978, 0.84947912, 0.45780448,
              0.03470933, 0.09212971, 0.2634644 , 0.76608084, 0.26318856,
              0.78028343, 0.89469839, 0.2915091 , 0.6649107 , 0.93039258,
              0.91439457, 0.08934675, 0.01318907, 0.50158731, 0.3065233 ,
              0.52879747, 0.93086704, 0.92824014, 0.71249905, 0.18314813])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.84585032, 0.90532994, 0.1211929 , 0.05280128, 0.52197962,
              0.52360172, 0.26324191, 0.3149768 , 0.73427185, 0.0238165 ,
              0.26434814, 0.34319329, 0.66938318, 0.80797584, 0.63894548,
              0.12693952, 0.79371966, 0.00386518, 0.840252  , 0.95301783,
              0.43044261, 0.17722663, 0.85953033, 0.07344402, 0.63686624,
              0.50069508, 0.9476799 , 0.83509758, 0.72027024, 0.55126467,
              0.85063863, 0.05250632, 0.57978442, 0.09491511, 0.37024969,
              0.04117286, 0.66697536, 0.72608854, 0.51965834, 0.22635093,
              0.91930365, 0.96721122, 0.22369916, 0.84712676, 0.0726854 ,
              0.26242885, 0.06661521, 0.7302367 , 0.49830974, 0.5611208 ,
              0.54416509, 0.43906189, 0.49076171, 0.98942161, 0.15851514,
              0.42152366, 0.07130341, 0.6640601 , 0.48883136, 0.94260157,
              0.68707593, 0.20968726, 0.24698025, 0.11867873, 0.62741911,
              0.4873614 , 0.03692086, 0.59670019, 0.82769694, 0.6729825 ,
              0.24123918, 0.4629093 , 0.37268547, 0.26101468, 0.3396874 ,
              0.62407787, 0.99004731, 0.65521621, 0.55028814, 0.00632332,
              0.61755466, 0.68059492, 0.52724098, 0.26636305, 0.37901321,
              0.44177359, 0.57746635, 0.13519386, 0.92756021, 0.73961665,
              0.42611753, 0.98727113, 0.67458552, 0.64451332, 0.81090382,
              0.30213594, 0.27307401, 0.02331371, 0.14685151, 0.01655351])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.18518581, 0.30110183, 0.0140788 , 0.40565424, 0.62709098,
              0.86543602, 0.71791373, 0.61540662, 0.1689755 , 0.82222315,
              0.43786466, 0.22026371, 0.1156951 , 0.21223436, 0.78343602,
              0.12720812, 0.58806492, 0.76786605, 0.72914567, 0.79422318,
              0.28254458, 0.3137815 , 0.0384815 , 0.85510921, 0.23527685,
              0.21881732, 0.71624673, 0.33415607, 0.34213105, 0.4192749 ,
              0.93762073, 0.38391887, 0.71258411, 0.84275109, 0.21879222,
              0.88267161, 0.75386924, 0.67383407, 0.88081196, 0.53523589,
              0.58472373, 0.41375417, 0.16100785, 0.62677523, 0.48372512,
              0.3863768 , 0.44653538, 0.59758462, 0.60845435, 0.14616227,
              0.06021826, 0.39509711, 0.63079142, 0.95188573, 0.66199083,
              0.65245854, 0.77979955, 0.41234646, 0.52814192, 0.05915273,
              0.6793663 , 0.24368934, 0.86907333, 0.908899  , 0.70379146,
              0.00462282, 0.70925203, 0.59413423, 0.6871339 , 0.1593898 ,
              0.00842836, 0.29599518, 0.75963625, 0.10165381, 0.96266459,
              0.59587064, 0.62096555, 0.99836663, 0.56232896, 0.84206969,
              0.95426783, 0.97486102, 0.56443326, 0.87743128, 0.3685853 ,
              0.46115237, 0.17091995, 0.30005395, 0.02310885, 0.23698594,
              0.82865585, 0.90661722, 0.40265365, 0.71530399, 0.14207597,
              0.20780567, 0.23308784, 0.97887912, 0.1358915 , 0.35609169])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.17659481, 0.38117646, 0.20746721, 0.53588451, 0.84179554,
              0.55704702, 0.15935433, 0.82931736, 0.71776176, 0.13983992,
              0.10844812, 0.54724864, 0.8136158 , 0.66106565, 0.49752261,
              0.49828004, 0.31858939, 0.79116516, 0.12739396, 0.63489245,
              0.41024784, 0.03547119, 0.62806022, 0.23345529, 0.19307814,
              0.68311564, 0.2535659 , 0.73214211, 0.89050752, 0.3087217 ,
              0.80228749, 0.48801722, 0.82843153, 0.68010745, 0.10757069,
              0.73358567, 0.03039237, 0.6119496 , 0.5234526 , 0.7787849 ,
              0.57453727, 0.9876238 , 0.04686336, 0.98117332, 0.09399772,
              0.23023551, 0.556738  , 0.45278801, 0.84502224, 0.91283085,
              0.82511565, 0.21701325, 0.29492255, 0.16143326, 0.81342357,
              0.05938326, 0.45213791, 0.87949978, 0.40669309, 0.89362446,
              0.98498609, 0.64071754, 0.45401858, 0.38337492, 0.3047915 ,
              0.20303804, 0.12829237, 0.72406584, 0.39225946, 0.01164403,
              0.78480972, 0.76221558, 0.69416907, 0.55536458, 0.97526458,
              0.19861938, 0.81976966, 0.93433284, 0.96958826, 0.44535111,
              0.60559401, 0.43531253, 0.47011792, 0.38675466, 0.89308916,
              0.36213945, 0.50708675, 0.52651065, 0.37273673, 0.36425979,
              0.85205399, 0.8790364 , 0.66445389, 0.98627517, 0.87260643,
              0.61328694, 0.04980593, 0.35755002, 0.55276857, 0.29492184])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.25685418, 0.22273914, 0.43585872, 0.89052492, 0.69970204,
              0.05844005, 0.89601254, 0.94069096, 0.27719836, 0.93408362,
              0.39889557, 0.89023686, 0.9638614 , 0.60010014, 0.36672655,
              0.85369242, 0.94040202, 0.21348494, 0.95058104, 0.57882404,
              0.78286105, 0.13036802, 0.73296937, 0.89176053, 0.37642813,
              0.59561709, 0.22807193, 0.8871757 , 0.49135266, 0.95632338,
              0.67591634, 0.75837171, 0.45979357, 0.72181036, 0.9612856 ,
              0.36797218, 0.1714415 , 0.47597854, 0.54196598, 0.81022887,
              0.46819183, 0.2060693 , 0.46728288, 0.47769223, 0.34531653,
              0.48988191, 0.29309874, 0.83851402, 0.31552645, 0.36546675,
              0.91806321, 0.9205581 , 0.85354727, 0.7086249 , 0.8923113 ,
              0.83424048, 0.62756586, 0.44316686, 0.16411209, 0.79899154,
              0.72609578, 0.5802844 , 0.87473416, 0.5958506 , 0.12239376,
              0.63429517, 0.19233376, 0.56559645, 0.88197679, 0.12844196,
              0.33015808, 0.32925885, 0.7364785 , 0.56283659, 0.88257233,
              0.92260472, 0.27930674, 0.79544978, 0.84947912, 0.45780448,
              0.03470933, 0.09212971, 0.2634644 , 0.76608084, 0.26318856,
              0.78028343, 0.89469839, 0.2915091 , 0.6649107 , 0.93039258,
              0.91439457, 0.08934675, 0.01318907, 0.50158731, 0.3065233 ,
              0.52879747, 0.93086704, 0.92824014, 0.71249905, 0.18314813])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.84585032, 0.90532994, 0.1211929 , 0.05280128, 0.52197962,
              0.52360172, 0.26324191, 0.3149768 , 0.73427185, 0.0238165 ,
              0.26434814, 0.34319329, 0.66938318, 0.80797584, 0.63894548,
              0.12693952, 0.79371966, 0.00386518, 0.840252  , 0.95301783,
              0.43044261, 0.17722663, 0.85953033, 0.07344402, 0.63686624,
              0.50069508, 0.9476799 , 0.83509758, 0.72027024, 0.55126467,
              0.85063863, 0.05250632, 0.57978442, 0.09491511, 0.37024969,
              0.04117286, 0.66697536, 0.72608854, 0.51965834, 0.22635093,
              0.91930365, 0.96721122, 0.22369916, 0.84712676, 0.0726854 ,
              0.26242885, 0.06661521, 0.7302367 , 0.49830974, 0.5611208 ,
              0.54416509, 0.43906189, 0.49076171, 0.98942161, 0.15851514,
              0.42152366, 0.07130341, 0.6640601 , 0.48883136, 0.94260157,
              0.68707593, 0.20968726, 0.24698025, 0.11867873, 0.62741911,
              0.4873614 , 0.03692086, 0.59670019, 0.82769694, 0.6729825 ,
              0.24123918, 0.4629093 , 0.37268547, 0.26101468, 0.3396874 ,
              0.62407787, 0.99004731, 0.65521621, 0.55028814, 0.00632332,
              0.61755466, 0.68059492, 0.52724098, 0.26636305, 0.37901321,
              0.44177359, 0.57746635, 0.13519386, 0.92756021, 0.73961665,
              0.42611753, 0.98727113, 0.67458552, 0.64451332, 0.81090382,
              0.30213594, 0.27307401, 0.02331371, 0.14685151, 0.01655351])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.18518581, 0.30110183, 0.0140788 , 0.40565424, 0.62709098,
              0.86543602, 0.71791373, 0.61540662, 0.1689755 , 0.82222315,
              0.43786466, 0.22026371, 0.1156951 , 0.21223436, 0.78343602,
              0.12720812, 0.58806492, 0.76786605, 0.72914567, 0.79422318,
              0.28254458, 0.3137815 , 0.0384815 , 0.85510921, 0.23527685,
              0.21881732, 0.71624673, 0.33415607, 0.34213105, 0.4192749 ,
              0.93762073, 0.38391887, 0.71258411, 0.84275109, 0.21879222,
              0.88267161, 0.75386924, 0.67383407, 0.88081196, 0.53523589,
              0.58472373, 0.41375417, 0.16100785, 0.62677523, 0.48372512,
              0.3863768 , 0.44653538, 0.59758462, 0.60845435, 0.14616227,
              0.06021826, 0.39509711, 0.63079142, 0.95188573, 0.66199083,
              0.65245854, 0.77979955, 0.41234646, 0.52814192, 0.05915273,
              0.6793663 , 0.24368934, 0.86907333, 0.908899  , 0.70379146,
              0.00462282, 0.70925203, 0.59413423, 0.6871339 , 0.1593898 ,
              0.00842836, 0.29599518, 0.75963625, 0.10165381, 0.96266459,
              0.59587064, 0.62096555, 0.99836663, 0.56232896, 0.84206969,
              0.95426783, 0.97486102, 0.56443326, 0.87743128, 0.3685853 ,
              0.46115237, 0.17091995, 0.30005395, 0.02310885, 0.23698594,
              0.82865585, 0.90661722, 0.40265365, 0.71530399, 0.14207597,
              0.20780567, 0.23308784, 0.97887912, 0.1358915 , 0.35609169])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.85294311, 0.48925609, 0.02692897, 0.71024436, 0.24386238,
              0.21856774, 0.91846675, 0.2706963 , 0.86624247, 0.2360562 ,
              0.61203096, 0.1896338 , 0.77085681, 0.25787877, 0.13153712,
              0.01973068, 0.17456204, 0.96146421, 0.73471888, 0.20625802,
              0.53955699, 0.67924711, 0.64762312, 0.14343302, 0.96044162,
              0.68262212, 0.78667955, 0.62571412, 0.6654916 , 0.50877562,
              0.62662508, 0.2472701 , 0.90710326, 0.7383309 , 0.30973209,
              0.83287091, 0.9004927 , 0.06348458, 0.17372488, 0.19194521,
              0.580891  , 0.38614599, 0.06293776, 0.53396492, 0.99911245,
              0.6618835 , 0.07129946, 0.05468226, 0.02024656, 0.88425619,
              0.56799727, 0.47191363, 0.44438387, 0.3385726 , 0.2420834 ,
              0.22413301, 0.93322665, 0.69818872, 0.4901109 , 0.06295942,
              0.31455058, 0.00291131, 0.63470606, 0.1796256 , 0.93323665,
              0.7675543 , 0.72557496, 0.58653764, 0.87696264, 0.98218963,
              0.94949193, 0.09026084, 0.68234388, 0.06755897, 0.11855701,
              0.41253065, 0.69802079, 0.37838928, 0.16790491, 0.79698766,
              0.19336661, 0.24235409, 0.2090114 , 0.55083703, 0.68995226,
              0.21174091, 0.35443768, 0.99184425, 0.17558778, 0.06283955,
              0.55196636, 0.80821897, 0.99156308, 0.34708539, 0.1099425 ,
              0.56295292, 0.90124228, 0.35215915, 0.47820105, 0.14708561])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([5.52952151e-01, 6.53153892e-01, 9.12999220e-02, 6.73225097e-01,
              3.47990989e-01, 5.21604101e-01, 5.81048527e-01, 1.80822162e-01,
              4.02343694e-01, 2.79837038e-01, 7.11318402e-01, 7.43438140e-01,
              2.62065177e-01, 6.03368643e-01, 5.66603929e-01, 8.91028706e-01,
              5.98493616e-01, 7.18827435e-01, 7.48122155e-01, 9.05917701e-01,
              8.30249813e-01, 2.98065242e-01, 1.86135662e-01, 6.01560602e-01,
              3.72969232e-01, 8.24026972e-01, 1.04680083e-01, 3.41381812e-01,
              6.20822715e-01, 3.12938085e-02, 6.16988641e-01, 7.66479933e-02,
              6.05563278e-01, 5.98375263e-01, 7.65569640e-01, 4.10892890e-01,
              8.68644120e-01, 2.21071525e-01, 9.44202028e-02, 1.82963269e-01,
              8.05028864e-01, 8.34859715e-01, 1.40434090e-01, 9.63882497e-01,
              3.71797367e-01, 6.97928110e-01, 9.35472282e-01, 9.21218095e-01,
              5.13318019e-01, 3.20362741e-01, 5.67711672e-01, 8.49846962e-02,
              4.52660753e-02, 2.15802313e-01, 2.40371805e-01, 8.79590965e-01,
              1.72466793e-01, 9.10968769e-01, 2.20502219e-01, 5.52254851e-01,
              2.40076607e-01, 7.79957154e-01, 5.18534896e-01, 6.21136801e-02,
              8.16865304e-01, 7.34870355e-02, 1.62886383e-01, 4.33025256e-01,
              7.60983686e-01, 4.28903108e-01, 8.62073961e-01, 6.87444181e-01,
              7.54854663e-01, 9.05931990e-01, 8.36417879e-01, 2.72040849e-01,
              6.33695608e-01, 3.12882177e-01, 1.95925042e-01, 5.93452774e-01,
              4.46824647e-01, 4.64160947e-01, 4.37675002e-01, 9.12596890e-01,
              8.36286367e-01, 8.63431240e-02, 1.77072115e-01, 2.69473580e-01,
              3.99312701e-01, 9.85162806e-02, 8.00871490e-01, 6.56522926e-01,
              6.68578621e-01, 3.07684299e-01, 1.00268675e-01, 5.54315091e-01,
              4.04070299e-01, 7.75673037e-04, 8.46323511e-01, 2.98694718e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.64175767, 0.47548214, 0.71717137, 0.45288706, 0.62587505,
              0.16436815, 0.31407974, 0.8184104 , 0.24800101, 0.50093236,
              0.75429544, 0.63243866, 0.50287093, 0.27612087, 0.18378506,
              0.71019378, 0.11875303, 0.88007641, 0.54872939, 0.7807174 ,
              0.10692758, 0.08396056, 0.63756147, 0.03785077, 0.38840798,
              0.25245026, 0.53431646, 0.68455106, 0.89856418, 0.224219  ,
              0.46094372, 0.35976998, 0.199805  , 0.01956827, 0.42922936,
              0.5519977 , 0.19029351, 0.34022236, 0.33384406, 0.98244129,
              0.82041254, 0.71878274, 0.66523274, 0.78855699, 0.59046577,
              0.21216199, 0.82632358, 0.22193119, 0.87485559, 0.85643025,
              0.12470007, 0.63893944, 0.44301356, 0.54209777, 0.229727  ,
              0.95335869, 0.6701664 , 0.70308719, 0.09683418, 0.05273315,
              0.26720083, 0.19677881, 0.74836065, 0.5625373 , 0.88742316,
              0.77794957, 0.28348267, 0.66984153, 0.21903914, 0.13053378,
              0.41870555, 0.32593515, 0.77471641, 0.47608243, 0.02701936,
              0.09938519, 0.57656939, 0.95008113, 0.91887437, 0.424083  ,
              0.01394226, 0.76166823, 0.64128604, 0.92311195, 0.47329495,
              0.68273468, 0.10145228, 0.08203263, 0.57107275, 0.33345799,
              0.9849312 , 0.44989323, 0.34353649, 0.0910189 , 0.27015109,
              0.5789816 , 0.21126141, 0.31337851, 0.03964952, 0.6250397 ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.09228719, 0.22684879, 0.74371566, 0.2236816 , 0.99727769,
              0.53542561, 0.33465919, 0.36168852, 0.54692163, 0.90933176,
              0.77343575, 0.77182795, 0.12522351, 0.95382008, 0.23501506,
              0.13518873, 0.21044252, 0.16758451, 0.77595502, 0.37330332,
              0.09891341, 0.73273798, 0.25926207, 0.84174561, 0.34595271,
              0.05629272, 0.86955671, 0.65169397, 0.90154471, 0.94367689,
              0.28727388, 0.08873252, 0.38454181, 0.99168125, 0.89064626,
              0.55710022, 0.20765713, 0.46800541, 0.74313475, 0.64731809,
              0.45825877, 0.53886065, 0.54386694, 0.32007714, 0.64455714,
              0.59723453, 0.08371326, 0.79521519, 0.91917664, 0.83690092,
              0.63561392, 0.2172706 , 0.3705783 , 0.1266825 , 0.6033221 ,
              0.65003977, 0.34675706, 0.35788771, 0.93216837, 0.23917642,
              0.92303014, 0.818166  , 0.10262008, 0.78449932, 0.55878379,
              0.54538057, 0.20819924, 0.88305704, 0.06356306, 0.10370345,
              0.8393965 , 0.18556145, 0.33569196, 0.96188381, 0.57734744,
              0.72592922, 0.63397755, 0.2426732 , 0.04809298, 0.44979052,
              0.15519714, 0.26884652, 0.22558969, 0.53451438, 0.16597735,
              0.37606031, 0.7065311 , 0.37988617, 0.50708722, 0.34453514,
              0.97057645, 0.58538896, 0.52114073, 0.72137065, 0.97178385,
              0.8460159 , 0.71795897, 0.35562155, 0.49367723, 0.07940639])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.25799582, 0.26537292, 0.13282394, 0.3652435 , 0.91873229,
              0.47806522, 0.83989275, 0.70505659, 0.92228455, 0.63562283,
              0.27700387, 0.43170138, 0.38783918, 0.40858219, 0.20697945,
              0.30411623, 0.28798098, 0.91091353, 0.20017884, 0.57007829,
              0.69516682, 0.97025908, 0.06591613, 0.15903939, 0.58961137,
              0.97174207, 0.51559784, 0.89748501, 0.96552708, 0.35736805,
              0.34339562, 0.10292731, 0.10995666, 0.36492915, 0.08153136,
              0.6847515 , 0.67553703, 0.47150805, 0.47191651, 0.93911509,
              0.14429234, 0.24081131, 0.04241018, 0.00338337, 0.7209326 ,
              0.71377656, 0.41477765, 0.77510232, 0.56031392, 0.2325734 ,
              0.69237156, 0.21571291, 0.74471758, 0.60566244, 0.04181852,
              0.42741913, 0.75238093, 0.26141173, 0.6846856 , 0.43653902,
              0.55868833, 0.76237137, 0.76029516, 0.15430752, 0.03157752,
              0.25416542, 0.29247759, 0.99553289, 0.0307957 , 0.98994772,
              0.65544999, 0.53667956, 0.42277976, 0.8445823 , 0.60004887,
              0.25222444, 0.251112  , 0.28825262, 0.87690562, 0.24186353,
              0.42114339, 0.74115181, 0.68092265, 0.80770562, 0.20529152,
              0.18256915, 0.59479967, 0.21660581, 0.2932342 , 0.05868137,
              0.52704189, 0.13926546, 0.05387771, 0.74671117, 0.50542127,
              0.24468712, 0.45916141, 0.89898508, 0.10685534, 0.53805428])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([5.52952151e-01, 6.53153892e-01, 9.12999220e-02, 6.73225097e-01,
              3.47990989e-01, 5.21604101e-01, 5.81048527e-01, 1.80822162e-01,
              4.02343694e-01, 2.79837038e-01, 7.11318402e-01, 7.43438140e-01,
              2.62065177e-01, 6.03368643e-01, 5.66603929e-01, 8.91028706e-01,
              5.98493616e-01, 7.18827435e-01, 7.48122155e-01, 9.05917701e-01,
              8.30249813e-01, 2.98065242e-01, 1.86135662e-01, 6.01560602e-01,
              3.72969232e-01, 8.24026972e-01, 1.04680083e-01, 3.41381812e-01,
              6.20822715e-01, 3.12938085e-02, 6.16988641e-01, 7.66479933e-02,
              6.05563278e-01, 5.98375263e-01, 7.65569640e-01, 4.10892890e-01,
              8.68644120e-01, 2.21071525e-01, 9.44202028e-02, 1.82963269e-01,
              8.05028864e-01, 8.34859715e-01, 1.40434090e-01, 9.63882497e-01,
              3.71797367e-01, 6.97928110e-01, 9.35472282e-01, 9.21218095e-01,
              5.13318019e-01, 3.20362741e-01, 5.67711672e-01, 8.49846962e-02,
              4.52660753e-02, 2.15802313e-01, 2.40371805e-01, 8.79590965e-01,
              1.72466793e-01, 9.10968769e-01, 2.20502219e-01, 5.52254851e-01,
              2.40076607e-01, 7.79957154e-01, 5.18534896e-01, 6.21136801e-02,
              8.16865304e-01, 7.34870355e-02, 1.62886383e-01, 4.33025256e-01,
              7.60983686e-01, 4.28903108e-01, 8.62073961e-01, 6.87444181e-01,
              7.54854663e-01, 9.05931990e-01, 8.36417879e-01, 2.72040849e-01,
              6.33695608e-01, 3.12882177e-01, 1.95925042e-01, 5.93452774e-01,
              4.46824647e-01, 4.64160947e-01, 4.37675002e-01, 9.12596890e-01,
              8.36286367e-01, 8.63431240e-02, 1.77072115e-01, 2.69473580e-01,
              3.99312701e-01, 9.85162806e-02, 8.00871490e-01, 6.56522926e-01,
              6.68578621e-01, 3.07684299e-01, 1.00268675e-01, 5.54315091e-01,
              4.04070299e-01, 7.75673037e-04, 8.46323511e-01, 2.98694718e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.64175767, 0.47548214, 0.71717137, 0.45288706, 0.62587505,
              0.16436815, 0.31407974, 0.8184104 , 0.24800101, 0.50093236,
              0.75429544, 0.63243866, 0.50287093, 0.27612087, 0.18378506,
              0.71019378, 0.11875303, 0.88007641, 0.54872939, 0.7807174 ,
              0.10692758, 0.08396056, 0.63756147, 0.03785077, 0.38840798,
              0.25245026, 0.53431646, 0.68455106, 0.89856418, 0.224219  ,
              0.46094372, 0.35976998, 0.199805  , 0.01956827, 0.42922936,
              0.5519977 , 0.19029351, 0.34022236, 0.33384406, 0.98244129,
              0.82041254, 0.71878274, 0.66523274, 0.78855699, 0.59046577,
              0.21216199, 0.82632358, 0.22193119, 0.87485559, 0.85643025,
              0.12470007, 0.63893944, 0.44301356, 0.54209777, 0.229727  ,
              0.95335869, 0.6701664 , 0.70308719, 0.09683418, 0.05273315,
              0.26720083, 0.19677881, 0.74836065, 0.5625373 , 0.88742316,
              0.77794957, 0.28348267, 0.66984153, 0.21903914, 0.13053378,
              0.41870555, 0.32593515, 0.77471641, 0.47608243, 0.02701936,
              0.09938519, 0.57656939, 0.95008113, 0.91887437, 0.424083  ,
              0.01394226, 0.76166823, 0.64128604, 0.92311195, 0.47329495,
              0.68273468, 0.10145228, 0.08203263, 0.57107275, 0.33345799,
              0.9849312 , 0.44989323, 0.34353649, 0.0910189 , 0.27015109,
              0.5789816 , 0.21126141, 0.31337851, 0.03964952, 0.6250397 ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.09228719, 0.22684879, 0.74371566, 0.2236816 , 0.99727769,
              0.53542561, 0.33465919, 0.36168852, 0.54692163, 0.90933176,
              0.77343575, 0.77182795, 0.12522351, 0.95382008, 0.23501506,
              0.13518873, 0.21044252, 0.16758451, 0.77595502, 0.37330332,
              0.09891341, 0.73273798, 0.25926207, 0.84174561, 0.34595271,
              0.05629272, 0.86955671, 0.65169397, 0.90154471, 0.94367689,
              0.28727388, 0.08873252, 0.38454181, 0.99168125, 0.89064626,
              0.55710022, 0.20765713, 0.46800541, 0.74313475, 0.64731809,
              0.45825877, 0.53886065, 0.54386694, 0.32007714, 0.64455714,
              0.59723453, 0.08371326, 0.79521519, 0.91917664, 0.83690092,
              0.63561392, 0.2172706 , 0.3705783 , 0.1266825 , 0.6033221 ,
              0.65003977, 0.34675706, 0.35788771, 0.93216837, 0.23917642,
              0.92303014, 0.818166  , 0.10262008, 0.78449932, 0.55878379,
              0.54538057, 0.20819924, 0.88305704, 0.06356306, 0.10370345,
              0.8393965 , 0.18556145, 0.33569196, 0.96188381, 0.57734744,
              0.72592922, 0.63397755, 0.2426732 , 0.04809298, 0.44979052,
              0.15519714, 0.26884652, 0.22558969, 0.53451438, 0.16597735,
              0.37606031, 0.7065311 , 0.37988617, 0.50708722, 0.34453514,
              0.97057645, 0.58538896, 0.52114073, 0.72137065, 0.97178385,
              0.8460159 , 0.71795897, 0.35562155, 0.49367723, 0.07940639])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.50696185, 0.36182851, 0.17294467, 0.71369529, 0.92219273,
              0.51109999, 0.81770386, 0.18853906, 0.2345451 , 0.9714683 ,
              0.59363065, 0.01098952, 0.10637469, 0.04589625, 0.06675   ,
              0.33859927, 0.75358875, 0.4075124 , 0.53211552, 0.60924246,
              0.58522861, 0.2879047 , 0.73975144, 0.49597403, 0.70986732,
              0.99228399, 0.89659426, 0.17773493, 0.84209221, 0.09403452,
              0.05171858, 0.07456914, 0.28337151, 0.40493022, 0.96385453,
              0.334057  , 0.56492479, 0.71385659, 0.54338087, 0.10830346,
              0.91309683, 0.5711715 , 0.81993088, 0.60080032, 0.30165243,
              0.09934773, 0.97882287, 0.44071338, 0.46349855, 0.12539469,
              0.43507773, 0.24194443, 0.60855188, 0.2142766 , 0.28024053,
              0.22667   , 0.0484971 , 0.14265818, 0.76123363, 0.52224883,
              0.74406764, 0.67751761, 0.37402448, 0.69851178, 0.47719267,
              0.91016855, 0.90932736, 0.5120861 , 0.69230813, 0.84045461,
              0.34836756, 0.7326392 , 0.80465964, 0.31256078, 0.89931252,
              0.98659852, 0.82667854, 0.6668516 , 0.71233086, 0.668588  ,
              0.53708541, 0.82321624, 0.59014274, 0.33473416, 0.6420961 ,
              0.86263838, 0.19518211, 0.25734347, 0.38497043, 0.2302117 ,
              0.30965127, 0.05013598, 0.25217419, 0.37698346, 0.77996873,
              0.59807381, 0.97274699, 0.67136725, 0.19143915, 0.51385066])}]]


