
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='b797b350-23c9-493b-9505-7dca33235ebe'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='0e1a15e8-c108-4152-a83c-dc9fbf28b088'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.649431238270985],
     [0.455245716377666],
     [0.212273063821321],
     [0.175737971060312],
     [0.371161915799973],
     [0.280822382150432],
     [0.703112223261012],
     [0.498799606811914],
     [0.868629183561529],
     [0.431937781479069],
     [0.356282773434014],
     [0.436933733766279],
     [0.991577324232201],
     [0.955395315749715],
     [0.640004268826121],
     [0.77655237633634],
     [0.0937477664590801],
     [0.272998447742463],
     [0.860160874898592],
     [0.761194864687969],
     [0.544740183189708],
     [0.415247318672199],
     [0.943544888252531],
     [0.406026429355103],
     [0.455299590345439],
     [0.56080116547473],
     [0.245894825180134],
     [0.949756727948204],
     [0.445632232974046],
     [0.679068645203556],
     [0.409867184527585],
     [0.392387002225662],
     [0.374838340307793],
     [0.0155113175640414],
     [0.99404548652483],
     [0.845549509847204],
     [0.850272607699397],
     [0.598450340789855],
     [0.533714672315315],
     [0.366537992984889],
     [0.786911749309848],
     [0.312458454257627],
     [0.871866147539275],
     [0.461661003400594],
     [0.508476583354588],
     [0.11353341171231],
     [0.751399022680207],
     [0.166813135961168],
     [0.490356792559693],
     [0.739375837904052],
     [0.827398395234989],
     [0.894379767908961],
     [0.464893457280579],
     [0.896834728312961],
     [0.890032223256733],
     [0.713123814769102],
     [0.302245916276216],
     [0.866889974511428],
     [0.858053802479818],
     [0.471169203903643],
     [0.647265416104927],
     [0.771654575962265],
     [0.57537449518251],
     [0.549381008817231],
     [0.864422442756698],
     [0.827040406966651],
     [0.0610427808470655],
     [0.858919524840526],
     [0.784019596104714],
     [0.0216179036833255],
     [0.884199852938892],
     [0.43677824776736],
     [0.000788482238477162],
     [0.250120844049039],
     [0.623715129935013],
     [0.448217668850416],
     [0.455316312948912],
     [0.228971429302677],
     [0.355829162801494],
     [0.215551638926993],
     [0.170612600132534],
     [0.801338734798619],
     [0.627294165657686],
     [0.90249001280312],
     [0.208369019064243],
     [0.871708162416519],
     [0.390150100133757],
     [0.939904419283181],
     [0.157636644254479],
     [0.46187277157866],
     [0.414529244216509],
     [0.115346511183021],
     [0.54979231336659],
     [0.526304645959546],
     [0.0251901344927807],
     [0.937211471966314],
     [0.142045202241176],
     [0.241260100279347],
     [0.893032562055438],
     [0.467818229693112]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.56353832])],
     [array([ 0.02207179])],
     [array([ 0.10446384])],
     [array([ 0.52394378])],
     [array([ 0.13077176])],
     [array([ 0.70610742])],
     [array([ 0.85916369])],
     [array([ 0.95529914])],
     [array([ 0.08120114])],
     [array([ 0.16289467])],
     [array([ 0.77884161])],
     [array([ 0.6688355])],
     [array([ 0.99450888])],
     [array([ 0.47525757])],
     [array([ 0.94168277])],
     [array([ 0.38790036])],
     [array([ 0.05462078])],
     [array([ 0.00794385])],
     [array([ 0.16517061])],
     [array([ 0.65888877])],
     [array([ 0.92436609])],
     [array([ 0.34377689])],
     [array([ 0.76681028])],
     [array([ 0.17428939])],
     [array([ 0.49341205])],
     [array([ 0.73585774])],
     [array([ 0.07761772])],
     [array([ 0.09186455])],
     [array([ 0.80300086])],
     [array([ 0.19147948])],
     [array([ 0.26877875])],
     [array([ 0.98815967])],
     [array([ 0.09134883])],
     [array([ 0.56298877])],
     [array([ 0.36211919])],
     [array([ 0.23030006])],
     [array([ 0.58507298])],
     [array([ 0.46129091])],
     [array([ 0.00715571])],
     [array([ 0.66288905])],
     [array([ 0.95247467])],
     [array([ 0.89214853])],
     [array([ 0.4368058])],
     [array([ 0.00526708])],
     [array([ 0.45235852])],
     [array([ 0.48386592])],
     [array([ 0.57247508])],
     [array([ 0.66415751])],
     [array([ 0.75450853])],
     [array([ 0.67595991])],
     [array([ 0.41419907])],
     [array([ 0.17946596])],
     [array([ 0.59687998])],
     [array([ 0.17603774])],
     [array([ 0.52988803])],
     [array([ 0.19222577])],
     [array([ 0.68630286])],
     [array([ 0.81245898])],
     [array([ 0.0549746])],
     [array([ 0.53844316])],
     [array([ 0.78151795])],
     [array([ 0.57169577])],
     [array([ 0.12432499])],
     [array([ 0.66108611])],
     [array([ 0.939038])],
     [array([ 0.90334012])],
     [array([ 0.09833698])],
     [array([ 0.84598378])],
     [array([ 0.92636049])],
     [array([ 0.71458153])],
     [array([ 0.07040769])],
     [array([ 0.77635548])],
     [array([ 0.08706449])],
     [array([ 0.74235449])],
     [array([ 0.89579386])],
     [array([ 0.15672356])],
     [array([ 0.44908674])],
     [array([ 0.06430884])],
     [array([ 0.55117864])],
     [array([ 0.82101404])],
     [array([ 0.91662759])],
     [array([ 0.75165159])],
     [array([ 0.37248283])],
     [array([ 0.67029958])],
     [array([ 0.85604212])],
     [array([ 0.64873502])],
     [array([ 0.21525291])],
     [array([ 0.61288798])],
     [array([ 0.3869047])],
     [array([ 0.13331287])],
     [array([ 0.98835827])],
     [array([ 0.29822086])],
     [array([ 0.40367642])],
     [array([ 0.58236828])],
     [array([ 0.43691416])],
     [array([ 0.70776404])],
     [array([ 0.26799868])],
     [array([ 0.0117835])],
     [array([ 0.98651325])],
     [array([ 0.44672587])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.56353832,  0.02207179,  0.10446384,  0.52394378,  0.13077176,
            0.70610742,  0.85916369,  0.95529914,  0.08120114,  0.16289467,
            0.77884161,  0.6688355 ,  0.99450888,  0.47525757,  0.94168277,
            0.38790036,  0.05462078,  0.00794385,  0.16517061,  0.65888877,
            0.92436609,  0.34377689,  0.76681028,  0.17428939,  0.49341205,
            0.73585774,  0.07761772,  0.09186455,  0.80300086,  0.19147948,
            0.26877875,  0.98815967,  0.09134883,  0.56298877,  0.36211919,
            0.23030006,  0.58507298,  0.46129091,  0.00715571,  0.66288905,
            0.95247467,  0.89214853,  0.4368058 ,  0.00526708,  0.45235852,
            0.48386592,  0.57247508,  0.66415751,  0.75450853,  0.67595991,
            0.41419907,  0.17946596,  0.59687998,  0.17603774,  0.52988803,
            0.19222577,  0.68630286,  0.81245898,  0.0549746 ,  0.53844316,
            0.78151795,  0.57169577,  0.12432499,  0.66108611,  0.939038  ,
            0.90334012,  0.09833698,  0.84598378,  0.92636049,  0.71458153,
            0.07040769,  0.77635548,  0.08706449,  0.74235449,  0.89579386,
            0.15672356,  0.44908674,  0.06430884,  0.55117864,  0.82101404,
            0.91662759,  0.75165159,  0.37248283,  0.67029958,  0.85604212,
            0.64873502,  0.21525291,  0.61288798,  0.3869047 ,  0.13331287,
            0.98835827,  0.29822086,  0.40367642,  0.58236828,  0.43691416,
            0.70776404,  0.26799868,  0.0117835 ,  0.98651325,  0.44672587])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  6.49431238e-01,   4.55245716e-01,   2.12273064e-01,
                1.75737971e-01,   3.71161916e-01,   2.80822382e-01,
                7.03112223e-01,   4.98799607e-01,   8.68629184e-01,
                4.31937781e-01,   3.56282773e-01,   4.36933734e-01,
                9.91577324e-01,   9.55395316e-01,   6.40004269e-01,
                7.76552376e-01,   9.37477665e-02,   2.72998448e-01,
                8.60160875e-01,   7.61194865e-01,   5.44740183e-01,
                4.15247319e-01,   9.43544888e-01,   4.06026429e-01,
                4.55299590e-01,   5.60801165e-01,   2.45894825e-01,
                9.49756728e-01,   4.45632233e-01,   6.79068645e-01,
                4.09867185e-01,   3.92387002e-01,   3.74838340e-01,
                1.55113176e-02,   9.94045487e-01,   8.45549510e-01,
                8.50272608e-01,   5.98450341e-01,   5.33714672e-01,
                3.66537993e-01,   7.86911749e-01,   3.12458454e-01,
                8.71866148e-01,   4.61661003e-01,   5.08476583e-01,
                1.13533412e-01,   7.51399023e-01,   1.66813136e-01,
                4.90356793e-01,   7.39375838e-01,   8.27398395e-01,
                8.94379768e-01,   4.64893457e-01,   8.96834728e-01,
                8.90032223e-01,   7.13123815e-01,   3.02245916e-01,
                8.66889975e-01,   8.58053802e-01,   4.71169204e-01,
                6.47265416e-01,   7.71654576e-01,   5.75374495e-01,
                5.49381009e-01,   8.64422443e-01,   8.27040407e-01,
                6.10427808e-02,   8.58919525e-01,   7.84019596e-01,
                2.16179037e-02,   8.84199853e-01,   4.36778248e-01,
                7.88482238e-04,   2.50120844e-01,   6.23715130e-01,
                4.48217669e-01,   4.55316313e-01,   2.28971429e-01,
                3.55829163e-01,   2.15551639e-01,   1.70612600e-01,
                8.01338735e-01,   6.27294166e-01,   9.02490013e-01,
                2.08369019e-01,   8.71708162e-01,   3.90150100e-01,
                9.39904419e-01,   1.57636644e-01,   4.61872772e-01,
                4.14529244e-01,   1.15346511e-01,   5.49792313e-01,
                5.26304646e-01,   2.51901345e-02,   9.37211472e-01,
                1.42045202e-01,   2.41260100e-01,   8.93032562e-01,
                4.67818230e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.12649832,  0.53414432,  0.8783844 ,  0.53393339,  0.62144805,
               0.33393594,  0.93978146,  0.06292726,  0.97730657,  0.96359147,
               0.52698565,  0.54327257,  0.74611651,  0.19131822,  0.29100648,
               0.28534939,  0.76285448,  0.72036166,  0.57296795,  0.45867859,
               0.07781488,  0.70868621,  0.54374424,  0.50016018,  0.90883271,
               0.26345908,  0.31799046,  0.05661236,  0.02580029,  0.40366411,
               0.69251402,  0.71843871,  0.68851281,  0.04233722,  0.19790721,
               0.26568978,  0.99157084,  0.30211937,  0.05728207,  0.9489649 ,
               0.54896533,  0.66281856,  0.57990858,  0.44546507,  0.58642665,
               0.30823737,  0.78501451,  0.31501998,  0.33769814,  0.06280667,
               0.82834216,  0.43156212,  0.31367984,  0.66009054,  0.17361637,
               0.47417028,  0.5182493 ,  0.23250876,  0.77077981,  0.00724447,
               0.28568826,  0.15304843,  0.4931983 ,  0.16512741,  0.11492869,
               0.93220962,  0.22203157,  0.69684249,  0.40342986,  0.9437119 ,
               0.46247432,  0.27894675,  0.64806137,  0.41358751,  0.35015069,
               0.72368698,  0.29343688,  0.35904078,  0.39495012,  0.22009107,
               0.76440347,  0.20696744,  0.9650038 ,  0.85117617,  0.37827922,
               0.16436445,  0.45513358,  0.86848332,  0.75255149,  0.97124432,
               0.62199579,  0.28033222,  0.70555437,  0.1832263 ,  0.76958072,
               0.05328591,  0.5781622 ,  0.9350974 ,  0.99950728,  0.64994786])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.62948773,  0.86850181,  0.72345931,  0.44972336,  0.09617949,
               0.02094352,  0.49478207,  0.53906067,  0.24061713,  0.1128018 ,
               0.75327055,  0.11365642,  0.88960662,  0.72655559,  0.46414721,
               0.6114845 ,  0.01372266,  0.51452375,  0.05540253,  0.05080744,
               0.74519383,  0.20583467,  0.91337262,  0.63752292,  0.02584558,
               0.94129181,  0.96145262,  0.05963241,  0.86296137,  0.32870288,
               0.90051366,  0.50678073,  0.0029099 ,  0.08081153,  0.08012791,
               0.35845656,  0.18584559,  0.45242215,  0.35980094,  0.49178472,
               0.93982218,  0.95701093,  0.88913822,  0.31250322,  0.65358024,
               0.99109405,  0.81328779,  0.59787902,  0.8278566 ,  0.0765849 ,
               0.87545998,  0.3121857 ,  0.25212031,  0.58776368,  0.7461243 ,
               0.77551083,  0.49983805,  0.20051929,  0.5913559 ,  0.39805993,
               0.17863898,  0.86814885,  0.18350816,  0.69603777,  0.60181655,
               0.73213111,  0.64126574,  0.6542842 ,  0.03656042,  0.59239358,
               0.70200041,  0.62397215,  0.37046814,  0.57269508,  0.8954828 ,
               0.84972574,  0.48495696,  0.28009637,  0.21277344,  0.82829372,
               0.07590597,  0.08217113,  0.22728723,  0.88643987,  0.3899122 ,
               0.31907492,  0.69203971,  0.52521554,  0.66990649,  0.37549455,
               0.6728687 ,  0.98782648,  0.30875504,  0.55506336,  0.10127857,
               0.06671878,  0.96504126,  0.26866096,  0.12950963,  0.67097818])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.67548067,  0.91987919,  0.57323618,  0.0494722 ,  0.03406562,
               0.89907995,  0.02166679,  0.9804253 ,  0.63003539,  0.30421847,
               0.84854655,  0.63133674,  0.98563808,  0.59693597,  0.21560092,
               0.32675156,  0.79716132,  0.1392948 ,  0.53267629,  0.7545869 ,
               0.21874331,  0.70322554,  0.74843211,  0.17772871,  0.55797833,
               0.8713571 ,  0.54347207,  0.17452942,  0.53354342,  0.10112765,
               0.08056857,  0.96279986,  0.97790357,  0.5123908 ,  0.76906616,
               0.45177447,  0.45619099,  0.48267981,  0.48611636,  0.84419955,
               0.77306908,  0.24988037,  0.33898538,  0.38968114,  0.20363414,
               0.49441564,  0.60283207,  0.1255089 ,  0.98758181,  0.25559508,
               0.84177892,  0.50419848,  0.02630737,  0.97553228,  0.06343483,
               0.77339128,  0.57673401,  0.27994468,  0.18608805,  0.17826968,
               0.30464708,  0.882131  ,  0.26200417,  0.06023132,  0.20887309,
               0.2429328 ,  0.4585158 ,  0.13905453,  0.7695272 ,  0.50123628,
               0.92750041,  0.82539371,  0.84557744,  0.46620904,  0.91157121,
               0.4545633 ,  0.74015577,  0.0836803 ,  0.93411139,  0.83613481,
               0.10400814,  0.37532615,  0.39536324,  0.50197866,  0.69400249,
               0.71483263,  0.5826034 ,  0.49865915,  0.97348494,  0.47458853,
               0.17083039,  0.43454738,  0.39066352,  0.45448939,  0.32457362,
               0.62562213,  0.23365379,  0.68575533,  0.87794617,  0.07312007])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  6.49431238e-01,   4.55245716e-01,   2.12273064e-01,
                1.75737971e-01,   3.71161916e-01,   2.80822382e-01,
                7.03112223e-01,   4.98799607e-01,   8.68629184e-01,
                4.31937781e-01,   3.56282773e-01,   4.36933734e-01,
                9.91577324e-01,   9.55395316e-01,   6.40004269e-01,
                7.76552376e-01,   9.37477665e-02,   2.72998448e-01,
                8.60160875e-01,   7.61194865e-01,   5.44740183e-01,
                4.15247319e-01,   9.43544888e-01,   4.06026429e-01,
                4.55299590e-01,   5.60801165e-01,   2.45894825e-01,
                9.49756728e-01,   4.45632233e-01,   6.79068645e-01,
                4.09867185e-01,   3.92387002e-01,   3.74838340e-01,
                1.55113176e-02,   9.94045487e-01,   8.45549510e-01,
                8.50272608e-01,   5.98450341e-01,   5.33714672e-01,
                3.66537993e-01,   7.86911749e-01,   3.12458454e-01,
                8.71866148e-01,   4.61661003e-01,   5.08476583e-01,
                1.13533412e-01,   7.51399023e-01,   1.66813136e-01,
                4.90356793e-01,   7.39375838e-01,   8.27398395e-01,
                8.94379768e-01,   4.64893457e-01,   8.96834728e-01,
                8.90032223e-01,   7.13123815e-01,   3.02245916e-01,
                8.66889975e-01,   8.58053802e-01,   4.71169204e-01,
                6.47265416e-01,   7.71654576e-01,   5.75374495e-01,
                5.49381009e-01,   8.64422443e-01,   8.27040407e-01,
                6.10427808e-02,   8.58919525e-01,   7.84019596e-01,
                2.16179037e-02,   8.84199853e-01,   4.36778248e-01,
                7.88482238e-04,   2.50120844e-01,   6.23715130e-01,
                4.48217669e-01,   4.55316313e-01,   2.28971429e-01,
                3.55829163e-01,   2.15551639e-01,   1.70612600e-01,
                8.01338735e-01,   6.27294166e-01,   9.02490013e-01,
                2.08369019e-01,   8.71708162e-01,   3.90150100e-01,
                9.39904419e-01,   1.57636644e-01,   4.61872772e-01,
                4.14529244e-01,   1.15346511e-01,   5.49792313e-01,
                5.26304646e-01,   2.51901345e-02,   9.37211472e-01,
                1.42045202e-01,   2.41260100e-01,   8.93032562e-01,
                4.67818230e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.12649832,  0.53414432,  0.8783844 ,  0.53393339,  0.62144805,
               0.33393594,  0.93978146,  0.06292726,  0.97730657,  0.96359147,
               0.52698565,  0.54327257,  0.74611651,  0.19131822,  0.29100648,
               0.28534939,  0.76285448,  0.72036166,  0.57296795,  0.45867859,
               0.07781488,  0.70868621,  0.54374424,  0.50016018,  0.90883271,
               0.26345908,  0.31799046,  0.05661236,  0.02580029,  0.40366411,
               0.69251402,  0.71843871,  0.68851281,  0.04233722,  0.19790721,
               0.26568978,  0.99157084,  0.30211937,  0.05728207,  0.9489649 ,
               0.54896533,  0.66281856,  0.57990858,  0.44546507,  0.58642665,
               0.30823737,  0.78501451,  0.31501998,  0.33769814,  0.06280667,
               0.82834216,  0.43156212,  0.31367984,  0.66009054,  0.17361637,
               0.47417028,  0.5182493 ,  0.23250876,  0.77077981,  0.00724447,
               0.28568826,  0.15304843,  0.4931983 ,  0.16512741,  0.11492869,
               0.93220962,  0.22203157,  0.69684249,  0.40342986,  0.9437119 ,
               0.46247432,  0.27894675,  0.64806137,  0.41358751,  0.35015069,
               0.72368698,  0.29343688,  0.35904078,  0.39495012,  0.22009107,
               0.76440347,  0.20696744,  0.9650038 ,  0.85117617,  0.37827922,
               0.16436445,  0.45513358,  0.86848332,  0.75255149,  0.97124432,
               0.62199579,  0.28033222,  0.70555437,  0.1832263 ,  0.76958072,
               0.05328591,  0.5781622 ,  0.9350974 ,  0.99950728,  0.64994786])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.62948773,  0.86850181,  0.72345931,  0.44972336,  0.09617949,
               0.02094352,  0.49478207,  0.53906067,  0.24061713,  0.1128018 ,
               0.75327055,  0.11365642,  0.88960662,  0.72655559,  0.46414721,
               0.6114845 ,  0.01372266,  0.51452375,  0.05540253,  0.05080744,
               0.74519383,  0.20583467,  0.91337262,  0.63752292,  0.02584558,
               0.94129181,  0.96145262,  0.05963241,  0.86296137,  0.32870288,
               0.90051366,  0.50678073,  0.0029099 ,  0.08081153,  0.08012791,
               0.35845656,  0.18584559,  0.45242215,  0.35980094,  0.49178472,
               0.93982218,  0.95701093,  0.88913822,  0.31250322,  0.65358024,
               0.99109405,  0.81328779,  0.59787902,  0.8278566 ,  0.0765849 ,
               0.87545998,  0.3121857 ,  0.25212031,  0.58776368,  0.7461243 ,
               0.77551083,  0.49983805,  0.20051929,  0.5913559 ,  0.39805993,
               0.17863898,  0.86814885,  0.18350816,  0.69603777,  0.60181655,
               0.73213111,  0.64126574,  0.6542842 ,  0.03656042,  0.59239358,
               0.70200041,  0.62397215,  0.37046814,  0.57269508,  0.8954828 ,
               0.84972574,  0.48495696,  0.28009637,  0.21277344,  0.82829372,
               0.07590597,  0.08217113,  0.22728723,  0.88643987,  0.3899122 ,
               0.31907492,  0.69203971,  0.52521554,  0.66990649,  0.37549455,
               0.6728687 ,  0.98782648,  0.30875504,  0.55506336,  0.10127857,
               0.06671878,  0.96504126,  0.26866096,  0.12950963,  0.67097818])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.16145574,  0.51325286,  0.81378485,  0.50908146,  0.1840592 ,
               0.75121106,  0.59672295,  0.13115598,  0.95924917,  0.8338148 ,
               0.61913049,  0.21250891,  0.4314781 ,  0.32044101,  0.62122196,
               0.66678105,  0.64031395,  0.15377608,  0.10893616,  0.789362  ,
               0.93370626,  0.1416764 ,  0.82273288,  0.53035204,  0.71745433,
               0.02201558,  0.74454511,  0.62390469,  0.38933417,  0.82624522,
               0.74424425,  0.90835871,  0.36158494,  0.66993942,  0.45408955,
               0.85295767,  0.51280142,  0.52266185,  0.12153906,  0.92378367,
               0.84556787,  0.28366219,  0.70043937,  0.76613837,  0.11377988,
               0.12065128,  0.16474421,  0.0614587 ,  0.81810936,  0.30084121,
               0.49717443,  0.54627838,  0.94218541,  0.26372346,  0.30081662,
               0.99529303,  0.94796303,  0.03116996,  0.42457326,  0.94486092,
               0.72895152,  0.26207646,  0.18061856,  0.67559054,  0.43924307,
               0.40898096,  0.19881898,  0.70140348,  0.12692803,  0.91300834,
               0.25626309,  0.97439947,  0.24429189,  0.65105232,  0.46119933,
               0.18510882,  0.44240545,  0.55863119,  0.36837079,  0.52674408,
               0.10797966,  0.32461382,  0.37529256,  0.1026681 ,  0.93889391,
               0.09626808,  0.41324853,  0.74430633,  0.32960479,  0.79618682,
               0.69417267,  0.1633552 ,  0.80680267,  0.85802155,  0.15486986,
               0.37639895,  0.85193151,  0.98338365,  0.51985582,  0.35042327])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.56353832,  0.02207179,  0.10446384,  0.52394378,  0.13077176,
               0.70610742,  0.85916369,  0.95529914,  0.08120114,  0.16289467,
               0.77884161,  0.6688355 ,  0.99450888,  0.47525757,  0.94168277,
               0.38790036,  0.05462078,  0.00794385,  0.16517061,  0.65888877,
               0.92436609,  0.34377689,  0.76681028,  0.17428939,  0.49341205,
               0.73585774,  0.07761772,  0.09186455,  0.80300086,  0.19147948,
               0.26877875,  0.98815967,  0.09134883,  0.56298877,  0.36211919,
               0.23030006,  0.58507298,  0.46129091,  0.00715571,  0.66288905,
               0.95247467,  0.89214853,  0.4368058 ,  0.00526708,  0.45235852,
               0.48386592,  0.57247508,  0.66415751,  0.75450853,  0.67595991,
               0.41419907,  0.17946596,  0.59687998,  0.17603774,  0.52988803,
               0.19222577,  0.68630286,  0.81245898,  0.0549746 ,  0.53844316,
               0.78151795,  0.57169577,  0.12432499,  0.66108611,  0.939038  ,
               0.90334012,  0.09833698,  0.84598378,  0.92636049,  0.71458153,
               0.07040769,  0.77635548,  0.08706449,  0.74235449,  0.89579386,
               0.15672356,  0.44908674,  0.06430884,  0.55117864,  0.82101404,
               0.91662759,  0.75165159,  0.37248283,  0.67029958,  0.85604212,
               0.64873502,  0.21525291,  0.61288798,  0.3869047 ,  0.13331287,
               0.98835827,  0.29822086,  0.40367642,  0.58236828,  0.43691416,
               0.70776404,  0.26799868,  0.0117835 ,  0.98651325,  0.44672587])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.16433587,  0.7572818 ,  0.66356462,  0.52382773,  0.07726424,
               0.16486919,  0.9627594 ,  0.96839997,  0.7158132 ,  0.31887952,
               0.02596127,  0.75208293,  0.1104318 ,  0.13978332,  0.5625097 ,
               0.47850533,  0.85932785,  0.52295047,  0.1070726 ,  0.27971583,
               0.06496266,  0.52957808,  0.07093218,  0.2873113 ,  0.18105102,
               0.93730382,  0.13188639,  0.67407131,  0.35899247,  0.02232774,
               0.22406341,  0.16229197,  0.56096772,  0.92850796,  0.9926586 ,
               0.59185666,  0.89029314,  0.94418616,  0.62035286,  0.44600008,
               0.19407263,  0.92306443,  0.41126979,  0.77491554,  0.95633562,
               0.12638317,  0.82538061,  0.03882571,  0.52473203,  0.83531197,
               0.66487494,  0.32381878,  0.483534  ,  0.65771561,  0.21130295,
               0.30190263,  0.40443271,  0.64808884,  0.70301785,  0.16920388,
               0.57065066,  0.96848926,  0.16018006,  0.25507539,  0.15881891,
               0.56227632,  0.29784152,  0.30478155,  0.0576765 ,  0.62430455,
               0.12515976,  0.02837618,  0.99264879,  0.49887854,  0.56852103,
               0.5323441 ,  0.96581545,  0.08210684,  0.59976918,  0.70341671,
               0.94547733,  0.21877982,  0.70366104,  0.22920272,  0.33376438,
               0.1021858 ,  0.48816511,  0.79748087,  0.77351099,  0.6554283 ,
               0.7337742 ,  0.17188153,  0.89693307,  0.06061255,  0.05917861,
               0.79272524,  0.2895192 ,  0.90813784,  0.7326034 ,  0.22135378])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.96280036,  0.49598657,  0.81723142,  0.33909319,  0.6556243 ,
               0.07241467,  0.63637212,  0.24245367,  0.04847689,  0.95333116,
               0.27295706,  0.40712743,  0.67419181,  0.01994642,  0.49581536,
               0.42316567,  0.35978513,  0.85593567,  0.44150676,  0.7085253 ,
               0.81948094,  0.83992157,  0.29968493,  0.6244071 ,  0.43908832,
               0.58957492,  0.47577807,  0.60912779,  0.52889652,  0.96922144,
               0.86105829,  0.55647566,  0.94164434,  0.00467156,  0.50225449,
               0.8505737 ,  0.0330043 ,  0.45638834,  0.14284304,  0.56870901,
               0.02549309,  0.27544661,  0.73379419,  0.04214321,  0.5753314 ,
               0.81327547,  0.72322324,  0.79422697,  0.68754904,  0.97987642,
               0.60542708,  0.03966867,  0.98379426,  0.35276179,  0.86079734,
               0.36675192,  0.27223091,  0.67472517,  0.17085149,  0.38140866,
               0.47107642,  0.63638169,  0.86274913,  0.99273269,  0.09198035,
               0.15328937,  0.98314504,  0.06628681,  0.45467874,  0.11845616,
               0.66360315,  0.58312705,  0.07471497,  0.06602765,  0.26290783,
               0.33770913,  0.63685565,  0.33912176,  0.7720124 ,  0.79001056,
               0.81672892,  0.82647998,  0.18927452,  0.59519923,  0.18979954,
               0.34709092,  0.705175  ,  0.45152704,  0.30705425,  0.84532002,
               0.35764049,  0.40628248,  0.76143095,  0.08489301,  0.81761978,
               0.65262696,  0.01197411,  0.57782386,  0.60026007,  0.96232041])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.7523281 ,  0.27745034,  0.1870649 ,  0.64337296,  0.7619549 ,
               0.02915336,  0.32560099,  0.51520073,  0.51238756,  0.50502074,
               0.62475987,  0.6649998 ,  0.38255827,  0.23953381,  0.70775898,
               0.98426837,  0.01836993,  0.52658894,  0.3028307 ,  0.67059846,
               0.05495816,  0.92062005,  0.39489534,  0.77227051,  0.10462188,
               0.67836568,  0.04098365,  0.43523839,  0.93723255,  0.23558087,
               0.07660731,  0.57066003,  0.55857759,  0.27031416,  0.6821349 ,
               0.18610884,  0.74570387,  0.72214172,  0.0545716 ,  0.53097762,
               0.15920347,  0.81858315,  0.53632264,  0.35198475,  0.74399424,
               0.65274343,  0.90752684,  0.40125119,  0.96296618,  0.03937834,
               0.12973737,  0.89074618,  0.06055116,  0.59420159,  0.20254248,
               0.4452511 ,  0.03784892,  0.32454158,  0.77480753,  0.45629056,
               0.59151028,  0.92515001,  0.02940015,  0.90927424,  0.12790232,
               0.41108265,  0.19758142,  0.46724713,  0.97949466,  0.48719404,
               0.2642591 ,  0.18425049,  0.91696899,  0.01033454,  0.13076099,
               0.71924396,  0.6853957 ,  0.53056969,  0.2892918 ,  0.14194861,
               0.50162135,  0.28746587,  0.84441359,  0.35244353,  0.38263391,
               0.70511266,  0.86427328,  0.03584209,  0.6130704 ,  0.80001864,
               0.40871423,  0.79082403,  0.98730326,  0.92307914,  0.64026125,
               0.59304971,  0.42918297,  0.79105299,  0.34482225,  0.48624412])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.56353832,  0.02207179,  0.10446384,  0.52394378,  0.13077176,
               0.70610742,  0.85916369,  0.95529914,  0.08120114,  0.16289467,
               0.77884161,  0.6688355 ,  0.99450888,  0.47525757,  0.94168277,
               0.38790036,  0.05462078,  0.00794385,  0.16517061,  0.65888877,
               0.92436609,  0.34377689,  0.76681028,  0.17428939,  0.49341205,
               0.73585774,  0.07761772,  0.09186455,  0.80300086,  0.19147948,
               0.26877875,  0.98815967,  0.09134883,  0.56298877,  0.36211919,
               0.23030006,  0.58507298,  0.46129091,  0.00715571,  0.66288905,
               0.95247467,  0.89214853,  0.4368058 ,  0.00526708,  0.45235852,
               0.48386592,  0.57247508,  0.66415751,  0.75450853,  0.67595991,
               0.41419907,  0.17946596,  0.59687998,  0.17603774,  0.52988803,
               0.19222577,  0.68630286,  0.81245898,  0.0549746 ,  0.53844316,
               0.78151795,  0.57169577,  0.12432499,  0.66108611,  0.939038  ,
               0.90334012,  0.09833698,  0.84598378,  0.92636049,  0.71458153,
               0.07040769,  0.77635548,  0.08706449,  0.74235449,  0.89579386,
               0.15672356,  0.44908674,  0.06430884,  0.55117864,  0.82101404,
               0.91662759,  0.75165159,  0.37248283,  0.67029958,  0.85604212,
               0.64873502,  0.21525291,  0.61288798,  0.3869047 ,  0.13331287,
               0.98835827,  0.29822086,  0.40367642,  0.58236828,  0.43691416,
               0.70776404,  0.26799868,  0.0117835 ,  0.98651325,  0.44672587])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.16433587,  0.7572818 ,  0.66356462,  0.52382773,  0.07726424,
               0.16486919,  0.9627594 ,  0.96839997,  0.7158132 ,  0.31887952,
               0.02596127,  0.75208293,  0.1104318 ,  0.13978332,  0.5625097 ,
               0.47850533,  0.85932785,  0.52295047,  0.1070726 ,  0.27971583,
               0.06496266,  0.52957808,  0.07093218,  0.2873113 ,  0.18105102,
               0.93730382,  0.13188639,  0.67407131,  0.35899247,  0.02232774,
               0.22406341,  0.16229197,  0.56096772,  0.92850796,  0.9926586 ,
               0.59185666,  0.89029314,  0.94418616,  0.62035286,  0.44600008,
               0.19407263,  0.92306443,  0.41126979,  0.77491554,  0.95633562,
               0.12638317,  0.82538061,  0.03882571,  0.52473203,  0.83531197,
               0.66487494,  0.32381878,  0.483534  ,  0.65771561,  0.21130295,
               0.30190263,  0.40443271,  0.64808884,  0.70301785,  0.16920388,
               0.57065066,  0.96848926,  0.16018006,  0.25507539,  0.15881891,
               0.56227632,  0.29784152,  0.30478155,  0.0576765 ,  0.62430455,
               0.12515976,  0.02837618,  0.99264879,  0.49887854,  0.56852103,
               0.5323441 ,  0.96581545,  0.08210684,  0.59976918,  0.70341671,
               0.94547733,  0.21877982,  0.70366104,  0.22920272,  0.33376438,
               0.1021858 ,  0.48816511,  0.79748087,  0.77351099,  0.6554283 ,
               0.7337742 ,  0.17188153,  0.89693307,  0.06061255,  0.05917861,
               0.79272524,  0.2895192 ,  0.90813784,  0.7326034 ,  0.22135378])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.96280036,  0.49598657,  0.81723142,  0.33909319,  0.6556243 ,
               0.07241467,  0.63637212,  0.24245367,  0.04847689,  0.95333116,
               0.27295706,  0.40712743,  0.67419181,  0.01994642,  0.49581536,
               0.42316567,  0.35978513,  0.85593567,  0.44150676,  0.7085253 ,
               0.81948094,  0.83992157,  0.29968493,  0.6244071 ,  0.43908832,
               0.58957492,  0.47577807,  0.60912779,  0.52889652,  0.96922144,
               0.86105829,  0.55647566,  0.94164434,  0.00467156,  0.50225449,
               0.8505737 ,  0.0330043 ,  0.45638834,  0.14284304,  0.56870901,
               0.02549309,  0.27544661,  0.73379419,  0.04214321,  0.5753314 ,
               0.81327547,  0.72322324,  0.79422697,  0.68754904,  0.97987642,
               0.60542708,  0.03966867,  0.98379426,  0.35276179,  0.86079734,
               0.36675192,  0.27223091,  0.67472517,  0.17085149,  0.38140866,
               0.47107642,  0.63638169,  0.86274913,  0.99273269,  0.09198035,
               0.15328937,  0.98314504,  0.06628681,  0.45467874,  0.11845616,
               0.66360315,  0.58312705,  0.07471497,  0.06602765,  0.26290783,
               0.33770913,  0.63685565,  0.33912176,  0.7720124 ,  0.79001056,
               0.81672892,  0.82647998,  0.18927452,  0.59519923,  0.18979954,
               0.34709092,  0.705175  ,  0.45152704,  0.30705425,  0.84532002,
               0.35764049,  0.40628248,  0.76143095,  0.08489301,  0.81761978,
               0.65262696,  0.01197411,  0.57782386,  0.60026007,  0.96232041])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.28666655,  0.13603932,  0.04143693,  0.30371665,  0.14863366,
               0.19875642,  0.86110955,  0.424437  ,  0.97479835,  0.83788863,
               0.39887231,  0.90174194,  0.81920079,  0.82179216,  0.43297338,
               0.50141936,  0.91244899,  0.58037059,  0.72225517,  0.05985729,
               0.15941409,  0.97365011,  0.06199972,  0.97674141,  0.17836747,
               0.35626435,  0.19221229,  0.25241656,  0.97783489,  0.32567048,
               0.74085079,  0.78413842,  0.96745672,  0.94268852,  0.45570781,
               0.85798644,  0.30455437,  0.57286298,  0.07423027,  0.25624953,
               0.25080696,  0.93229801,  0.7149022 ,  0.95193167,  0.62580533,
               0.22976175,  0.45462913,  0.51606874,  0.69026481,  0.21759465,
               0.95285889,  0.56699143,  0.57773405,  0.32038186,  0.08050628,
               0.57713774,  0.92209882,  0.24651106,  0.57972062,  0.78277836,
               0.57307955,  0.13871546,  0.42328156,  0.96435358,  0.1058724 ,
               0.43665141,  0.23366192,  0.92158702,  0.41546694,  0.52213022,
               0.16886457,  0.26509483,  0.58053651,  0.04626764,  0.53205306,
               0.90719171,  0.53848215,  0.09260657,  0.37195797,  0.7353331 ,
               0.22801449,  0.21429587,  0.49526192,  0.20696624,  0.54269211,
               0.61772698,  0.3216196 ,  0.64336177,  0.81814852,  0.10554288,
               0.14962744,  0.74359347,  0.86774421,  0.10693445,  0.49823979,
               0.2380889 ,  0.46112258,  0.49717213,  0.49903135,  0.02680874])}]]


