
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='3311f750-5ee5-4b78-b794-26de43fc8771'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='50601fd8-4628-42b6-8faf-a8bfe5de05fa'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.331783008061754],
     [0.986892704207947],
     [0.98708418935028],
     [0.705453111930307],
     [0.748858390992563],
     [0.0998016648581267],
     [0.291943390750749],
     [0.247846961553884],
     [0.855640731145895],
     [0.26300126419679],
     [0.999995754565997],
     [0.242635605245372],
     [0.398932608816546],
     [0.801337741797553],
     [0.0113507826427098],
     [0.993276905000409],
     [0.611060778887464],
     [0.82138163489357],
     [0.715671187454329],
     [0.822762058024828],
     [0.210177382416769],
     [0.840000933083018],
     [0.19850306803825],
     [0.984649021911976],
     [0.257865769615735],
     [0.199100202744291],
     [0.593820703879417],
     [0.181315199745936],
     [0.132578626856294],
     [0.435645280312507],
     [0.260658945546366],
     [0.192925632051122],
     [0.476046190552104],
     [0.788046175196716],
     [0.511254947007005],
     [0.395121127270267],
     [0.0761201056299137],
     [0.210299879014098],
     [0.189926357455817],
     [0.0941462294549242],
     [0.335670448972558],
     [0.500314104231357],
     [0.812578704733669],
     [0.759139567852058],
     [0.375130784493591],
     [0.232601579955397],
     [0.687191143581156],
     [0.559779564687058],
     [0.196993621693359],
     [0.496830941229798],
     [0.120008187503478],
     [0.593902284993658],
     [0.59345453271115],
     [0.55251114012058],
     [0.767719353318438],
     [0.0219418819095818],
     [0.869025506483053],
     [0.153735492061838],
     [0.825985737575673],
     [0.819362787557038],
     [0.700199445304226],
     [0.0531405955111734],
     [0.847513876046222],
     [0.742186789851455],
     [0.958070414817658],
     [0.6759051358493],
     [0.716259093434461],
     [0.726505891643885],
     [0.28327594881795],
     [0.494109909455272],
     [0.342022693846983],
     [0.0745295469512895],
     [0.00578247545810351],
     [0.175186542569376],
     [0.846548522087096],
     [0.351678744420969],
     [0.920908531981501],
     [0.296984175047986],
     [0.556824962651912],
     [0.812894057490863],
     [0.806789303446194],
     [0.21327258932931],
     [0.556572116740715],
     [0.773054798336976],
     [0.0489156738338946],
     [0.459492947708224],
     [0.9286779362076],
     [0.980921628185443],
     [0.527687589629876],
     [0.868560340394774],
     [0.405707061145305],
     [0.703813481036497],
     [0.338579568460972],
     [0.73066158119388],
     [0.774624166704882],
     [0.952110719453138],
     [0.388541969497015],
     [0.957737209233516],
     [0.457187344279737],
     [0.934982343024798]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.04644167])],
     [array([ 0.90308801])],
     [array([ 0.04845375])],
     [array([ 0.09472973])],
     [array([ 0.82006612])],
     [array([ 0.86804413])],
     [array([ 0.90878921])],
     [array([ 0.65606818])],
     [array([ 0.0430875])],
     [array([ 0.13439102])],
     [array([ 0.75361317])],
     [array([ 0.45912846])],
     [array([ 0.93100806])],
     [array([ 0.11168687])],
     [array([ 0.17760049])],
     [array([ 0.81411399])],
     [array([ 0.36802149])],
     [array([ 0.97325853])],
     [array([ 0.55630498])],
     [array([ 0.06762032])],
     [array([ 0.25275009])],
     [array([ 0.1226212])],
     [array([ 0.44275629])],
     [array([ 0.01752052])],
     [array([ 0.74560572])],
     [array([ 0.86443442])],
     [array([ 0.33565307])],
     [array([ 0.64771175])],
     [array([ 0.80803794])],
     [array([ 0.06783641])],
     [array([ 0.06671858])],
     [array([ 0.08772906])],
     [array([ 0.01783612])],
     [array([ 0.97669946])],
     [array([ 0.17920915])],
     [array([ 0.9689886])],
     [array([ 0.76948079])],
     [array([ 0.37883727])],
     [array([ 0.43061645])],
     [array([ 0.35385706])],
     [array([ 0.0628389])],
     [array([ 0.42184325])],
     [array([ 0.84019769])],
     [array([ 0.88806013])],
     [array([ 0.3459123])],
     [array([ 0.3866747])],
     [array([ 0.85184947])],
     [array([ 0.63981077])],
     [array([ 0.03197654])],
     [array([ 0.90516739])],
     [array([ 0.98027697])],
     [array([ 0.34547604])],
     [array([ 0.75714107])],
     [array([ 0.91590752])],
     [array([ 0.03891408])],
     [array([ 0.77936149])],
     [array([ 0.30022984])],
     [array([ 0.55438974])],
     [array([ 0.82876422])],
     [array([ 0.03010934])],
     [array([ 0.45634549])],
     [array([ 0.56015413])],
     [array([ 0.43217715])],
     [array([ 0.80623093])],
     [array([ 0.07404863])],
     [array([ 0.51381791])],
     [array([ 0.70082791])],
     [array([ 0.52967092])],
     [array([ 0.28181157])],
     [array([ 0.12392697])],
     [array([ 0.58954065])],
     [array([ 0.59571929])],
     [array([ 0.41728037])],
     [array([ 0.13137361])],
     [array([ 0.66417647])],
     [array([ 0.85031462])],
     [array([ 0.60975057])],
     [array([ 0.77307095])],
     [array([ 0.42916527])],
     [array([ 0.96324968])],
     [array([ 0.42823276])],
     [array([ 0.9434048])],
     [array([ 0.4960649])],
     [array([ 0.33494195])],
     [array([ 0.93455027])],
     [array([ 0.16746341])],
     [array([ 0.03086288])],
     [array([ 0.4952214])],
     [array([ 0.87984955])],
     [array([ 0.58829423])],
     [array([ 0.08436617])],
     [array([ 0.23747319])],
     [array([ 0.66417831])],
     [array([ 0.7375361])],
     [array([ 0.39970814])],
     [array([ 0.29015855])],
     [array([ 0.90840683])],
     [array([ 0.03850042])],
     [array([ 0.15015059])],
     [array([ 0.93071266])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.04644167,  0.90308801,  0.04845375,  0.09472973,  0.82006612,
            0.86804413,  0.90878921,  0.65606818,  0.0430875 ,  0.13439102,
            0.75361317,  0.45912846,  0.93100806,  0.11168687,  0.17760049,
            0.81411399,  0.36802149,  0.97325853,  0.55630498,  0.06762032,
            0.25275009,  0.1226212 ,  0.44275629,  0.01752052,  0.74560572,
            0.86443442,  0.33565307,  0.64771175,  0.80803794,  0.06783641,
            0.06671858,  0.08772906,  0.01783612,  0.97669946,  0.17920915,
            0.9689886 ,  0.76948079,  0.37883727,  0.43061645,  0.35385706,
            0.0628389 ,  0.42184325,  0.84019769,  0.88806013,  0.3459123 ,
            0.3866747 ,  0.85184947,  0.63981077,  0.03197654,  0.90516739,
            0.98027697,  0.34547604,  0.75714107,  0.91590752,  0.03891408,
            0.77936149,  0.30022984,  0.55438974,  0.82876422,  0.03010934,
            0.45634549,  0.56015413,  0.43217715,  0.80623093,  0.07404863,
            0.51381791,  0.70082791,  0.52967092,  0.28181157,  0.12392697,
            0.58954065,  0.59571929,  0.41728037,  0.13137361,  0.66417647,
            0.85031462,  0.60975057,  0.77307095,  0.42916527,  0.96324968,
            0.42823276,  0.9434048 ,  0.4960649 ,  0.33494195,  0.93455027,
            0.16746341,  0.03086288,  0.4952214 ,  0.87984955,  0.58829423,
            0.08436617,  0.23747319,  0.66417831,  0.7375361 ,  0.39970814,
            0.29015855,  0.90840683,  0.03850042,  0.15015059,  0.93071266])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.33178301,  0.9868927 ,  0.98708419,  0.70545311,  0.74885839,
               0.09980166,  0.29194339,  0.24784696,  0.85564073,  0.26300126,
               0.99999575,  0.24263561,  0.39893261,  0.80133774,  0.01135078,
               0.99327691,  0.61106078,  0.82138163,  0.71567119,  0.82276206,
               0.21017738,  0.84000093,  0.19850307,  0.98464902,  0.25786577,
               0.1991002 ,  0.5938207 ,  0.1813152 ,  0.13257863,  0.43564528,
               0.26065895,  0.19292563,  0.47604619,  0.78804618,  0.51125495,
               0.39512113,  0.07612011,  0.21029988,  0.18992636,  0.09414623,
               0.33567045,  0.5003141 ,  0.8125787 ,  0.75913957,  0.37513078,
               0.23260158,  0.68719114,  0.55977956,  0.19699362,  0.49683094,
               0.12000819,  0.59390228,  0.59345453,  0.55251114,  0.76771935,
               0.02194188,  0.86902551,  0.15373549,  0.82598574,  0.81936279,
               0.70019945,  0.0531406 ,  0.84751388,  0.74218679,  0.95807041,
               0.67590514,  0.71625909,  0.72650589,  0.28327595,  0.49410991,
               0.34202269,  0.07452955,  0.00578248,  0.17518654,  0.84654852,
               0.35167874,  0.92090853,  0.29698418,  0.55682496,  0.81289406,
               0.8067893 ,  0.21327259,  0.55657212,  0.7730548 ,  0.04891567,
               0.45949295,  0.92867794,  0.98092163,  0.52768759,  0.86856034,
               0.40570706,  0.70381348,  0.33857957,  0.73066158,  0.77462417,
               0.95211072,  0.38854197,  0.95773721,  0.45718734,  0.93498234])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([  7.94520719e-01,   4.88788055e-01,   4.20624814e-01,
                8.01402216e-01,   4.61312075e-01,   7.86621984e-02,
                3.27655085e-01,   3.65817904e-01,   4.15392542e-01,
                9.68875043e-01,   4.18194916e-02,   6.62726490e-01,
                9.88728139e-01,   7.13220652e-01,   7.35227504e-01,
                5.62371971e-01,   6.61019776e-01,   6.67091449e-01,
                2.74073456e-01,   3.75595334e-01,   6.53138560e-01,
                1.93861636e-02,   6.72131822e-01,   2.38808259e-01,
                1.76600317e-01,   5.54929925e-01,   2.23381927e-01,
                5.55233085e-01,   1.11051900e-01,   8.62708467e-01,
                6.15994621e-01,   1.31666638e-01,   4.03508656e-01,
                4.60532342e-01,   4.27901283e-01,   6.74132935e-01,
                6.85410397e-01,   7.23723892e-01,   9.79519257e-01,
                3.80222282e-01,   8.74915963e-01,   7.95328282e-01,
                5.42186889e-01,   8.17886391e-02,   1.17931517e-01,
                1.12548519e-01,   9.41028301e-01,   3.05246498e-01,
                4.44244762e-01,   6.35968972e-03,   8.54258891e-01,
                8.04780059e-01,   4.07462638e-01,   2.83438504e-02,
                2.34628839e-01,   2.06105983e-02,   9.80175932e-01,
                7.67814458e-01,   7.12507602e-04,   5.32055339e-01,
                5.24928089e-01,   4.97374361e-01,   4.72602498e-02,
                2.68953053e-02,   9.70397499e-01,   3.66227812e-02,
                8.27669977e-01,   6.35586665e-01,   1.08150613e-01,
                3.51615250e-01,   7.60379401e-01,   8.87681032e-01,
                1.06757960e-01,   9.30051138e-01,   9.31529529e-01,
                4.01351182e-01,   9.39856154e-01,   1.69668528e-01,
                3.49319451e-01,   9.06800008e-01,   2.19806590e-01,
                4.63798065e-01,   4.22411641e-01,   9.83159165e-01,
                6.99442902e-02,   6.59778277e-01,   6.43547964e-01,
                4.09160416e-01,   3.46293949e-01,   1.86889324e-01,
                5.32986523e-01,   8.32335042e-01,   9.74565594e-01,
                9.79265870e-02,   9.62302215e-01,   1.49254956e-02,
                3.10595475e-01,   1.26276300e-01,   7.94217207e-01,
                1.90162530e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.58168695,  0.01950339,  0.69232344,  0.457317  ,  0.98714891,
               0.75182737,  0.03163336,  0.22725135,  0.65672369,  0.17285624,
               0.0787019 ,  0.74298747,  0.60927175,  0.34467363,  0.6694405 ,
               0.96613947,  0.74460524,  0.82896751,  0.6499963 ,  0.66242346,
               0.87685449,  0.03130784,  0.24368533,  0.60739337,  0.09699801,
               0.97088478,  0.37538003,  0.95261049,  0.04236479,  0.44469562,
               0.13322152,  0.15473516,  0.24638109,  0.14596965,  0.33015602,
               0.22988804,  0.70561779,  0.13944225,  0.91339851,  0.40645092,
               0.38502001,  0.65610599,  0.89179606,  0.37819031,  0.84367508,
               0.63075578,  0.73307948,  0.27340525,  0.80863666,  0.50817131,
               0.24488785,  0.20300744,  0.75474883,  0.29429373,  0.83836785,
               0.85271932,  0.43137724,  0.30467595,  0.68365738,  0.80635546,
               0.27184773,  0.16551662,  0.84261489,  0.9745394 ,  0.94652159,
               0.56389733,  0.93338647,  0.30182085,  0.10464048,  0.67165931,
               0.36817674,  0.58116435,  0.39681609,  0.34324976,  0.30221744,
               0.65614463,  0.64690886,  0.14039096,  0.05093436,  0.37934801,
               0.51161063,  0.5101765 ,  0.83296416,  0.55545394,  0.13642516,
               0.49690058,  0.70082503,  0.57999167,  0.82344795,  0.14198479,
               0.06298531,  0.94279798,  0.05135293,  0.8764854 ,  0.56801061,
               0.32510106,  0.37587035,  0.63184742,  0.75265313,  0.71436167])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.23953782,  0.79638953,  0.13066708,  0.33076423,  0.32053419,
               0.35335436,  0.09113731,  0.61538968,  0.02882119,  0.30616145,
               0.04529598,  0.51773551,  0.26304016,  0.00780559,  0.15394841,
               0.6939688 ,  0.52180001,  0.13932229,  0.21582157,  0.63848806,
               0.48319044,  0.52887735,  0.92386862,  0.46754068,  0.94558699,
               0.28745401,  0.95127755,  0.8739403 ,  0.05797401,  0.49261308,
               0.99123564,  0.44825344,  0.56112593,  0.57512637,  0.4554426 ,
               0.25548711,  0.83140968,  0.81471781,  0.21061626,  0.93709913,
               0.67093011,  0.81740808,  0.5903588 ,  0.61973314,  0.15458206,
               0.71708518,  0.17886094,  0.71118674,  0.42006585,  0.37744726,
               0.4311318 ,  0.1440268 ,  0.829593  ,  0.15349547,  0.33761717,
               0.66079303,  0.55322302,  0.0059059 ,  0.91428453,  0.01338321,
               0.27914948,  0.3083938 ,  0.53588944,  0.69859235,  0.85263562,
               0.06410142,  0.64653407,  0.4413193 ,  0.93781952,  0.35582405,
               0.8995505 ,  0.84988338,  0.97426352,  0.1162882 ,  0.88605795,
               0.9565436 ,  0.11366067,  0.44469116,  0.63525042,  0.17356706,
               0.82577836,  0.28214729,  0.17012108,  0.80797554,  0.24484326,
               0.29410377,  0.68869796,  0.3843583 ,  0.75541701,  0.70442587,
               0.22938211,  0.19611577,  0.4396218 ,  0.78291813,  0.48529508,
               0.61530776,  0.76061983,  0.37135489,  0.37093106,  0.79176801])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.33178301,  0.9868927 ,  0.98708419,  0.70545311,  0.74885839,
               0.09980166,  0.29194339,  0.24784696,  0.85564073,  0.26300126,
               0.99999575,  0.24263561,  0.39893261,  0.80133774,  0.01135078,
               0.99327691,  0.61106078,  0.82138163,  0.71567119,  0.82276206,
               0.21017738,  0.84000093,  0.19850307,  0.98464902,  0.25786577,
               0.1991002 ,  0.5938207 ,  0.1813152 ,  0.13257863,  0.43564528,
               0.26065895,  0.19292563,  0.47604619,  0.78804618,  0.51125495,
               0.39512113,  0.07612011,  0.21029988,  0.18992636,  0.09414623,
               0.33567045,  0.5003141 ,  0.8125787 ,  0.75913957,  0.37513078,
               0.23260158,  0.68719114,  0.55977956,  0.19699362,  0.49683094,
               0.12000819,  0.59390228,  0.59345453,  0.55251114,  0.76771935,
               0.02194188,  0.86902551,  0.15373549,  0.82598574,  0.81936279,
               0.70019945,  0.0531406 ,  0.84751388,  0.74218679,  0.95807041,
               0.67590514,  0.71625909,  0.72650589,  0.28327595,  0.49410991,
               0.34202269,  0.07452955,  0.00578248,  0.17518654,  0.84654852,
               0.35167874,  0.92090853,  0.29698418,  0.55682496,  0.81289406,
               0.8067893 ,  0.21327259,  0.55657212,  0.7730548 ,  0.04891567,
               0.45949295,  0.92867794,  0.98092163,  0.52768759,  0.86856034,
               0.40570706,  0.70381348,  0.33857957,  0.73066158,  0.77462417,
               0.95211072,  0.38854197,  0.95773721,  0.45718734,  0.93498234])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([  7.94520719e-01,   4.88788055e-01,   4.20624814e-01,
                8.01402216e-01,   4.61312075e-01,   7.86621984e-02,
                3.27655085e-01,   3.65817904e-01,   4.15392542e-01,
                9.68875043e-01,   4.18194916e-02,   6.62726490e-01,
                9.88728139e-01,   7.13220652e-01,   7.35227504e-01,
                5.62371971e-01,   6.61019776e-01,   6.67091449e-01,
                2.74073456e-01,   3.75595334e-01,   6.53138560e-01,
                1.93861636e-02,   6.72131822e-01,   2.38808259e-01,
                1.76600317e-01,   5.54929925e-01,   2.23381927e-01,
                5.55233085e-01,   1.11051900e-01,   8.62708467e-01,
                6.15994621e-01,   1.31666638e-01,   4.03508656e-01,
                4.60532342e-01,   4.27901283e-01,   6.74132935e-01,
                6.85410397e-01,   7.23723892e-01,   9.79519257e-01,
                3.80222282e-01,   8.74915963e-01,   7.95328282e-01,
                5.42186889e-01,   8.17886391e-02,   1.17931517e-01,
                1.12548519e-01,   9.41028301e-01,   3.05246498e-01,
                4.44244762e-01,   6.35968972e-03,   8.54258891e-01,
                8.04780059e-01,   4.07462638e-01,   2.83438504e-02,
                2.34628839e-01,   2.06105983e-02,   9.80175932e-01,
                7.67814458e-01,   7.12507602e-04,   5.32055339e-01,
                5.24928089e-01,   4.97374361e-01,   4.72602498e-02,
                2.68953053e-02,   9.70397499e-01,   3.66227812e-02,
                8.27669977e-01,   6.35586665e-01,   1.08150613e-01,
                3.51615250e-01,   7.60379401e-01,   8.87681032e-01,
                1.06757960e-01,   9.30051138e-01,   9.31529529e-01,
                4.01351182e-01,   9.39856154e-01,   1.69668528e-01,
                3.49319451e-01,   9.06800008e-01,   2.19806590e-01,
                4.63798065e-01,   4.22411641e-01,   9.83159165e-01,
                6.99442902e-02,   6.59778277e-01,   6.43547964e-01,
                4.09160416e-01,   3.46293949e-01,   1.86889324e-01,
                5.32986523e-01,   8.32335042e-01,   9.74565594e-01,
                9.79265870e-02,   9.62302215e-01,   1.49254956e-02,
                3.10595475e-01,   1.26276300e-01,   7.94217207e-01,
                1.90162530e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.58168695,  0.01950339,  0.69232344,  0.457317  ,  0.98714891,
               0.75182737,  0.03163336,  0.22725135,  0.65672369,  0.17285624,
               0.0787019 ,  0.74298747,  0.60927175,  0.34467363,  0.6694405 ,
               0.96613947,  0.74460524,  0.82896751,  0.6499963 ,  0.66242346,
               0.87685449,  0.03130784,  0.24368533,  0.60739337,  0.09699801,
               0.97088478,  0.37538003,  0.95261049,  0.04236479,  0.44469562,
               0.13322152,  0.15473516,  0.24638109,  0.14596965,  0.33015602,
               0.22988804,  0.70561779,  0.13944225,  0.91339851,  0.40645092,
               0.38502001,  0.65610599,  0.89179606,  0.37819031,  0.84367508,
               0.63075578,  0.73307948,  0.27340525,  0.80863666,  0.50817131,
               0.24488785,  0.20300744,  0.75474883,  0.29429373,  0.83836785,
               0.85271932,  0.43137724,  0.30467595,  0.68365738,  0.80635546,
               0.27184773,  0.16551662,  0.84261489,  0.9745394 ,  0.94652159,
               0.56389733,  0.93338647,  0.30182085,  0.10464048,  0.67165931,
               0.36817674,  0.58116435,  0.39681609,  0.34324976,  0.30221744,
               0.65614463,  0.64690886,  0.14039096,  0.05093436,  0.37934801,
               0.51161063,  0.5101765 ,  0.83296416,  0.55545394,  0.13642516,
               0.49690058,  0.70082503,  0.57999167,  0.82344795,  0.14198479,
               0.06298531,  0.94279798,  0.05135293,  0.8764854 ,  0.56801061,
               0.32510106,  0.37587035,  0.63184742,  0.75265313,  0.71436167])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.21798476,  0.07863743,  0.55380368,  0.07885694,  0.31165903,
               0.14825034,  0.7430571 ,  0.73825736,  0.24213327,  0.47235606,
               0.00405267,  0.86984602,  0.09160437,  0.74504657,  0.03162508,
               0.21143189,  0.14616304,  0.30671304,  0.29231691,  0.00313316,
               0.43541333,  0.54775338,  0.24309828,  0.12011564,  0.69676888,
               0.38653191,  0.70324997,  0.0655327 ,  0.40040347,  0.61136838,
               0.51152451,  0.571351  ,  0.67602245,  0.47453762,  0.05092361,
               0.63055696,  0.78849252,  0.59222965,  0.84727828,  0.47782919,
               0.13614553,  0.89486201,  0.69633945,  0.792647  ,  0.40729532,
               0.58749776,  0.96685894,  0.77859835,  0.24844203,  0.35629964,
               0.7262991 ,  0.36640557,  0.33913292,  0.15911814,  0.34298738,
               0.61741285,  0.0694199 ,  0.12305103,  0.43511783,  0.14662356,
               0.16205375,  0.41172096,  0.35562892,  0.05443423,  0.31965629,
               0.56403724,  0.02021289,  0.88144438,  0.66686627,  0.54850019,
               0.62261331,  0.94536359,  0.94739734,  0.97155262,  0.578722  ,
               0.924081  ,  0.5003178 ,  0.95659356,  0.43161401,  0.94498769,
               0.61283954,  0.63068523,  0.47802985,  0.33017692,  0.79027475,
               0.02457222,  0.05895553,  0.88202159,  0.06252046,  0.74005407,
               0.28176604,  0.41869689,  0.79948269,  0.81132378,  0.3407653 ,
               0.62043525,  0.12574504,  0.88350061,  0.29600268,  0.87172184])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.04644167,  0.90308801,  0.04845375,  0.09472973,  0.82006612,
               0.86804413,  0.90878921,  0.65606818,  0.0430875 ,  0.13439102,
               0.75361317,  0.45912846,  0.93100806,  0.11168687,  0.17760049,
               0.81411399,  0.36802149,  0.97325853,  0.55630498,  0.06762032,
               0.25275009,  0.1226212 ,  0.44275629,  0.01752052,  0.74560572,
               0.86443442,  0.33565307,  0.64771175,  0.80803794,  0.06783641,
               0.06671858,  0.08772906,  0.01783612,  0.97669946,  0.17920915,
               0.9689886 ,  0.76948079,  0.37883727,  0.43061645,  0.35385706,
               0.0628389 ,  0.42184325,  0.84019769,  0.88806013,  0.3459123 ,
               0.3866747 ,  0.85184947,  0.63981077,  0.03197654,  0.90516739,
               0.98027697,  0.34547604,  0.75714107,  0.91590752,  0.03891408,
               0.77936149,  0.30022984,  0.55438974,  0.82876422,  0.03010934,
               0.45634549,  0.56015413,  0.43217715,  0.80623093,  0.07404863,
               0.51381791,  0.70082791,  0.52967092,  0.28181157,  0.12392697,
               0.58954065,  0.59571929,  0.41728037,  0.13137361,  0.66417647,
               0.85031462,  0.60975057,  0.77307095,  0.42916527,  0.96324968,
               0.42823276,  0.9434048 ,  0.4960649 ,  0.33494195,  0.93455027,
               0.16746341,  0.03086288,  0.4952214 ,  0.87984955,  0.58829423,
               0.08436617,  0.23747319,  0.66417831,  0.7375361 ,  0.39970814,
               0.29015855,  0.90840683,  0.03850042,  0.15015059,  0.93071266])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.90207639,  0.19252663,  0.92330438,  0.87662259,  0.49943138,
               0.81283398,  0.47249928,  0.49163675,  0.05467734,  0.21158375,
               0.32161979,  0.20598655,  0.74353675,  0.80687131,  0.48770975,
               0.43696038,  0.94788689,  0.07322538,  0.89906957,  0.95454447,
               0.84368289,  0.61755133,  0.55910536,  0.48174881,  0.9044438 ,
               0.72471493,  0.33580297,  0.87519949,  0.32410216,  0.66146809,
               0.00627621,  0.73078242,  0.4399935 ,  0.94189465,  0.32876514,
               0.31458223,  0.64386252,  0.5653915 ,  0.27665314,  0.79659997,
               0.9803082 ,  0.99201031,  0.50200378,  0.70584282,  0.93548385,
               0.52306954,  0.54938949,  0.3661361 ,  0.0387911 ,  0.31873214,
               0.12400622,  0.90706241,  0.22945435,  0.91829249,  0.75472202,
               0.46679943,  0.87333838,  0.21280904,  0.39268999,  0.50503376,
               0.41278321,  0.17774347,  0.42359866,  0.92693132,  0.93284404,
               0.34519566,  0.44448756,  0.11659123,  0.99579175,  0.83207438,
               0.49846554,  0.87030796,  0.49971909,  0.10137461,  0.70579988,
               0.7822584 ,  0.74382323,  0.73380048,  0.38720589,  0.20454812,
               0.55595209,  0.52547284,  0.77554956,  0.24438059,  0.33719036,
               0.41157061,  0.74164511,  0.2971676 ,  0.4021597 ,  0.78189707,
               0.75132539,  0.0525935 ,  0.21223087,  0.83237235,  0.31225146,
               0.71585802,  0.19183403,  0.2080966 ,  0.59623404,  0.62849766])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.70981044,  0.64257515,  0.62674027,  0.54687465,  0.88610417,
               0.37205529,  0.0930627 ,  0.39110289,  0.10177611,  0.50167479,
               0.27243371,  0.54200286,  0.64469615,  0.66177192,  0.65478353,
               0.70832819,  0.20945201,  0.78478054,  0.6660998 ,  0.24698612,
               0.25560167,  0.18804157,  0.72395198,  0.52226047,  0.60582907,
               0.27549996,  0.84681847,  0.63877967,  0.28029448,  0.63458162,
               0.89541696,  0.52818955,  0.91716591,  0.47212966,  0.10807161,
               0.91377611,  0.39859318,  0.48269991,  0.80901535,  0.39604224,
               0.02944778,  0.29235516,  0.71729266,  0.32387448,  0.20752663,
               0.00110664,  0.33387475,  0.66294775,  0.14293823,  0.23682982,
               0.43185317,  0.52651037,  0.30833466,  0.6270769 ,  0.12440157,
               0.40581712,  0.85537762,  0.58629574,  0.46873632,  0.874799  ,
               0.16520625,  0.09184297,  0.39093096,  0.28129075,  0.30870945,
               0.58695739,  0.43305149,  0.69981561,  0.43609379,  0.99893553,
               0.72998094,  0.58536746,  0.5590995 ,  0.40081028,  0.70205734,
               0.47982958,  0.2166496 ,  0.57225132,  0.76532053,  0.17299096,
               0.14497567,  0.3702962 ,  0.19560605,  0.40920427,  0.47045731,
               0.52942009,  0.11010409,  0.51157637,  0.49270647,  0.71089381,
               0.19671956,  0.3557184 ,  0.63620206,  0.13934693,  0.17445467,
               0.14464127,  0.01260417,  0.92565213,  0.33963972,  0.52842579])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([  4.11008027e-01,   9.46273037e-01,   6.93793346e-01,
                3.66929611e-01,   8.85499203e-01,   1.94636160e-01,
                6.96890279e-01,   4.31099525e-01,   9.83125383e-01,
                9.15592759e-01,   4.31155817e-01,   6.47278142e-03,
                2.64404907e-01,   1.27864439e-01,   4.27008433e-01,
                5.94640155e-01,   4.57118068e-01,   9.42904921e-01,
                7.29369302e-01,   4.23050352e-01,   6.95293899e-01,
                8.84856906e-01,   7.86636932e-02,   4.72116760e-01,
                4.38419585e-01,   2.61927979e-01,   1.97498771e-01,
                9.02927392e-01,   4.52005933e-01,   1.98904652e-01,
                9.97281503e-01,   5.89530436e-01,   7.79316989e-01,
                6.24753251e-01,   5.61602214e-01,   2.49208638e-01,
                6.49070485e-01,   9.79281167e-01,   3.14527474e-01,
                3.16545888e-02,   2.94643074e-01,   1.90241725e-01,
                2.81695699e-01,   2.65832178e-01,   9.81018728e-01,
                4.81805491e-01,   4.05176504e-01,   7.71744546e-01,
                2.33855521e-01,   5.54822670e-01,   1.51660858e-01,
                7.17746054e-01,   7.33905749e-01,   9.63232578e-01,
                2.60341034e-01,   6.99233131e-01,   2.01367100e-01,
                2.11019231e-01,   9.10592035e-03,   3.25604434e-03,
                7.02787828e-01,   5.67373284e-01,   9.20869125e-01,
                9.44555006e-01,   9.45234068e-01,   6.35511728e-01,
                1.91577638e-01,   1.23764351e-01,   4.46601935e-01,
                5.76992233e-01,   9.70204195e-01,   3.97423818e-01,
                7.69451744e-01,   2.84425365e-01,   7.53461141e-01,
                2.27656504e-01,   5.28455947e-01,   3.55856946e-01,
                5.66171632e-02,   8.53313021e-05,   1.42807620e-02,
                6.39223316e-01,   8.64332067e-01,   3.94918417e-01,
                3.43282475e-01,   2.33656717e-01,   9.30619703e-01,
                5.62846779e-01,   6.70607813e-02,   4.36659139e-01,
                4.23522446e-01,   2.61404816e-01,   2.97239741e-01,
                7.22505761e-01,   4.36580700e-01,   6.91095434e-01,
                5.55078094e-01,   3.82091815e-01,   3.82462785e-01,
                5.83409548e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.04644167,  0.90308801,  0.04845375,  0.09472973,  0.82006612,
               0.86804413,  0.90878921,  0.65606818,  0.0430875 ,  0.13439102,
               0.75361317,  0.45912846,  0.93100806,  0.11168687,  0.17760049,
               0.81411399,  0.36802149,  0.97325853,  0.55630498,  0.06762032,
               0.25275009,  0.1226212 ,  0.44275629,  0.01752052,  0.74560572,
               0.86443442,  0.33565307,  0.64771175,  0.80803794,  0.06783641,
               0.06671858,  0.08772906,  0.01783612,  0.97669946,  0.17920915,
               0.9689886 ,  0.76948079,  0.37883727,  0.43061645,  0.35385706,
               0.0628389 ,  0.42184325,  0.84019769,  0.88806013,  0.3459123 ,
               0.3866747 ,  0.85184947,  0.63981077,  0.03197654,  0.90516739,
               0.98027697,  0.34547604,  0.75714107,  0.91590752,  0.03891408,
               0.77936149,  0.30022984,  0.55438974,  0.82876422,  0.03010934,
               0.45634549,  0.56015413,  0.43217715,  0.80623093,  0.07404863,
               0.51381791,  0.70082791,  0.52967092,  0.28181157,  0.12392697,
               0.58954065,  0.59571929,  0.41728037,  0.13137361,  0.66417647,
               0.85031462,  0.60975057,  0.77307095,  0.42916527,  0.96324968,
               0.42823276,  0.9434048 ,  0.4960649 ,  0.33494195,  0.93455027,
               0.16746341,  0.03086288,  0.4952214 ,  0.87984955,  0.58829423,
               0.08436617,  0.23747319,  0.66417831,  0.7375361 ,  0.39970814,
               0.29015855,  0.90840683,  0.03850042,  0.15015059,  0.93071266])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.90207639,  0.19252663,  0.92330438,  0.87662259,  0.49943138,
               0.81283398,  0.47249928,  0.49163675,  0.05467734,  0.21158375,
               0.32161979,  0.20598655,  0.74353675,  0.80687131,  0.48770975,
               0.43696038,  0.94788689,  0.07322538,  0.89906957,  0.95454447,
               0.84368289,  0.61755133,  0.55910536,  0.48174881,  0.9044438 ,
               0.72471493,  0.33580297,  0.87519949,  0.32410216,  0.66146809,
               0.00627621,  0.73078242,  0.4399935 ,  0.94189465,  0.32876514,
               0.31458223,  0.64386252,  0.5653915 ,  0.27665314,  0.79659997,
               0.9803082 ,  0.99201031,  0.50200378,  0.70584282,  0.93548385,
               0.52306954,  0.54938949,  0.3661361 ,  0.0387911 ,  0.31873214,
               0.12400622,  0.90706241,  0.22945435,  0.91829249,  0.75472202,
               0.46679943,  0.87333838,  0.21280904,  0.39268999,  0.50503376,
               0.41278321,  0.17774347,  0.42359866,  0.92693132,  0.93284404,
               0.34519566,  0.44448756,  0.11659123,  0.99579175,  0.83207438,
               0.49846554,  0.87030796,  0.49971909,  0.10137461,  0.70579988,
               0.7822584 ,  0.74382323,  0.73380048,  0.38720589,  0.20454812,
               0.55595209,  0.52547284,  0.77554956,  0.24438059,  0.33719036,
               0.41157061,  0.74164511,  0.2971676 ,  0.4021597 ,  0.78189707,
               0.75132539,  0.0525935 ,  0.21223087,  0.83237235,  0.31225146,
               0.71585802,  0.19183403,  0.2080966 ,  0.59623404,  0.62849766])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.70981044,  0.64257515,  0.62674027,  0.54687465,  0.88610417,
               0.37205529,  0.0930627 ,  0.39110289,  0.10177611,  0.50167479,
               0.27243371,  0.54200286,  0.64469615,  0.66177192,  0.65478353,
               0.70832819,  0.20945201,  0.78478054,  0.6660998 ,  0.24698612,
               0.25560167,  0.18804157,  0.72395198,  0.52226047,  0.60582907,
               0.27549996,  0.84681847,  0.63877967,  0.28029448,  0.63458162,
               0.89541696,  0.52818955,  0.91716591,  0.47212966,  0.10807161,
               0.91377611,  0.39859318,  0.48269991,  0.80901535,  0.39604224,
               0.02944778,  0.29235516,  0.71729266,  0.32387448,  0.20752663,
               0.00110664,  0.33387475,  0.66294775,  0.14293823,  0.23682982,
               0.43185317,  0.52651037,  0.30833466,  0.6270769 ,  0.12440157,
               0.40581712,  0.85537762,  0.58629574,  0.46873632,  0.874799  ,
               0.16520625,  0.09184297,  0.39093096,  0.28129075,  0.30870945,
               0.58695739,  0.43305149,  0.69981561,  0.43609379,  0.99893553,
               0.72998094,  0.58536746,  0.5590995 ,  0.40081028,  0.70205734,
               0.47982958,  0.2166496 ,  0.57225132,  0.76532053,  0.17299096,
               0.14497567,  0.3702962 ,  0.19560605,  0.40920427,  0.47045731,
               0.52942009,  0.11010409,  0.51157637,  0.49270647,  0.71089381,
               0.19671956,  0.3557184 ,  0.63620206,  0.13934693,  0.17445467,
               0.14464127,  0.01260417,  0.92565213,  0.33963972,  0.52842579])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([  2.20364405e-01,   2.60997331e-01,   2.79435582e-01,
                1.54000891e-01,   6.75644184e-01,   3.33334310e-01,
                7.78512292e-01,   5.81758775e-01,   8.13004367e-01,
                5.66291536e-01,   5.43688272e-01,   6.19341796e-01,
                8.55080930e-07,   8.62487821e-01,   5.04267734e-01,
                4.44173676e-01,   9.74926409e-01,   3.07613652e-01,
                9.77904747e-01,   8.42766309e-01,   1.87237503e-02,
                4.78805569e-01,   9.46122915e-01,   8.05391543e-01,
                7.47236497e-01,   3.58823521e-01,   3.16468791e-01,
                4.91861789e-01,   1.12502594e-01,   7.69106024e-01,
                6.99200692e-03,   5.08481001e-01,   1.98821876e-01,
                1.85643143e-01,   3.68759012e-01,   3.52387648e-01,
                1.19592646e-01,   9.07626646e-01,   1.88450462e-02,
                9.99470173e-01,   1.58026509e-01,   6.09917913e-03,
                2.06888507e-02,   7.40930768e-01,   1.62801322e-01,
                5.26652386e-01,   1.31981941e-01,   8.37569409e-01,
                3.76491531e-03,   1.41294137e-02,   4.65122082e-01,
                7.83836044e-01,   6.98202107e-01,   3.85542580e-01,
                7.38253291e-01,   9.14012171e-01,   2.49959292e-01,
                7.65397760e-01,   4.05962476e-01,   6.49151362e-01,
                4.26067561e-01,   1.54373972e-01,   8.75879034e-02,
                8.40477322e-01,   2.07128837e-01,   8.48119691e-01,
                2.32389345e-01,   1.83022554e-01,   2.55311885e-01,
                4.08040911e-01,   5.90133970e-01,   9.67032059e-02,
                7.97543453e-01,   2.53602816e-01,   2.59139113e-01,
                5.94818677e-01,   1.23382862e-02,   3.49727262e-01,
                7.39307380e-01,   5.91697835e-01,   8.88214454e-01,
                6.00002914e-01,   9.22678368e-01,   2.89381202e-01,
                5.23544799e-01,   3.28396204e-01,   5.63495561e-01,
                7.25957370e-01,   9.58285050e-01,   8.57224168e-01,
                7.22094418e-01,   2.56979079e-01,   3.08977389e-02,
                4.52069750e-01,   1.23083424e-01,   7.62836647e-01,
                9.11070898e-01,   3.54787509e-02,   5.93813511e-01,
                2.87193173e-01])}]]


