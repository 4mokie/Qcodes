
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='560eff74-17a6-43af-939e-bd0b7a24a4c5'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='24f1093e-2cd3-4f5b-bbc4-8ca9d3a41c04'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.0510618172275098],
     [0.711903447721943],
     [0.116454063740753],
     [0.965970748748679],
     [0.444715561396701],
     [0.696379792218052],
     [0.632922258664166],
     [0.840654203377606],
     [0.884825926105639],
     [0.504332747013479],
     [0.157594161473194],
     [0.643169414517901],
     [0.898816828776253],
     [0.468935389411581],
     [0.355081305630366],
     [0.203998133001404],
     [0.258462438348796],
     [0.19191091940274],
     [0.535149740655405],
     [0.687926254388404],
     [0.0568487816824007],
     [0.309988825109079],
     [0.0871067176579017],
     [0.596891055450116],
     [0.113450750809745],
     [0.0645538417616964],
     [0.100223109259611],
     [0.969554882917652],
     [0.0103586305804333],
     [0.1733495704289],
     [0.899655724343674],
     [0.382070132494546],
     [0.265658057887764],
     [0.640250471070414],
     [0.22564168724723],
     [0.487370101129778],
     [0.55809101218796],
     [0.751962771682541],
     [0.937772284035322],
     [0.179355958333745],
     [0.140978484338534],
     [0.315312402783005],
     [0.27517127016038],
     [0.445281456774139],
     [0.321719890473734],
     [0.408072187353153],
     [0.15022436598509],
     [0.490954521337202],
     [0.123901688350367],
     [0.183068218655879],
     [0.341667107729865],
     [0.283520345644903],
     [0.826310489621078],
     [0.987371835568158],
     [0.103101527452046],
     [0.356843858526024],
     [0.0309013708225298],
     [0.198077541344349],
     [0.106572631959425],
     [0.0244524103619875],
     [0.249615150624794],
     [0.0762196765155921],
     [0.92454281030095],
     [0.486526966140059],
     [0.685630902288176],
     [0.147862407360446],
     [0.985998342368204],
     [0.212460041184373],
     [0.806008026216261],
     [0.537312082464741],
     [0.0695332281422418],
     [0.931521357443188],
     [0.479037219462533],
     [0.377811272702745],
     [0.865449465578468],
     [0.796016022922586],
     [0.719301422044527],
     [0.625395972562846],
     [0.312708488299562],
     [0.991442773537442],
     [0.500485781730887],
     [0.141021327098438],
     [0.483245936647379],
     [0.996039195448098],
     [0.719884547507285],
     [0.893392812608188],
     [0.173085885619126],
     [0.265803494187993],
     [0.589147830570657],
     [0.174541560869946],
     [0.61936328831118],
     [0.718562471748924],
     [0.420778585789213],
     [0.651101657695211],
     [0.016382920022301],
     [0.588974690318075],
     [0.279762826874808],
     [0.979632240302819],
     [0.982913987439042],
     [0.199948713096564]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.16386999])],
     [array([0.91179755])],
     [array([0.3841652])],
     [array([0.48034363])],
     [array([0.40709681])],
     [array([0.40596224])],
     [array([0.23865653])],
     [array([0.60688103])],
     [array([0.60130994])],
     [array([0.30227312])],
     [array([0.31059119])],
     [array([0.37990311])],
     [array([0.07777739])],
     [array([0.95569752])],
     [array([0.6065403])],
     [array([0.37696371])],
     [array([0.95877201])],
     [array([0.28458279])],
     [array([0.63154156])],
     [array([0.78101511])],
     [array([0.59364244])],
     [array([0.32332722])],
     [array([0.01618825])],
     [array([0.65525691])],
     [array([0.2606474])],
     [array([0.87633699])],
     [array([0.25228318])],
     [array([0.43099682])],
     [array([0.07918862])],
     [array([0.92746927])],
     [array([0.79865814])],
     [array([0.48234194])],
     [array([0.98899425])],
     [array([0.66372289])],
     [array([0.93507036])],
     [array([0.91103445])],
     [array([0.91424997])],
     [array([0.61635575])],
     [array([0.75788113])],
     [array([0.86355054])],
     [array([0.86792695])],
     [array([0.48528646])],
     [array([0.0696765])],
     [array([0.11184259])],
     [array([0.93145046])],
     [array([0.12441085])],
     [array([0.49019871])],
     [array([0.57711999])],
     [array([0.58488399])],
     [array([0.41686945])],
     [array([0.70340864])],
     [array([0.10555844])],
     [array([0.00064141])],
     [array([0.95571135])],
     [array([0.60066171])],
     [array([0.34565842])],
     [array([0.60169825])],
     [array([0.84777989])],
     [array([0.70627959])],
     [array([0.01316653])],
     [array([0.89483183])],
     [array([0.3355296])],
     [array([0.24482205])],
     [array([0.15043391])],
     [array([0.78443826])],
     [array([0.06235391])],
     [array([0.75374521])],
     [array([0.64712826])],
     [array([0.65194161])],
     [array([0.77318642])],
     [array([0.13185496])],
     [array([0.31686174])],
     [array([0.69828495])],
     [array([0.38116668])],
     [array([0.54727725])],
     [array([0.50757647])],
     [array([0.36164091])],
     [array([0.78346753])],
     [array([0.05120501])],
     [array([0.36593694])],
     [array([0.68186109])],
     [array([0.15592316])],
     [array([0.11280489])],
     [array([0.4812994])],
     [array([0.05554106])],
     [array([0.80781285])],
     [array([0.14512284])],
     [array([0.13201424])],
     [array([0.94741011])],
     [array([0.59175079])],
     [array([0.90205291])],
     [array([0.37566943])],
     [array([0.9103766])],
     [array([0.75671117])],
     [array([0.08132636])],
     [array([0.79619287])],
     [array([0.50292261])],
     [array([0.14755737])],
     [array([0.69918225])],
     [array([0.68961713])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([1.63869988e-01, 9.11797555e-01, 3.84165204e-01, 4.80343633e-01,
           4.07096812e-01, 4.05962242e-01, 2.38656530e-01, 6.06881030e-01,
           6.01309941e-01, 3.02273124e-01, 3.10591190e-01, 3.79903110e-01,
           7.77773873e-02, 9.55697520e-01, 6.06540303e-01, 3.76963711e-01,
           9.58772011e-01, 2.84582785e-01, 6.31541561e-01, 7.81015109e-01,
           5.93642439e-01, 3.23327220e-01, 1.61882464e-02, 6.55256913e-01,
           2.60647402e-01, 8.76336985e-01, 2.52283179e-01, 4.30996820e-01,
           7.91886231e-02, 9.27469268e-01, 7.98658141e-01, 4.82341944e-01,
           9.88994248e-01, 6.63722885e-01, 9.35070356e-01, 9.11034454e-01,
           9.14249974e-01, 6.16355749e-01, 7.57881127e-01, 8.63550541e-01,
           8.67926953e-01, 4.85286463e-01, 6.96765016e-02, 1.11842585e-01,
           9.31450462e-01, 1.24410853e-01, 4.90198710e-01, 5.77119991e-01,
           5.84883989e-01, 4.16869454e-01, 7.03408644e-01, 1.05558437e-01,
           6.41406756e-04, 9.55711349e-01, 6.00661709e-01, 3.45658421e-01,
           6.01698252e-01, 8.47779885e-01, 7.06279595e-01, 1.31665336e-02,
           8.94831834e-01, 3.35529596e-01, 2.44822054e-01, 1.50433907e-01,
           7.84438261e-01, 6.23539144e-02, 7.53745211e-01, 6.47128257e-01,
           6.51941609e-01, 7.73186418e-01, 1.31854964e-01, 3.16861737e-01,
           6.98284954e-01, 3.81166676e-01, 5.47277246e-01, 5.07576468e-01,
           3.61640908e-01, 7.83467530e-01, 5.12050099e-02, 3.65936941e-01,
           6.81861093e-01, 1.55923163e-01, 1.12804886e-01, 4.81299401e-01,
           5.55410607e-02, 8.07812846e-01, 1.45122836e-01, 1.32014240e-01,
           9.47410113e-01, 5.91750788e-01, 9.02052910e-01, 3.75669432e-01,
           9.10376605e-01, 7.56711168e-01, 8.13263628e-02, 7.96192872e-01,
           5.02922609e-01, 1.47557365e-01, 6.99182254e-01, 6.89617134e-01])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.05106182, 0.71190345, 0.11645406, 0.96597075, 0.44471556,
              0.69637979, 0.63292226, 0.8406542 , 0.88482593, 0.50433275,
              0.15759416, 0.64316941, 0.89881683, 0.46893539, 0.35508131,
              0.20399813, 0.25846244, 0.19191092, 0.53514974, 0.68792625,
              0.05684878, 0.30998883, 0.08710672, 0.59689106, 0.11345075,
              0.06455384, 0.10022311, 0.96955488, 0.01035863, 0.17334957,
              0.89965572, 0.38207013, 0.26565806, 0.64025047, 0.22564169,
              0.4873701 , 0.55809101, 0.75196277, 0.93777228, 0.17935596,
              0.14097848, 0.3153124 , 0.27517127, 0.44528146, 0.32171989,
              0.40807219, 0.15022437, 0.49095452, 0.12390169, 0.18306822,
              0.34166711, 0.28352035, 0.82631049, 0.98737184, 0.10310153,
              0.35684386, 0.03090137, 0.19807754, 0.10657263, 0.02445241,
              0.24961515, 0.07621968, 0.92454281, 0.48652697, 0.6856309 ,
              0.14786241, 0.98599834, 0.21246004, 0.80600803, 0.53731208,
              0.06953323, 0.93152136, 0.47903722, 0.37781127, 0.86544947,
              0.79601602, 0.71930142, 0.62539597, 0.31270849, 0.99144277,
              0.50048578, 0.14102133, 0.48324594, 0.9960392 , 0.71988455,
              0.89339281, 0.17308589, 0.26580349, 0.58914783, 0.17454156,
              0.61936329, 0.71856247, 0.42077859, 0.65110166, 0.01638292,
              0.58897469, 0.27976283, 0.97963224, 0.98291399, 0.19994871])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.42139053, 0.688654  , 0.14641519, 0.53490012, 0.35542462,
              0.81834936, 0.30309804, 0.09915693, 0.34332815, 0.1694587 ,
              0.07001125, 0.63056045, 0.45288588, 0.59285286, 0.26945691,
              0.25249564, 0.59101672, 0.8913883 , 0.60935302, 0.84505937,
              0.34827191, 0.64179433, 0.8789263 , 0.77512301, 0.64438344,
              0.56197484, 0.91149166, 0.69159622, 0.05016867, 0.1967182 ,
              0.30383307, 0.61903419, 0.0635191 , 0.66192943, 0.29743193,
              0.15137089, 0.1327748 , 0.19190775, 0.70587965, 0.34055133,
              0.2699294 , 0.33349802, 0.37506847, 0.60659623, 0.6685276 ,
              0.90905807, 0.4689496 , 0.41015389, 0.08028852, 0.16864918,
              0.09419664, 0.88256146, 0.61066937, 0.01707763, 0.90712181,
              0.23564871, 0.60632307, 0.95340764, 0.34924303, 0.57548244,
              0.67999602, 0.79091423, 0.52733483, 0.90816864, 0.47782715,
              0.00409384, 0.2890638 , 0.9195012 , 0.5721028 , 0.79074868,
              0.84189764, 0.30266578, 0.12287424, 0.25971498, 0.97261505,
              0.75510171, 0.46369212, 0.75146741, 0.07312289, 0.23378456,
              0.10646033, 0.86586413, 0.83853329, 0.72921564, 0.58217912,
              0.66557526, 0.96252492, 0.80940681, 0.16637949, 0.50443924,
              0.42462215, 0.12938104, 0.38600476, 0.81354955, 0.65498524,
              0.0674771 , 0.78554773, 0.77900714, 0.72431788, 0.06253936])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.3416755 , 0.95820822, 0.86937365, 0.59908555, 0.47648066,
              0.49184913, 0.60021228, 0.87834553, 0.48872838, 0.4893657 ,
              0.46253431, 0.76421021, 0.72761973, 0.96685349, 0.24338001,
              0.96602549, 0.02678317, 0.3324334 , 0.30728137, 0.97752168,
              0.6614264 , 0.08933724, 0.87732792, 0.5341668 , 0.18194411,
              0.5124435 , 0.60637316, 0.66337831, 0.65680844, 0.86160685,
              0.15137756, 0.87879114, 0.6171771 , 0.32542825, 0.27621559,
              0.26412102, 0.2343484 , 0.71103711, 0.9183233 , 0.43483765,
              0.36653898, 0.43876411, 0.08893047, 0.363191  , 0.07356638,
              0.76620062, 0.9938171 , 0.9646725 , 0.28499647, 0.80911744,
              0.82322976, 0.26049401, 0.00315022, 0.69232299, 0.90913156,
              0.84602606, 0.49428972, 0.45452521, 0.28945148, 0.78650698,
              0.57120163, 0.30180686, 0.43966599, 0.27108931, 0.74906743,
              0.00330519, 0.22743716, 0.62144258, 0.28660066, 0.62522995,
              0.01906585, 0.39495603, 0.47199849, 0.52792037, 0.65731609,
              0.51510791, 0.86154393, 0.37293251, 0.27006703, 0.89547684,
              0.69991774, 0.45306546, 0.99028941, 0.90813765, 0.32311238,
              0.41072278, 0.21950548, 0.09730302, 0.04855166, 0.69966477,
              0.4155884 , 0.77228193, 0.14303544, 0.75973958, 0.78138105,
              0.17148584, 0.17233296, 0.34272857, 0.4646688 , 0.70579846])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.78983742, 0.93809463, 0.21530574, 0.9434773 , 0.44989957,
              0.36628312, 0.30084162, 0.88923303, 0.95551887, 0.49972017,
              0.60479008, 0.12416183, 0.84137027, 0.89665397, 0.24974743,
              0.01909828, 0.6131742 , 0.13863998, 0.06366056, 0.28804204,
              0.43049991, 0.77422494, 0.35015752, 0.43692652, 0.45598326,
              0.415158  , 0.97203439, 0.03934855, 0.34992838, 0.46342708,
              0.0216288 , 0.90004318, 0.50350774, 0.3259796 , 0.51889728,
              0.17974083, 0.09147877, 0.95856001, 0.63897118, 0.99085414,
              0.38271461, 0.69842238, 0.65304407, 0.25075702, 0.72727316,
              0.20115714, 0.00232218, 0.40849564, 0.42197852, 0.82432862,
              0.26484567, 0.91234938, 0.19754768, 0.37149582, 0.57697515,
              0.52313378, 0.8369508 , 0.9930806 , 0.04880941, 0.93447273,
              0.0286562 , 0.44461428, 0.04572078, 0.27382505, 0.49086261,
              0.94754696, 0.80152305, 0.426     , 0.65286237, 0.82109539,
              0.87974427, 0.60091057, 0.14832891, 0.3110685 , 0.236682  ,
              0.07309788, 0.47780163, 0.7473738 , 0.24786667, 0.52280929,
              0.9994715 , 0.47876747, 0.18677987, 0.3194905 , 0.97677574,
              0.67865794, 0.71102793, 0.36079924, 0.53495973, 0.67835528,
              0.26757684, 0.26082329, 0.75073358, 0.42451942, 0.57500771,
              0.69017113, 0.10712456, 0.81579501, 0.55731828, 0.22381943])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.05106182, 0.71190345, 0.11645406, 0.96597075, 0.44471556,
              0.69637979, 0.63292226, 0.8406542 , 0.88482593, 0.50433275,
              0.15759416, 0.64316941, 0.89881683, 0.46893539, 0.35508131,
              0.20399813, 0.25846244, 0.19191092, 0.53514974, 0.68792625,
              0.05684878, 0.30998883, 0.08710672, 0.59689106, 0.11345075,
              0.06455384, 0.10022311, 0.96955488, 0.01035863, 0.17334957,
              0.89965572, 0.38207013, 0.26565806, 0.64025047, 0.22564169,
              0.4873701 , 0.55809101, 0.75196277, 0.93777228, 0.17935596,
              0.14097848, 0.3153124 , 0.27517127, 0.44528146, 0.32171989,
              0.40807219, 0.15022437, 0.49095452, 0.12390169, 0.18306822,
              0.34166711, 0.28352035, 0.82631049, 0.98737184, 0.10310153,
              0.35684386, 0.03090137, 0.19807754, 0.10657263, 0.02445241,
              0.24961515, 0.07621968, 0.92454281, 0.48652697, 0.6856309 ,
              0.14786241, 0.98599834, 0.21246004, 0.80600803, 0.53731208,
              0.06953323, 0.93152136, 0.47903722, 0.37781127, 0.86544947,
              0.79601602, 0.71930142, 0.62539597, 0.31270849, 0.99144277,
              0.50048578, 0.14102133, 0.48324594, 0.9960392 , 0.71988455,
              0.89339281, 0.17308589, 0.26580349, 0.58914783, 0.17454156,
              0.61936329, 0.71856247, 0.42077859, 0.65110166, 0.01638292,
              0.58897469, 0.27976283, 0.97963224, 0.98291399, 0.19994871])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.42139053, 0.688654  , 0.14641519, 0.53490012, 0.35542462,
              0.81834936, 0.30309804, 0.09915693, 0.34332815, 0.1694587 ,
              0.07001125, 0.63056045, 0.45288588, 0.59285286, 0.26945691,
              0.25249564, 0.59101672, 0.8913883 , 0.60935302, 0.84505937,
              0.34827191, 0.64179433, 0.8789263 , 0.77512301, 0.64438344,
              0.56197484, 0.91149166, 0.69159622, 0.05016867, 0.1967182 ,
              0.30383307, 0.61903419, 0.0635191 , 0.66192943, 0.29743193,
              0.15137089, 0.1327748 , 0.19190775, 0.70587965, 0.34055133,
              0.2699294 , 0.33349802, 0.37506847, 0.60659623, 0.6685276 ,
              0.90905807, 0.4689496 , 0.41015389, 0.08028852, 0.16864918,
              0.09419664, 0.88256146, 0.61066937, 0.01707763, 0.90712181,
              0.23564871, 0.60632307, 0.95340764, 0.34924303, 0.57548244,
              0.67999602, 0.79091423, 0.52733483, 0.90816864, 0.47782715,
              0.00409384, 0.2890638 , 0.9195012 , 0.5721028 , 0.79074868,
              0.84189764, 0.30266578, 0.12287424, 0.25971498, 0.97261505,
              0.75510171, 0.46369212, 0.75146741, 0.07312289, 0.23378456,
              0.10646033, 0.86586413, 0.83853329, 0.72921564, 0.58217912,
              0.66557526, 0.96252492, 0.80940681, 0.16637949, 0.50443924,
              0.42462215, 0.12938104, 0.38600476, 0.81354955, 0.65498524,
              0.0674771 , 0.78554773, 0.77900714, 0.72431788, 0.06253936])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.3416755 , 0.95820822, 0.86937365, 0.59908555, 0.47648066,
              0.49184913, 0.60021228, 0.87834553, 0.48872838, 0.4893657 ,
              0.46253431, 0.76421021, 0.72761973, 0.96685349, 0.24338001,
              0.96602549, 0.02678317, 0.3324334 , 0.30728137, 0.97752168,
              0.6614264 , 0.08933724, 0.87732792, 0.5341668 , 0.18194411,
              0.5124435 , 0.60637316, 0.66337831, 0.65680844, 0.86160685,
              0.15137756, 0.87879114, 0.6171771 , 0.32542825, 0.27621559,
              0.26412102, 0.2343484 , 0.71103711, 0.9183233 , 0.43483765,
              0.36653898, 0.43876411, 0.08893047, 0.363191  , 0.07356638,
              0.76620062, 0.9938171 , 0.9646725 , 0.28499647, 0.80911744,
              0.82322976, 0.26049401, 0.00315022, 0.69232299, 0.90913156,
              0.84602606, 0.49428972, 0.45452521, 0.28945148, 0.78650698,
              0.57120163, 0.30180686, 0.43966599, 0.27108931, 0.74906743,
              0.00330519, 0.22743716, 0.62144258, 0.28660066, 0.62522995,
              0.01906585, 0.39495603, 0.47199849, 0.52792037, 0.65731609,
              0.51510791, 0.86154393, 0.37293251, 0.27006703, 0.89547684,
              0.69991774, 0.45306546, 0.99028941, 0.90813765, 0.32311238,
              0.41072278, 0.21950548, 0.09730302, 0.04855166, 0.69966477,
              0.4155884 , 0.77228193, 0.14303544, 0.75973958, 0.78138105,
              0.17148584, 0.17233296, 0.34272857, 0.4646688 , 0.70579846])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.42118985, 0.13410468, 0.96569748, 0.24565361, 0.31638028,
              0.12099572, 0.05045797, 0.99492211, 0.57225563, 0.79021286,
              0.98306883, 0.63009836, 0.06606456, 0.88371549, 0.2948572 ,
              0.06181288, 0.06271613, 0.65614183, 0.4925591 , 0.82403439,
              0.25693133, 0.49545855, 0.14496076, 0.62943118, 0.4797337 ,
              0.67262928, 0.45861208, 0.66157839, 0.77918102, 0.28900307,
              0.86587585, 0.38195382, 0.77405149, 0.16053594, 0.35841275,
              0.13355528, 0.00380804, 0.04171434, 0.01438344, 0.96126361,
              0.75121083, 0.63536488, 0.02708742, 0.42665011, 0.61304352,
              0.80419084, 0.2702076 , 0.53262656, 0.00511245, 0.74906471,
              0.37711495, 0.14761643, 0.11465213, 0.53763217, 0.88451149,
              0.6522256 , 0.49817383, 0.98287067, 0.02341729, 0.40721972,
              0.97861931, 0.58758799, 0.78389368, 0.91531382, 0.27337787,
              0.45993994, 0.11905486, 0.81296715, 0.02358242, 0.18027938,
              0.58450799, 0.50537465, 0.09586193, 0.10036048, 0.99942077,
              0.92917056, 0.43842045, 0.17740743, 0.68599574, 0.63927666,
              0.66285518, 0.83143357, 0.43760587, 0.63261456, 0.74489383,
              0.54659427, 0.16329087, 0.87699334, 0.48076973, 0.84265863,
              0.15094559, 0.28312846, 0.28631566, 0.88484364, 0.52343193,
              0.9680784 , 0.90117799, 0.00188848, 0.423811  , 0.30103179])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([1.63869988e-01, 9.11797555e-01, 3.84165204e-01, 4.80343633e-01,
              4.07096812e-01, 4.05962242e-01, 2.38656530e-01, 6.06881030e-01,
              6.01309941e-01, 3.02273124e-01, 3.10591190e-01, 3.79903110e-01,
              7.77773873e-02, 9.55697520e-01, 6.06540303e-01, 3.76963711e-01,
              9.58772011e-01, 2.84582785e-01, 6.31541561e-01, 7.81015109e-01,
              5.93642439e-01, 3.23327220e-01, 1.61882464e-02, 6.55256913e-01,
              2.60647402e-01, 8.76336985e-01, 2.52283179e-01, 4.30996820e-01,
              7.91886231e-02, 9.27469268e-01, 7.98658141e-01, 4.82341944e-01,
              9.88994248e-01, 6.63722885e-01, 9.35070356e-01, 9.11034454e-01,
              9.14249974e-01, 6.16355749e-01, 7.57881127e-01, 8.63550541e-01,
              8.67926953e-01, 4.85286463e-01, 6.96765016e-02, 1.11842585e-01,
              9.31450462e-01, 1.24410853e-01, 4.90198710e-01, 5.77119991e-01,
              5.84883989e-01, 4.16869454e-01, 7.03408644e-01, 1.05558437e-01,
              6.41406756e-04, 9.55711349e-01, 6.00661709e-01, 3.45658421e-01,
              6.01698252e-01, 8.47779885e-01, 7.06279595e-01, 1.31665336e-02,
              8.94831834e-01, 3.35529596e-01, 2.44822054e-01, 1.50433907e-01,
              7.84438261e-01, 6.23539144e-02, 7.53745211e-01, 6.47128257e-01,
              6.51941609e-01, 7.73186418e-01, 1.31854964e-01, 3.16861737e-01,
              6.98284954e-01, 3.81166676e-01, 5.47277246e-01, 5.07576468e-01,
              3.61640908e-01, 7.83467530e-01, 5.12050099e-02, 3.65936941e-01,
              6.81861093e-01, 1.55923163e-01, 1.12804886e-01, 4.81299401e-01,
              5.55410607e-02, 8.07812846e-01, 1.45122836e-01, 1.32014240e-01,
              9.47410113e-01, 5.91750788e-01, 9.02052910e-01, 3.75669432e-01,
              9.10376605e-01, 7.56711168e-01, 8.13263628e-02, 7.96192872e-01,
              5.02922609e-01, 1.47557365e-01, 6.99182254e-01, 6.89617134e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([8.11140605e-01, 3.67391403e-01, 8.24589184e-01, 3.33644963e-01,
              4.02916122e-01, 5.37871299e-01, 6.74678238e-01, 1.06479473e-01,
              3.08919655e-01, 1.14715446e-01, 9.10256279e-01, 9.28742935e-01,
              2.16711865e-02, 7.85346561e-01, 6.34697191e-01, 6.62722087e-01,
              3.76330032e-01, 3.77535904e-01, 1.32279232e-01, 6.45183544e-01,
              8.89070611e-01, 7.21436150e-01, 8.36158342e-02, 6.86026371e-01,
              6.95644168e-01, 1.30599108e-01, 1.30221094e-01, 4.30915061e-01,
              9.62301516e-01, 3.47213761e-03, 7.25005148e-01, 4.32733005e-01,
              7.07114164e-01, 6.49765488e-01, 3.85992178e-04, 1.93847524e-01,
              2.54687049e-02, 1.46718015e-01, 5.00118312e-01, 1.25452563e-01,
              1.29870363e-01, 3.42109247e-01, 2.90836767e-01, 5.30524674e-01,
              4.18276169e-02, 9.20465298e-01, 8.51894238e-01, 2.37774609e-01,
              5.28048996e-01, 7.10993867e-01, 1.43621639e-02, 8.48700105e-01,
              2.09801114e-01, 6.36973650e-01, 7.50931715e-01, 3.11658495e-01,
              4.90297471e-01, 1.69923174e-01, 9.71356602e-01, 8.42877651e-01,
              6.05579991e-01, 3.38534204e-01, 5.91222735e-01, 2.64840064e-01,
              1.09290718e-01, 2.63859296e-01, 6.36799605e-01, 5.57254855e-01,
              3.40481666e-01, 1.72184081e-01, 3.34953603e-01, 1.43894259e-01,
              3.92041678e-01, 7.58986114e-01, 2.58941794e-02, 7.14129778e-01,
              5.78729291e-01, 6.83108865e-01, 3.83706223e-01, 2.32863466e-01,
              4.96617141e-01, 3.63611204e-01, 4.76205353e-01, 1.47344109e-01,
              9.00848415e-02, 5.12012206e-01, 4.97357528e-01, 9.55062604e-01,
              4.15235657e-01, 2.50192248e-02, 7.06029120e-02, 1.91009972e-01,
              1.22610021e-01, 8.44820199e-01, 9.05282385e-01, 4.52341791e-01,
              7.78048555e-01, 4.81753283e-01, 8.50087642e-01, 6.29284887e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.56621928, 0.92503665, 0.1659154 , 0.59363615, 0.60312442,
              0.7709515 , 0.82873392, 0.61223515, 0.68181616, 0.99325477,
              0.77195036, 0.16255245, 0.80923736, 0.51482994, 0.80135367,
              0.13515223, 0.92966883, 0.86938114, 0.10743194, 0.88206829,
              0.04090119, 0.401463  , 0.91029776, 0.52138299, 0.03178804,
              0.11014467, 0.18295359, 0.09724729, 0.40882112, 0.17692031,
              0.10501348, 0.21663193, 0.99564849, 0.58146877, 0.34593609,
              0.23918411, 0.80413275, 0.78696291, 0.05082591, 0.57078071,
              0.61696596, 0.86387878, 0.31839654, 0.89662944, 0.05160044,
              0.36994387, 0.14670095, 0.77783301, 0.37260563, 0.68710174,
              0.44575362, 0.93467725, 0.47028728, 0.75380315, 0.16027632,
              0.65514932, 0.80078209, 0.58064364, 0.03386418, 0.42453766,
              0.29059329, 0.76888966, 0.40305381, 0.33657741, 0.9202671 ,
              0.08248306, 0.37418845, 0.29626438, 0.28937077, 0.32367115,
              0.58815409, 0.19034518, 0.43536091, 0.95860755, 0.94741588,
              0.65133158, 0.28295256, 0.34073896, 0.05715643, 0.30164679,
              0.72720121, 0.62385677, 0.84204044, 0.5468375 , 0.64590634,
              0.68475881, 0.23191813, 0.81434121, 0.59996961, 0.95039148,
              0.4525771 , 0.98563817, 0.25330723, 0.59832301, 0.32253063,
              0.59771733, 0.7892462 , 0.17323386, 0.95857495, 0.52069851])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([6.70859145e-01, 4.77975458e-02, 1.01246750e-01, 2.41357300e-01,
              5.35172313e-01, 1.84176310e-01, 7.56742672e-01, 8.81267577e-01,
              2.15630462e-01, 2.33549920e-01, 1.89461047e-01, 7.43710735e-01,
              1.25725523e-01, 4.33124034e-01, 3.96816294e-01, 6.78081330e-02,
              6.69775466e-01, 9.09766283e-01, 1.43016126e-01, 2.91902919e-01,
              3.47967858e-01, 2.40663509e-01, 5.95522203e-01, 6.39749394e-01,
              3.74417133e-01, 5.55646180e-01, 9.58785738e-01, 2.85771249e-01,
              7.58328697e-01, 3.23516438e-01, 1.47080433e-01, 4.63606658e-01,
              7.41858185e-01, 5.53697484e-01, 2.92702987e-01, 7.89635480e-01,
              9.10531539e-01, 4.73972255e-01, 7.56084027e-01, 3.17328404e-01,
              3.66567433e-01, 4.64803163e-01, 2.21181766e-01, 7.03756996e-02,
              5.55429051e-01, 1.24677205e-01, 3.58958542e-01, 5.96861370e-01,
              1.32409400e-01, 7.45007565e-01, 2.87422482e-01, 1.33594155e-01,
              5.16563097e-01, 2.62064254e-01, 6.26352805e-01, 8.45028511e-01,
              2.14566595e-02, 6.16257562e-01, 6.43719156e-01, 8.78473047e-01,
              6.40555969e-01, 9.52621328e-01, 8.15352078e-01, 2.46076191e-01,
              6.31110715e-01, 7.53366692e-01, 4.22814553e-01, 9.24877826e-01,
              7.20087138e-01, 8.22291922e-01, 7.01001291e-01, 1.67296388e-02,
              2.87425518e-01, 5.03125111e-01, 6.30343251e-02, 7.97220136e-01,
              2.63777288e-04, 9.29892517e-01, 1.34132692e-01, 4.40736169e-01,
              7.64896758e-01, 2.98576423e-01, 3.64697584e-01, 3.30228299e-01,
              3.08934796e-01, 6.30279985e-01, 3.86838535e-01, 1.94799271e-01,
              6.73226791e-01, 5.60654777e-01, 2.36286091e-01, 9.07418671e-01,
              6.17565311e-01, 5.25625959e-01, 2.24864919e-01, 2.32458882e-01,
              5.31608473e-01, 6.84817417e-01, 8.99757051e-01, 1.02288824e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([1.63869988e-01, 9.11797555e-01, 3.84165204e-01, 4.80343633e-01,
              4.07096812e-01, 4.05962242e-01, 2.38656530e-01, 6.06881030e-01,
              6.01309941e-01, 3.02273124e-01, 3.10591190e-01, 3.79903110e-01,
              7.77773873e-02, 9.55697520e-01, 6.06540303e-01, 3.76963711e-01,
              9.58772011e-01, 2.84582785e-01, 6.31541561e-01, 7.81015109e-01,
              5.93642439e-01, 3.23327220e-01, 1.61882464e-02, 6.55256913e-01,
              2.60647402e-01, 8.76336985e-01, 2.52283179e-01, 4.30996820e-01,
              7.91886231e-02, 9.27469268e-01, 7.98658141e-01, 4.82341944e-01,
              9.88994248e-01, 6.63722885e-01, 9.35070356e-01, 9.11034454e-01,
              9.14249974e-01, 6.16355749e-01, 7.57881127e-01, 8.63550541e-01,
              8.67926953e-01, 4.85286463e-01, 6.96765016e-02, 1.11842585e-01,
              9.31450462e-01, 1.24410853e-01, 4.90198710e-01, 5.77119991e-01,
              5.84883989e-01, 4.16869454e-01, 7.03408644e-01, 1.05558437e-01,
              6.41406756e-04, 9.55711349e-01, 6.00661709e-01, 3.45658421e-01,
              6.01698252e-01, 8.47779885e-01, 7.06279595e-01, 1.31665336e-02,
              8.94831834e-01, 3.35529596e-01, 2.44822054e-01, 1.50433907e-01,
              7.84438261e-01, 6.23539144e-02, 7.53745211e-01, 6.47128257e-01,
              6.51941609e-01, 7.73186418e-01, 1.31854964e-01, 3.16861737e-01,
              6.98284954e-01, 3.81166676e-01, 5.47277246e-01, 5.07576468e-01,
              3.61640908e-01, 7.83467530e-01, 5.12050099e-02, 3.65936941e-01,
              6.81861093e-01, 1.55923163e-01, 1.12804886e-01, 4.81299401e-01,
              5.55410607e-02, 8.07812846e-01, 1.45122836e-01, 1.32014240e-01,
              9.47410113e-01, 5.91750788e-01, 9.02052910e-01, 3.75669432e-01,
              9.10376605e-01, 7.56711168e-01, 8.13263628e-02, 7.96192872e-01,
              5.02922609e-01, 1.47557365e-01, 6.99182254e-01, 6.89617134e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([8.11140605e-01, 3.67391403e-01, 8.24589184e-01, 3.33644963e-01,
              4.02916122e-01, 5.37871299e-01, 6.74678238e-01, 1.06479473e-01,
              3.08919655e-01, 1.14715446e-01, 9.10256279e-01, 9.28742935e-01,
              2.16711865e-02, 7.85346561e-01, 6.34697191e-01, 6.62722087e-01,
              3.76330032e-01, 3.77535904e-01, 1.32279232e-01, 6.45183544e-01,
              8.89070611e-01, 7.21436150e-01, 8.36158342e-02, 6.86026371e-01,
              6.95644168e-01, 1.30599108e-01, 1.30221094e-01, 4.30915061e-01,
              9.62301516e-01, 3.47213761e-03, 7.25005148e-01, 4.32733005e-01,
              7.07114164e-01, 6.49765488e-01, 3.85992178e-04, 1.93847524e-01,
              2.54687049e-02, 1.46718015e-01, 5.00118312e-01, 1.25452563e-01,
              1.29870363e-01, 3.42109247e-01, 2.90836767e-01, 5.30524674e-01,
              4.18276169e-02, 9.20465298e-01, 8.51894238e-01, 2.37774609e-01,
              5.28048996e-01, 7.10993867e-01, 1.43621639e-02, 8.48700105e-01,
              2.09801114e-01, 6.36973650e-01, 7.50931715e-01, 3.11658495e-01,
              4.90297471e-01, 1.69923174e-01, 9.71356602e-01, 8.42877651e-01,
              6.05579991e-01, 3.38534204e-01, 5.91222735e-01, 2.64840064e-01,
              1.09290718e-01, 2.63859296e-01, 6.36799605e-01, 5.57254855e-01,
              3.40481666e-01, 1.72184081e-01, 3.34953603e-01, 1.43894259e-01,
              3.92041678e-01, 7.58986114e-01, 2.58941794e-02, 7.14129778e-01,
              5.78729291e-01, 6.83108865e-01, 3.83706223e-01, 2.32863466e-01,
              4.96617141e-01, 3.63611204e-01, 4.76205353e-01, 1.47344109e-01,
              9.00848415e-02, 5.12012206e-01, 4.97357528e-01, 9.55062604e-01,
              4.15235657e-01, 2.50192248e-02, 7.06029120e-02, 1.91009972e-01,
              1.22610021e-01, 8.44820199e-01, 9.05282385e-01, 4.52341791e-01,
              7.78048555e-01, 4.81753283e-01, 8.50087642e-01, 6.29284887e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.56621928, 0.92503665, 0.1659154 , 0.59363615, 0.60312442,
              0.7709515 , 0.82873392, 0.61223515, 0.68181616, 0.99325477,
              0.77195036, 0.16255245, 0.80923736, 0.51482994, 0.80135367,
              0.13515223, 0.92966883, 0.86938114, 0.10743194, 0.88206829,
              0.04090119, 0.401463  , 0.91029776, 0.52138299, 0.03178804,
              0.11014467, 0.18295359, 0.09724729, 0.40882112, 0.17692031,
              0.10501348, 0.21663193, 0.99564849, 0.58146877, 0.34593609,
              0.23918411, 0.80413275, 0.78696291, 0.05082591, 0.57078071,
              0.61696596, 0.86387878, 0.31839654, 0.89662944, 0.05160044,
              0.36994387, 0.14670095, 0.77783301, 0.37260563, 0.68710174,
              0.44575362, 0.93467725, 0.47028728, 0.75380315, 0.16027632,
              0.65514932, 0.80078209, 0.58064364, 0.03386418, 0.42453766,
              0.29059329, 0.76888966, 0.40305381, 0.33657741, 0.9202671 ,
              0.08248306, 0.37418845, 0.29626438, 0.28937077, 0.32367115,
              0.58815409, 0.19034518, 0.43536091, 0.95860755, 0.94741588,
              0.65133158, 0.28295256, 0.34073896, 0.05715643, 0.30164679,
              0.72720121, 0.62385677, 0.84204044, 0.5468375 , 0.64590634,
              0.68475881, 0.23191813, 0.81434121, 0.59996961, 0.95039148,
              0.4525771 , 0.98563817, 0.25330723, 0.59832301, 0.32253063,
              0.59771733, 0.7892462 , 0.17323386, 0.95857495, 0.52069851])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.08563453, 0.66937755, 0.95009961, 0.91898546, 0.34928703,
              0.9369917 , 0.97178803, 0.33738218, 0.81184515, 0.76754249,
              0.23624681, 0.59433788, 0.93890913, 0.25651785, 0.7465597 ,
              0.32102962, 0.58756427, 0.76119694, 0.03720236, 0.55049294,
              0.02127127, 0.51679843, 0.1348786 , 0.28333878, 0.78456818,
              0.55540041, 0.29625504, 0.68988582, 0.44349782, 0.94131555,
              0.09430772, 0.61308579, 0.92485318, 0.7191684 , 0.79896755,
              0.26186001, 0.31086285, 0.57405512, 0.70389943, 0.2526943 ,
              0.64242886, 0.27385413, 0.88759663, 0.63617863, 0.29372563,
              0.05697514, 0.79324239, 0.6801699 , 0.70520441, 0.39842765,
              0.76914592, 0.17499547, 0.30459467, 0.71961596, 0.56289609,
              0.42147283, 0.67868589, 0.0182661 , 0.73809291, 0.27269695,
              0.27833379, 0.46854555, 0.31615114, 0.2591045 , 0.61746438,
              0.88818638, 0.92778653, 0.51540305, 0.29615056, 0.86715292,
              0.70483529, 0.26787506, 0.54349424, 0.15394494, 0.01108421,
              0.58210239, 0.99092343, 0.08341449, 0.25163753, 0.88288457,
              0.31505614, 0.81534577, 0.35787013, 0.55962994, 0.22145218,
              0.97930088, 0.99431531, 0.00190358, 0.59621634, 0.88380532,
              0.59851931, 0.35271032, 0.10252318, 0.71863642, 0.55471206,
              0.77224283, 0.92246463, 0.24239123, 0.78446157, 0.63901827])}]]


