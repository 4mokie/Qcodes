
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='5978ce25-e8fb-4a5c-bc34-77860dc20710'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='a9e702d8-b001-433b-b651-bd700db8c1ac'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.816767860557665],
     [0.710154814034209],
     [0.82658726855429],
     [0.975737997783703],
     [0.430891292789801],
     [0.868124817201092],
     [0.20723335155874],
     [0.743754813513573],
     [0.368942427456062],
     [0.67720794043616],
     [0.715820167589196],
     [0.0967042612279743],
     [0.599924253654765],
     [0.328973392208412],
     [0.571347721489982],
     [0.157912623103102],
     [0.6671912380788],
     [0.230920560405288],
     [0.747174696150347],
     [0.367576055023412],
     [0.389747381561659],
     [0.943910984027771],
     [0.349630592926405],
     [0.655617232339774],
     [0.352214648222817],
     [0.258650458110118],
     [0.756124011823689],
     [0.93707696603675],
     [0.038819391507497],
     [0.402217245351365],
     [0.371771554873613],
     [0.245137146483322],
     [0.0328488330925234],
     [0.770215035866378],
     [0.648737584228404],
     [0.981710461414632],
     [0.719210056770171],
     [0.751407995154797],
     [0.0887576817649868],
     [0.315454538031529],
     [0.0623546006692987],
     [0.78455284015629],
     [0.400810490065872],
     [0.48160572946895],
     [0.258974522642463],
     [0.223342744650087],
     [0.227361662826809],
     [0.690924286150432],
     [0.0708356429984146],
     [0.656048609482595],
     [0.00232706703792074],
     [0.531096150828117],
     [0.131788312978647],
     [0.103407975582635],
     [0.575341776822644],
     [0.937298735862217],
     [0.620351246369312],
     [0.757349339228773],
     [0.0310144970321377],
     [0.67705114862547],
     [0.400170329567564],
     [0.0843507131291895],
     [0.636185808459255],
     [0.0784752239007473],
     [0.179556245779448],
     [0.560884153479382],
     [0.661813129431346],
     [0.681811526493097],
     [0.906319978186061],
     [0.277298373153079],
     [0.025347244994267],
     [0.455779260080391],
     [0.100790108251291],
     [0.0960032519197848],
     [0.245524589948028],
     [0.65696957499746],
     [0.210647643919224],
     [0.658208014226307],
     [0.467281848672892],
     [0.136777066790872],
     [0.395812777086772],
     [0.012221246232345],
     [0.48460746117392],
     [0.869891693767768],
     [0.759482214051025],
     [0.496841813825774],
     [0.723974968479035],
     [0.404705462497399],
     [0.954865280917039],
     [0.537760660003737],
     [0.681942184044566],
     [0.726398193768295],
     [0.553224649460389],
     [0.0732383201614123],
     [0.633274338585047],
     [0.848584588576539],
     [0.701420183189924],
     [0.651511899896025],
     [0.555229460098359],
     [0.613838736012506]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.43393766])],
     [array([0.4379447])],
     [array([0.25881535])],
     [array([0.77348227])],
     [array([0.55330326])],
     [array([0.47416115])],
     [array([0.42972152])],
     [array([0.78189559])],
     [array([0.50623147])],
     [array([0.86912693])],
     [array([0.03943346])],
     [array([0.24336451])],
     [array([0.31548667])],
     [array([0.59150098])],
     [array([0.93635629])],
     [array([0.77889673])],
     [array([0.93386621])],
     [array([0.91675184])],
     [array([0.74764841])],
     [array([0.13897479])],
     [array([0.19466482])],
     [array([0.49637265])],
     [array([0.87774683])],
     [array([0.90824861])],
     [array([0.98644421])],
     [array([0.02509092])],
     [array([0.12646337])],
     [array([0.08225662])],
     [array([0.05938944])],
     [array([0.57608449])],
     [array([0.22614626])],
     [array([0.31209667])],
     [array([0.47290119])],
     [array([0.38312376])],
     [array([0.69333654])],
     [array([0.08495565])],
     [array([0.811886])],
     [array([0.74342648])],
     [array([0.86799287])],
     [array([0.47254987])],
     [array([0.38457993])],
     [array([0.37711703])],
     [array([0.12764245])],
     [array([0.51684142])],
     [array([0.32056846])],
     [array([0.76736081])],
     [array([0.39100454])],
     [array([0.04098074])],
     [array([0.64071602])],
     [array([0.74065173])],
     [array([0.23509481])],
     [array([0.13061274])],
     [array([0.77327264])],
     [array([0.27480073])],
     [array([0.06322795])],
     [array([0.62394962])],
     [array([0.21565697])],
     [array([0.6629137])],
     [array([0.6510743])],
     [array([0.23035715])],
     [array([0.50645561])],
     [array([0.6742467])],
     [array([0.33373434])],
     [array([0.45128832])],
     [array([0.56976732])],
     [array([0.73976235])],
     [array([0.52819914])],
     [array([0.04688996])],
     [array([0.12633598])],
     [array([0.1808043])],
     [array([0.94832549])],
     [array([0.9857168])],
     [array([0.59922067])],
     [array([0.33107884])],
     [array([0.02339111])],
     [array([0.32694345])],
     [array([0.76282611])],
     [array([0.98015654])],
     [array([0.08892664])],
     [array([0.31619927])],
     [array([0.56650672])],
     [array([0.73967898])],
     [array([0.20512959])],
     [array([0.71795004])],
     [array([0.3146929])],
     [array([0.71466014])],
     [array([0.35871328])],
     [array([0.64767513])],
     [array([0.60775827])],
     [array([0.94022683])],
     [array([0.2175505])],
     [array([0.1126748])],
     [array([0.38196652])],
     [array([0.15420462])],
     [array([0.45246582])],
     [array([0.67087706])],
     [array([0.47866376])],
     [array([0.66026177])],
     [array([0.50508541])],
     [array([0.08193186])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.43393766, 0.4379447 , 0.25881535, 0.77348227, 0.55330326,
           0.47416115, 0.42972152, 0.78189559, 0.50623147, 0.86912693,
           0.03943346, 0.24336451, 0.31548667, 0.59150098, 0.93635629,
           0.77889673, 0.93386621, 0.91675184, 0.74764841, 0.13897479,
           0.19466482, 0.49637265, 0.87774683, 0.90824861, 0.98644421,
           0.02509092, 0.12646337, 0.08225662, 0.05938944, 0.57608449,
           0.22614626, 0.31209667, 0.47290119, 0.38312376, 0.69333654,
           0.08495565, 0.811886  , 0.74342648, 0.86799287, 0.47254987,
           0.38457993, 0.37711703, 0.12764245, 0.51684142, 0.32056846,
           0.76736081, 0.39100454, 0.04098074, 0.64071602, 0.74065173,
           0.23509481, 0.13061274, 0.77327264, 0.27480073, 0.06322795,
           0.62394962, 0.21565697, 0.6629137 , 0.6510743 , 0.23035715,
           0.50645561, 0.6742467 , 0.33373434, 0.45128832, 0.56976732,
           0.73976235, 0.52819914, 0.04688996, 0.12633598, 0.1808043 ,
           0.94832549, 0.9857168 , 0.59922067, 0.33107884, 0.02339111,
           0.32694345, 0.76282611, 0.98015654, 0.08892664, 0.31619927,
           0.56650672, 0.73967898, 0.20512959, 0.71795004, 0.3146929 ,
           0.71466014, 0.35871328, 0.64767513, 0.60775827, 0.94022683,
           0.2175505 , 0.1126748 , 0.38196652, 0.15420462, 0.45246582,
           0.67087706, 0.47866376, 0.66026177, 0.50508541, 0.08193186])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.81676786, 0.71015481, 0.82658727, 0.975738  , 0.43089129,
              0.86812482, 0.20723335, 0.74375481, 0.36894243, 0.67720794,
              0.71582017, 0.09670426, 0.59992425, 0.32897339, 0.57134772,
              0.15791262, 0.66719124, 0.23092056, 0.7471747 , 0.36757606,
              0.38974738, 0.94391098, 0.34963059, 0.65561723, 0.35221465,
              0.25865046, 0.75612401, 0.93707697, 0.03881939, 0.40221725,
              0.37177155, 0.24513715, 0.03284883, 0.77021504, 0.64873758,
              0.98171046, 0.71921006, 0.751408  , 0.08875768, 0.31545454,
              0.0623546 , 0.78455284, 0.40081049, 0.48160573, 0.25897452,
              0.22334274, 0.22736166, 0.69092429, 0.07083564, 0.65604861,
              0.00232707, 0.53109615, 0.13178831, 0.10340798, 0.57534178,
              0.93729874, 0.62035125, 0.75734934, 0.0310145 , 0.67705115,
              0.40017033, 0.08435071, 0.63618581, 0.07847522, 0.17955625,
              0.56088415, 0.66181313, 0.68181153, 0.90631998, 0.27729837,
              0.02534724, 0.45577926, 0.10079011, 0.09600325, 0.24552459,
              0.65696957, 0.21064764, 0.65820801, 0.46728185, 0.13677707,
              0.39581278, 0.01222125, 0.48460746, 0.86989169, 0.75948221,
              0.49684181, 0.72397497, 0.40470546, 0.95486528, 0.53776066,
              0.68194218, 0.72639819, 0.55322465, 0.07323832, 0.63327434,
              0.84858459, 0.70142018, 0.6515119 , 0.55522946, 0.61383874])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([3.74398947e-01, 9.84729422e-01, 7.78119644e-01, 1.39996306e-01,
              8.15689373e-01, 2.59002065e-01, 7.57320837e-01, 8.54486633e-01,
              2.85112995e-01, 9.66424836e-04, 3.59189804e-01, 8.18430248e-01,
              2.50385366e-01, 3.93422934e-01, 8.66190715e-01, 6.69015467e-01,
              6.45814003e-01, 8.94323402e-02, 1.68378237e-01, 2.84233589e-01,
              8.99814550e-01, 1.13710766e-01, 2.14086917e-01, 2.27244333e-01,
              1.18744074e-01, 2.90585619e-01, 1.16022598e-01, 1.11853639e-02,
              6.18551104e-01, 7.58049654e-01, 1.06047996e-01, 9.38855923e-01,
              9.37810646e-01, 9.20669206e-01, 9.62415996e-01, 2.91004689e-01,
              2.42912072e-01, 9.55263206e-02, 7.23837144e-01, 2.02446842e-01,
              1.47771083e-01, 8.96196802e-01, 1.78918838e-01, 2.16273898e-01,
              7.21580906e-01, 5.31632750e-01, 5.60816287e-01, 8.36844729e-01,
              3.79408842e-01, 7.29355107e-01, 7.72809433e-01, 5.57950343e-01,
              6.57226261e-01, 6.83283875e-01, 2.50861881e-01, 4.51638630e-01,
              4.39485624e-01, 6.95288049e-01, 8.39503508e-01, 9.66601333e-01,
              3.99434335e-01, 2.39837399e-01, 1.12241697e-01, 8.60403246e-01,
              1.14227036e-01, 6.17111183e-01, 8.12347401e-01, 4.52114368e-01,
              9.51544075e-01, 5.18575293e-01, 5.45888087e-01, 8.79371843e-01,
              4.00257737e-01, 3.81906913e-01, 5.27750817e-01, 2.51572347e-01,
              4.68856979e-01, 8.71447733e-01, 3.20391449e-01, 5.26722764e-01,
              9.06514894e-01, 6.91181632e-01, 5.61485630e-01, 6.92295381e-02,
              8.82425643e-01, 7.61581990e-01, 2.22344212e-01, 7.61066055e-01,
              9.51640576e-01, 8.26278664e-01, 9.78710597e-01, 1.09598302e-01,
              5.39142912e-01, 3.88287925e-01, 4.22551744e-01, 6.22867346e-01,
              4.49281566e-01, 5.14347406e-01, 6.81761394e-01, 5.87304194e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.9131088 , 0.17595749, 0.30865891, 0.16798802, 0.42597791,
              0.55952871, 0.813779  , 0.62966598, 0.32953795, 0.06312385,
              0.39043856, 0.95083094, 0.57250771, 0.46848382, 0.42998625,
              0.68330635, 0.18916026, 0.42929055, 0.18150701, 0.52257074,
              0.57651878, 0.05921629, 0.37875378, 0.91807426, 0.28280749,
              0.11889494, 0.50408886, 0.96459299, 0.03234725, 0.9242168 ,
              0.14349806, 0.09544431, 0.31547487, 0.88940452, 0.54416922,
              0.00296372, 0.60665773, 0.37444165, 0.45052005, 0.03676223,
              0.78814239, 0.97933666, 0.64611268, 0.58516931, 0.9845062 ,
              0.40521818, 0.87591761, 0.29932142, 0.87601285, 0.40121841,
              0.90191949, 0.52772743, 0.44459535, 0.21549606, 0.20412679,
              0.71136697, 0.2350304 , 0.4770375 , 0.15676693, 0.80245203,
              0.17420954, 0.16021109, 0.97766397, 0.22533779, 0.7605513 ,
              0.17297663, 0.51193612, 0.77986438, 0.25472617, 0.67728176,
              0.09047759, 0.27414227, 0.18845611, 0.56668689, 0.46338028,
              0.78172457, 0.37207487, 0.65315052, 0.19780003, 0.08992683,
              0.17967414, 0.61687113, 0.35602366, 0.20881843, 0.76004266,
              0.75010569, 0.23462208, 0.82822988, 0.91950147, 0.97685855,
              0.45075748, 0.27547803, 0.21773186, 0.72030979, 0.49338236,
              0.19185131, 0.66039952, 0.35909419, 0.7295329 , 0.41192992])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.4628356 , 0.43710496, 0.12156277, 0.61721415, 0.77051349,
              0.29277103, 0.33800533, 0.75493729, 0.62840131, 0.16230857,
              0.13614614, 0.18615846, 0.79070437, 0.31715199, 0.77931319,
              0.79548851, 0.05659777, 0.20428206, 0.70577645, 0.9131158 ,
              0.43739058, 0.84480049, 0.73870914, 0.68157182, 0.03495282,
              0.6106212 , 0.20541858, 0.7198103 , 0.51107896, 0.65333356,
              0.76452945, 0.88874748, 0.9280355 , 0.9816859 , 0.92657153,
              0.56467435, 0.232681  , 0.66075012, 0.4565685 , 0.51802112,
              0.81274981, 0.31327037, 0.54951822, 0.97919968, 0.27683871,
              0.29914351, 0.55025023, 0.72302298, 0.66979944, 0.28272995,
              0.90291769, 0.0478404 , 0.66853095, 0.41923421, 0.95887613,
              0.4819635 , 0.8485738 , 0.25361102, 0.56648854, 0.16116491,
              0.83087377, 0.69725178, 0.68649466, 0.28046844, 0.77475204,
              0.29302421, 0.11960712, 0.01533135, 0.23763509, 0.52177278,
              0.92925428, 0.42718681, 0.88219701, 0.29734592, 0.83998397,
              0.95646862, 0.40940211, 0.73252083, 0.00776524, 0.27862625,
              0.34548708, 0.06197477, 0.52733635, 0.99212095, 0.01847741,
              0.256797  , 0.09735076, 0.41326183, 0.92547495, 0.33224194,
              0.72366283, 0.56184932, 0.09356411, 0.67488164, 0.07082786,
              0.70640901, 0.72276534, 0.6400209 , 0.64577025, 0.5405912 ])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.81676786, 0.71015481, 0.82658727, 0.975738  , 0.43089129,
              0.86812482, 0.20723335, 0.74375481, 0.36894243, 0.67720794,
              0.71582017, 0.09670426, 0.59992425, 0.32897339, 0.57134772,
              0.15791262, 0.66719124, 0.23092056, 0.7471747 , 0.36757606,
              0.38974738, 0.94391098, 0.34963059, 0.65561723, 0.35221465,
              0.25865046, 0.75612401, 0.93707697, 0.03881939, 0.40221725,
              0.37177155, 0.24513715, 0.03284883, 0.77021504, 0.64873758,
              0.98171046, 0.71921006, 0.751408  , 0.08875768, 0.31545454,
              0.0623546 , 0.78455284, 0.40081049, 0.48160573, 0.25897452,
              0.22334274, 0.22736166, 0.69092429, 0.07083564, 0.65604861,
              0.00232707, 0.53109615, 0.13178831, 0.10340798, 0.57534178,
              0.93729874, 0.62035125, 0.75734934, 0.0310145 , 0.67705115,
              0.40017033, 0.08435071, 0.63618581, 0.07847522, 0.17955625,
              0.56088415, 0.66181313, 0.68181153, 0.90631998, 0.27729837,
              0.02534724, 0.45577926, 0.10079011, 0.09600325, 0.24552459,
              0.65696957, 0.21064764, 0.65820801, 0.46728185, 0.13677707,
              0.39581278, 0.01222125, 0.48460746, 0.86989169, 0.75948221,
              0.49684181, 0.72397497, 0.40470546, 0.95486528, 0.53776066,
              0.68194218, 0.72639819, 0.55322465, 0.07323832, 0.63327434,
              0.84858459, 0.70142018, 0.6515119 , 0.55522946, 0.61383874])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([3.74398947e-01, 9.84729422e-01, 7.78119644e-01, 1.39996306e-01,
              8.15689373e-01, 2.59002065e-01, 7.57320837e-01, 8.54486633e-01,
              2.85112995e-01, 9.66424836e-04, 3.59189804e-01, 8.18430248e-01,
              2.50385366e-01, 3.93422934e-01, 8.66190715e-01, 6.69015467e-01,
              6.45814003e-01, 8.94323402e-02, 1.68378237e-01, 2.84233589e-01,
              8.99814550e-01, 1.13710766e-01, 2.14086917e-01, 2.27244333e-01,
              1.18744074e-01, 2.90585619e-01, 1.16022598e-01, 1.11853639e-02,
              6.18551104e-01, 7.58049654e-01, 1.06047996e-01, 9.38855923e-01,
              9.37810646e-01, 9.20669206e-01, 9.62415996e-01, 2.91004689e-01,
              2.42912072e-01, 9.55263206e-02, 7.23837144e-01, 2.02446842e-01,
              1.47771083e-01, 8.96196802e-01, 1.78918838e-01, 2.16273898e-01,
              7.21580906e-01, 5.31632750e-01, 5.60816287e-01, 8.36844729e-01,
              3.79408842e-01, 7.29355107e-01, 7.72809433e-01, 5.57950343e-01,
              6.57226261e-01, 6.83283875e-01, 2.50861881e-01, 4.51638630e-01,
              4.39485624e-01, 6.95288049e-01, 8.39503508e-01, 9.66601333e-01,
              3.99434335e-01, 2.39837399e-01, 1.12241697e-01, 8.60403246e-01,
              1.14227036e-01, 6.17111183e-01, 8.12347401e-01, 4.52114368e-01,
              9.51544075e-01, 5.18575293e-01, 5.45888087e-01, 8.79371843e-01,
              4.00257737e-01, 3.81906913e-01, 5.27750817e-01, 2.51572347e-01,
              4.68856979e-01, 8.71447733e-01, 3.20391449e-01, 5.26722764e-01,
              9.06514894e-01, 6.91181632e-01, 5.61485630e-01, 6.92295381e-02,
              8.82425643e-01, 7.61581990e-01, 2.22344212e-01, 7.61066055e-01,
              9.51640576e-01, 8.26278664e-01, 9.78710597e-01, 1.09598302e-01,
              5.39142912e-01, 3.88287925e-01, 4.22551744e-01, 6.22867346e-01,
              4.49281566e-01, 5.14347406e-01, 6.81761394e-01, 5.87304194e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.9131088 , 0.17595749, 0.30865891, 0.16798802, 0.42597791,
              0.55952871, 0.813779  , 0.62966598, 0.32953795, 0.06312385,
              0.39043856, 0.95083094, 0.57250771, 0.46848382, 0.42998625,
              0.68330635, 0.18916026, 0.42929055, 0.18150701, 0.52257074,
              0.57651878, 0.05921629, 0.37875378, 0.91807426, 0.28280749,
              0.11889494, 0.50408886, 0.96459299, 0.03234725, 0.9242168 ,
              0.14349806, 0.09544431, 0.31547487, 0.88940452, 0.54416922,
              0.00296372, 0.60665773, 0.37444165, 0.45052005, 0.03676223,
              0.78814239, 0.97933666, 0.64611268, 0.58516931, 0.9845062 ,
              0.40521818, 0.87591761, 0.29932142, 0.87601285, 0.40121841,
              0.90191949, 0.52772743, 0.44459535, 0.21549606, 0.20412679,
              0.71136697, 0.2350304 , 0.4770375 , 0.15676693, 0.80245203,
              0.17420954, 0.16021109, 0.97766397, 0.22533779, 0.7605513 ,
              0.17297663, 0.51193612, 0.77986438, 0.25472617, 0.67728176,
              0.09047759, 0.27414227, 0.18845611, 0.56668689, 0.46338028,
              0.78172457, 0.37207487, 0.65315052, 0.19780003, 0.08992683,
              0.17967414, 0.61687113, 0.35602366, 0.20881843, 0.76004266,
              0.75010569, 0.23462208, 0.82822988, 0.91950147, 0.97685855,
              0.45075748, 0.27547803, 0.21773186, 0.72030979, 0.49338236,
              0.19185131, 0.66039952, 0.35909419, 0.7295329 , 0.41192992])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.4710069 , 0.95310032, 0.57204732, 0.83291016, 0.59357191,
              0.97480766, 0.66299802, 0.9704786 , 0.6612492 , 0.22520922,
              0.7902165 , 0.36845396, 0.10776329, 0.61046681, 0.73301561,
              0.47761613, 0.78043961, 0.31690517, 0.80108724, 0.30587881,
              0.31179219, 0.37320336, 0.9168845 , 0.26074067, 0.40669576,
              0.11721429, 0.54165785, 0.32847103, 0.89728757, 0.84598213,
              0.67852223, 0.99085411, 0.36944612, 0.74774106, 0.42628649,
              0.62530528, 0.94221503, 0.01258889, 0.91436726, 0.68864581,
              0.13568476, 0.98747513, 0.840807  , 0.704454  , 0.39281791,
              0.66744397, 0.72898367, 0.55013562, 0.39661892, 0.58526132,
              0.75388138, 0.67184954, 0.15958371, 0.71864626, 0.35144711,
              0.6342969 , 0.26769622, 0.97010853, 0.05550802, 0.81586475,
              0.36840514, 0.99679128, 0.59096486, 0.82010333, 0.42108896,
              0.82504782, 0.75067043, 0.41013495, 0.57870192, 0.44174968,
              0.76183449, 0.77828804, 0.13673504, 0.0557935 , 0.0549543 ,
              0.73414793, 0.36580653, 0.85275421, 0.45085351, 0.05093547,
              0.39520482, 0.65869676, 0.57521358, 0.32162152, 0.22605109,
              0.3287348 , 0.75898005, 0.17826101, 0.44474353, 0.25396246,
              0.83652661, 0.59195954, 0.0477113 , 0.19597249, 0.78676601,
              0.29149717, 0.9910739 , 0.7785328 , 0.12974139, 0.78314401])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.43393766, 0.4379447 , 0.25881535, 0.77348227, 0.55330326,
              0.47416115, 0.42972152, 0.78189559, 0.50623147, 0.86912693,
              0.03943346, 0.24336451, 0.31548667, 0.59150098, 0.93635629,
              0.77889673, 0.93386621, 0.91675184, 0.74764841, 0.13897479,
              0.19466482, 0.49637265, 0.87774683, 0.90824861, 0.98644421,
              0.02509092, 0.12646337, 0.08225662, 0.05938944, 0.57608449,
              0.22614626, 0.31209667, 0.47290119, 0.38312376, 0.69333654,
              0.08495565, 0.811886  , 0.74342648, 0.86799287, 0.47254987,
              0.38457993, 0.37711703, 0.12764245, 0.51684142, 0.32056846,
              0.76736081, 0.39100454, 0.04098074, 0.64071602, 0.74065173,
              0.23509481, 0.13061274, 0.77327264, 0.27480073, 0.06322795,
              0.62394962, 0.21565697, 0.6629137 , 0.6510743 , 0.23035715,
              0.50645561, 0.6742467 , 0.33373434, 0.45128832, 0.56976732,
              0.73976235, 0.52819914, 0.04688996, 0.12633598, 0.1808043 ,
              0.94832549, 0.9857168 , 0.59922067, 0.33107884, 0.02339111,
              0.32694345, 0.76282611, 0.98015654, 0.08892664, 0.31619927,
              0.56650672, 0.73967898, 0.20512959, 0.71795004, 0.3146929 ,
              0.71466014, 0.35871328, 0.64767513, 0.60775827, 0.94022683,
              0.2175505 , 0.1126748 , 0.38196652, 0.15420462, 0.45246582,
              0.67087706, 0.47866376, 0.66026177, 0.50508541, 0.08193186])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([6.81458698e-02, 2.82639769e-01, 2.53439023e-01, 6.44191761e-01,
              2.50648497e-01, 8.38646007e-01, 3.27445325e-01, 6.93848808e-01,
              8.51267452e-01, 6.22956313e-01, 1.83941566e-04, 3.43869199e-01,
              4.98635554e-02, 4.36422958e-01, 9.67525927e-01, 2.47779218e-01,
              1.31791979e-01, 3.31830913e-01, 5.38356871e-01, 5.03140699e-01,
              9.49330087e-01, 3.68200104e-01, 5.11871289e-02, 6.71246022e-01,
              6.11650202e-01, 4.20839226e-01, 8.70712970e-01, 9.26373173e-02,
              3.03023826e-01, 9.15743347e-01, 5.80761694e-01, 2.80832027e-01,
              4.36458858e-01, 7.63912727e-01, 5.56973159e-01, 7.90223281e-01,
              9.00238460e-01, 5.41098311e-02, 9.51297807e-01, 1.61073406e-01,
              4.56304295e-01, 9.64915067e-01, 2.81098029e-01, 6.12007929e-01,
              1.40149162e-01, 2.67042770e-01, 7.47551738e-02, 8.53235231e-01,
              9.33849436e-01, 8.28926266e-01, 5.60359122e-01, 3.97116909e-01,
              7.31074916e-01, 2.83262133e-03, 7.62072769e-01, 8.60752758e-01,
              5.19276803e-01, 7.23649435e-01, 6.88607808e-01, 4.19206891e-01,
              8.47929514e-01, 7.96148530e-01, 5.24634762e-02, 2.29023722e-01,
              8.10210349e-01, 9.56204369e-01, 2.29846988e-02, 7.53372871e-01,
              6.63519883e-01, 8.29246946e-01, 8.54464214e-03, 4.70853105e-01,
              4.47293556e-01, 6.44350665e-02, 5.72060486e-01, 7.49335363e-01,
              6.78002770e-01, 7.65464685e-04, 8.48166770e-01, 7.61394518e-01,
              4.57814618e-01, 3.77981516e-01, 3.06149317e-01, 3.84903338e-01,
              3.71958012e-01, 5.68920692e-01, 2.47694436e-01, 8.81552508e-01,
              4.61517906e-01, 1.53262084e-01, 7.65494628e-01, 7.86454655e-01,
              8.12736490e-01, 1.88874030e-01, 7.28408152e-01, 4.04618413e-02,
              1.34127713e-01, 2.39568384e-01, 3.29744463e-01, 7.71431816e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.38256171, 0.70161966, 0.58883128, 0.97749022, 0.91998039,
              0.97542157, 0.29553104, 0.5879127 , 0.50274518, 0.16398699,
              0.30425267, 0.54804128, 0.19177585, 0.2881363 , 0.7980599 ,
              0.05185293, 0.65050981, 0.93965872, 0.1523422 , 0.46539   ,
              0.48009716, 0.6592203 , 0.86388075, 0.61037455, 0.2147385 ,
              0.96049482, 0.06666788, 0.64088024, 0.28996612, 0.14319294,
              0.41116642, 0.71023056, 0.13741416, 0.66885588, 0.57926076,
              0.61812589, 0.2958285 , 0.06489352, 0.03147603, 0.29281248,
              0.53731225, 0.70337279, 0.61417497, 0.16321458, 0.21561773,
              0.88548717, 0.26685636, 0.84668308, 0.02608008, 0.1107924 ,
              0.31725818, 0.23833047, 0.29509504, 0.86912649, 0.58206705,
              0.051353  , 0.66207407, 0.47112133, 0.66026126, 0.69718601,
              0.21037206, 0.49902947, 0.08759383, 0.34184887, 0.91349328,
              0.98517833, 0.88318926, 0.11527173, 0.1576968 , 0.38938928,
              0.54948953, 0.23328919, 0.40710441, 0.66017392, 0.7950859 ,
              0.2533328 , 0.87950376, 0.34025331, 0.29143512, 0.85950852,
              0.52647096, 0.4990138 , 0.06155835, 0.21649634, 0.03793912,
              0.61331209, 0.25416205, 0.60635522, 0.22394988, 0.38533828,
              0.22522227, 0.96996018, 0.30234199, 0.93493002, 0.96044367,
              0.15794379, 0.45215497, 0.79034758, 0.71867328, 0.28742822])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.43070914, 0.18877648, 0.22517275, 0.02588554, 0.87452584,
              0.78313229, 0.61425478, 0.29203236, 0.87326452, 0.07357874,
              0.9981798 , 0.40806945, 0.77864213, 0.36804588, 0.31198468,
              0.40136995, 0.2478575 , 0.55087774, 0.61002397, 0.91212372,
              0.98332859, 0.54383361, 0.89194288, 0.47992869, 0.82567548,
              0.69325577, 0.31330784, 0.83739035, 0.31704179, 0.8164137 ,
              0.42905253, 0.63889055, 0.3122296 , 0.49446632, 0.59069519,
              0.81968936, 0.16508504, 0.13073045, 0.65720494, 0.12616303,
              0.52368769, 0.25871217, 0.15274603, 0.29117635, 0.62088074,
              0.59747314, 0.33936402, 0.52720463, 0.98240129, 0.88787766,
              0.57074908, 0.26776788, 0.97553287, 0.32977997, 0.59004993,
              0.88756416, 0.89841882, 0.38799599, 0.87161163, 0.45556495,
              0.44796605, 0.01835041, 0.53103059, 0.86521729, 0.71162849,
              0.74847899, 0.97557939, 0.03423215, 0.61276303, 0.07109868,
              0.59157826, 0.46491493, 0.33873487, 0.52912436, 0.91704625,
              0.67082844, 0.24484542, 0.3469336 , 0.15588035, 0.42298895,
              0.64627195, 0.54497493, 0.55361454, 0.30101617, 0.69752539,
              0.82506438, 0.77095697, 0.09533889, 0.27120792, 0.47290084,
              0.08061627, 0.50426291, 0.91642692, 0.69003032, 0.36099219,
              0.79738696, 0.04672525, 0.45392126, 0.21601617, 0.8044997 ])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.43393766, 0.4379447 , 0.25881535, 0.77348227, 0.55330326,
              0.47416115, 0.42972152, 0.78189559, 0.50623147, 0.86912693,
              0.03943346, 0.24336451, 0.31548667, 0.59150098, 0.93635629,
              0.77889673, 0.93386621, 0.91675184, 0.74764841, 0.13897479,
              0.19466482, 0.49637265, 0.87774683, 0.90824861, 0.98644421,
              0.02509092, 0.12646337, 0.08225662, 0.05938944, 0.57608449,
              0.22614626, 0.31209667, 0.47290119, 0.38312376, 0.69333654,
              0.08495565, 0.811886  , 0.74342648, 0.86799287, 0.47254987,
              0.38457993, 0.37711703, 0.12764245, 0.51684142, 0.32056846,
              0.76736081, 0.39100454, 0.04098074, 0.64071602, 0.74065173,
              0.23509481, 0.13061274, 0.77327264, 0.27480073, 0.06322795,
              0.62394962, 0.21565697, 0.6629137 , 0.6510743 , 0.23035715,
              0.50645561, 0.6742467 , 0.33373434, 0.45128832, 0.56976732,
              0.73976235, 0.52819914, 0.04688996, 0.12633598, 0.1808043 ,
              0.94832549, 0.9857168 , 0.59922067, 0.33107884, 0.02339111,
              0.32694345, 0.76282611, 0.98015654, 0.08892664, 0.31619927,
              0.56650672, 0.73967898, 0.20512959, 0.71795004, 0.3146929 ,
              0.71466014, 0.35871328, 0.64767513, 0.60775827, 0.94022683,
              0.2175505 , 0.1126748 , 0.38196652, 0.15420462, 0.45246582,
              0.67087706, 0.47866376, 0.66026177, 0.50508541, 0.08193186])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([6.81458698e-02, 2.82639769e-01, 2.53439023e-01, 6.44191761e-01,
              2.50648497e-01, 8.38646007e-01, 3.27445325e-01, 6.93848808e-01,
              8.51267452e-01, 6.22956313e-01, 1.83941566e-04, 3.43869199e-01,
              4.98635554e-02, 4.36422958e-01, 9.67525927e-01, 2.47779218e-01,
              1.31791979e-01, 3.31830913e-01, 5.38356871e-01, 5.03140699e-01,
              9.49330087e-01, 3.68200104e-01, 5.11871289e-02, 6.71246022e-01,
              6.11650202e-01, 4.20839226e-01, 8.70712970e-01, 9.26373173e-02,
              3.03023826e-01, 9.15743347e-01, 5.80761694e-01, 2.80832027e-01,
              4.36458858e-01, 7.63912727e-01, 5.56973159e-01, 7.90223281e-01,
              9.00238460e-01, 5.41098311e-02, 9.51297807e-01, 1.61073406e-01,
              4.56304295e-01, 9.64915067e-01, 2.81098029e-01, 6.12007929e-01,
              1.40149162e-01, 2.67042770e-01, 7.47551738e-02, 8.53235231e-01,
              9.33849436e-01, 8.28926266e-01, 5.60359122e-01, 3.97116909e-01,
              7.31074916e-01, 2.83262133e-03, 7.62072769e-01, 8.60752758e-01,
              5.19276803e-01, 7.23649435e-01, 6.88607808e-01, 4.19206891e-01,
              8.47929514e-01, 7.96148530e-01, 5.24634762e-02, 2.29023722e-01,
              8.10210349e-01, 9.56204369e-01, 2.29846988e-02, 7.53372871e-01,
              6.63519883e-01, 8.29246946e-01, 8.54464214e-03, 4.70853105e-01,
              4.47293556e-01, 6.44350665e-02, 5.72060486e-01, 7.49335363e-01,
              6.78002770e-01, 7.65464685e-04, 8.48166770e-01, 7.61394518e-01,
              4.57814618e-01, 3.77981516e-01, 3.06149317e-01, 3.84903338e-01,
              3.71958012e-01, 5.68920692e-01, 2.47694436e-01, 8.81552508e-01,
              4.61517906e-01, 1.53262084e-01, 7.65494628e-01, 7.86454655e-01,
              8.12736490e-01, 1.88874030e-01, 7.28408152e-01, 4.04618413e-02,
              1.34127713e-01, 2.39568384e-01, 3.29744463e-01, 7.71431816e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.38256171, 0.70161966, 0.58883128, 0.97749022, 0.91998039,
              0.97542157, 0.29553104, 0.5879127 , 0.50274518, 0.16398699,
              0.30425267, 0.54804128, 0.19177585, 0.2881363 , 0.7980599 ,
              0.05185293, 0.65050981, 0.93965872, 0.1523422 , 0.46539   ,
              0.48009716, 0.6592203 , 0.86388075, 0.61037455, 0.2147385 ,
              0.96049482, 0.06666788, 0.64088024, 0.28996612, 0.14319294,
              0.41116642, 0.71023056, 0.13741416, 0.66885588, 0.57926076,
              0.61812589, 0.2958285 , 0.06489352, 0.03147603, 0.29281248,
              0.53731225, 0.70337279, 0.61417497, 0.16321458, 0.21561773,
              0.88548717, 0.26685636, 0.84668308, 0.02608008, 0.1107924 ,
              0.31725818, 0.23833047, 0.29509504, 0.86912649, 0.58206705,
              0.051353  , 0.66207407, 0.47112133, 0.66026126, 0.69718601,
              0.21037206, 0.49902947, 0.08759383, 0.34184887, 0.91349328,
              0.98517833, 0.88318926, 0.11527173, 0.1576968 , 0.38938928,
              0.54948953, 0.23328919, 0.40710441, 0.66017392, 0.7950859 ,
              0.2533328 , 0.87950376, 0.34025331, 0.29143512, 0.85950852,
              0.52647096, 0.4990138 , 0.06155835, 0.21649634, 0.03793912,
              0.61331209, 0.25416205, 0.60635522, 0.22394988, 0.38533828,
              0.22522227, 0.96996018, 0.30234199, 0.93493002, 0.96044367,
              0.15794379, 0.45215497, 0.79034758, 0.71867328, 0.28742822])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.27794823, 0.93288187, 0.94332151, 0.67436161, 0.77106166,
              0.82075931, 0.81660032, 0.16372556, 0.93956088, 0.31940073,
              0.43116898, 0.08121899, 0.36773479, 0.60557787, 0.42164029,
              0.97714288, 0.85044807, 0.49295687, 0.78680242, 0.94585165,
              0.87343825, 0.24774807, 0.48303218, 0.87608913, 0.96848207,
              0.37545139, 0.58984362, 0.18679652, 0.29750609, 0.85323723,
              0.06939949, 0.95072037, 0.24108798, 0.55978316, 0.88486972,
              0.67767049, 0.62450875, 0.54623747, 0.20994928, 0.94204726,
              0.29907507, 0.79497508, 0.18390915, 0.85766241, 0.92583198,
              0.18446386, 0.74595415, 0.93552948, 0.397094  , 0.96021102,
              0.28503633, 0.42492891, 0.34331689, 0.37591405, 0.05446176,
              0.76436395, 0.95953739, 0.87511673, 0.11753054, 0.19475683,
              0.85287976, 0.82235435, 0.0907069 , 0.58906401, 0.47904718,
              0.81301916, 0.65205885, 0.08416752, 0.34507529, 0.63664549,
              0.30948477, 0.9661989 , 0.6968236 , 0.24240441, 0.65483974,
              0.46286804, 0.10205048, 0.57266745, 0.72838131, 0.4215804 ,
              0.60130538, 0.01594077, 0.44614281, 0.65652383, 0.15227564,
              0.15955468, 0.66602873, 0.61075706, 0.31820371, 0.28179344,
              0.99897743, 0.82682388, 0.74392649, 0.41333243, 0.13088926,
              0.93148136, 0.24257546, 0.58809819, 0.97801532, 0.55548996])}]]


