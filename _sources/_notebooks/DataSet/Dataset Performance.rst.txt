
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='71d4c16a-4a33-4683-918b-a4114237301e'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='cb042b68-626e-4d75-8e22-1d80e15bac50'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.300762964372779],
     [0.596066284430246],
     [0.121479077172158],
     [0.513635773444188],
     [0.525985991629313],
     [0.492813043079984],
     [0.338610509713073],
     [0.865811302472837],
     [0.319432333350134],
     [0.413449271380355],
     [0.660971408146605],
     [0.268649436283791],
     [0.430373750383591],
     [0.192152329646212],
     [0.786444593174158],
     [0.0294169410965548],
     [0.797410729146241],
     [0.599666212591352],
     [0.870721210599588],
     [0.246100408195712],
     [0.746700640741991],
     [0.728287303825518],
     [0.846100009089883],
     [0.465086671587402],
     [0.958245860777037],
     [0.876230028142101],
     [0.119824364604967],
     [0.465316550129853],
     [0.16663332197395],
     [0.640024801681755],
     [0.773320838697218],
     [0.0958085962763532],
     [0.905368568313197],
     [0.849801169162345],
     [0.0478047531651872],
     [0.86092038111433],
     [0.279352327696912],
     [0.580198772101128],
     [0.503676563592528],
     [0.157461666736292],
     [0.423674136734875],
     [0.19328600352022],
     [0.808554182217804],
     [0.0400535709127053],
     [0.042138786974123],
     [0.129047791938197],
     [0.305120211603769],
     [0.268911851683102],
     [0.637725046521271],
     [0.290228107507614],
     [0.901824402455852],
     [0.77155009920189],
     [0.694523386464085],
     [0.843419052087738],
     [0.755120139079933],
     [0.406859484015538],
     [0.0717311778395137],
     [0.0135862744845101],
     [0.525927276549879],
     [0.743494526715712],
     [0.555338765279601],
     [0.949899812939336],
     [0.0251377056351785],
     [0.00896351407636453],
     [0.594376870102773],
     [0.584622997520475],
     [0.758309316381643],
     [0.948621272417971],
     [0.139502699875658],
     [0.916107044684399],
     [0.208881278384893],
     [0.460979920695268],
     [0.42067500518664],
     [0.959507253714842],
     [0.654050496160001],
     [0.983540516707381],
     [0.0821694475574313],
     [0.420440285491271],
     [0.452805454389219],
     [0.747734569787923],
     [0.263073638743454],
     [0.377280545572055],
     [0.369160902959906],
     [0.840856960247654],
     [0.397493845286033],
     [0.950419389929172],
     [0.679936715138079],
     [0.448273785842406],
     [0.045604230303138],
     [0.974088475402541],
     [0.195616559201006],
     [0.886312855722484],
     [0.682032871335529],
     [0.700532601886236],
     [0.568850659699002],
     [0.000880150512173827],
     [0.729476294156671],
     [0.184640404587517],
     [0.851830768134954],
     [0.340250703012949]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.09677995])],
     [array([ 0.92410441])],
     [array([ 0.6572011])],
     [array([ 0.41957143])],
     [array([ 0.18266293])],
     [array([ 0.25970552])],
     [array([ 0.70557023])],
     [array([ 0.79255523])],
     [array([ 0.88220047])],
     [array([ 0.05432855])],
     [array([ 0.99543755])],
     [array([ 0.90347222])],
     [array([ 0.56097429])],
     [array([ 0.36894127])],
     [array([ 0.344556])],
     [array([ 0.66910403])],
     [array([ 0.09375455])],
     [array([ 0.2831794])],
     [array([ 0.04079214])],
     [array([ 0.73538889])],
     [array([ 0.15865595])],
     [array([ 0.74984133])],
     [array([ 0.41911529])],
     [array([ 0.8920393])],
     [array([ 0.74105855])],
     [array([ 0.41059521])],
     [array([ 0.59807566])],
     [array([ 0.40244224])],
     [array([ 0.85341259])],
     [array([ 0.40893522])],
     [array([ 0.50500495])],
     [array([ 0.12561824])],
     [array([ 0.1341742])],
     [array([ 0.46546719])],
     [array([ 0.35784872])],
     [array([ 0.73355792])],
     [array([ 0.60214291])],
     [array([ 0.67355113])],
     [array([ 0.23976576])],
     [array([ 0.12310265])],
     [array([ 0.95120911])],
     [array([ 0.52290538])],
     [array([ 0.07780542])],
     [array([ 0.0627666])],
     [array([ 0.16848622])],
     [array([ 0.2907212])],
     [array([ 0.24331557])],
     [array([ 0.34587931])],
     [array([ 0.07305027])],
     [array([ 0.66993852])],
     [array([ 0.09705934])],
     [array([ 0.89845755])],
     [array([ 0.98440578])],
     [array([ 0.91922859])],
     [array([ 0.72426141])],
     [array([ 0.2836007])],
     [array([ 0.13060042])],
     [array([ 0.31406273])],
     [array([ 0.54755434])],
     [array([ 0.23054007])],
     [array([ 0.47492975])],
     [array([ 0.19714526])],
     [array([ 0.80141901])],
     [array([ 0.74716844])],
     [array([ 0.90306342])],
     [array([ 0.55367007])],
     [array([ 0.93930403])],
     [array([ 0.99341414])],
     [array([ 0.22622789])],
     [array([ 0.66338057])],
     [array([ 0.83545129])],
     [array([ 0.5127793])],
     [array([ 0.98236616])],
     [array([ 0.8993435])],
     [array([ 0.08201346])],
     [array([ 0.54949975])],
     [array([ 0.88999411])],
     [array([ 0.01686003])],
     [array([ 0.71778426])],
     [array([ 0.14483139])],
     [array([ 0.50158161])],
     [array([ 0.81931024])],
     [array([ 0.86590343])],
     [array([ 0.07490376])],
     [array([ 0.08969122])],
     [array([ 0.47471701])],
     [array([ 0.86561369])],
     [array([ 0.34503056])],
     [array([ 0.9362503])],
     [array([ 0.43366574])],
     [array([ 0.23064219])],
     [array([ 0.11807189])],
     [array([ 0.38294026])],
     [array([ 0.44824824])],
     [array([ 0.09808092])],
     [array([ 0.79638553])],
     [array([ 0.03907443])],
     [array([ 0.21993864])],
     [array([ 0.99095049])],
     [array([ 0.15443338])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.09677995,  0.92410441,  0.6572011 ,  0.41957143,  0.18266293,
            0.25970552,  0.70557023,  0.79255523,  0.88220047,  0.05432855,
            0.99543755,  0.90347222,  0.56097429,  0.36894127,  0.344556  ,
            0.66910403,  0.09375455,  0.2831794 ,  0.04079214,  0.73538889,
            0.15865595,  0.74984133,  0.41911529,  0.8920393 ,  0.74105855,
            0.41059521,  0.59807566,  0.40244224,  0.85341259,  0.40893522,
            0.50500495,  0.12561824,  0.1341742 ,  0.46546719,  0.35784872,
            0.73355792,  0.60214291,  0.67355113,  0.23976576,  0.12310265,
            0.95120911,  0.52290538,  0.07780542,  0.0627666 ,  0.16848622,
            0.2907212 ,  0.24331557,  0.34587931,  0.07305027,  0.66993852,
            0.09705934,  0.89845755,  0.98440578,  0.91922859,  0.72426141,
            0.2836007 ,  0.13060042,  0.31406273,  0.54755434,  0.23054007,
            0.47492975,  0.19714526,  0.80141901,  0.74716844,  0.90306342,
            0.55367007,  0.93930403,  0.99341414,  0.22622789,  0.66338057,
            0.83545129,  0.5127793 ,  0.98236616,  0.8993435 ,  0.08201346,
            0.54949975,  0.88999411,  0.01686003,  0.71778426,  0.14483139,
            0.50158161,  0.81931024,  0.86590343,  0.07490376,  0.08969122,
            0.47471701,  0.86561369,  0.34503056,  0.9362503 ,  0.43366574,
            0.23064219,  0.11807189,  0.38294026,  0.44824824,  0.09808092,
            0.79638553,  0.03907443,  0.21993864,  0.99095049,  0.15443338])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  3.00762964e-01,   5.96066284e-01,   1.21479077e-01,
                5.13635773e-01,   5.25985992e-01,   4.92813043e-01,
                3.38610510e-01,   8.65811302e-01,   3.19432333e-01,
                4.13449271e-01,   6.60971408e-01,   2.68649436e-01,
                4.30373750e-01,   1.92152330e-01,   7.86444593e-01,
                2.94169411e-02,   7.97410729e-01,   5.99666213e-01,
                8.70721211e-01,   2.46100408e-01,   7.46700641e-01,
                7.28287304e-01,   8.46100009e-01,   4.65086672e-01,
                9.58245861e-01,   8.76230028e-01,   1.19824365e-01,
                4.65316550e-01,   1.66633322e-01,   6.40024802e-01,
                7.73320839e-01,   9.58085963e-02,   9.05368568e-01,
                8.49801169e-01,   4.78047532e-02,   8.60920381e-01,
                2.79352328e-01,   5.80198772e-01,   5.03676564e-01,
                1.57461667e-01,   4.23674137e-01,   1.93286004e-01,
                8.08554182e-01,   4.00535709e-02,   4.21387870e-02,
                1.29047792e-01,   3.05120212e-01,   2.68911852e-01,
                6.37725047e-01,   2.90228108e-01,   9.01824402e-01,
                7.71550099e-01,   6.94523386e-01,   8.43419052e-01,
                7.55120139e-01,   4.06859484e-01,   7.17311778e-02,
                1.35862745e-02,   5.25927277e-01,   7.43494527e-01,
                5.55338765e-01,   9.49899813e-01,   2.51377056e-02,
                8.96351408e-03,   5.94376870e-01,   5.84622998e-01,
                7.58309316e-01,   9.48621272e-01,   1.39502700e-01,
                9.16107045e-01,   2.08881278e-01,   4.60979921e-01,
                4.20675005e-01,   9.59507254e-01,   6.54050496e-01,
                9.83540517e-01,   8.21694476e-02,   4.20440285e-01,
                4.52805454e-01,   7.47734570e-01,   2.63073639e-01,
                3.77280546e-01,   3.69160903e-01,   8.40856960e-01,
                3.97493845e-01,   9.50419390e-01,   6.79936715e-01,
                4.48273786e-01,   4.56042303e-02,   9.74088475e-01,
                1.95616559e-01,   8.86312856e-01,   6.82032871e-01,
                7.00532602e-01,   5.68850660e-01,   8.80150512e-04,
                7.29476294e-01,   1.84640405e-01,   8.51830768e-01,
                3.40250703e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.96633522,  0.04901083,  0.19891394,  0.08703159,  0.41447736,
               0.80967567,  0.91829812,  0.88556572,  0.14342298,  0.51533439,
               0.92942368,  0.99510197,  0.08017593,  0.31721781,  0.38973884,
               0.34049622,  0.49375539,  0.4434507 ,  0.41507415,  0.35022317,
               0.5135629 ,  0.66984931,  0.29694644,  0.9776835 ,  0.20698753,
               0.23412834,  0.15324542,  0.31448057,  0.74547343,  0.86542837,
               0.77323161,  0.06835672,  0.78887554,  0.3009597 ,  0.5405214 ,
               0.40934608,  0.88048519,  0.45777819,  0.69666178,  0.9653481 ,
               0.95326561,  0.2011228 ,  0.26285228,  0.73047113,  0.15354699,
               0.53748683,  0.14676495,  0.27859119,  0.46688957,  0.19818118,
               0.77827137,  0.87597157,  0.68817678,  0.22210541,  0.00481377,
               0.18018817,  0.81767098,  0.74765299,  0.35561605,  0.35230096,
               0.06923463,  0.70230616,  0.83537195,  0.98485519,  0.2118617 ,
               0.97471873,  0.75265702,  0.77878173,  0.66391771,  0.15642307,
               0.98498062,  0.39619112,  0.73411105,  0.39407239,  0.72943733,
               0.95449235,  0.9289034 ,  0.51143835,  0.46461952,  0.63719211,
               0.13453855,  0.02753558,  0.58008533,  0.17048966,  0.79669927,
               0.58535782,  0.21472476,  0.84396056,  0.15968416,  0.40461175,
               0.6341683 ,  0.2875209 ,  0.555137  ,  0.74993909,  0.22190366,
               0.43248126,  0.25021225,  0.69391034,  0.93046316,  0.36814605])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.45730568,  0.80353941,  0.35062691,  0.21652267,  0.44926995,
               0.2284499 ,  0.00578577,  0.05308301,  0.42848892,  0.24548783,
               0.30044039,  0.8433193 ,  0.36430195,  0.83245434,  0.82573074,
               0.91951223,  0.38693105,  0.72687629,  0.75404348,  0.98739558,
               0.96474694,  0.27600939,  0.34275147,  0.01709588,  0.48166922,
               0.95469031,  0.03504467,  0.82637725,  0.15224444,  0.50822003,
               0.09259029,  0.50617771,  0.54902448,  0.40594927,  0.5770699 ,
               0.38223601,  0.95387972,  0.01983018,  0.28844003,  0.35909562,
               0.93831521,  0.59134382,  0.42869439,  0.70176902,  0.49048972,
               0.44334637,  0.39248807,  0.53544198,  0.21364814,  0.86704389,
               0.58668744,  0.84713489,  0.12260377,  0.13515717,  0.70079094,
               0.60872931,  0.86052142,  0.25539734,  0.65070303,  0.97356888,
               0.57002785,  0.2753583 ,  0.04153375,  0.24877636,  0.07555287,
               0.02103452,  0.45907572,  0.09391266,  0.10775857,  0.93038304,
               0.83632398,  0.30601185,  0.8490803 ,  0.41043181,  0.03732971,
               0.26864901,  0.17374348,  0.17594071,  0.00739385,  0.28383788,
               0.58888531,  0.41460831,  0.93043253,  0.28926657,  0.85816465,
               0.26010339,  0.80870047,  0.4137182 ,  0.61030757,  0.64118519,
               0.54334289,  0.73176351,  0.55023564,  0.01214085,  0.39540276,
               0.80467231,  0.87457825,  0.90801802,  0.58293825,  0.46660443])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.31621701,  0.72735696,  0.995489  ,  0.69858631,  0.64896825,
               0.40918635,  0.33789048,  0.61718477,  0.97597836,  0.14757007,
               0.92310102,  0.2850385 ,  0.24039502,  0.72118319,  0.78209573,
               0.21059829,  0.71375378,  0.48394756,  0.19636439,  0.05748809,
               0.52087573,  0.82279995,  0.62638366,  0.22808114,  0.53855902,
               0.34755453,  0.53346304,  0.81217111,  0.67732389,  0.06391783,
               0.45825548,  0.50380582,  0.60520172,  0.78971237,  0.43977371,
               0.19675984,  0.4427066 ,  0.22629396,  0.54800268,  0.78738016,
               0.35729229,  0.6073741 ,  0.27356122,  0.51135812,  0.24742869,
               0.98369198,  0.84054777,  0.79431667,  0.40208373,  0.4933043 ,
               0.30581641,  0.35400485,  0.64139245,  0.57623999,  0.45659817,
               0.29418834,  0.05413701,  0.23875267,  0.47813347,  0.87300676,
               0.93937367,  0.67051379,  0.59535584,  0.33979441,  0.42392539,
               0.48399304,  0.53326415,  0.27162286,  0.55166857,  0.79851631,
               0.05971607,  0.42344596,  0.71883984,  0.84993219,  0.73634893,
               0.70608706,  0.27393223,  0.33489928,  0.87041425,  0.19965224,
               0.5103003 ,  0.57580058,  0.74372719,  0.06599318,  0.4501056 ,
               0.49300149,  0.3640099 ,  0.87175617,  0.07458449,  0.85509926,
               0.98743651,  0.05131924,  0.66461276,  0.23779589,  0.63355139,
               0.15160201,  0.52371021,  0.31523916,  0.22790214,  0.4015974 ])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  3.00762964e-01,   5.96066284e-01,   1.21479077e-01,
                5.13635773e-01,   5.25985992e-01,   4.92813043e-01,
                3.38610510e-01,   8.65811302e-01,   3.19432333e-01,
                4.13449271e-01,   6.60971408e-01,   2.68649436e-01,
                4.30373750e-01,   1.92152330e-01,   7.86444593e-01,
                2.94169411e-02,   7.97410729e-01,   5.99666213e-01,
                8.70721211e-01,   2.46100408e-01,   7.46700641e-01,
                7.28287304e-01,   8.46100009e-01,   4.65086672e-01,
                9.58245861e-01,   8.76230028e-01,   1.19824365e-01,
                4.65316550e-01,   1.66633322e-01,   6.40024802e-01,
                7.73320839e-01,   9.58085963e-02,   9.05368568e-01,
                8.49801169e-01,   4.78047532e-02,   8.60920381e-01,
                2.79352328e-01,   5.80198772e-01,   5.03676564e-01,
                1.57461667e-01,   4.23674137e-01,   1.93286004e-01,
                8.08554182e-01,   4.00535709e-02,   4.21387870e-02,
                1.29047792e-01,   3.05120212e-01,   2.68911852e-01,
                6.37725047e-01,   2.90228108e-01,   9.01824402e-01,
                7.71550099e-01,   6.94523386e-01,   8.43419052e-01,
                7.55120139e-01,   4.06859484e-01,   7.17311778e-02,
                1.35862745e-02,   5.25927277e-01,   7.43494527e-01,
                5.55338765e-01,   9.49899813e-01,   2.51377056e-02,
                8.96351408e-03,   5.94376870e-01,   5.84622998e-01,
                7.58309316e-01,   9.48621272e-01,   1.39502700e-01,
                9.16107045e-01,   2.08881278e-01,   4.60979921e-01,
                4.20675005e-01,   9.59507254e-01,   6.54050496e-01,
                9.83540517e-01,   8.21694476e-02,   4.20440285e-01,
                4.52805454e-01,   7.47734570e-01,   2.63073639e-01,
                3.77280546e-01,   3.69160903e-01,   8.40856960e-01,
                3.97493845e-01,   9.50419390e-01,   6.79936715e-01,
                4.48273786e-01,   4.56042303e-02,   9.74088475e-01,
                1.95616559e-01,   8.86312856e-01,   6.82032871e-01,
                7.00532602e-01,   5.68850660e-01,   8.80150512e-04,
                7.29476294e-01,   1.84640405e-01,   8.51830768e-01,
                3.40250703e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.96633522,  0.04901083,  0.19891394,  0.08703159,  0.41447736,
               0.80967567,  0.91829812,  0.88556572,  0.14342298,  0.51533439,
               0.92942368,  0.99510197,  0.08017593,  0.31721781,  0.38973884,
               0.34049622,  0.49375539,  0.4434507 ,  0.41507415,  0.35022317,
               0.5135629 ,  0.66984931,  0.29694644,  0.9776835 ,  0.20698753,
               0.23412834,  0.15324542,  0.31448057,  0.74547343,  0.86542837,
               0.77323161,  0.06835672,  0.78887554,  0.3009597 ,  0.5405214 ,
               0.40934608,  0.88048519,  0.45777819,  0.69666178,  0.9653481 ,
               0.95326561,  0.2011228 ,  0.26285228,  0.73047113,  0.15354699,
               0.53748683,  0.14676495,  0.27859119,  0.46688957,  0.19818118,
               0.77827137,  0.87597157,  0.68817678,  0.22210541,  0.00481377,
               0.18018817,  0.81767098,  0.74765299,  0.35561605,  0.35230096,
               0.06923463,  0.70230616,  0.83537195,  0.98485519,  0.2118617 ,
               0.97471873,  0.75265702,  0.77878173,  0.66391771,  0.15642307,
               0.98498062,  0.39619112,  0.73411105,  0.39407239,  0.72943733,
               0.95449235,  0.9289034 ,  0.51143835,  0.46461952,  0.63719211,
               0.13453855,  0.02753558,  0.58008533,  0.17048966,  0.79669927,
               0.58535782,  0.21472476,  0.84396056,  0.15968416,  0.40461175,
               0.6341683 ,  0.2875209 ,  0.555137  ,  0.74993909,  0.22190366,
               0.43248126,  0.25021225,  0.69391034,  0.93046316,  0.36814605])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.45730568,  0.80353941,  0.35062691,  0.21652267,  0.44926995,
               0.2284499 ,  0.00578577,  0.05308301,  0.42848892,  0.24548783,
               0.30044039,  0.8433193 ,  0.36430195,  0.83245434,  0.82573074,
               0.91951223,  0.38693105,  0.72687629,  0.75404348,  0.98739558,
               0.96474694,  0.27600939,  0.34275147,  0.01709588,  0.48166922,
               0.95469031,  0.03504467,  0.82637725,  0.15224444,  0.50822003,
               0.09259029,  0.50617771,  0.54902448,  0.40594927,  0.5770699 ,
               0.38223601,  0.95387972,  0.01983018,  0.28844003,  0.35909562,
               0.93831521,  0.59134382,  0.42869439,  0.70176902,  0.49048972,
               0.44334637,  0.39248807,  0.53544198,  0.21364814,  0.86704389,
               0.58668744,  0.84713489,  0.12260377,  0.13515717,  0.70079094,
               0.60872931,  0.86052142,  0.25539734,  0.65070303,  0.97356888,
               0.57002785,  0.2753583 ,  0.04153375,  0.24877636,  0.07555287,
               0.02103452,  0.45907572,  0.09391266,  0.10775857,  0.93038304,
               0.83632398,  0.30601185,  0.8490803 ,  0.41043181,  0.03732971,
               0.26864901,  0.17374348,  0.17594071,  0.00739385,  0.28383788,
               0.58888531,  0.41460831,  0.93043253,  0.28926657,  0.85816465,
               0.26010339,  0.80870047,  0.4137182 ,  0.61030757,  0.64118519,
               0.54334289,  0.73176351,  0.55023564,  0.01214085,  0.39540276,
               0.80467231,  0.87457825,  0.90801802,  0.58293825,  0.46660443])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.04284252,  0.06462159,  0.94513647,  0.1439406 ,  0.45349207,
               0.3933593 ,  0.87942461,  0.25709332,  0.72126114,  0.32150901,
               0.48508921,  0.72930749,  0.8273486 ,  0.79905754,  0.45058286,
               0.10773183,  0.73420278,  0.04555373,  0.94729981,  0.22057468,
               0.53009112,  0.66188851,  0.22441144,  0.39800569,  0.59112422,
               0.41599167,  0.61674784,  0.2227939 ,  0.63928201,  0.48111449,
               0.06720486,  0.60083366,  0.33391242,  0.47069253,  0.69058881,
               0.19668032,  0.96807808,  0.73916815,  0.84841891,  0.07594151,
               0.91867062,  0.05243693,  0.60716208,  0.13349304,  0.86790296,
               0.27745548,  0.46551171,  0.69375307,  0.43926493,  0.66638013,
               0.3607638 ,  0.84504749,  0.81808472,  0.51822998,  0.83276063,
               0.91142711,  0.39976401,  0.5786338 ,  0.32008046,  0.40075155,
               0.95497622,  0.54134201,  0.23396627,  0.46256037,  0.92210807,
               0.55978044,  0.55722511,  0.9391155 ,  0.43847139,  0.72793691,
               0.19299995,  0.9035457 ,  0.92684026,  0.61458273,  0.50777256,
               0.13318843,  0.39377776,  0.82411218,  0.978327  ,  0.41418502,
               0.94441239,  0.1315397 ,  0.5675068 ,  0.14626589,  0.92898277,
               0.39966477,  0.30503852,  0.50627016,  0.88624108,  0.71845807,
               0.68374901,  0.78765026,  0.54578293,  0.50879867,  0.20861721,
               0.07856232,  0.77341199,  0.87396865,  0.57887808,  0.17801888])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.09677995,  0.92410441,  0.6572011 ,  0.41957143,  0.18266293,
               0.25970552,  0.70557023,  0.79255523,  0.88220047,  0.05432855,
               0.99543755,  0.90347222,  0.56097429,  0.36894127,  0.344556  ,
               0.66910403,  0.09375455,  0.2831794 ,  0.04079214,  0.73538889,
               0.15865595,  0.74984133,  0.41911529,  0.8920393 ,  0.74105855,
               0.41059521,  0.59807566,  0.40244224,  0.85341259,  0.40893522,
               0.50500495,  0.12561824,  0.1341742 ,  0.46546719,  0.35784872,
               0.73355792,  0.60214291,  0.67355113,  0.23976576,  0.12310265,
               0.95120911,  0.52290538,  0.07780542,  0.0627666 ,  0.16848622,
               0.2907212 ,  0.24331557,  0.34587931,  0.07305027,  0.66993852,
               0.09705934,  0.89845755,  0.98440578,  0.91922859,  0.72426141,
               0.2836007 ,  0.13060042,  0.31406273,  0.54755434,  0.23054007,
               0.47492975,  0.19714526,  0.80141901,  0.74716844,  0.90306342,
               0.55367007,  0.93930403,  0.99341414,  0.22622789,  0.66338057,
               0.83545129,  0.5127793 ,  0.98236616,  0.8993435 ,  0.08201346,
               0.54949975,  0.88999411,  0.01686003,  0.71778426,  0.14483139,
               0.50158161,  0.81931024,  0.86590343,  0.07490376,  0.08969122,
               0.47471701,  0.86561369,  0.34503056,  0.9362503 ,  0.43366574,
               0.23064219,  0.11807189,  0.38294026,  0.44824824,  0.09808092,
               0.79638553,  0.03907443,  0.21993864,  0.99095049,  0.15443338])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.94488826,  0.66530265,  0.45897775,  0.07103432,  0.59729034,
               0.5991852 ,  0.58271749,  0.42637437,  0.57510346,  0.41199157,
               0.21730323,  0.34635837,  0.05872454,  0.45011793,  0.61135843,
               0.70776939,  0.89157301,  0.64677158,  0.38347346,  0.36805546,
               0.91835258,  0.74041002,  0.3967669 ,  0.22444272,  0.3113278 ,
               0.10795492,  0.28021504,  0.99477328,  0.31471911,  0.12008031,
               0.71677421,  0.28569978,  0.53896861,  0.95283898,  0.21411654,
               0.14879192,  0.01112055,  0.10978987,  0.80236035,  0.01146783,
               0.43233118,  0.30265076,  0.67913021,  0.3909593 ,  0.55148544,
               0.62398177,  0.51348513,  0.94830247,  0.5173969 ,  0.06385813,
               0.15067172,  0.40894921,  0.35782569,  0.60970556,  0.4250186 ,
               0.64654291,  0.58402644,  0.6803674 ,  0.23450672,  0.67401989,
               0.15916349,  0.72040498,  0.78453768,  0.44731118,  0.32208259,
               0.05394812,  0.41525001,  0.54635922,  0.03891968,  0.18072402,
               0.09524811,  0.30408853,  0.88642719,  0.73503148,  0.59434749,
               0.35643163,  0.84052114,  0.35409257,  0.95085969,  0.65131097,
               0.29941629,  0.91569446,  0.06338685,  0.37022659,  0.1008877 ,
               0.75305034,  0.81592618,  0.72408506,  0.97275366,  0.92801995,
               0.13106389,  0.43376899,  0.61227148,  0.10647575,  0.19342373,
               0.75496035,  0.66015842,  0.03734352,  0.22160326,  0.81452704])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.95609157,  0.65050052,  0.34139883,  0.52031664,  0.99369454,
               0.63506011,  0.32389546,  0.13523425,  0.2481962 ,  0.38918903,
               0.64624022,  0.42381316,  0.03818287,  0.45560259,  0.13106171,
               0.10095023,  0.84744047,  0.52030173,  0.97036559,  0.07468685,
               0.8536652 ,  0.86281188,  0.79401217,  0.73480757,  0.25112192,
               0.3663973 ,  0.1938191 ,  0.29425891,  0.27527655,  0.06928108,
               0.93716699,  0.93888468,  0.42910753,  0.01046777,  0.03749463,
               0.78595971,  0.44614656,  0.93916538,  0.80085471,  0.41084709,
               0.22270529,  0.14596766,  0.88997901,  0.20844985,  0.9478721 ,
               0.1138351 ,  0.03115254,  0.61482774,  0.00637335,  0.87356928,
               0.7712195 ,  0.1008895 ,  0.45756199,  0.00316129,  0.11067915,
               0.13628869,  0.01827035,  0.71290682,  0.69361638,  0.81581455,
               0.41488909,  0.50800869,  0.34164705,  0.51769297,  0.12691072,
               0.1069419 ,  0.20089428,  0.5372842 ,  0.57132117,  0.96732187,
               0.44883917,  0.2123406 ,  0.60130612,  0.81577022,  0.88676812,
               0.28502174,  0.8990817 ,  0.13174431,  0.50850681,  0.72739017,
               0.99991844,  0.08400429,  0.61084805,  0.80524215,  0.67963399,
               0.56394499,  0.4797326 ,  0.10564899,  0.59234268,  0.87566781,
               0.39877805,  0.05915775,  0.00491944,  0.84202574,  0.94114687,
               0.87364348,  0.57987579,  0.29534759,  0.11165589,  0.3545166 ])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.28006105,  0.99133352,  0.10703602,  0.82683427,  0.02761228,
               0.814955  ,  0.5766144 ,  0.11591218,  0.08871313,  0.26129393,
               0.91825931,  0.90387684,  0.88769954,  0.67097823,  0.25466429,
               0.4886401 ,  0.64729278,  0.85701985,  0.51327228,  0.12076911,
               0.70343661,  0.426959  ,  0.55105814,  0.84477059,  0.98153305,
               0.4146685 ,  0.67429716,  0.52851911,  0.29106366,  0.81823915,
               0.81436563,  0.62885537,  0.73166391,  0.73143867,  0.66777816,
               0.63507138,  0.82908883,  0.39139876,  0.18449689,  0.52330327,
               0.55307373,  0.39163277,  0.30885454,  0.75671426,  0.25041866,
               0.46576014,  0.22411538,  0.59411378,  0.74271916,  0.00256528,
               0.78292236,  0.27635457,  0.81309858,  0.61598207,  0.7529981 ,
               0.82472186,  0.38251872,  0.24961061,  0.00467335,  0.76011539,
               0.11152418,  0.55685225,  0.38708206,  0.62210278,  0.8439247 ,
               0.71879567,  0.55135502,  0.86630041,  0.61554427,  0.66966817,
               0.43427861,  0.13804984,  0.91631344,  0.86967949,  0.74042602,
               0.05966816,  0.19001791,  0.99243259,  0.5270644 ,  0.55153809,
               0.39825198,  0.09685215,  0.30064375,  0.12292092,  0.57193416,
               0.18353599,  0.18729118,  0.76915317,  0.71620289,  0.88409174,
               0.59806817,  0.39420341,  0.96171907,  0.05600058,  0.38966088,
               0.41773728,  0.59590581,  0.40084696,  0.93526109,  0.38052831])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.09677995,  0.92410441,  0.6572011 ,  0.41957143,  0.18266293,
               0.25970552,  0.70557023,  0.79255523,  0.88220047,  0.05432855,
               0.99543755,  0.90347222,  0.56097429,  0.36894127,  0.344556  ,
               0.66910403,  0.09375455,  0.2831794 ,  0.04079214,  0.73538889,
               0.15865595,  0.74984133,  0.41911529,  0.8920393 ,  0.74105855,
               0.41059521,  0.59807566,  0.40244224,  0.85341259,  0.40893522,
               0.50500495,  0.12561824,  0.1341742 ,  0.46546719,  0.35784872,
               0.73355792,  0.60214291,  0.67355113,  0.23976576,  0.12310265,
               0.95120911,  0.52290538,  0.07780542,  0.0627666 ,  0.16848622,
               0.2907212 ,  0.24331557,  0.34587931,  0.07305027,  0.66993852,
               0.09705934,  0.89845755,  0.98440578,  0.91922859,  0.72426141,
               0.2836007 ,  0.13060042,  0.31406273,  0.54755434,  0.23054007,
               0.47492975,  0.19714526,  0.80141901,  0.74716844,  0.90306342,
               0.55367007,  0.93930403,  0.99341414,  0.22622789,  0.66338057,
               0.83545129,  0.5127793 ,  0.98236616,  0.8993435 ,  0.08201346,
               0.54949975,  0.88999411,  0.01686003,  0.71778426,  0.14483139,
               0.50158161,  0.81931024,  0.86590343,  0.07490376,  0.08969122,
               0.47471701,  0.86561369,  0.34503056,  0.9362503 ,  0.43366574,
               0.23064219,  0.11807189,  0.38294026,  0.44824824,  0.09808092,
               0.79638553,  0.03907443,  0.21993864,  0.99095049,  0.15443338])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.94488826,  0.66530265,  0.45897775,  0.07103432,  0.59729034,
               0.5991852 ,  0.58271749,  0.42637437,  0.57510346,  0.41199157,
               0.21730323,  0.34635837,  0.05872454,  0.45011793,  0.61135843,
               0.70776939,  0.89157301,  0.64677158,  0.38347346,  0.36805546,
               0.91835258,  0.74041002,  0.3967669 ,  0.22444272,  0.3113278 ,
               0.10795492,  0.28021504,  0.99477328,  0.31471911,  0.12008031,
               0.71677421,  0.28569978,  0.53896861,  0.95283898,  0.21411654,
               0.14879192,  0.01112055,  0.10978987,  0.80236035,  0.01146783,
               0.43233118,  0.30265076,  0.67913021,  0.3909593 ,  0.55148544,
               0.62398177,  0.51348513,  0.94830247,  0.5173969 ,  0.06385813,
               0.15067172,  0.40894921,  0.35782569,  0.60970556,  0.4250186 ,
               0.64654291,  0.58402644,  0.6803674 ,  0.23450672,  0.67401989,
               0.15916349,  0.72040498,  0.78453768,  0.44731118,  0.32208259,
               0.05394812,  0.41525001,  0.54635922,  0.03891968,  0.18072402,
               0.09524811,  0.30408853,  0.88642719,  0.73503148,  0.59434749,
               0.35643163,  0.84052114,  0.35409257,  0.95085969,  0.65131097,
               0.29941629,  0.91569446,  0.06338685,  0.37022659,  0.1008877 ,
               0.75305034,  0.81592618,  0.72408506,  0.97275366,  0.92801995,
               0.13106389,  0.43376899,  0.61227148,  0.10647575,  0.19342373,
               0.75496035,  0.66015842,  0.03734352,  0.22160326,  0.81452704])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.95609157,  0.65050052,  0.34139883,  0.52031664,  0.99369454,
               0.63506011,  0.32389546,  0.13523425,  0.2481962 ,  0.38918903,
               0.64624022,  0.42381316,  0.03818287,  0.45560259,  0.13106171,
               0.10095023,  0.84744047,  0.52030173,  0.97036559,  0.07468685,
               0.8536652 ,  0.86281188,  0.79401217,  0.73480757,  0.25112192,
               0.3663973 ,  0.1938191 ,  0.29425891,  0.27527655,  0.06928108,
               0.93716699,  0.93888468,  0.42910753,  0.01046777,  0.03749463,
               0.78595971,  0.44614656,  0.93916538,  0.80085471,  0.41084709,
               0.22270529,  0.14596766,  0.88997901,  0.20844985,  0.9478721 ,
               0.1138351 ,  0.03115254,  0.61482774,  0.00637335,  0.87356928,
               0.7712195 ,  0.1008895 ,  0.45756199,  0.00316129,  0.11067915,
               0.13628869,  0.01827035,  0.71290682,  0.69361638,  0.81581455,
               0.41488909,  0.50800869,  0.34164705,  0.51769297,  0.12691072,
               0.1069419 ,  0.20089428,  0.5372842 ,  0.57132117,  0.96732187,
               0.44883917,  0.2123406 ,  0.60130612,  0.81577022,  0.88676812,
               0.28502174,  0.8990817 ,  0.13174431,  0.50850681,  0.72739017,
               0.99991844,  0.08400429,  0.61084805,  0.80524215,  0.67963399,
               0.56394499,  0.4797326 ,  0.10564899,  0.59234268,  0.87566781,
               0.39877805,  0.05915775,  0.00491944,  0.84202574,  0.94114687,
               0.87364348,  0.57987579,  0.29534759,  0.11165589,  0.3545166 ])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.46038048,  0.23939485,  0.80071462,  0.77291485,  0.63117726,
               0.45959346,  0.17715794,  0.75274117,  0.98547123,  0.40726433,
               0.49608109,  0.85320763,  0.62590619,  0.17088204,  0.20294191,
               0.69337333,  0.32462025,  0.79826689,  0.16512905,  0.56281733,
               0.89185881,  0.50343313,  0.60244073,  0.73192342,  0.65491623,
               0.06082896,  0.92603214,  0.80315224,  0.10824605,  0.20477125,
               0.13044156,  0.36565489,  0.74007428,  0.38965997,  0.51733509,
               0.08730253,  0.34295232,  0.40580093,  0.32377024,  0.06158282,
               0.99482172,  0.11123679,  0.11838809,  0.79071324,  0.88508503,
               0.19174225,  0.2614319 ,  0.13514574,  0.65058103,  0.46842723,
               0.233698  ,  0.88533462,  0.77545977,  0.93089344,  0.91843779,
               0.13676372,  0.97830675,  0.3462364 ,  0.75590699,  0.18889134,
               0.29738767,  0.14294535,  0.64168465,  0.49981316,  0.07721595,
               0.15809018,  0.70490891,  0.54371112,  0.87309845,  0.91059211,
               0.15098875,  0.07901099,  0.08152512,  0.70815628,  0.26552338,
               0.87913199,  0.61123088,  0.59205517,  0.77804921,  0.94662384,
               0.55745319,  0.96065956,  0.46062464,  0.8716639 ,  0.5071358 ,
               0.62141878,  0.69579174,  0.69052478,  0.06951906,  0.9332643 ,
               0.70258233,  0.833396  ,  0.93399018,  0.4258604 ,  0.96257404,
               0.46134108,  0.08281023,  0.19663865,  0.94662232,  0.43371276])}]]


