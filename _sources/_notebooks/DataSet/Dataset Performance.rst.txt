
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='14da9640-8ddf-40a9-8124-1468b251d000'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='d33cdb5b-125a-4340-b6ac-97861b0f7e24'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.217437386683333],
     [0.219396503115219],
     [0.937950271695991],
     [0.581797937934309],
     [0.0228897128557654],
     [0.94169203642709],
     [0.51183649896214],
     [0.835456331377901],
     [0.231896465482264],
     [0.315525525832433],
     [0.785365146409934],
     [0.965630189791181],
     [0.795684972172563],
     [0.963430794325875],
     [0.573921862083741],
     [0.577529344752428],
     [0.00181298480850811],
     [0.630539880171831],
     [0.261770167850077],
     [0.00815876368830848],
     [0.57368169469101],
     [0.68467418379034],
     [0.578253973014118],
     [0.155282009627856],
     [0.333370953242843],
     [0.675566450936],
     [0.731435403281257],
     [0.996374435696858],
     [0.847959992643573],
     [0.476039436008911],
     [0.722493621545884],
     [0.302248331814461],
     [0.952073282977561],
     [0.313884624265729],
     [0.534937653121026],
     [0.119512124889628],
     [0.555701469639201],
     [0.523989622119744],
     [0.598882841879045],
     [0.229431212358325],
     [0.0152301367354115],
     [0.493786057737159],
     [0.198912943134439],
     [0.169034582560843],
     [0.527186557722856],
     [0.12328857091771],
     [0.917971331537817],
     [0.968836637762137],
     [0.0206972610969429],
     [0.409432718242587],
     [0.195376899716109],
     [0.990012875142202],
     [0.853345867038274],
     [0.949180755308072],
     [0.796817677629131],
     [0.258444606602741],
     [0.474982267987396],
     [0.480086471071261],
     [0.0481124551124539],
     [0.173502767646517],
     [0.0727968959571621],
     [0.994908715637589],
     [0.958068893020252],
     [0.263202388701918],
     [0.282199705183638],
     [0.614958904345267],
     [0.388748278786802],
     [0.819554790529228],
     [0.348786654926074],
     [0.239680016871644],
     [0.92668507931853],
     [0.0734406759014659],
     [0.0427314916150154],
     [0.271065122028963],
     [0.258339423197508],
     [0.892693497663632],
     [0.628692266445083],
     [0.757667486581792],
     [0.706515776925896],
     [0.655046047223263],
     [0.0945241259511752],
     [0.023177982602676],
     [0.757144440650982],
     [0.29837717757376],
     [0.256742157076099],
     [0.536543764273401],
     [0.567299215990676],
     [0.285866092044055],
     [0.416505922302864],
     [0.705369597736917],
     [0.518315948472551],
     [0.676177132150287],
     [0.0208951962707541],
     [0.762366036729496],
     [0.574811618327026],
     [0.560489653442863],
     [0.977968405755929],
     [0.778222994395893],
     [0.186406883283961],
     [0.0710146809243184]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.97418469])],
     [array([ 0.257062])],
     [array([ 0.85594339])],
     [array([ 0.03899239])],
     [array([ 0.22914071])],
     [array([ 0.09465003])],
     [array([ 0.06783375])],
     [array([ 0.73852497])],
     [array([ 0.9236183])],
     [array([ 0.83356291])],
     [array([ 0.09950995])],
     [array([ 0.65588317])],
     [array([ 0.70026262])],
     [array([ 0.20459099])],
     [array([ 0.64585753])],
     [array([ 0.67303263])],
     [array([ 0.65676572])],
     [array([ 0.34587971])],
     [array([ 0.49052981])],
     [array([ 0.8831148])],
     [array([ 0.00367942])],
     [array([ 0.22637821])],
     [array([ 0.08874728])],
     [array([ 0.57833352])],
     [array([ 0.4657528])],
     [array([ 0.38414006])],
     [array([ 0.36876907])],
     [array([ 0.81003726])],
     [array([ 0.40734153])],
     [array([ 0.92252744])],
     [array([ 0.40594149])],
     [array([ 0.4508221])],
     [array([ 0.22173486])],
     [array([ 0.92927554])],
     [array([ 0.89732609])],
     [array([ 0.79738687])],
     [array([ 0.19397563])],
     [array([ 0.35323013])],
     [array([ 0.25030315])],
     [array([ 0.35635054])],
     [array([ 0.3343747])],
     [array([ 0.79313371])],
     [array([ 0.07403298])],
     [array([ 0.73735326])],
     [array([ 0.81723657])],
     [array([ 0.75903043])],
     [array([ 0.13439522])],
     [array([ 0.77151051])],
     [array([ 0.60504354])],
     [array([ 0.25582137])],
     [array([ 0.00733595])],
     [array([ 0.31573126])],
     [array([ 0.63129615])],
     [array([ 0.65118051])],
     [array([ 0.77137871])],
     [array([ 0.27237176])],
     [array([ 0.57990714])],
     [array([ 0.80654565])],
     [array([ 0.88794507])],
     [array([ 0.79922857])],
     [array([ 0.65508559])],
     [array([ 0.9517736])],
     [array([ 0.07629347])],
     [array([ 0.66269781])],
     [array([ 0.84880595])],
     [array([ 0.8638546])],
     [array([ 0.32478027])],
     [array([ 0.73006328])],
     [array([ 0.78241107])],
     [array([ 0.48206795])],
     [array([ 0.10338447])],
     [array([ 0.12895994])],
     [array([ 0.31856243])],
     [array([ 0.36235124])],
     [array([ 0.48339679])],
     [array([ 0.57820732])],
     [array([ 0.36885481])],
     [array([ 0.08471751])],
     [array([ 0.82279082])],
     [array([ 0.18163954])],
     [array([ 0.80100154])],
     [array([ 0.48001235])],
     [array([ 0.39971721])],
     [array([ 0.36938169])],
     [array([ 0.52725792])],
     [array([ 0.1743394])],
     [array([ 0.60600896])],
     [array([ 0.12500428])],
     [array([ 0.86043324])],
     [array([ 0.73862356])],
     [array([ 0.5662882])],
     [array([ 0.30518583])],
     [array([ 0.71331903])],
     [array([ 0.08840713])],
     [array([ 0.15257156])],
     [array([ 0.461882])],
     [array([ 0.75438676])],
     [array([ 0.85477635])],
     [array([ 0.94803957])],
     [array([ 0.20927878])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.97418469,  0.257062  ,  0.85594339,  0.03899239,  0.22914071,
            0.09465003,  0.06783375,  0.73852497,  0.9236183 ,  0.83356291,
            0.09950995,  0.65588317,  0.70026262,  0.20459099,  0.64585753,
            0.67303263,  0.65676572,  0.34587971,  0.49052981,  0.8831148 ,
            0.00367942,  0.22637821,  0.08874728,  0.57833352,  0.4657528 ,
            0.38414006,  0.36876907,  0.81003726,  0.40734153,  0.92252744,
            0.40594149,  0.4508221 ,  0.22173486,  0.92927554,  0.89732609,
            0.79738687,  0.19397563,  0.35323013,  0.25030315,  0.35635054,
            0.3343747 ,  0.79313371,  0.07403298,  0.73735326,  0.81723657,
            0.75903043,  0.13439522,  0.77151051,  0.60504354,  0.25582137,
            0.00733595,  0.31573126,  0.63129615,  0.65118051,  0.77137871,
            0.27237176,  0.57990714,  0.80654565,  0.88794507,  0.79922857,
            0.65508559,  0.9517736 ,  0.07629347,  0.66269781,  0.84880595,
            0.8638546 ,  0.32478027,  0.73006328,  0.78241107,  0.48206795,
            0.10338447,  0.12895994,  0.31856243,  0.36235124,  0.48339679,
            0.57820732,  0.36885481,  0.08471751,  0.82279082,  0.18163954,
            0.80100154,  0.48001235,  0.39971721,  0.36938169,  0.52725792,
            0.1743394 ,  0.60600896,  0.12500428,  0.86043324,  0.73862356,
            0.5662882 ,  0.30518583,  0.71331903,  0.08840713,  0.15257156,
            0.461882  ,  0.75438676,  0.85477635,  0.94803957,  0.20927878])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.21743739,  0.2193965 ,  0.93795027,  0.58179794,  0.02288971,
               0.94169204,  0.5118365 ,  0.83545633,  0.23189647,  0.31552553,
               0.78536515,  0.96563019,  0.79568497,  0.96343079,  0.57392186,
               0.57752934,  0.00181298,  0.63053988,  0.26177017,  0.00815876,
               0.57368169,  0.68467418,  0.57825397,  0.15528201,  0.33337095,
               0.67556645,  0.7314354 ,  0.99637444,  0.84795999,  0.47603944,
               0.72249362,  0.30224833,  0.95207328,  0.31388462,  0.53493765,
               0.11951212,  0.55570147,  0.52398962,  0.59888284,  0.22943121,
               0.01523014,  0.49378606,  0.19891294,  0.16903458,  0.52718656,
               0.12328857,  0.91797133,  0.96883664,  0.02069726,  0.40943272,
               0.1953769 ,  0.99001288,  0.85334587,  0.94918076,  0.79681768,
               0.25844461,  0.47498227,  0.48008647,  0.04811246,  0.17350277,
               0.0727969 ,  0.99490872,  0.95806889,  0.26320239,  0.28219971,
               0.6149589 ,  0.38874828,  0.81955479,  0.34878665,  0.23968002,
               0.92668508,  0.07344068,  0.04273149,  0.27106512,  0.25833942,
               0.8926935 ,  0.62869227,  0.75766749,  0.70651578,  0.65504605,
               0.09452413,  0.02317798,  0.75714444,  0.29837718,  0.25674216,
               0.53654376,  0.56729922,  0.28586609,  0.41650592,  0.7053696 ,
               0.51831595,  0.67617713,  0.0208952 ,  0.76236604,  0.57481162,
               0.56048965,  0.97796841,  0.77822299,  0.18640688,  0.07101468])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.20944798,  0.73679357,  0.90687262,  0.32703622,  0.36531516,
               0.91726889,  0.40713312,  0.66108916,  0.02592067,  0.2973837 ,
               0.3876935 ,  0.20148311,  0.26390186,  0.22180766,  0.24680478,
               0.23892194,  0.59151914,  0.33091608,  0.42895949,  0.46580942,
               0.22872943,  0.81842774,  0.09469497,  0.90251029,  0.24273847,
               0.50809086,  0.32010009,  0.59359097,  0.05124287,  0.67388142,
               0.00833546,  0.46806723,  0.04429839,  0.61809945,  0.92395636,
               0.56952776,  0.27699698,  0.55099225,  0.68801231,  0.14561348,
               0.40803977,  0.10398221,  0.35179512,  0.09156978,  0.96815552,
               0.28498988,  0.10541464,  0.3558962 ,  0.78277069,  0.00212297,
               0.95350696,  0.82949925,  0.14980825,  0.09879217,  0.21847672,
               0.84404683,  0.38700645,  0.81400029,  0.33264878,  0.63866358,
               0.89350534,  0.2209612 ,  0.42855721,  0.7711841 ,  0.58890562,
               0.52859013,  0.22582491,  0.88400658,  0.8694937 ,  0.82498042,
               0.94565855,  0.76683356,  0.70591002,  0.18291084,  0.34147293,
               0.44731537,  0.76397826,  0.39396385,  0.24153899,  0.05224998,
               0.56828185,  0.72293635,  0.1600557 ,  0.44607417,  0.71823638,
               0.90525262,  0.70867208,  0.99710685,  0.24068666,  0.64754925,
               0.10817648,  0.86482167,  0.80957215,  0.6386605 ,  0.8936379 ,
               0.78735132,  0.8949744 ,  0.11496033,  0.13716015,  0.97302247])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([  3.19143180e-01,   1.25036956e-01,   1.56859112e-02,
                2.84491415e-01,   9.33861151e-04,   7.04450408e-01,
                2.37746636e-01,   7.44856922e-01,   6.07210861e-01,
                4.81592107e-02,   1.91180162e-01,   3.31904876e-01,
                1.44430067e-01,   4.38953730e-01,   1.61534598e-01,
                7.44969161e-02,   3.48452125e-01,   8.30832346e-01,
                5.69102228e-01,   2.85475315e-01,   2.69200154e-01,
                2.27750438e-01,   9.34277470e-01,   2.53967406e-01,
                2.83323708e-01,   9.75123847e-01,   4.80777207e-01,
                9.81295148e-01,   1.79007185e-01,   5.99685545e-02,
                9.77433691e-01,   5.43313620e-02,   3.68053563e-01,
                1.94230526e-01,   4.81486202e-01,   5.75993181e-01,
                2.43662541e-01,   7.64151362e-01,   3.14024651e-01,
                6.02458676e-02,   4.88067881e-01,   5.15622016e-01,
                7.80715680e-01,   8.53501002e-01,   6.99011555e-01,
                5.50558296e-01,   5.42437176e-01,   7.39610004e-01,
                9.29481137e-01,   8.82605646e-01,   5.80767395e-01,
                7.22036218e-02,   1.99201448e-01,   3.53011496e-01,
                8.42273089e-01,   3.81821192e-01,   5.10987884e-01,
                3.07405085e-01,   6.82535641e-01,   2.92169350e-02,
                3.90831495e-01,   8.48911381e-01,   2.96732835e-01,
                8.09915189e-01,   1.31868970e-01,   4.94913137e-01,
                4.06026565e-01,   5.25389028e-01,   2.90107656e-02,
                7.95357296e-01,   6.01385086e-01,   5.26040714e-01,
                9.64590043e-01,   7.55039195e-01,   1.52672571e-01,
                1.84683558e-01,   8.98261428e-01,   7.27900353e-01,
                9.62022273e-01,   1.07205714e-01,   3.82553618e-01,
                8.01303169e-01,   9.35052037e-01,   8.23043331e-01,
                7.99859612e-01,   8.33815851e-01,   7.04938986e-02,
                2.27146227e-01,   9.31762706e-01,   7.67077755e-01,
                6.32807880e-01,   5.94785882e-01,   4.98572812e-01,
                1.62495273e-01,   4.18803418e-01,   6.57646433e-01,
                6.92331542e-01,   8.08643704e-01,   9.09782291e-01,
                5.36933204e-01])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.3655516 ,  0.19092578,  0.94303706,  0.73262938,  0.41040109,
               0.80961097,  0.77890975,  0.33158375,  0.64819657,  0.15126982,
               0.53702229,  0.45826553,  0.80140364,  0.88458944,  0.74708061,
               0.04813149,  0.87556459,  0.84209193,  0.33163258,  0.04262246,
               0.54099014,  0.46563468,  0.54678325,  0.66724372,  0.90787304,
               0.70202065,  0.28078367,  0.72207647,  0.73815363,  0.86911041,
               0.72459088,  0.37098718,  0.02011134,  0.69453999,  0.35728393,
               0.40760974,  0.86521627,  0.1876012 ,  0.80889897,  0.43482912,
               0.23642094,  0.44407269,  0.78217897,  0.78076724,  0.1348475 ,
               0.0152711 ,  0.05480818,  0.93635094,  0.34753567,  0.47654357,
               0.72342081,  0.26469457,  0.39206974,  0.3664399 ,  0.37066353,
               0.97997366,  0.43243652,  0.22669824,  0.62789018,  0.32306644,
               0.55207953,  0.6446952 ,  0.49055   ,  0.17346241,  0.3031501 ,
               0.44477727,  0.5028701 ,  0.81622423,  0.38614266,  0.84728348,
               0.25488654,  0.97875074,  0.79822867,  0.70882504,  0.62277347,
               0.47147888,  0.33868815,  0.48068783,  0.81860139,  0.75172253,
               0.65907046,  0.07048105,  0.14892297,  0.78387562,  0.28759982,
               0.56527712,  0.48174877,  0.8129014 ,  0.28721738,  0.5762452 ,
               0.38382766,  0.98873461,  0.80886707,  0.91313924,  0.58679486,
               0.32409647,  0.86003815,  0.68828986,  0.24434234,  0.5457052 ])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.21743739,  0.2193965 ,  0.93795027,  0.58179794,  0.02288971,
               0.94169204,  0.5118365 ,  0.83545633,  0.23189647,  0.31552553,
               0.78536515,  0.96563019,  0.79568497,  0.96343079,  0.57392186,
               0.57752934,  0.00181298,  0.63053988,  0.26177017,  0.00815876,
               0.57368169,  0.68467418,  0.57825397,  0.15528201,  0.33337095,
               0.67556645,  0.7314354 ,  0.99637444,  0.84795999,  0.47603944,
               0.72249362,  0.30224833,  0.95207328,  0.31388462,  0.53493765,
               0.11951212,  0.55570147,  0.52398962,  0.59888284,  0.22943121,
               0.01523014,  0.49378606,  0.19891294,  0.16903458,  0.52718656,
               0.12328857,  0.91797133,  0.96883664,  0.02069726,  0.40943272,
               0.1953769 ,  0.99001288,  0.85334587,  0.94918076,  0.79681768,
               0.25844461,  0.47498227,  0.48008647,  0.04811246,  0.17350277,
               0.0727969 ,  0.99490872,  0.95806889,  0.26320239,  0.28219971,
               0.6149589 ,  0.38874828,  0.81955479,  0.34878665,  0.23968002,
               0.92668508,  0.07344068,  0.04273149,  0.27106512,  0.25833942,
               0.8926935 ,  0.62869227,  0.75766749,  0.70651578,  0.65504605,
               0.09452413,  0.02317798,  0.75714444,  0.29837718,  0.25674216,
               0.53654376,  0.56729922,  0.28586609,  0.41650592,  0.7053696 ,
               0.51831595,  0.67617713,  0.0208952 ,  0.76236604,  0.57481162,
               0.56048965,  0.97796841,  0.77822299,  0.18640688,  0.07101468])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.20944798,  0.73679357,  0.90687262,  0.32703622,  0.36531516,
               0.91726889,  0.40713312,  0.66108916,  0.02592067,  0.2973837 ,
               0.3876935 ,  0.20148311,  0.26390186,  0.22180766,  0.24680478,
               0.23892194,  0.59151914,  0.33091608,  0.42895949,  0.46580942,
               0.22872943,  0.81842774,  0.09469497,  0.90251029,  0.24273847,
               0.50809086,  0.32010009,  0.59359097,  0.05124287,  0.67388142,
               0.00833546,  0.46806723,  0.04429839,  0.61809945,  0.92395636,
               0.56952776,  0.27699698,  0.55099225,  0.68801231,  0.14561348,
               0.40803977,  0.10398221,  0.35179512,  0.09156978,  0.96815552,
               0.28498988,  0.10541464,  0.3558962 ,  0.78277069,  0.00212297,
               0.95350696,  0.82949925,  0.14980825,  0.09879217,  0.21847672,
               0.84404683,  0.38700645,  0.81400029,  0.33264878,  0.63866358,
               0.89350534,  0.2209612 ,  0.42855721,  0.7711841 ,  0.58890562,
               0.52859013,  0.22582491,  0.88400658,  0.8694937 ,  0.82498042,
               0.94565855,  0.76683356,  0.70591002,  0.18291084,  0.34147293,
               0.44731537,  0.76397826,  0.39396385,  0.24153899,  0.05224998,
               0.56828185,  0.72293635,  0.1600557 ,  0.44607417,  0.71823638,
               0.90525262,  0.70867208,  0.99710685,  0.24068666,  0.64754925,
               0.10817648,  0.86482167,  0.80957215,  0.6386605 ,  0.8936379 ,
               0.78735132,  0.8949744 ,  0.11496033,  0.13716015,  0.97302247])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([  3.19143180e-01,   1.25036956e-01,   1.56859112e-02,
                2.84491415e-01,   9.33861151e-04,   7.04450408e-01,
                2.37746636e-01,   7.44856922e-01,   6.07210861e-01,
                4.81592107e-02,   1.91180162e-01,   3.31904876e-01,
                1.44430067e-01,   4.38953730e-01,   1.61534598e-01,
                7.44969161e-02,   3.48452125e-01,   8.30832346e-01,
                5.69102228e-01,   2.85475315e-01,   2.69200154e-01,
                2.27750438e-01,   9.34277470e-01,   2.53967406e-01,
                2.83323708e-01,   9.75123847e-01,   4.80777207e-01,
                9.81295148e-01,   1.79007185e-01,   5.99685545e-02,
                9.77433691e-01,   5.43313620e-02,   3.68053563e-01,
                1.94230526e-01,   4.81486202e-01,   5.75993181e-01,
                2.43662541e-01,   7.64151362e-01,   3.14024651e-01,
                6.02458676e-02,   4.88067881e-01,   5.15622016e-01,
                7.80715680e-01,   8.53501002e-01,   6.99011555e-01,
                5.50558296e-01,   5.42437176e-01,   7.39610004e-01,
                9.29481137e-01,   8.82605646e-01,   5.80767395e-01,
                7.22036218e-02,   1.99201448e-01,   3.53011496e-01,
                8.42273089e-01,   3.81821192e-01,   5.10987884e-01,
                3.07405085e-01,   6.82535641e-01,   2.92169350e-02,
                3.90831495e-01,   8.48911381e-01,   2.96732835e-01,
                8.09915189e-01,   1.31868970e-01,   4.94913137e-01,
                4.06026565e-01,   5.25389028e-01,   2.90107656e-02,
                7.95357296e-01,   6.01385086e-01,   5.26040714e-01,
                9.64590043e-01,   7.55039195e-01,   1.52672571e-01,
                1.84683558e-01,   8.98261428e-01,   7.27900353e-01,
                9.62022273e-01,   1.07205714e-01,   3.82553618e-01,
                8.01303169e-01,   9.35052037e-01,   8.23043331e-01,
                7.99859612e-01,   8.33815851e-01,   7.04938986e-02,
                2.27146227e-01,   9.31762706e-01,   7.67077755e-01,
                6.32807880e-01,   5.94785882e-01,   4.98572812e-01,
                1.62495273e-01,   4.18803418e-01,   6.57646433e-01,
                6.92331542e-01,   8.08643704e-01,   9.09782291e-01,
                5.36933204e-01])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.603028  ,  0.02212628,  0.51115548,  0.50882141,  0.69885425,
               0.80526196,  0.7584082 ,  0.73701133,  0.47378882,  0.66853773,
               0.95315992,  0.8629204 ,  0.90237097,  0.33136299,  0.84826448,
               0.11846135,  0.17801154,  0.67035446,  0.63218529,  0.0042673 ,
               0.07173081,  0.19698526,  0.23664552,  0.57307658,  0.78963742,
               0.14199339,  0.6178706 ,  0.5312258 ,  0.55672396,  0.0446295 ,
               0.68633612,  0.36329222,  0.17273711,  0.5843305 ,  0.82178553,
               0.80343265,  0.22861669,  0.2909088 ,  0.92812886,  0.68354196,
               0.18414104,  0.09804241,  0.23003845,  0.31147037,  0.61517944,
               0.10249839,  0.13281358,  0.40107808,  0.83385642,  0.54549507,
               0.25816642,  0.84914095,  0.63438803,  0.44782468,  0.32728974,
               0.54491039,  0.07102269,  0.54340797,  0.76583372,  0.40026513,
               0.28104822,  0.80268118,  0.60773697,  0.24818686,  0.08506059,
               0.45505907,  0.57318919,  0.69104592,  0.1191224 ,  0.61887944,
               0.21448424,  0.50554262,  0.30995264,  0.55274817,  0.91279238,
               0.56153935,  0.28348088,  0.67073339,  0.27372322,  0.84413974,
               0.55927022,  0.93301128,  0.43986148,  0.82018853,  0.36050281,
               0.81419362,  0.07841492,  0.61390539,  0.16246481,  0.07495813,
               0.34736698,  0.67976445,  0.75912281,  0.2327386 ,  0.21035238,
               0.78017095,  0.64842997,  0.79372795,  0.77026427,  0.78429332])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.97418469,  0.257062  ,  0.85594339,  0.03899239,  0.22914071,
               0.09465003,  0.06783375,  0.73852497,  0.9236183 ,  0.83356291,
               0.09950995,  0.65588317,  0.70026262,  0.20459099,  0.64585753,
               0.67303263,  0.65676572,  0.34587971,  0.49052981,  0.8831148 ,
               0.00367942,  0.22637821,  0.08874728,  0.57833352,  0.4657528 ,
               0.38414006,  0.36876907,  0.81003726,  0.40734153,  0.92252744,
               0.40594149,  0.4508221 ,  0.22173486,  0.92927554,  0.89732609,
               0.79738687,  0.19397563,  0.35323013,  0.25030315,  0.35635054,
               0.3343747 ,  0.79313371,  0.07403298,  0.73735326,  0.81723657,
               0.75903043,  0.13439522,  0.77151051,  0.60504354,  0.25582137,
               0.00733595,  0.31573126,  0.63129615,  0.65118051,  0.77137871,
               0.27237176,  0.57990714,  0.80654565,  0.88794507,  0.79922857,
               0.65508559,  0.9517736 ,  0.07629347,  0.66269781,  0.84880595,
               0.8638546 ,  0.32478027,  0.73006328,  0.78241107,  0.48206795,
               0.10338447,  0.12895994,  0.31856243,  0.36235124,  0.48339679,
               0.57820732,  0.36885481,  0.08471751,  0.82279082,  0.18163954,
               0.80100154,  0.48001235,  0.39971721,  0.36938169,  0.52725792,
               0.1743394 ,  0.60600896,  0.12500428,  0.86043324,  0.73862356,
               0.5662882 ,  0.30518583,  0.71331903,  0.08840713,  0.15257156,
               0.461882  ,  0.75438676,  0.85477635,  0.94803957,  0.20927878])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([  9.01644369e-01,   8.38239891e-01,   2.43659764e-01,
                1.65984717e-01,   1.84467686e-01,   4.29573023e-01,
                6.26710992e-02,   9.36124070e-01,   9.58915474e-01,
                6.10928608e-01,   2.06704291e-01,   2.67258542e-01,
                3.55183047e-01,   7.07794158e-01,   2.77297678e-01,
                3.45781375e-01,   5.14744815e-01,   7.74968327e-01,
                1.13580778e-01,   9.71071891e-02,   7.06567281e-01,
                2.92736249e-01,   8.32949021e-01,   8.46000513e-01,
                1.69662513e-01,   6.54860428e-01,   2.76098156e-01,
                6.54765404e-01,   6.16643612e-01,   8.31687862e-01,
                4.33805177e-01,   6.74773801e-02,   2.62619613e-01,
                7.75393938e-01,   8.38135358e-01,   5.18134062e-02,
                6.76235472e-01,   6.26894829e-01,   9.89049515e-01,
                2.75817091e-01,   7.12230924e-02,   7.52617414e-01,
                7.73293491e-01,   2.86615172e-01,   9.11317738e-01,
                8.21199713e-01,   6.24699401e-01,   5.74270041e-01,
                9.69595880e-01,   7.69730851e-01,   1.55595068e-02,
                9.99617054e-01,   3.16003108e-01,   2.22831231e-01,
                8.05216488e-01,   1.97547280e-01,   2.43372680e-01,
                4.63220604e-01,   4.03212102e-01,   4.23432501e-01,
                5.61729339e-01,   5.45672320e-01,   1.67922392e-01,
                3.42118066e-01,   6.38543610e-01,   8.11148278e-01,
                1.76759045e-01,   2.09975300e-01,   3.62930660e-01,
                7.73331008e-01,   1.44857914e-01,   9.06451484e-01,
                2.18892748e-01,   1.15490127e-01,   2.73047180e-01,
                3.46732505e-01,   4.93601513e-01,   3.63525796e-01,
                6.40958122e-01,   5.91028552e-02,   4.99173374e-01,
                3.67103640e-02,   9.65081771e-01,   5.33368546e-01,
                2.32637820e-01,   8.16199284e-01,   6.57819441e-01,
                5.99536397e-01,   9.31271887e-01,   4.89247516e-01,
                8.60669931e-01,   9.94110160e-01,   6.52822080e-01,
                5.05419880e-01,   7.20234669e-05,   7.91812658e-01,
                6.69280501e-01,   2.69160937e-01,   4.20501228e-01,
                1.31644491e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.02893335,  0.14918168,  0.40652038,  0.45148121,  0.58401458,
               0.0814897 ,  0.23318404,  0.38533414,  0.0801083 ,  0.48481606,
               0.90226102,  0.8596281 ,  0.18880855,  0.28183697,  0.50698169,
               0.15956374,  0.25314751,  0.31531188,  0.39532727,  0.80753752,
               0.72319167,  0.75579199,  0.77200736,  0.54170913,  0.58830487,
               0.79043993,  0.69058748,  0.57009863,  0.64206118,  0.16549458,
               0.68054223,  0.67638564,  0.78358577,  0.6624276 ,  0.56130355,
               0.54030291,  0.45668849,  0.02893552,  0.93738554,  0.04037953,
               0.6534754 ,  0.54794888,  0.95960781,  0.11446355,  0.56841403,
               0.76981048,  0.13373883,  0.80920727,  0.33274063,  0.15684249,
               0.6157722 ,  0.99779971,  0.72868609,  0.77644933,  0.8115131 ,
               0.2742747 ,  0.44016948,  0.57696383,  0.0934392 ,  0.71087266,
               0.12930815,  0.285448  ,  0.518906  ,  0.44117973,  0.41775535,
               0.74212916,  0.20515057,  0.0578784 ,  0.12762647,  0.9175413 ,
               0.46429546,  0.25639256,  0.47469932,  0.52570746,  0.56170163,
               0.37005385,  0.64903154,  0.65527624,  0.20228317,  0.42445167,
               0.27865796,  0.75458506,  0.95543806,  0.19916837,  0.21124518,
               0.98118693,  0.30814522,  0.24807709,  0.10545043,  0.93130163,
               0.68035385,  0.61815945,  0.76253044,  0.6482212 ,  0.8664247 ,
               0.71185124,  0.75097228,  0.51831491,  0.52134163,  0.41058077])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.86136169,  0.87825096,  0.83083542,  0.52819963,  0.44038709,
               0.29193271,  0.65149385,  0.8480963 ,  0.86915009,  0.1687732 ,
               0.86348333,  0.19931111,  0.53596892,  0.40372435,  0.85519624,
               0.82306832,  0.72442033,  0.44326929,  0.08635304,  0.96798431,
               0.45136902,  0.48410625,  0.30519368,  0.11412093,  0.22245647,
               0.05464632,  0.45054434,  0.0618785 ,  0.39103955,  0.94253015,
               0.70591382,  0.40485204,  0.0496665 ,  0.57042386,  0.08075066,
               0.42338586,  0.75810906,  0.21782195,  0.7853468 ,  0.81238994,
               0.75680736,  0.74215781,  0.0366328 ,  0.42543512,  0.99213355,
               0.85437843,  0.10498231,  0.89226376,  0.19294798,  0.9995857 ,
               0.66808502,  0.25757489,  0.79940757,  0.72748662,  0.18483674,
               0.6372373 ,  0.4637156 ,  0.29209743,  0.81521264,  0.47617283,
               0.94751533,  0.16746855,  0.88287467,  0.9908373 ,  0.63691683,
               0.73403371,  0.32610516,  0.17457923,  0.9033632 ,  0.11197477,
               0.51882752,  0.43284972,  0.88163623,  0.86150995,  0.4346439 ,
               0.28900652,  0.20218742,  0.18590836,  0.36112633,  0.39977856,
               0.36857059,  0.53224136,  0.90640232,  0.06372107,  0.13270289,
               0.74201637,  0.92578589,  0.73195736,  0.96596082,  0.09623498,
               0.91600349,  0.54601722,  0.8616155 ,  0.03576489,  0.55728263,
               0.59129003,  0.9981291 ,  0.20076978,  0.03921187,  0.10338119])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.97418469,  0.257062  ,  0.85594339,  0.03899239,  0.22914071,
               0.09465003,  0.06783375,  0.73852497,  0.9236183 ,  0.83356291,
               0.09950995,  0.65588317,  0.70026262,  0.20459099,  0.64585753,
               0.67303263,  0.65676572,  0.34587971,  0.49052981,  0.8831148 ,
               0.00367942,  0.22637821,  0.08874728,  0.57833352,  0.4657528 ,
               0.38414006,  0.36876907,  0.81003726,  0.40734153,  0.92252744,
               0.40594149,  0.4508221 ,  0.22173486,  0.92927554,  0.89732609,
               0.79738687,  0.19397563,  0.35323013,  0.25030315,  0.35635054,
               0.3343747 ,  0.79313371,  0.07403298,  0.73735326,  0.81723657,
               0.75903043,  0.13439522,  0.77151051,  0.60504354,  0.25582137,
               0.00733595,  0.31573126,  0.63129615,  0.65118051,  0.77137871,
               0.27237176,  0.57990714,  0.80654565,  0.88794507,  0.79922857,
               0.65508559,  0.9517736 ,  0.07629347,  0.66269781,  0.84880595,
               0.8638546 ,  0.32478027,  0.73006328,  0.78241107,  0.48206795,
               0.10338447,  0.12895994,  0.31856243,  0.36235124,  0.48339679,
               0.57820732,  0.36885481,  0.08471751,  0.82279082,  0.18163954,
               0.80100154,  0.48001235,  0.39971721,  0.36938169,  0.52725792,
               0.1743394 ,  0.60600896,  0.12500428,  0.86043324,  0.73862356,
               0.5662882 ,  0.30518583,  0.71331903,  0.08840713,  0.15257156,
               0.461882  ,  0.75438676,  0.85477635,  0.94803957,  0.20927878])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([  9.01644369e-01,   8.38239891e-01,   2.43659764e-01,
                1.65984717e-01,   1.84467686e-01,   4.29573023e-01,
                6.26710992e-02,   9.36124070e-01,   9.58915474e-01,
                6.10928608e-01,   2.06704291e-01,   2.67258542e-01,
                3.55183047e-01,   7.07794158e-01,   2.77297678e-01,
                3.45781375e-01,   5.14744815e-01,   7.74968327e-01,
                1.13580778e-01,   9.71071891e-02,   7.06567281e-01,
                2.92736249e-01,   8.32949021e-01,   8.46000513e-01,
                1.69662513e-01,   6.54860428e-01,   2.76098156e-01,
                6.54765404e-01,   6.16643612e-01,   8.31687862e-01,
                4.33805177e-01,   6.74773801e-02,   2.62619613e-01,
                7.75393938e-01,   8.38135358e-01,   5.18134062e-02,
                6.76235472e-01,   6.26894829e-01,   9.89049515e-01,
                2.75817091e-01,   7.12230924e-02,   7.52617414e-01,
                7.73293491e-01,   2.86615172e-01,   9.11317738e-01,
                8.21199713e-01,   6.24699401e-01,   5.74270041e-01,
                9.69595880e-01,   7.69730851e-01,   1.55595068e-02,
                9.99617054e-01,   3.16003108e-01,   2.22831231e-01,
                8.05216488e-01,   1.97547280e-01,   2.43372680e-01,
                4.63220604e-01,   4.03212102e-01,   4.23432501e-01,
                5.61729339e-01,   5.45672320e-01,   1.67922392e-01,
                3.42118066e-01,   6.38543610e-01,   8.11148278e-01,
                1.76759045e-01,   2.09975300e-01,   3.62930660e-01,
                7.73331008e-01,   1.44857914e-01,   9.06451484e-01,
                2.18892748e-01,   1.15490127e-01,   2.73047180e-01,
                3.46732505e-01,   4.93601513e-01,   3.63525796e-01,
                6.40958122e-01,   5.91028552e-02,   4.99173374e-01,
                3.67103640e-02,   9.65081771e-01,   5.33368546e-01,
                2.32637820e-01,   8.16199284e-01,   6.57819441e-01,
                5.99536397e-01,   9.31271887e-01,   4.89247516e-01,
                8.60669931e-01,   9.94110160e-01,   6.52822080e-01,
                5.05419880e-01,   7.20234669e-05,   7.91812658e-01,
                6.69280501e-01,   2.69160937e-01,   4.20501228e-01,
                1.31644491e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.02893335,  0.14918168,  0.40652038,  0.45148121,  0.58401458,
               0.0814897 ,  0.23318404,  0.38533414,  0.0801083 ,  0.48481606,
               0.90226102,  0.8596281 ,  0.18880855,  0.28183697,  0.50698169,
               0.15956374,  0.25314751,  0.31531188,  0.39532727,  0.80753752,
               0.72319167,  0.75579199,  0.77200736,  0.54170913,  0.58830487,
               0.79043993,  0.69058748,  0.57009863,  0.64206118,  0.16549458,
               0.68054223,  0.67638564,  0.78358577,  0.6624276 ,  0.56130355,
               0.54030291,  0.45668849,  0.02893552,  0.93738554,  0.04037953,
               0.6534754 ,  0.54794888,  0.95960781,  0.11446355,  0.56841403,
               0.76981048,  0.13373883,  0.80920727,  0.33274063,  0.15684249,
               0.6157722 ,  0.99779971,  0.72868609,  0.77644933,  0.8115131 ,
               0.2742747 ,  0.44016948,  0.57696383,  0.0934392 ,  0.71087266,
               0.12930815,  0.285448  ,  0.518906  ,  0.44117973,  0.41775535,
               0.74212916,  0.20515057,  0.0578784 ,  0.12762647,  0.9175413 ,
               0.46429546,  0.25639256,  0.47469932,  0.52570746,  0.56170163,
               0.37005385,  0.64903154,  0.65527624,  0.20228317,  0.42445167,
               0.27865796,  0.75458506,  0.95543806,  0.19916837,  0.21124518,
               0.98118693,  0.30814522,  0.24807709,  0.10545043,  0.93130163,
               0.68035385,  0.61815945,  0.76253044,  0.6482212 ,  0.8664247 ,
               0.71185124,  0.75097228,  0.51831491,  0.52134163,  0.41058077])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.7062486 ,  0.02021802,  0.51854687,  0.96430221,  0.49797996,
               0.30818246,  0.21266239,  0.01954652,  0.38225938,  0.51827176,
               0.6894281 ,  0.24082803,  0.22063328,  0.83298295,  0.78463564,
               0.80069804,  0.96039562,  0.59174265,  0.37045837,  0.57873734,
               0.25444786,  0.52067476,  0.88170165,  0.80028256,  0.90734021,
               0.30684502,  0.75391572,  0.49507274,  0.17992885,  0.47933815,
               0.02507695,  0.27929591,  0.43285565,  0.92831472,  0.02160534,
               0.20428103,  0.92109162,  0.61115404,  0.6017229 ,  0.43578491,
               0.59334925,  0.75187041,  0.84452839,  0.76960302,  0.80480553,
               0.30122185,  0.44947292,  0.2360627 ,  0.24164678,  0.2505841 ,
               0.49623884,  0.33166155,  0.3547725 ,  0.11916675,  0.58715442,
               0.17263343,  0.38195343,  0.89822088,  0.60104762,  0.40815887,
               0.52978517,  0.64751141,  0.4877011 ,  0.69742505,  0.32012382,
               0.57551894,  0.9651234 ,  0.30553788,  0.1717049 ,  0.03225837,
               0.49511653,  0.15485576,  0.30811554,  0.25431381,  0.62836783,
               0.00301565,  0.40660185,  0.87389812,  0.91913243,  0.2211784 ,
               0.25571931,  0.39600513,  0.77892886,  0.96189698,  0.24514324,
               0.90738808,  0.82324244,  0.61718383,  0.72668739,  0.39209031,
               0.34087134,  0.58017079,  0.66769274,  0.95223065,  0.5772913 ,
               0.06629735,  0.21750654,  0.00354191,  0.02742234,  0.02620246])}]]


