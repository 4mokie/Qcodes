
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='757d729e-0a8c-4bec-948d-9fad20f6b3c6'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='db1a5ffb-389e-4571-9b74-dbcaf2201d23'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.398211037214179],
     [0.0275752507417933],
     [0.949348865940704],
     [0.766127211791475],
     [0.586845238543109],
     [0.805506834650559],
     [0.619584893439558],
     [0.219714826366328],
     [0.191244835357995],
     [0.599316635639151],
     [0.471768400734062],
     [0.849019828753596],
     [0.657906486601497],
     [0.132385102597212],
     [0.317629747090827],
     [0.594136084964392],
     [0.620285908405379],
     [0.14544054271862],
     [0.717427108337442],
     [0.259313363464897],
     [0.240234694507722],
     [0.85310783249428],
     [0.405406806528044],
     [0.771131509128343],
     [0.919012441353082],
     [0.444868750928118],
     [0.600870927410492],
     [0.872916208666291],
     [0.794126759702942],
     [0.911650065811859],
     [0.0146403077555708],
     [0.426698876566749],
     [0.468558676407014],
     [0.766421850662569],
     [0.464538722304298],
     [0.165748298011395],
     [0.454536029521812],
     [0.314825015295402],
     [0.350156396390321],
     [0.762642064129085],
     [0.313635189365892],
     [0.376686264519936],
     [0.869192214289036],
     [0.106493805849046],
     [0.808567296837793],
     [0.249795424585038],
     [0.461711611174114],
     [0.706561974177007],
     [0.852547965569716],
     [0.114455396981807],
     [0.179045278094405],
     [0.00334051214839837],
     [0.212849619244945],
     [0.186551025013707],
     [0.250857461488886],
     [0.710148547334083],
     [0.446353881047239],
     [0.922110708925392],
     [0.886243632053299],
     [0.199353553175913],
     [0.271231929209074],
     [0.443070745071774],
     [0.641735347232866],
     [0.117965367958202],
     [0.964799818891205],
     [0.769641912692602],
     [0.088875773499834],
     [0.0837748383279459],
     [0.326209547998725],
     [0.0410234091634852],
     [0.510746418109351],
     [0.629404925639083],
     [0.0103246731943756],
     [0.495243880645529],
     [0.252510146793931],
     [0.285485857621602],
     [0.0112870602735383],
     [0.633678636179601],
     [0.833430084773577],
     [0.467763550118261],
     [0.35643200738207],
     [0.231974616731198],
     [0.876800937326381],
     [0.369210896289832],
     [0.235352934488634],
     [0.352994210314898],
     [0.480364297110297],
     [0.632116620998999],
     [0.427452153911959],
     [0.808539810750683],
     [0.816353331500203],
     [0.179439180570008],
     [0.106534417364092],
     [0.896374043470451],
     [0.706195988115059],
     [0.652627059565852],
     [0.421626119244349],
     [0.428141087803822],
     [0.984139386510671],
     [0.272897235941311]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.07976315])],
     [array([ 0.68490244])],
     [array([ 0.85679224])],
     [array([ 0.69911969])],
     [array([ 0.82837931])],
     [array([ 0.08975607])],
     [array([ 0.43282903])],
     [array([ 0.42237825])],
     [array([ 0.00033343])],
     [array([ 0.03074395])],
     [array([ 0.11438649])],
     [array([ 0.52351268])],
     [array([ 0.74527031])],
     [array([ 0.08713411])],
     [array([ 0.86394058])],
     [array([ 0.5066184])],
     [array([ 0.97597994])],
     [array([ 0.20349016])],
     [array([ 0.81218858])],
     [array([ 0.89567541])],
     [array([ 0.88476965])],
     [array([ 0.19827507])],
     [array([ 0.4808626])],
     [array([ 0.97447989])],
     [array([ 0.93429034])],
     [array([ 0.33044857])],
     [array([ 0.37590395])],
     [array([ 0.6935868])],
     [array([ 0.69250234])],
     [array([ 0.74723534])],
     [array([ 0.97986566])],
     [array([ 0.29259995])],
     [array([ 0.99236641])],
     [array([ 0.71278731])],
     [array([ 0.35969599])],
     [array([ 0.59542162])],
     [array([ 0.59152785])],
     [array([ 0.82865854])],
     [array([ 0.76892669])],
     [array([ 0.34923577])],
     [array([ 0.91711097])],
     [array([ 0.98198375])],
     [array([ 0.7848219])],
     [array([ 0.02799105])],
     [array([ 0.25206304])],
     [array([ 0.74694013])],
     [array([ 0.11732605])],
     [array([ 0.44407311])],
     [array([ 0.73148272])],
     [array([ 0.78264184])],
     [array([ 0.10281649])],
     [array([ 0.09395487])],
     [array([ 0.2240726])],
     [array([ 0.90725932])],
     [array([ 0.88667271])],
     [array([ 0.62010937])],
     [array([ 0.01315484])],
     [array([ 0.11457745])],
     [array([ 0.28324336])],
     [array([ 0.95749388])],
     [array([ 0.38876498])],
     [array([ 0.70697787])],
     [array([ 0.46620068])],
     [array([ 0.91631984])],
     [array([ 0.60463584])],
     [array([ 0.92343241])],
     [array([ 0.93296852])],
     [array([ 0.10223261])],
     [array([ 0.68126481])],
     [array([ 0.31811097])],
     [array([ 0.21097892])],
     [array([ 0.37641042])],
     [array([ 0.35853419])],
     [array([ 0.75950819])],
     [array([ 0.5652297])],
     [array([ 0.59834142])],
     [array([ 0.92919963])],
     [array([ 0.40294897])],
     [array([ 0.58645812])],
     [array([ 0.83904667])],
     [array([ 0.49711271])],
     [array([ 0.12844924])],
     [array([ 0.87369034])],
     [array([ 0.56344377])],
     [array([ 0.97396627])],
     [array([ 0.1865599])],
     [array([ 0.32600236])],
     [array([ 0.58337505])],
     [array([ 0.1920366])],
     [array([ 0.08790685])],
     [array([ 0.75633358])],
     [array([ 0.50001033])],
     [array([ 0.25243786])],
     [array([ 0.4609118])],
     [array([ 0.93012157])],
     [array([ 0.75430448])],
     [array([ 0.68825438])],
     [array([ 0.26224523])],
     [array([ 0.54104349])],
     [array([ 0.5009332])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([  7.97631495e-02,   6.84902443e-01,   8.56792240e-01,
             6.99119690e-01,   8.28379314e-01,   8.97560724e-02,
             4.32829034e-01,   4.22378255e-01,   3.33431697e-04,
             3.07439522e-02,   1.14386490e-01,   5.23512683e-01,
             7.45270305e-01,   8.71341075e-02,   8.63940577e-01,
             5.06618404e-01,   9.75979939e-01,   2.03490155e-01,
             8.12188582e-01,   8.95675415e-01,   8.84769651e-01,
             1.98275066e-01,   4.80862599e-01,   9.74479890e-01,
             9.34290339e-01,   3.30448568e-01,   3.75903950e-01,
             6.93586805e-01,   6.92502335e-01,   7.47235337e-01,
             9.79865662e-01,   2.92599950e-01,   9.92366413e-01,
             7.12787307e-01,   3.59695987e-01,   5.95421616e-01,
             5.91527849e-01,   8.28658536e-01,   7.68926688e-01,
             3.49235766e-01,   9.17110968e-01,   9.81983754e-01,
             7.84821895e-01,   2.79910475e-02,   2.52063039e-01,
             7.46940125e-01,   1.17326048e-01,   4.44073113e-01,
             7.31482724e-01,   7.82641840e-01,   1.02816487e-01,
             9.39548732e-02,   2.24072600e-01,   9.07259321e-01,
             8.86672706e-01,   6.20109373e-01,   1.31548355e-02,
             1.14577450e-01,   2.83243359e-01,   9.57493876e-01,
             3.88764980e-01,   7.06977867e-01,   4.66200681e-01,
             9.16319840e-01,   6.04635838e-01,   9.23432405e-01,
             9.32968516e-01,   1.02232611e-01,   6.81264814e-01,
             3.18110971e-01,   2.10978915e-01,   3.76410421e-01,
             3.58534194e-01,   7.59508192e-01,   5.65229700e-01,
             5.98341416e-01,   9.29199627e-01,   4.02948967e-01,
             5.86458116e-01,   8.39046667e-01,   4.97112711e-01,
             1.28449243e-01,   8.73690337e-01,   5.63443768e-01,
             9.73966270e-01,   1.86559902e-01,   3.26002357e-01,
             5.83375051e-01,   1.92036605e-01,   8.79068486e-02,
             7.56333576e-01,   5.00010334e-01,   2.52437856e-01,
             4.60911796e-01,   9.30121566e-01,   7.54304481e-01,
             6.88254382e-01,   2.62245228e-01,   5.41043485e-01,
             5.00933203e-01])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.39821104,  0.02757525,  0.94934887,  0.76612721,  0.58684524,
               0.80550683,  0.61958489,  0.21971483,  0.19124484,  0.59931664,
               0.4717684 ,  0.84901983,  0.65790649,  0.1323851 ,  0.31762975,
               0.59413608,  0.62028591,  0.14544054,  0.71742711,  0.25931336,
               0.24023469,  0.85310783,  0.40540681,  0.77113151,  0.91901244,
               0.44486875,  0.60087093,  0.87291621,  0.79412676,  0.91165007,
               0.01464031,  0.42669888,  0.46855868,  0.76642185,  0.46453872,
               0.1657483 ,  0.45453603,  0.31482502,  0.3501564 ,  0.76264206,
               0.31363519,  0.37668626,  0.86919221,  0.10649381,  0.8085673 ,
               0.24979542,  0.46171161,  0.70656197,  0.85254797,  0.1144554 ,
               0.17904528,  0.00334051,  0.21284962,  0.18655103,  0.25085746,
               0.71014855,  0.44635388,  0.92211071,  0.88624363,  0.19935355,
               0.27123193,  0.44307075,  0.64173535,  0.11796537,  0.96479982,
               0.76964191,  0.08887577,  0.08377484,  0.32620955,  0.04102341,
               0.51074642,  0.62940493,  0.01032467,  0.49524388,  0.25251015,
               0.28548586,  0.01128706,  0.63367864,  0.83343008,  0.46776355,
               0.35643201,  0.23197462,  0.87680094,  0.3692109 ,  0.23535293,
               0.35299421,  0.4803643 ,  0.63211662,  0.42745215,  0.80853981,
               0.81635333,  0.17943918,  0.10653442,  0.89637404,  0.70619599,
               0.65262706,  0.42162612,  0.42814109,  0.98413939,  0.27289724])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.80424438,  0.75181487,  0.68062038,  0.64177061,  0.45769294,
               0.78020324,  0.2327617 ,  0.76078962,  0.7640375 ,  0.35551419,
               0.81863544,  0.71334618,  0.4481353 ,  0.6592081 ,  0.25879024,
               0.16504384,  0.81409806,  0.61543481,  0.45350225,  0.19703329,
               0.70857955,  0.85241401,  0.44732823,  0.24184176,  0.63108302,
               0.81504437,  0.63074616,  0.57512479,  0.20804134,  0.64848002,
               0.10510528,  0.75049481,  0.16691012,  0.26269703,  0.19180698,
               0.03176165,  0.34901015,  0.51804647,  0.14291969,  0.82804146,
               0.88023443,  0.88712909,  0.99850808,  0.17586715,  0.58676152,
               0.72461602,  0.93316058,  0.37663654,  0.60832084,  0.07199096,
               0.30347999,  0.53087343,  0.28618321,  0.6281604 ,  0.54300627,
               0.04588811,  0.58474477,  0.40132954,  0.17968128,  0.73566056,
               0.16205171,  0.106148  ,  0.0702916 ,  0.40784709,  0.33282061,
               0.33454482,  0.42493786,  0.29953541,  0.3160193 ,  0.82433408,
               0.0571369 ,  0.25235336,  0.28501624,  0.20353991,  0.58356724,
               0.36038529,  0.59714402,  0.30210573,  0.76913702,  0.69809252,
               0.16269837,  0.60775762,  0.42265053,  0.88781477,  0.53713355,
               0.75695861,  0.61650836,  0.97020478,  0.26729395,  0.76643971,
               0.09661467,  0.04818257,  0.15659076,  0.95251191,  0.51881573,
               0.69742067,  0.16044501,  0.67981229,  0.70222586,  0.23316296])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.18330067,  0.73916779,  0.202845  ,  0.19768642,  0.02267661,
               0.01170351,  0.66180809,  0.25715349,  0.18092642,  0.0414778 ,
               0.06883428,  0.43895781,  0.95078576,  0.3944706 ,  0.77076631,
               0.97120327,  0.81594632,  0.67339204,  0.89894841,  0.20632947,
               0.19750363,  0.75952545,  0.64553564,  0.2533722 ,  0.49157842,
               0.66680191,  0.41858297,  0.1186503 ,  0.93831034,  0.97466494,
               0.10241024,  0.49670697,  0.06575527,  0.71522832,  0.76868878,
               0.84053721,  0.2341093 ,  0.44271274,  0.8626321 ,  0.79729012,
               0.85419809,  0.72398391,  0.0576621 ,  0.10973361,  0.15440434,
               0.8578304 ,  0.59956357,  0.76934073,  0.0448746 ,  0.16246827,
               0.26413641,  0.39549342,  0.19900445,  0.98585784,  0.26202101,
               0.73817192,  0.84792539,  0.58424441,  0.34648757,  0.66841482,
               0.01016678,  0.2203053 ,  0.61214654,  0.60543827,  0.60143565,
               0.04183892,  0.63580254,  0.73890638,  0.35333666,  0.30188582,
               0.10414176,  0.59430413,  0.35813894,  0.92445136,  0.0076026 ,
               0.22868292,  0.56227872,  0.59141945,  0.83346976,  0.12966831,
               0.50152101,  0.12992134,  0.3968191 ,  0.55014621,  0.86273422,
               0.27715923,  0.52714002,  0.90270833,  0.31432051,  0.10242371,
               0.0357105 ,  0.53095803,  0.99862153,  0.65646765,  0.57722462,
               0.27629369,  0.01509283,  0.71497303,  0.71590156,  0.49042748])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([  5.04869168e-01,   7.56349181e-01,   5.17073984e-02,
                7.92466588e-01,   7.00356390e-01,   6.80067534e-01,
                1.92516628e-01,   9.89509295e-01,   7.22242122e-01,
                2.53078840e-01,   9.13920853e-01,   6.06712067e-01,
                6.00880638e-01,   3.57473469e-02,   8.23324267e-01,
                7.81524898e-02,   4.40669654e-01,   6.46951099e-01,
                7.49874291e-01,   2.87835680e-01,   1.31341344e-01,
                2.68998810e-01,   5.59307381e-01,   9.13544965e-01,
                4.61638703e-02,   5.35905411e-01,   5.49181004e-01,
                8.35223178e-01,   4.13971610e-01,   4.73327791e-01,
                4.59507706e-01,   3.18119332e-01,   2.02095357e-01,
                8.11240344e-01,   1.93435186e-01,   8.45498006e-01,
                2.55210091e-01,   7.01048989e-01,   4.13852749e-01,
                4.85797463e-01,   2.08603704e-01,   4.37677500e-01,
                4.96800875e-01,   6.54356809e-01,   6.67832566e-01,
                6.68848170e-01,   4.20307535e-01,   9.76094049e-02,
                3.61850995e-01,   1.84019745e-01,   9.32050114e-01,
                9.19968703e-01,   7.86170389e-01,   9.46294391e-01,
                7.44363407e-01,   4.10030401e-01,   8.70550800e-01,
                9.02011633e-01,   1.98537207e-01,   3.75273621e-01,
                3.15725689e-01,   8.17980541e-01,   3.56329831e-01,
                8.00525231e-01,   1.77140763e-01,   8.90689927e-01,
                7.09389595e-01,   5.76523431e-01,   7.93250127e-01,
                8.52972876e-04,   9.91050808e-01,   3.34930203e-01,
                3.00053497e-01,   8.64012434e-01,   9.88600945e-01,
                4.58125950e-01,   9.20076466e-01,   2.34738268e-01,
                7.51377172e-01,   1.55867782e-01,   2.11969018e-02,
                1.51209264e-01,   4.38828255e-01,   1.58205563e-01,
                9.28694183e-01,   6.55328951e-01,   8.62954979e-01,
                2.81602670e-01,   7.29365738e-01,   4.62359452e-01,
                2.02980487e-01,   4.86364800e-01,   1.72257158e-01,
                3.29462325e-01,   7.72039816e-01,   3.80226166e-01,
                7.41982853e-01,   8.55641322e-01,   3.65400604e-01,
                1.91889064e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.39821104,  0.02757525,  0.94934887,  0.76612721,  0.58684524,
               0.80550683,  0.61958489,  0.21971483,  0.19124484,  0.59931664,
               0.4717684 ,  0.84901983,  0.65790649,  0.1323851 ,  0.31762975,
               0.59413608,  0.62028591,  0.14544054,  0.71742711,  0.25931336,
               0.24023469,  0.85310783,  0.40540681,  0.77113151,  0.91901244,
               0.44486875,  0.60087093,  0.87291621,  0.79412676,  0.91165007,
               0.01464031,  0.42669888,  0.46855868,  0.76642185,  0.46453872,
               0.1657483 ,  0.45453603,  0.31482502,  0.3501564 ,  0.76264206,
               0.31363519,  0.37668626,  0.86919221,  0.10649381,  0.8085673 ,
               0.24979542,  0.46171161,  0.70656197,  0.85254797,  0.1144554 ,
               0.17904528,  0.00334051,  0.21284962,  0.18655103,  0.25085746,
               0.71014855,  0.44635388,  0.92211071,  0.88624363,  0.19935355,
               0.27123193,  0.44307075,  0.64173535,  0.11796537,  0.96479982,
               0.76964191,  0.08887577,  0.08377484,  0.32620955,  0.04102341,
               0.51074642,  0.62940493,  0.01032467,  0.49524388,  0.25251015,
               0.28548586,  0.01128706,  0.63367864,  0.83343008,  0.46776355,
               0.35643201,  0.23197462,  0.87680094,  0.3692109 ,  0.23535293,
               0.35299421,  0.4803643 ,  0.63211662,  0.42745215,  0.80853981,
               0.81635333,  0.17943918,  0.10653442,  0.89637404,  0.70619599,
               0.65262706,  0.42162612,  0.42814109,  0.98413939,  0.27289724])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.80424438,  0.75181487,  0.68062038,  0.64177061,  0.45769294,
               0.78020324,  0.2327617 ,  0.76078962,  0.7640375 ,  0.35551419,
               0.81863544,  0.71334618,  0.4481353 ,  0.6592081 ,  0.25879024,
               0.16504384,  0.81409806,  0.61543481,  0.45350225,  0.19703329,
               0.70857955,  0.85241401,  0.44732823,  0.24184176,  0.63108302,
               0.81504437,  0.63074616,  0.57512479,  0.20804134,  0.64848002,
               0.10510528,  0.75049481,  0.16691012,  0.26269703,  0.19180698,
               0.03176165,  0.34901015,  0.51804647,  0.14291969,  0.82804146,
               0.88023443,  0.88712909,  0.99850808,  0.17586715,  0.58676152,
               0.72461602,  0.93316058,  0.37663654,  0.60832084,  0.07199096,
               0.30347999,  0.53087343,  0.28618321,  0.6281604 ,  0.54300627,
               0.04588811,  0.58474477,  0.40132954,  0.17968128,  0.73566056,
               0.16205171,  0.106148  ,  0.0702916 ,  0.40784709,  0.33282061,
               0.33454482,  0.42493786,  0.29953541,  0.3160193 ,  0.82433408,
               0.0571369 ,  0.25235336,  0.28501624,  0.20353991,  0.58356724,
               0.36038529,  0.59714402,  0.30210573,  0.76913702,  0.69809252,
               0.16269837,  0.60775762,  0.42265053,  0.88781477,  0.53713355,
               0.75695861,  0.61650836,  0.97020478,  0.26729395,  0.76643971,
               0.09661467,  0.04818257,  0.15659076,  0.95251191,  0.51881573,
               0.69742067,  0.16044501,  0.67981229,  0.70222586,  0.23316296])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.18330067,  0.73916779,  0.202845  ,  0.19768642,  0.02267661,
               0.01170351,  0.66180809,  0.25715349,  0.18092642,  0.0414778 ,
               0.06883428,  0.43895781,  0.95078576,  0.3944706 ,  0.77076631,
               0.97120327,  0.81594632,  0.67339204,  0.89894841,  0.20632947,
               0.19750363,  0.75952545,  0.64553564,  0.2533722 ,  0.49157842,
               0.66680191,  0.41858297,  0.1186503 ,  0.93831034,  0.97466494,
               0.10241024,  0.49670697,  0.06575527,  0.71522832,  0.76868878,
               0.84053721,  0.2341093 ,  0.44271274,  0.8626321 ,  0.79729012,
               0.85419809,  0.72398391,  0.0576621 ,  0.10973361,  0.15440434,
               0.8578304 ,  0.59956357,  0.76934073,  0.0448746 ,  0.16246827,
               0.26413641,  0.39549342,  0.19900445,  0.98585784,  0.26202101,
               0.73817192,  0.84792539,  0.58424441,  0.34648757,  0.66841482,
               0.01016678,  0.2203053 ,  0.61214654,  0.60543827,  0.60143565,
               0.04183892,  0.63580254,  0.73890638,  0.35333666,  0.30188582,
               0.10414176,  0.59430413,  0.35813894,  0.92445136,  0.0076026 ,
               0.22868292,  0.56227872,  0.59141945,  0.83346976,  0.12966831,
               0.50152101,  0.12992134,  0.3968191 ,  0.55014621,  0.86273422,
               0.27715923,  0.52714002,  0.90270833,  0.31432051,  0.10242371,
               0.0357105 ,  0.53095803,  0.99862153,  0.65646765,  0.57722462,
               0.27629369,  0.01509283,  0.71497303,  0.71590156,  0.49042748])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.81503023,  0.95436548,  0.54797728,  0.22069919,  0.94683235,
               0.40537954,  0.52206155,  0.30476895,  0.37638214,  0.92567268,
               0.79036208,  0.89095143,  0.23591623,  0.39188642,  0.66962961,
               0.73919244,  0.39853959,  0.40359556,  0.88782228,  0.41213493,
               0.79424818,  0.31929101,  0.20218798,  0.65953148,  0.25085098,
               0.02651876,  0.58615678,  0.3023716 ,  0.20848634,  0.58645627,
               0.02337419,  0.70372789,  0.44310487,  0.54645604,  0.39588773,
               0.45382921,  0.20515775,  0.18363075,  0.59348045,  0.12672358,
               0.42079164,  0.16824034,  0.88458709,  0.16588208,  0.20228063,
               0.84958996,  0.32905802,  0.24981659,  0.98785522,  0.29209792,
               0.1425927 ,  0.65086425,  0.42985817,  0.05362093,  0.67603211,
               0.10259265,  0.79736184,  0.49379628,  0.10826071,  0.47356097,
               0.08956048,  0.12212111,  0.42232743,  0.35306466,  0.62579335,
               0.45018192,  0.38396413,  0.40388803,  0.4162449 ,  0.90685127,
               0.66940898,  0.5051137 ,  0.16857891,  0.51759561,  0.70111203,
               0.5447486 ,  0.62527285,  0.61139988,  0.46275151,  0.8693572 ,
               0.05674253,  0.94861629,  0.03583858,  0.41404785,  0.78983616,
               0.59402325,  0.98265883,  0.32409191,  0.91522497,  0.15761449,
               0.42145867,  0.24771884,  0.21152878,  0.8193292 ,  0.37664894,
               0.90357564,  0.83576345,  0.2830275 ,  0.78548318,  0.46087634])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  7.97631495e-02,   6.84902443e-01,   8.56792240e-01,
                6.99119690e-01,   8.28379314e-01,   8.97560724e-02,
                4.32829034e-01,   4.22378255e-01,   3.33431697e-04,
                3.07439522e-02,   1.14386490e-01,   5.23512683e-01,
                7.45270305e-01,   8.71341075e-02,   8.63940577e-01,
                5.06618404e-01,   9.75979939e-01,   2.03490155e-01,
                8.12188582e-01,   8.95675415e-01,   8.84769651e-01,
                1.98275066e-01,   4.80862599e-01,   9.74479890e-01,
                9.34290339e-01,   3.30448568e-01,   3.75903950e-01,
                6.93586805e-01,   6.92502335e-01,   7.47235337e-01,
                9.79865662e-01,   2.92599950e-01,   9.92366413e-01,
                7.12787307e-01,   3.59695987e-01,   5.95421616e-01,
                5.91527849e-01,   8.28658536e-01,   7.68926688e-01,
                3.49235766e-01,   9.17110968e-01,   9.81983754e-01,
                7.84821895e-01,   2.79910475e-02,   2.52063039e-01,
                7.46940125e-01,   1.17326048e-01,   4.44073113e-01,
                7.31482724e-01,   7.82641840e-01,   1.02816487e-01,
                9.39548732e-02,   2.24072600e-01,   9.07259321e-01,
                8.86672706e-01,   6.20109373e-01,   1.31548355e-02,
                1.14577450e-01,   2.83243359e-01,   9.57493876e-01,
                3.88764980e-01,   7.06977867e-01,   4.66200681e-01,
                9.16319840e-01,   6.04635838e-01,   9.23432405e-01,
                9.32968516e-01,   1.02232611e-01,   6.81264814e-01,
                3.18110971e-01,   2.10978915e-01,   3.76410421e-01,
                3.58534194e-01,   7.59508192e-01,   5.65229700e-01,
                5.98341416e-01,   9.29199627e-01,   4.02948967e-01,
                5.86458116e-01,   8.39046667e-01,   4.97112711e-01,
                1.28449243e-01,   8.73690337e-01,   5.63443768e-01,
                9.73966270e-01,   1.86559902e-01,   3.26002357e-01,
                5.83375051e-01,   1.92036605e-01,   8.79068486e-02,
                7.56333576e-01,   5.00010334e-01,   2.52437856e-01,
                4.60911796e-01,   9.30121566e-01,   7.54304481e-01,
                6.88254382e-01,   2.62245228e-01,   5.41043485e-01,
                5.00933203e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.19575043,  0.40175308,  0.79213364,  0.02766813,  0.32280876,
               0.48448859,  0.99461836,  0.36013782,  0.01532601,  0.06342595,
               0.89798907,  0.59843481,  0.98839041,  0.83097969,  0.09212044,
               0.76250243,  0.06940731,  0.78141522,  0.33811424,  0.7666847 ,
               0.17955694,  0.72202424,  0.82002277,  0.3916296 ,  0.12001805,
               0.42454212,  0.57369237,  0.90775643,  0.27516005,  0.54644866,
               0.07405788,  0.39881374,  0.1806066 ,  0.31414156,  0.57711219,
               0.85511012,  0.8787359 ,  0.15274823,  0.58606781,  0.62771017,
               0.92029317,  0.43998148,  0.41678761,  0.36283641,  0.57933943,
               0.1440673 ,  0.2854189 ,  0.91910931,  0.86586226,  0.9597252 ,
               0.22335952,  0.73287731,  0.06576717,  0.7844886 ,  0.34744118,
               0.3160129 ,  0.09986192,  0.68280458,  0.23379467,  0.26878125,
               0.657736  ,  0.45805568,  0.70999171,  0.904499  ,  0.37601422,
               0.86186021,  0.62519835,  0.06032984,  0.5692358 ,  0.77329685,
               0.97263339,  0.02515279,  0.96804986,  0.99103354,  0.00643826,
               0.6493239 ,  0.64891989,  0.64644129,  0.20900155,  0.54436083,
               0.9021285 ,  0.8064853 ,  0.50247934,  0.05388898,  0.49151789,
               0.17390135,  0.24630106,  0.77775946,  0.33583445,  0.53991167,
               0.80578752,  0.80439448,  0.1866882 ,  0.79095145,  0.65711806,
               0.24614413,  0.15270407,  0.52399267,  0.72906593,  0.62425508])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([  3.98967219e-01,   2.08496199e-01,   8.43170592e-01,
                3.94936014e-01,   3.87265012e-01,   6.24895414e-01,
                7.80974961e-01,   9.68371242e-01,   5.88265185e-02,
                6.63306623e-01,   4.58993247e-01,   7.18384013e-01,
                1.74972138e-04,   9.37012137e-01,   1.70304386e-01,
                4.80896466e-01,   3.86753762e-01,   8.77875570e-01,
                3.67263532e-01,   8.86031361e-01,   7.50891187e-01,
                7.07179195e-02,   4.87020355e-01,   4.59101269e-01,
                4.46410625e-01,   6.69721919e-01,   6.23806612e-01,
                4.17087153e-01,   3.03087506e-01,   8.44987833e-01,
                9.17685493e-02,   7.27465161e-01,   8.99828294e-01,
                6.82056917e-01,   9.91906749e-01,   5.41070250e-01,
                6.70761889e-01,   1.68850849e-01,   9.70523554e-01,
                2.75863863e-01,   1.19878316e-01,   7.17475403e-01,
                3.70360281e-01,   7.65049177e-01,   6.59954939e-01,
                2.17424036e-03,   9.67504032e-01,   4.75641630e-01,
                1.37289782e-01,   7.59567484e-01,   2.87111393e-01,
                6.26453458e-01,   3.91052016e-01,   3.25330417e-01,
                8.75390484e-01,   1.06591898e-01,   2.63059341e-02,
                1.85481792e-01,   1.20458097e-01,   6.95503750e-01,
                6.01873590e-01,   3.22120364e-01,   6.65875616e-01,
                4.07271791e-01,   1.22766711e-01,   8.48718499e-01,
                9.03291785e-01,   1.95573302e-01,   6.98609564e-01,
                3.96033790e-01,   6.39039011e-01,   5.36291112e-01,
                5.69087202e-03,   1.15396731e-01,   9.54437176e-01,
                9.87420165e-01,   5.71357499e-01,   4.64530996e-01,
                5.47189793e-02,   1.73886856e-01,   8.82772706e-01,
                8.71486391e-01,   6.95585735e-01,   7.79747563e-01,
                4.62895058e-01,   3.24106604e-01,   4.26303619e-01,
                3.12355792e-01,   4.20236846e-01,   1.32127184e-01,
                2.22352324e-01,   4.24737765e-01,   6.89342357e-01,
                4.41923072e-01,   5.58325364e-01,   1.00229889e-01,
                4.89145173e-02,   4.87970877e-01,   8.63474477e-01,
                6.60257387e-02])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.21809893,  0.38374197,  0.06113185,  0.19820573,  0.23738869,
               0.11019075,  0.22744283,  0.03036623,  0.90486587,  0.8055584 ,
               0.12946116,  0.88925561,  0.87554173,  0.27078011,  0.83352148,
               0.4984412 ,  0.37055685,  0.5264305 ,  0.59216169,  0.53924479,
               0.23744895,  0.98556785,  0.28916347,  0.34641475,  0.78297764,
               0.41181332,  0.70288448,  0.76976911,  0.78596566,  0.79601967,
               0.69017792,  0.10421937,  0.17734801,  0.45081819,  0.78164444,
               0.81900547,  0.05665591,  0.22466986,  0.48258083,  0.18795665,
               0.98473234,  0.659706  ,  0.16287385,  0.13979178,  0.85654049,
               0.87867902,  0.70040605,  0.70848393,  0.14960539,  0.08771834,
               0.1037502 ,  0.61256117,  0.88097676,  0.39492846,  0.9467589 ,
               0.23682623,  0.99134181,  0.04796344,  0.45185369,  0.05994384,
               0.30843287,  0.98523775,  0.3319141 ,  0.45332358,  0.798179  ,
               0.37164873,  0.10199235,  0.79333631,  0.70852131,  0.49971999,
               0.06250691,  0.24542171,  0.2433456 ,  0.76596048,  0.95422963,
               0.51001356,  0.7618868 ,  0.02665084,  0.87948604,  0.68237787,
               0.44894821,  0.02649914,  0.04860918,  0.99956728,  0.12965995,
               0.3481669 ,  0.72278835,  0.50948007,  0.68861755,  0.72161647,
               0.43686124,  0.86909885,  0.98942073,  0.25582007,  0.84116803,
               0.12389253,  0.47154322,  0.30117895,  0.34193677,  0.24882572])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  7.97631495e-02,   6.84902443e-01,   8.56792240e-01,
                6.99119690e-01,   8.28379314e-01,   8.97560724e-02,
                4.32829034e-01,   4.22378255e-01,   3.33431697e-04,
                3.07439522e-02,   1.14386490e-01,   5.23512683e-01,
                7.45270305e-01,   8.71341075e-02,   8.63940577e-01,
                5.06618404e-01,   9.75979939e-01,   2.03490155e-01,
                8.12188582e-01,   8.95675415e-01,   8.84769651e-01,
                1.98275066e-01,   4.80862599e-01,   9.74479890e-01,
                9.34290339e-01,   3.30448568e-01,   3.75903950e-01,
                6.93586805e-01,   6.92502335e-01,   7.47235337e-01,
                9.79865662e-01,   2.92599950e-01,   9.92366413e-01,
                7.12787307e-01,   3.59695987e-01,   5.95421616e-01,
                5.91527849e-01,   8.28658536e-01,   7.68926688e-01,
                3.49235766e-01,   9.17110968e-01,   9.81983754e-01,
                7.84821895e-01,   2.79910475e-02,   2.52063039e-01,
                7.46940125e-01,   1.17326048e-01,   4.44073113e-01,
                7.31482724e-01,   7.82641840e-01,   1.02816487e-01,
                9.39548732e-02,   2.24072600e-01,   9.07259321e-01,
                8.86672706e-01,   6.20109373e-01,   1.31548355e-02,
                1.14577450e-01,   2.83243359e-01,   9.57493876e-01,
                3.88764980e-01,   7.06977867e-01,   4.66200681e-01,
                9.16319840e-01,   6.04635838e-01,   9.23432405e-01,
                9.32968516e-01,   1.02232611e-01,   6.81264814e-01,
                3.18110971e-01,   2.10978915e-01,   3.76410421e-01,
                3.58534194e-01,   7.59508192e-01,   5.65229700e-01,
                5.98341416e-01,   9.29199627e-01,   4.02948967e-01,
                5.86458116e-01,   8.39046667e-01,   4.97112711e-01,
                1.28449243e-01,   8.73690337e-01,   5.63443768e-01,
                9.73966270e-01,   1.86559902e-01,   3.26002357e-01,
                5.83375051e-01,   1.92036605e-01,   8.79068486e-02,
                7.56333576e-01,   5.00010334e-01,   2.52437856e-01,
                4.60911796e-01,   9.30121566e-01,   7.54304481e-01,
                6.88254382e-01,   2.62245228e-01,   5.41043485e-01,
                5.00933203e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.19575043,  0.40175308,  0.79213364,  0.02766813,  0.32280876,
               0.48448859,  0.99461836,  0.36013782,  0.01532601,  0.06342595,
               0.89798907,  0.59843481,  0.98839041,  0.83097969,  0.09212044,
               0.76250243,  0.06940731,  0.78141522,  0.33811424,  0.7666847 ,
               0.17955694,  0.72202424,  0.82002277,  0.3916296 ,  0.12001805,
               0.42454212,  0.57369237,  0.90775643,  0.27516005,  0.54644866,
               0.07405788,  0.39881374,  0.1806066 ,  0.31414156,  0.57711219,
               0.85511012,  0.8787359 ,  0.15274823,  0.58606781,  0.62771017,
               0.92029317,  0.43998148,  0.41678761,  0.36283641,  0.57933943,
               0.1440673 ,  0.2854189 ,  0.91910931,  0.86586226,  0.9597252 ,
               0.22335952,  0.73287731,  0.06576717,  0.7844886 ,  0.34744118,
               0.3160129 ,  0.09986192,  0.68280458,  0.23379467,  0.26878125,
               0.657736  ,  0.45805568,  0.70999171,  0.904499  ,  0.37601422,
               0.86186021,  0.62519835,  0.06032984,  0.5692358 ,  0.77329685,
               0.97263339,  0.02515279,  0.96804986,  0.99103354,  0.00643826,
               0.6493239 ,  0.64891989,  0.64644129,  0.20900155,  0.54436083,
               0.9021285 ,  0.8064853 ,  0.50247934,  0.05388898,  0.49151789,
               0.17390135,  0.24630106,  0.77775946,  0.33583445,  0.53991167,
               0.80578752,  0.80439448,  0.1866882 ,  0.79095145,  0.65711806,
               0.24614413,  0.15270407,  0.52399267,  0.72906593,  0.62425508])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([  3.98967219e-01,   2.08496199e-01,   8.43170592e-01,
                3.94936014e-01,   3.87265012e-01,   6.24895414e-01,
                7.80974961e-01,   9.68371242e-01,   5.88265185e-02,
                6.63306623e-01,   4.58993247e-01,   7.18384013e-01,
                1.74972138e-04,   9.37012137e-01,   1.70304386e-01,
                4.80896466e-01,   3.86753762e-01,   8.77875570e-01,
                3.67263532e-01,   8.86031361e-01,   7.50891187e-01,
                7.07179195e-02,   4.87020355e-01,   4.59101269e-01,
                4.46410625e-01,   6.69721919e-01,   6.23806612e-01,
                4.17087153e-01,   3.03087506e-01,   8.44987833e-01,
                9.17685493e-02,   7.27465161e-01,   8.99828294e-01,
                6.82056917e-01,   9.91906749e-01,   5.41070250e-01,
                6.70761889e-01,   1.68850849e-01,   9.70523554e-01,
                2.75863863e-01,   1.19878316e-01,   7.17475403e-01,
                3.70360281e-01,   7.65049177e-01,   6.59954939e-01,
                2.17424036e-03,   9.67504032e-01,   4.75641630e-01,
                1.37289782e-01,   7.59567484e-01,   2.87111393e-01,
                6.26453458e-01,   3.91052016e-01,   3.25330417e-01,
                8.75390484e-01,   1.06591898e-01,   2.63059341e-02,
                1.85481792e-01,   1.20458097e-01,   6.95503750e-01,
                6.01873590e-01,   3.22120364e-01,   6.65875616e-01,
                4.07271791e-01,   1.22766711e-01,   8.48718499e-01,
                9.03291785e-01,   1.95573302e-01,   6.98609564e-01,
                3.96033790e-01,   6.39039011e-01,   5.36291112e-01,
                5.69087202e-03,   1.15396731e-01,   9.54437176e-01,
                9.87420165e-01,   5.71357499e-01,   4.64530996e-01,
                5.47189793e-02,   1.73886856e-01,   8.82772706e-01,
                8.71486391e-01,   6.95585735e-01,   7.79747563e-01,
                4.62895058e-01,   3.24106604e-01,   4.26303619e-01,
                3.12355792e-01,   4.20236846e-01,   1.32127184e-01,
                2.22352324e-01,   4.24737765e-01,   6.89342357e-01,
                4.41923072e-01,   5.58325364e-01,   1.00229889e-01,
                4.89145173e-02,   4.87970877e-01,   8.63474477e-01,
                6.60257387e-02])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.24100731,  0.83827235,  0.42606503,  0.55566965,  0.2924887 ,
               0.3824268 ,  0.70063695,  0.49171139,  0.81978686,  0.05242506,
               0.20654464,  0.52442098,  0.87192205,  0.08148884,  0.46871831,
               0.72018858,  0.56281979,  0.41614634,  0.83816939,  0.52853569,
               0.30882628,  0.83474161,  0.51323772,  0.29918142,  0.17453858,
               0.22391508,  0.37741554,  0.68443851,  0.1808028 ,  0.98872318,
               0.9750421 ,  0.75672438,  0.22630283,  0.99574086,  0.35427077,
               0.03750188,  0.2777787 ,  0.43802955,  0.1015875 ,  0.59478237,
               0.0262812 ,  0.03670688,  0.76406255,  0.32063386,  0.71837328,
               0.66257415,  0.68366168,  0.2520669 ,  0.94745718,  0.22159099,
               0.35316732,  0.76874038,  0.09965226,  0.74984066,  0.78070296,
               0.36023777,  0.77427249,  0.40352977,  0.05894432,  0.24158761,
               0.12282444,  0.92373351,  0.8991306 ,  0.78127161,  0.14748077,
               0.24021867,  0.35282663,  0.86229041,  0.11654215,  0.1937707 ,
               0.82216062,  0.10945391,  0.84735797,  0.50592281,  0.66015172,
               0.67921597,  0.19502819,  0.10245984,  0.48531588,  0.08977701,
               0.03881177,  0.53195526,  0.96938757,  0.54807279,  0.1005263 ,
               0.01281214,  0.33658132,  0.41931298,  0.24610289,  0.74410579,
               0.5238566 ,  0.87612292,  0.5081426 ,  0.48609326,  0.76500982,
               0.61047844,  0.21318057,  0.06194217,  0.09996392,  0.71754186])}]]


