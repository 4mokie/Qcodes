
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='5ba2bb83-5f31-4c12-9c7e-a00e4697c1e0'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='37cab49f-d2f6-4272-9674-21aff0edde10'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.15223445899078],
     [0.237484710197378],
     [0.64345579293068],
     [0.259537521815768],
     [0.858651107406662],
     [0.676422228172399],
     [0.0260163020630149],
     [0.49224266981388],
     [0.486949171604436],
     [0.810951513239167],
     [0.985200646294595],
     [0.49601345374639],
     [0.852216674581391],
     [0.015176459599584],
     [0.29153243164557],
     [0.917759993970891],
     [0.118215981627838],
     [0.13966200984824],
     [0.727733966762441],
     [0.582460427835697],
     [0.479723796591339],
     [0.349718077378047],
     [0.77690693698619],
     [0.0671311045109124],
     [0.0442322781525334],
     [0.0785152444888982],
     [0.61523389184705],
     [0.757865892687579],
     [0.217449244678371],
     [0.393116891495388],
     [0.611289900647241],
     [0.166490715166199],
     [0.795539812508472],
     [0.608600508826336],
     [0.0708945748384316],
     [0.853878430836751],
     [0.816496598558025],
     [0.767741959718439],
     [0.172507203741961],
     [0.302578145397346],
     [0.320413507071963],
     [0.299250204142404],
     [0.378993113189327],
     [0.988917101369875],
     [0.97163857912211],
     [0.898421601468032],
     [0.722428024672314],
     [0.726706238009909],
     [0.807662254640834],
     [0.921393112711097],
     [0.443648175076299],
     [0.235316170596156],
     [0.828691037181408],
     [0.888265660460657],
     [0.355285328714612],
     [0.249054626546892],
     [0.923782432075741],
     [0.317923608407409],
     [0.0468041576155213],
     [0.342362834392491],
     [0.330646607879154],
     [0.117621961296334],
     [0.314777791647165],
     [0.756156619181291],
     [0.543789570054322],
     [0.516923865124746],
     [0.242096846532831],
     [0.2410107350838],
     [0.840783422948417],
     [0.906497472911731],
     [0.957252040686713],
     [0.196694509754251],
     [0.253918029716639],
     [0.128114024376755],
     [0.184754613696453],
     [0.447475228882096],
     [0.446005473699348],
     [0.540496355565904],
     [0.107394197517285],
     [0.90977358909123],
     [0.488413742026501],
     [0.766848437289002],
     [0.645335546722475],
     [0.933838357079289],
     [0.854543826624306],
     [0.541101472761922],
     [0.00793884460307126],
     [0.142348065479425],
     [0.329701178599738],
     [0.397913388541774],
     [0.143179166522954],
     [0.914620813227685],
     [0.496936335401624],
     [0.109520383095118],
     [0.714267832387342],
     [0.726846076137532],
     [0.234060075276559],
     [0.322667398322586],
     [0.153998813549745],
     [0.837189299511912]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.33814001])],
     [array([ 0.87786894])],
     [array([ 0.00359313])],
     [array([ 0.03549977])],
     [array([ 0.71241599])],
     [array([ 0.82188535])],
     [array([ 0.59065718])],
     [array([ 0.3252222])],
     [array([ 0.03752377])],
     [array([ 0.12809013])],
     [array([ 0.26702448])],
     [array([ 0.39495112])],
     [array([ 0.65410423])],
     [array([ 0.26765308])],
     [array([ 0.1112832])],
     [array([ 0.52432721])],
     [array([ 0.64281731])],
     [array([ 0.11263733])],
     [array([ 0.15912639])],
     [array([ 0.11010489])],
     [array([ 0.71672341])],
     [array([ 0.03453651])],
     [array([ 0.10042155])],
     [array([ 0.13675506])],
     [array([ 0.65136489])],
     [array([ 0.83874183])],
     [array([ 0.01902377])],
     [array([ 0.98419286])],
     [array([ 0.24013379])],
     [array([ 0.7542769])],
     [array([ 0.3840558])],
     [array([ 0.11111316])],
     [array([ 0.37199942])],
     [array([ 0.794703])],
     [array([ 0.88677949])],
     [array([ 0.80955906])],
     [array([ 0.56537135])],
     [array([ 0.23000564])],
     [array([ 0.70646924])],
     [array([ 0.0139864])],
     [array([ 0.2211623])],
     [array([ 0.16357058])],
     [array([ 0.18141112])],
     [array([ 0.2520768])],
     [array([ 0.69263794])],
     [array([ 0.6395158])],
     [array([ 0.26486369])],
     [array([ 0.56540358])],
     [array([ 0.93775359])],
     [array([ 0.87195347])],
     [array([ 0.67112496])],
     [array([ 0.56641908])],
     [array([ 0.21595435])],
     [array([ 0.7759039])],
     [array([ 0.46266076])],
     [array([ 0.10916886])],
     [array([ 0.05158613])],
     [array([ 0.2195776])],
     [array([ 0.1965351])],
     [array([ 0.98567308])],
     [array([ 0.98064274])],
     [array([ 0.71332719])],
     [array([ 0.22046677])],
     [array([ 0.16696702])],
     [array([ 0.13644888])],
     [array([ 0.48432289])],
     [array([ 0.06815651])],
     [array([ 0.96285718])],
     [array([ 0.80767752])],
     [array([ 0.0342335])],
     [array([ 0.55376455])],
     [array([ 0.66506589])],
     [array([ 0.02364337])],
     [array([ 0.35414114])],
     [array([ 0.94868466])],
     [array([ 0.71428609])],
     [array([ 0.5564543])],
     [array([ 0.04958019])],
     [array([ 0.31635929])],
     [array([ 0.2455428])],
     [array([ 0.55883827])],
     [array([ 0.72870268])],
     [array([ 0.46172841])],
     [array([ 0.7118544])],
     [array([ 0.5835039])],
     [array([ 0.56286625])],
     [array([ 0.29519885])],
     [array([ 0.62100385])],
     [array([ 0.77867719])],
     [array([ 0.55284424])],
     [array([ 0.81397649])],
     [array([ 0.00701123])],
     [array([ 0.30022787])],
     [array([ 0.97946335])],
     [array([ 0.85283003])],
     [array([ 0.16312858])],
     [array([ 0.4707374])],
     [array([ 0.7441721])],
     [array([ 0.40067178])],
     [array([ 0.92124528])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.33814001,  0.87786894,  0.00359313,  0.03549977,  0.71241599,
            0.82188535,  0.59065718,  0.3252222 ,  0.03752377,  0.12809013,
            0.26702448,  0.39495112,  0.65410423,  0.26765308,  0.1112832 ,
            0.52432721,  0.64281731,  0.11263733,  0.15912639,  0.11010489,
            0.71672341,  0.03453651,  0.10042155,  0.13675506,  0.65136489,
            0.83874183,  0.01902377,  0.98419286,  0.24013379,  0.7542769 ,
            0.3840558 ,  0.11111316,  0.37199942,  0.794703  ,  0.88677949,
            0.80955906,  0.56537135,  0.23000564,  0.70646924,  0.0139864 ,
            0.2211623 ,  0.16357058,  0.18141112,  0.2520768 ,  0.69263794,
            0.6395158 ,  0.26486369,  0.56540358,  0.93775359,  0.87195347,
            0.67112496,  0.56641908,  0.21595435,  0.7759039 ,  0.46266076,
            0.10916886,  0.05158613,  0.2195776 ,  0.1965351 ,  0.98567308,
            0.98064274,  0.71332719,  0.22046677,  0.16696702,  0.13644888,
            0.48432289,  0.06815651,  0.96285718,  0.80767752,  0.0342335 ,
            0.55376455,  0.66506589,  0.02364337,  0.35414114,  0.94868466,
            0.71428609,  0.5564543 ,  0.04958019,  0.31635929,  0.2455428 ,
            0.55883827,  0.72870268,  0.46172841,  0.7118544 ,  0.5835039 ,
            0.56286625,  0.29519885,  0.62100385,  0.77867719,  0.55284424,
            0.81397649,  0.00701123,  0.30022787,  0.97946335,  0.85283003,
            0.16312858,  0.4707374 ,  0.7441721 ,  0.40067178,  0.92124528])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.15223446,  0.23748471,  0.64345579,  0.25953752,  0.85865111,
               0.67642223,  0.0260163 ,  0.49224267,  0.48694917,  0.81095151,
               0.98520065,  0.49601345,  0.85221667,  0.01517646,  0.29153243,
               0.91775999,  0.11821598,  0.13966201,  0.72773397,  0.58246043,
               0.4797238 ,  0.34971808,  0.77690694,  0.0671311 ,  0.04423228,
               0.07851524,  0.61523389,  0.75786589,  0.21744924,  0.39311689,
               0.6112899 ,  0.16649072,  0.79553981,  0.60860051,  0.07089457,
               0.85387843,  0.8164966 ,  0.76774196,  0.1725072 ,  0.30257815,
               0.32041351,  0.2992502 ,  0.37899311,  0.9889171 ,  0.97163858,
               0.8984216 ,  0.72242802,  0.72670624,  0.80766225,  0.92139311,
               0.44364818,  0.23531617,  0.82869104,  0.88826566,  0.35528533,
               0.24905463,  0.92378243,  0.31792361,  0.04680416,  0.34236283,
               0.33064661,  0.11762196,  0.31477779,  0.75615662,  0.54378957,
               0.51692387,  0.24209685,  0.24101074,  0.84078342,  0.90649747,
               0.95725204,  0.19669451,  0.25391803,  0.12811402,  0.18475461,
               0.44747523,  0.44600547,  0.54049636,  0.1073942 ,  0.90977359,
               0.48841374,  0.76684844,  0.64533555,  0.93383836,  0.85454383,
               0.54110147,  0.00793884,  0.14234807,  0.32970118,  0.39791339,
               0.14317917,  0.91462081,  0.49693634,  0.10952038,  0.71426783,
               0.72684608,  0.23406008,  0.3226674 ,  0.15399881,  0.8371893 ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.38938408,  0.30772711,  0.17623283,  0.72797143,  0.58234185,
               0.69121148,  0.94799748,  0.29702844,  0.54779012,  0.26761573,
               0.4652251 ,  0.76958591,  0.56644406,  0.94285294,  0.04778367,
               0.38929714,  0.20594718,  0.58200973,  0.71595704,  0.14051136,
               0.8802938 ,  0.64527004,  0.79554904,  0.51034254,  0.05400305,
               0.8767149 ,  0.13457613,  0.61578131,  0.88469756,  0.17688766,
               0.50741173,  0.57226912,  0.72748059,  0.08480656,  0.51456681,
               0.04185792,  0.98930947,  0.87308589,  0.74682857,  0.13283537,
               0.23536232,  0.41363755,  0.980951  ,  0.47137975,  0.30835213,
               0.47704093,  0.21490546,  0.58290293,  0.70444586,  0.98569695,
               0.79609305,  0.03295041,  0.59512085,  0.8483374 ,  0.41869983,
               0.42234936,  0.30586778,  0.82338787,  0.34552727,  0.16125466,
               0.20881946,  0.73765589,  0.78191885,  0.54020898,  0.61402832,
               0.96856797,  0.52309623,  0.0896158 ,  0.73065218,  0.90647546,
               0.2371905 ,  0.79047721,  0.67018787,  0.61109325,  0.77038066,
               0.18686139,  0.0901558 ,  0.51566504,  0.52360817,  0.67080175,
               0.43524025,  0.72190189,  0.53048837,  0.78618911,  0.25450212,
               0.94381837,  0.18544438,  0.14922492,  0.10236096,  0.46934953,
               0.22241426,  0.95470674,  0.72143413,  0.80015148,  0.69685947,
               0.15383779,  0.72250353,  0.16663369,  0.56419622,  0.73646294])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.31324211,  0.44825429,  0.47073427,  0.61977993,  0.63932995,
               0.81239718,  0.76078219,  0.8261151 ,  0.55866816,  0.25460534,
               0.41186754,  0.3452849 ,  0.90676152,  0.97210969,  0.36807872,
               0.53142057,  0.25009035,  0.55114618,  0.69719562,  0.29976944,
               0.5162498 ,  0.09525255,  0.68203813,  0.85112189,  0.52030762,
               0.16822662,  0.90229141,  0.49408039,  0.70992863,  0.71065726,
               0.52196486,  0.64261358,  0.30173483,  0.05328816,  0.57101597,
               0.89046084,  0.78687238,  0.09671732,  0.63858444,  0.6672737 ,
               0.04552133,  0.1691542 ,  0.70276351,  0.37143416,  0.92491547,
               0.08313479,  0.88792398,  0.5413145 ,  0.87959885,  0.8482897 ,
               0.25361905,  0.98187294,  0.99977029,  0.42086903,  0.27168508,
               0.78238971,  0.83229882,  0.22043999,  0.77165228,  0.35359265,
               0.80861764,  0.29441977,  0.95633532,  0.44501759,  0.45491615,
               0.25717288,  0.82564631,  0.43787471,  0.73634386,  0.56683987,
               0.39512991,  0.99700849,  0.05908981,  0.17065517,  0.19557164,
               0.09079409,  0.12354652,  0.13129374,  0.51306401,  0.20146603,
               0.32003274,  0.09366313,  0.49352371,  0.7797326 ,  0.23741878,
               0.03641888,  0.69170877,  0.25980358,  0.99545628,  0.13071572,
               0.51705477,  0.10385935,  0.17773679,  0.98906064,  0.6225086 ,
               0.97666102,  0.02432659,  0.18713593,  0.65316817,  0.09728211])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.76831643,  0.17957843,  0.36366741,  0.40165453,  0.86191561,
               0.7637263 ,  0.33118169,  0.1037779 ,  0.49431153,  0.75193948,
               0.02815197,  0.05476091,  0.63076288,  0.70663496,  0.60352398,
               0.58568507,  0.30298712,  0.75971619,  0.72359695,  0.88671205,
               0.15038571,  0.8174053 ,  0.620331  ,  0.84041023,  0.28438127,
               0.44303714,  0.51514167,  0.29704793,  0.77716377,  0.16956633,
               0.82161219,  0.68804276,  0.23799241,  0.370801  ,  0.81810438,
               0.37479873,  0.89475512,  0.82623247,  0.14643183,  0.30097189,
               0.07803275,  0.00660854,  0.04505067,  0.14312425,  0.80689184,
               0.4461428 ,  0.42830808,  0.48565926,  0.25049452,  0.25973798,
               0.30738636,  0.47070984,  0.28755998,  0.63795029,  0.30528472,
               0.72465131,  0.92934537,  0.64453903,  0.04304305,  0.40596052,
               0.65931934,  0.94424879,  0.57525194,  0.16455753,  0.19611391,
               0.67278264,  0.7347302 ,  0.61645855,  0.35972981,  0.32465191,
               0.13302417,  0.73617255,  0.12090617,  0.83949482,  0.45193822,
               0.21736201,  0.24777015,  0.86643796,  0.2857544 ,  0.22121613,
               0.54038086,  0.36040495,  0.98272625,  0.65332821,  0.0213344 ,
               0.15430473,  0.2404918 ,  0.12184791,  0.95774238,  0.42436907,
               0.55668704,  0.55266806,  0.81507815,  0.79608416,  0.7357235 ,
               0.68753203,  0.6117767 ,  0.46318097,  0.26366391,  0.63914826])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.15223446,  0.23748471,  0.64345579,  0.25953752,  0.85865111,
               0.67642223,  0.0260163 ,  0.49224267,  0.48694917,  0.81095151,
               0.98520065,  0.49601345,  0.85221667,  0.01517646,  0.29153243,
               0.91775999,  0.11821598,  0.13966201,  0.72773397,  0.58246043,
               0.4797238 ,  0.34971808,  0.77690694,  0.0671311 ,  0.04423228,
               0.07851524,  0.61523389,  0.75786589,  0.21744924,  0.39311689,
               0.6112899 ,  0.16649072,  0.79553981,  0.60860051,  0.07089457,
               0.85387843,  0.8164966 ,  0.76774196,  0.1725072 ,  0.30257815,
               0.32041351,  0.2992502 ,  0.37899311,  0.9889171 ,  0.97163858,
               0.8984216 ,  0.72242802,  0.72670624,  0.80766225,  0.92139311,
               0.44364818,  0.23531617,  0.82869104,  0.88826566,  0.35528533,
               0.24905463,  0.92378243,  0.31792361,  0.04680416,  0.34236283,
               0.33064661,  0.11762196,  0.31477779,  0.75615662,  0.54378957,
               0.51692387,  0.24209685,  0.24101074,  0.84078342,  0.90649747,
               0.95725204,  0.19669451,  0.25391803,  0.12811402,  0.18475461,
               0.44747523,  0.44600547,  0.54049636,  0.1073942 ,  0.90977359,
               0.48841374,  0.76684844,  0.64533555,  0.93383836,  0.85454383,
               0.54110147,  0.00793884,  0.14234807,  0.32970118,  0.39791339,
               0.14317917,  0.91462081,  0.49693634,  0.10952038,  0.71426783,
               0.72684608,  0.23406008,  0.3226674 ,  0.15399881,  0.8371893 ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.38938408,  0.30772711,  0.17623283,  0.72797143,  0.58234185,
               0.69121148,  0.94799748,  0.29702844,  0.54779012,  0.26761573,
               0.4652251 ,  0.76958591,  0.56644406,  0.94285294,  0.04778367,
               0.38929714,  0.20594718,  0.58200973,  0.71595704,  0.14051136,
               0.8802938 ,  0.64527004,  0.79554904,  0.51034254,  0.05400305,
               0.8767149 ,  0.13457613,  0.61578131,  0.88469756,  0.17688766,
               0.50741173,  0.57226912,  0.72748059,  0.08480656,  0.51456681,
               0.04185792,  0.98930947,  0.87308589,  0.74682857,  0.13283537,
               0.23536232,  0.41363755,  0.980951  ,  0.47137975,  0.30835213,
               0.47704093,  0.21490546,  0.58290293,  0.70444586,  0.98569695,
               0.79609305,  0.03295041,  0.59512085,  0.8483374 ,  0.41869983,
               0.42234936,  0.30586778,  0.82338787,  0.34552727,  0.16125466,
               0.20881946,  0.73765589,  0.78191885,  0.54020898,  0.61402832,
               0.96856797,  0.52309623,  0.0896158 ,  0.73065218,  0.90647546,
               0.2371905 ,  0.79047721,  0.67018787,  0.61109325,  0.77038066,
               0.18686139,  0.0901558 ,  0.51566504,  0.52360817,  0.67080175,
               0.43524025,  0.72190189,  0.53048837,  0.78618911,  0.25450212,
               0.94381837,  0.18544438,  0.14922492,  0.10236096,  0.46934953,
               0.22241426,  0.95470674,  0.72143413,  0.80015148,  0.69685947,
               0.15383779,  0.72250353,  0.16663369,  0.56419622,  0.73646294])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.31324211,  0.44825429,  0.47073427,  0.61977993,  0.63932995,
               0.81239718,  0.76078219,  0.8261151 ,  0.55866816,  0.25460534,
               0.41186754,  0.3452849 ,  0.90676152,  0.97210969,  0.36807872,
               0.53142057,  0.25009035,  0.55114618,  0.69719562,  0.29976944,
               0.5162498 ,  0.09525255,  0.68203813,  0.85112189,  0.52030762,
               0.16822662,  0.90229141,  0.49408039,  0.70992863,  0.71065726,
               0.52196486,  0.64261358,  0.30173483,  0.05328816,  0.57101597,
               0.89046084,  0.78687238,  0.09671732,  0.63858444,  0.6672737 ,
               0.04552133,  0.1691542 ,  0.70276351,  0.37143416,  0.92491547,
               0.08313479,  0.88792398,  0.5413145 ,  0.87959885,  0.8482897 ,
               0.25361905,  0.98187294,  0.99977029,  0.42086903,  0.27168508,
               0.78238971,  0.83229882,  0.22043999,  0.77165228,  0.35359265,
               0.80861764,  0.29441977,  0.95633532,  0.44501759,  0.45491615,
               0.25717288,  0.82564631,  0.43787471,  0.73634386,  0.56683987,
               0.39512991,  0.99700849,  0.05908981,  0.17065517,  0.19557164,
               0.09079409,  0.12354652,  0.13129374,  0.51306401,  0.20146603,
               0.32003274,  0.09366313,  0.49352371,  0.7797326 ,  0.23741878,
               0.03641888,  0.69170877,  0.25980358,  0.99545628,  0.13071572,
               0.51705477,  0.10385935,  0.17773679,  0.98906064,  0.6225086 ,
               0.97666102,  0.02432659,  0.18713593,  0.65316817,  0.09728211])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.60950476,  0.13092579,  0.17810835,  0.99899404,  0.94223185,
               0.96596423,  0.45748207,  0.91744023,  0.40876699,  0.92752635,
               0.98335936,  0.57526093,  0.32984767,  0.49036618,  0.45506074,
               0.34048281,  0.49022666,  0.3064473 ,  0.7059217 ,  0.79102735,
               0.23945562,  0.08363514,  0.27142069,  0.32059349,  0.18785178,
               0.6226646 ,  0.49607087,  0.78717012,  0.71194156,  0.02774832,
               0.18365505,  0.44753807,  0.94613677,  0.40053366,  0.03227167,
               0.49821908,  0.31814237,  0.40365719,  0.25132289,  0.75341724,
               0.61230806,  0.76141863,  0.29822751,  0.30012104,  0.83938629,
               0.73256006,  0.86644656,  0.45961251,  0.19734671,  0.80568583,
               0.36747211,  0.51183707,  0.73673989,  0.67729882,  0.43301703,
               0.12851073,  0.15238621,  0.19508688,  0.03874342,  0.04478035,
               0.9127495 ,  0.74439105,  0.5132686 ,  0.80924655,  0.15850658,
               0.97475641,  0.44556133,  0.95374128,  0.28404882,  0.00268119,
               0.53318694,  0.83803787,  0.86238258,  0.9114832 ,  0.50637973,
               0.64761878,  0.33763239,  0.11080256,  0.09264083,  0.62517463,
               0.85813526,  0.90852404,  0.60469177,  0.32139531,  0.86968868,
               0.07922187,  0.73111708,  0.03877892,  0.53077977,  0.4890096 ,
               0.8336603 ,  0.16569769,  0.87535414,  0.76223151,  0.19965536,
               0.7194172 ,  0.30953918,  0.77417746,  0.00230806,  0.49198558])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.33814001,  0.87786894,  0.00359313,  0.03549977,  0.71241599,
               0.82188535,  0.59065718,  0.3252222 ,  0.03752377,  0.12809013,
               0.26702448,  0.39495112,  0.65410423,  0.26765308,  0.1112832 ,
               0.52432721,  0.64281731,  0.11263733,  0.15912639,  0.11010489,
               0.71672341,  0.03453651,  0.10042155,  0.13675506,  0.65136489,
               0.83874183,  0.01902377,  0.98419286,  0.24013379,  0.7542769 ,
               0.3840558 ,  0.11111316,  0.37199942,  0.794703  ,  0.88677949,
               0.80955906,  0.56537135,  0.23000564,  0.70646924,  0.0139864 ,
               0.2211623 ,  0.16357058,  0.18141112,  0.2520768 ,  0.69263794,
               0.6395158 ,  0.26486369,  0.56540358,  0.93775359,  0.87195347,
               0.67112496,  0.56641908,  0.21595435,  0.7759039 ,  0.46266076,
               0.10916886,  0.05158613,  0.2195776 ,  0.1965351 ,  0.98567308,
               0.98064274,  0.71332719,  0.22046677,  0.16696702,  0.13644888,
               0.48432289,  0.06815651,  0.96285718,  0.80767752,  0.0342335 ,
               0.55376455,  0.66506589,  0.02364337,  0.35414114,  0.94868466,
               0.71428609,  0.5564543 ,  0.04958019,  0.31635929,  0.2455428 ,
               0.55883827,  0.72870268,  0.46172841,  0.7118544 ,  0.5835039 ,
               0.56286625,  0.29519885,  0.62100385,  0.77867719,  0.55284424,
               0.81397649,  0.00701123,  0.30022787,  0.97946335,  0.85283003,
               0.16312858,  0.4707374 ,  0.7441721 ,  0.40067178,  0.92124528])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.13931395,  0.0591439 ,  0.42538934,  0.97934655,  0.29628748,
               0.20579781,  0.18461295,  0.75863965,  0.29721281,  0.94219791,
               0.12675333,  0.43895662,  0.3533813 ,  0.86326013,  0.44668966,
               0.88566783,  0.56912167,  0.80607969,  0.66836657,  0.59732627,
               0.66461539,  0.03547279,  0.51604262,  0.8745296 ,  0.67515919,
               0.25311341,  0.06245064,  0.27246792,  0.27703659,  0.41779112,
               0.19951224,  0.64524878,  0.90309755,  0.04680461,  0.67810007,
               0.17047224,  0.65109522,  0.66235654,  0.56946919,  0.9252659 ,
               0.67495931,  0.09542769,  0.89764753,  0.62237597,  0.86695953,
               0.86200772,  0.11664593,  0.45814269,  0.58706866,  0.19475359,
               0.96683301,  0.79537776,  0.54575756,  0.18888287,  0.23770354,
               0.28862135,  0.95587588,  0.34946193,  0.92834231,  0.56551573,
               0.0035629 ,  0.80531641,  0.70246481,  0.33585887,  0.47964785,
               0.85176563,  0.18817065,  0.1725824 ,  0.39384662,  0.38710983,
               0.1497915 ,  0.49076181,  0.87978876,  0.42841742,  0.53145779,
               0.54958287,  0.51666615,  0.10501882,  0.19426973,  0.56349842,
               0.68837242,  0.02115292,  0.62586987,  0.38150321,  0.24478241,
               0.94645015,  0.40937639,  0.22569431,  0.41278084,  0.62128892,
               0.95944105,  0.90677472,  0.55946442,  0.97755396,  0.71631911,
               0.79445073,  0.82951918,  0.25198858,  0.83656704,  0.09685768])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.78420527,  0.44581081,  0.0562235 ,  0.35042369,  0.71622794,
               0.23202719,  0.41204248,  0.31383585,  0.35618243,  0.33799652,
               0.85701328,  0.36692978,  0.85206146,  0.72342774,  0.97489349,
               0.96938753,  0.0116563 ,  0.89220546,  0.60872041,  0.9829363 ,
               0.24567847,  0.91327602,  0.04841342,  0.16987072,  0.20316576,
               0.06024552,  0.35102492,  0.52658199,  0.67822383,  0.9202409 ,
               0.70618322,  0.14644503,  0.12334758,  0.79660496,  0.11030541,
               0.99528184,  0.11086108,  0.63738855,  0.63921015,  0.88146806,
               0.48140108,  0.32579978,  0.10894107,  0.39286422,  0.76650534,
               0.48955128,  0.08092866,  0.6106602 ,  0.58758748,  0.12117776,
               0.63745032,  0.36943075,  0.20765548,  0.94283996,  0.45086947,
               0.17710318,  0.7488076 ,  0.02691555,  0.78625653,  0.42029886,
               0.51564796,  0.02200317,  0.04457583,  0.61011225,  0.87585587,
               0.18423992,  0.6039898 ,  0.8170188 ,  0.53687239,  0.85009807,
               0.62664206,  0.92970025,  0.63615105,  0.80185483,  0.16316466,
               0.80284793,  0.32827162,  0.34429526,  0.31176183,  0.39109828,
               0.77240813,  0.56953979,  0.25114719,  0.72031221,  0.71071308,
               0.86887153,  0.76360318,  0.01682704,  0.74832935,  0.34005679,
               0.8137121 ,  0.15465186,  0.46597929,  0.56714646,  0.46793418,
               0.32446407,  0.40405043,  0.26823986,  0.7646038 ,  0.26459828])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.9930175 ,  0.9729006 ,  0.21884032,  0.05106407,  0.00363965,
               0.53019685,  0.91806746,  0.38225749,  0.3607302 ,  0.4281643 ,
               0.21464127,  0.3898871 ,  0.21945696,  0.5822566 ,  0.20184327,
               0.33866055,  0.30406648,  0.05832714,  0.30619986,  0.66990274,
               0.36513933,  0.72697245,  0.65980465,  0.80116113,  0.68709995,
               0.35102234,  0.08171236,  0.7719856 ,  0.66312069,  0.13797408,
               0.71709551,  0.48102495,  0.99165764,  0.10247391,  0.66783479,
               0.15519896,  0.19261487,  0.0789869 ,  0.52149654,  0.11476943,
               0.75707688,  0.20296782,  0.80106737,  0.34618842,  0.19456416,
               0.65577286,  0.08386658,  0.03481534,  0.56192399,  0.98581209,
               0.14516466,  0.82859333,  0.77306483,  0.25719765,  0.12258305,
               0.73961828,  0.44032149,  0.46501073,  0.28560178,  0.13764873,
               0.37588707,  0.51407035,  0.38611747,  0.75062856,  0.11105898,
               0.62632896,  0.3073356 ,  0.86646471,  0.84342134,  0.50389607,
               0.25569537,  0.44383371,  0.3652161 ,  0.11094835,  0.37021489,
               0.36795147,  0.45176218,  0.83906929,  0.90861795,  0.4519388 ,
               0.00554437,  0.81993102,  0.03506563,  0.52803332,  0.25546451,
               0.01900223,  0.18325345,  0.16440345,  0.45227869,  0.55210518,
               0.9649023 ,  0.58483281,  0.11850338,  0.21623714,  0.88499016,
               0.6572521 ,  0.30125004,  0.79698215,  0.19003588,  0.37820993])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.33814001,  0.87786894,  0.00359313,  0.03549977,  0.71241599,
               0.82188535,  0.59065718,  0.3252222 ,  0.03752377,  0.12809013,
               0.26702448,  0.39495112,  0.65410423,  0.26765308,  0.1112832 ,
               0.52432721,  0.64281731,  0.11263733,  0.15912639,  0.11010489,
               0.71672341,  0.03453651,  0.10042155,  0.13675506,  0.65136489,
               0.83874183,  0.01902377,  0.98419286,  0.24013379,  0.7542769 ,
               0.3840558 ,  0.11111316,  0.37199942,  0.794703  ,  0.88677949,
               0.80955906,  0.56537135,  0.23000564,  0.70646924,  0.0139864 ,
               0.2211623 ,  0.16357058,  0.18141112,  0.2520768 ,  0.69263794,
               0.6395158 ,  0.26486369,  0.56540358,  0.93775359,  0.87195347,
               0.67112496,  0.56641908,  0.21595435,  0.7759039 ,  0.46266076,
               0.10916886,  0.05158613,  0.2195776 ,  0.1965351 ,  0.98567308,
               0.98064274,  0.71332719,  0.22046677,  0.16696702,  0.13644888,
               0.48432289,  0.06815651,  0.96285718,  0.80767752,  0.0342335 ,
               0.55376455,  0.66506589,  0.02364337,  0.35414114,  0.94868466,
               0.71428609,  0.5564543 ,  0.04958019,  0.31635929,  0.2455428 ,
               0.55883827,  0.72870268,  0.46172841,  0.7118544 ,  0.5835039 ,
               0.56286625,  0.29519885,  0.62100385,  0.77867719,  0.55284424,
               0.81397649,  0.00701123,  0.30022787,  0.97946335,  0.85283003,
               0.16312858,  0.4707374 ,  0.7441721 ,  0.40067178,  0.92124528])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.13931395,  0.0591439 ,  0.42538934,  0.97934655,  0.29628748,
               0.20579781,  0.18461295,  0.75863965,  0.29721281,  0.94219791,
               0.12675333,  0.43895662,  0.3533813 ,  0.86326013,  0.44668966,
               0.88566783,  0.56912167,  0.80607969,  0.66836657,  0.59732627,
               0.66461539,  0.03547279,  0.51604262,  0.8745296 ,  0.67515919,
               0.25311341,  0.06245064,  0.27246792,  0.27703659,  0.41779112,
               0.19951224,  0.64524878,  0.90309755,  0.04680461,  0.67810007,
               0.17047224,  0.65109522,  0.66235654,  0.56946919,  0.9252659 ,
               0.67495931,  0.09542769,  0.89764753,  0.62237597,  0.86695953,
               0.86200772,  0.11664593,  0.45814269,  0.58706866,  0.19475359,
               0.96683301,  0.79537776,  0.54575756,  0.18888287,  0.23770354,
               0.28862135,  0.95587588,  0.34946193,  0.92834231,  0.56551573,
               0.0035629 ,  0.80531641,  0.70246481,  0.33585887,  0.47964785,
               0.85176563,  0.18817065,  0.1725824 ,  0.39384662,  0.38710983,
               0.1497915 ,  0.49076181,  0.87978876,  0.42841742,  0.53145779,
               0.54958287,  0.51666615,  0.10501882,  0.19426973,  0.56349842,
               0.68837242,  0.02115292,  0.62586987,  0.38150321,  0.24478241,
               0.94645015,  0.40937639,  0.22569431,  0.41278084,  0.62128892,
               0.95944105,  0.90677472,  0.55946442,  0.97755396,  0.71631911,
               0.79445073,  0.82951918,  0.25198858,  0.83656704,  0.09685768])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.78420527,  0.44581081,  0.0562235 ,  0.35042369,  0.71622794,
               0.23202719,  0.41204248,  0.31383585,  0.35618243,  0.33799652,
               0.85701328,  0.36692978,  0.85206146,  0.72342774,  0.97489349,
               0.96938753,  0.0116563 ,  0.89220546,  0.60872041,  0.9829363 ,
               0.24567847,  0.91327602,  0.04841342,  0.16987072,  0.20316576,
               0.06024552,  0.35102492,  0.52658199,  0.67822383,  0.9202409 ,
               0.70618322,  0.14644503,  0.12334758,  0.79660496,  0.11030541,
               0.99528184,  0.11086108,  0.63738855,  0.63921015,  0.88146806,
               0.48140108,  0.32579978,  0.10894107,  0.39286422,  0.76650534,
               0.48955128,  0.08092866,  0.6106602 ,  0.58758748,  0.12117776,
               0.63745032,  0.36943075,  0.20765548,  0.94283996,  0.45086947,
               0.17710318,  0.7488076 ,  0.02691555,  0.78625653,  0.42029886,
               0.51564796,  0.02200317,  0.04457583,  0.61011225,  0.87585587,
               0.18423992,  0.6039898 ,  0.8170188 ,  0.53687239,  0.85009807,
               0.62664206,  0.92970025,  0.63615105,  0.80185483,  0.16316466,
               0.80284793,  0.32827162,  0.34429526,  0.31176183,  0.39109828,
               0.77240813,  0.56953979,  0.25114719,  0.72031221,  0.71071308,
               0.86887153,  0.76360318,  0.01682704,  0.74832935,  0.34005679,
               0.8137121 ,  0.15465186,  0.46597929,  0.56714646,  0.46793418,
               0.32446407,  0.40405043,  0.26823986,  0.7646038 ,  0.26459828])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.44308957,  0.74059882,  0.48822069,  0.35310877,  0.5592803 ,
               0.45618087,  0.50850076,  0.73490597,  0.56680207,  0.55919845,
               0.31348936,  0.63032491,  0.69127873,  0.94254156,  0.31662165,
               0.41831418,  0.1492609 ,  0.05025835,  0.13369617,  0.51454865,
               0.43501244,  0.75665977,  0.88499826,  0.29807559,  0.95558242,
               0.26230602,  0.73370138,  0.70796077,  0.39832513,  0.79540263,
               0.09960997,  0.0710867 ,  0.45137595,  0.5142311 ,  0.68744352,
               0.59389686,  0.72944837,  0.38185943,  0.8215089 ,  0.80538693,
               0.62391468,  0.20738586,  0.86942204,  0.13543804,  0.81608871,
               0.24880601,  0.59897626,  0.5862344 ,  0.6155991 ,  0.92166343,
               0.83950339,  0.35818029,  0.6176498 ,  0.43065876,  0.10923572,
               0.42063586,  0.41186962,  0.1898562 ,  0.74838921,  0.2910104 ,
               0.03659638,  0.57252768,  0.08089766,  0.47169373,  0.38492075,
               0.22504833,  0.48316466,  0.49938239,  0.75491521,  0.95311912,
               0.2106491 ,  0.69151931,  0.52335336,  0.68677342,  0.8409624 ,
               0.25406284,  0.53718022,  0.60913688,  0.4391764 ,  0.18369269,
               0.77291196,  0.57497017,  0.52894868,  0.30876285,  0.59966489,
               0.49374077,  0.63236769,  0.66524445,  0.11622364,  0.7769147 ,
               0.14568464,  0.9210372 ,  0.17154879,  0.17990478,  0.36617265,
               0.83271934,  0.6487682 ,  0.30011376,  0.91802358,  0.86379247])}]]


