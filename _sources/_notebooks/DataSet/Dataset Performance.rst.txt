
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='28f4d991-6c5b-447f-a730-d7daf6b44891'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='c427e9ab-ddb5-4a40-bf42-66e673ffe77d'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.668591378087553],
     [0.74369933310171],
     [0.112709079016579],
     [0.402989410430164],
     [0.480673652344713],
     [0.867759376731116],
     [0.0468815095854687],
     [0.750102885333217],
     [0.818536345556385],
     [0.877248063912333],
     [0.199366125114866],
     [0.86191005389087],
     [0.27154662292136],
     [0.169766391778132],
     [0.224475041028291],
     [0.86900475587117],
     [0.984224829819149],
     [0.916533217586811],
     [0.217279411009121],
     [0.994117250455603],
     [0.754430229426897],
     [0.662897820275655],
     [0.594287396797953],
     [0.591055825911718],
     [0.147370377020267],
     [0.922779696084699],
     [0.694528108022692],
     [0.0192384426726004],
     [0.143595967548609],
     [0.693431810665542],
     [0.823621172636918],
     [0.898904890566595],
     [0.38860923606277],
     [0.154441718235753],
     [0.957041654579149],
     [0.531266476739257],
     [0.666174445088898],
     [0.886086128602606],
     [0.916498779084933],
     [0.58289009185308],
     [0.332700768734525],
     [0.932025119953424],
     [0.17583268355728],
     [0.506522509035913],
     [0.465849629667746],
     [0.291943022083225],
     [0.844169824646002],
     [0.387516632949229],
     [0.877246996392077],
     [0.277761928277742],
     [0.408060075951648],
     [0.539881367474122],
     [0.298265966572938],
     [0.85036567694375],
     [0.0696043596076237],
     [0.528409000145884],
     [0.247776694117985],
     [0.382019556331455],
     [0.950425101264929],
     [0.492815937117488],
     [0.265033964775295],
     [0.264933255819127],
     [0.231461774702405],
     [0.200775428461394],
     [0.04022278390151],
     [0.286825672682696],
     [0.888912297513577],
     [0.364901937011729],
     [0.710523123556801],
     [0.617193270986327],
     [0.0256011843587827],
     [0.938897983591161],
     [0.97945181509739],
     [0.0550507310037736],
     [0.987319776768439],
     [0.0848248964634268],
     [0.332552438841769],
     [0.846893528415134],
     [0.833035390058307],
     [0.726172407097588],
     [0.978300201362706],
     [0.798824268476399],
     [0.619388174527362],
     [0.791773738657165],
     [0.695773565722037],
     [0.0658560949208775],
     [0.82967870116565],
     [0.659012975115584],
     [0.904112159785204],
     [0.644025797013215],
     [0.865724629623012],
     [0.365478613838527],
     [0.483859943654184],
     [0.269199379897522],
     [0.96981809605404],
     [0.999079943948585],
     [0.985383506102199],
     [0.81965802806816],
     [0.0123899816588681],
     [0.493586554005088]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.35183365])],
     [array([0.92750552])],
     [array([0.36481941])],
     [array([0.08403362])],
     [array([0.2261729])],
     [array([0.22543264])],
     [array([0.03628278])],
     [array([0.52916575])],
     [array([0.15094416])],
     [array([0.24578925])],
     [array([0.04401412])],
     [array([0.81536537])],
     [array([0.97457024])],
     [array([0.60280201])],
     [array([0.07138935])],
     [array([0.93288759])],
     [array([0.35070964])],
     [array([0.81415704])],
     [array([0.80168526])],
     [array([0.40747331])],
     [array([0.64612675])],
     [array([0.79326485])],
     [array([0.48448446])],
     [array([0.19541529])],
     [array([0.94361618])],
     [array([0.53809447])],
     [array([0.70328044])],
     [array([0.13142042])],
     [array([0.82901767])],
     [array([0.18560032])],
     [array([0.73542315])],
     [array([0.21329886])],
     [array([0.60882803])],
     [array([0.65342603])],
     [array([0.53751363])],
     [array([0.66944634])],
     [array([0.77256643])],
     [array([0.67092546])],
     [array([0.84509305])],
     [array([0.38272071])],
     [array([0.66234237])],
     [array([0.6086048])],
     [array([0.31730951])],
     [array([0.99723836])],
     [array([0.39155503])],
     [array([0.60360028])],
     [array([0.35144145])],
     [array([0.63696607])],
     [array([0.23813515])],
     [array([0.40794677])],
     [array([0.13500317])],
     [array([0.0526603])],
     [array([0.34865144])],
     [array([0.58454329])],
     [array([0.14251536])],
     [array([0.35216852])],
     [array([0.20604026])],
     [array([0.67548186])],
     [array([0.47367111])],
     [array([0.75048043])],
     [array([0.81398792])],
     [array([0.35825715])],
     [array([0.0419357])],
     [array([0.79629366])],
     [array([0.62188163])],
     [array([0.76716328])],
     [array([0.17776785])],
     [array([0.30101463])],
     [array([0.27332921])],
     [array([0.51174556])],
     [array([0.12198545])],
     [array([0.65950995])],
     [array([0.1789006])],
     [array([0.71854165])],
     [array([0.81319849])],
     [array([0.65344144])],
     [array([0.85057013])],
     [array([0.22634862])],
     [array([0.69599495])],
     [array([0.56900741])],
     [array([0.87628992])],
     [array([0.63877895])],
     [array([0.88417201])],
     [array([0.83438698])],
     [array([0.87784214])],
     [array([0.24405524])],
     [array([0.15203442])],
     [array([0.8207974])],
     [array([0.99204181])],
     [array([0.71235345])],
     [array([0.82163657])],
     [array([0.78154287])],
     [array([0.27091569])],
     [array([0.20356621])],
     [array([0.16396069])],
     [array([0.7672582])],
     [array([0.30473701])],
     [array([0.67337067])],
     [array([0.7794966])],
     [array([0.69452395])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.35183365, 0.92750552, 0.36481941, 0.08403362, 0.2261729 ,
           0.22543264, 0.03628278, 0.52916575, 0.15094416, 0.24578925,
           0.04401412, 0.81536537, 0.97457024, 0.60280201, 0.07138935,
           0.93288759, 0.35070964, 0.81415704, 0.80168526, 0.40747331,
           0.64612675, 0.79326485, 0.48448446, 0.19541529, 0.94361618,
           0.53809447, 0.70328044, 0.13142042, 0.82901767, 0.18560032,
           0.73542315, 0.21329886, 0.60882803, 0.65342603, 0.53751363,
           0.66944634, 0.77256643, 0.67092546, 0.84509305, 0.38272071,
           0.66234237, 0.6086048 , 0.31730951, 0.99723836, 0.39155503,
           0.60360028, 0.35144145, 0.63696607, 0.23813515, 0.40794677,
           0.13500317, 0.0526603 , 0.34865144, 0.58454329, 0.14251536,
           0.35216852, 0.20604026, 0.67548186, 0.47367111, 0.75048043,
           0.81398792, 0.35825715, 0.0419357 , 0.79629366, 0.62188163,
           0.76716328, 0.17776785, 0.30101463, 0.27332921, 0.51174556,
           0.12198545, 0.65950995, 0.1789006 , 0.71854165, 0.81319849,
           0.65344144, 0.85057013, 0.22634862, 0.69599495, 0.56900741,
           0.87628992, 0.63877895, 0.88417201, 0.83438698, 0.87784214,
           0.24405524, 0.15203442, 0.8207974 , 0.99204181, 0.71235345,
           0.82163657, 0.78154287, 0.27091569, 0.20356621, 0.16396069,
           0.7672582 , 0.30473701, 0.67337067, 0.7794966 , 0.69452395])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.66859138, 0.74369933, 0.11270908, 0.40298941, 0.48067365,
              0.86775938, 0.04688151, 0.75010289, 0.81853635, 0.87724806,
              0.19936613, 0.86191005, 0.27154662, 0.16976639, 0.22447504,
              0.86900476, 0.98422483, 0.91653322, 0.21727941, 0.99411725,
              0.75443023, 0.66289782, 0.5942874 , 0.59105583, 0.14737038,
              0.9227797 , 0.69452811, 0.01923844, 0.14359597, 0.69343181,
              0.82362117, 0.89890489, 0.38860924, 0.15444172, 0.95704165,
              0.53126648, 0.66617445, 0.88608613, 0.91649878, 0.58289009,
              0.33270077, 0.93202512, 0.17583268, 0.50652251, 0.46584963,
              0.29194302, 0.84416982, 0.38751663, 0.877247  , 0.27776193,
              0.40806008, 0.53988137, 0.29826597, 0.85036568, 0.06960436,
              0.528409  , 0.24777669, 0.38201956, 0.9504251 , 0.49281594,
              0.26503396, 0.26493326, 0.23146177, 0.20077543, 0.04022278,
              0.28682567, 0.8889123 , 0.36490194, 0.71052312, 0.61719327,
              0.02560118, 0.93889798, 0.97945182, 0.05505073, 0.98731978,
              0.0848249 , 0.33255244, 0.84689353, 0.83303539, 0.72617241,
              0.9783002 , 0.79882427, 0.61938817, 0.79177374, 0.69577357,
              0.06585609, 0.8296787 , 0.65901298, 0.90411216, 0.6440258 ,
              0.86572463, 0.36547861, 0.48385994, 0.26919938, 0.9698181 ,
              0.99907994, 0.98538351, 0.81965803, 0.01238998, 0.49358655])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([9.32095445e-01, 1.76561081e-01, 7.77493879e-01, 2.56202718e-01,
              4.04788170e-01, 2.82543839e-02, 4.23937117e-01, 7.62415797e-01,
              1.27220843e-01, 6.29499221e-02, 2.73153090e-01, 7.94092309e-01,
              4.09883703e-01, 3.23072568e-01, 7.89766023e-01, 2.58214079e-01,
              3.06082426e-01, 7.76927325e-01, 3.10149327e-01, 7.13152722e-02,
              4.57925118e-01, 7.33366756e-02, 2.27599846e-01, 5.44611609e-04,
              3.67974219e-01, 1.87997753e-01, 2.52399731e-01, 4.88032969e-02,
              9.02130228e-02, 8.72129065e-01, 9.57959580e-01, 8.75264516e-01,
              7.19271413e-01, 4.03766362e-01, 5.73676206e-01, 8.03042291e-01,
              7.01629688e-01, 1.60634262e-01, 1.41582065e-01, 9.31114185e-01,
              9.53395020e-01, 3.45745993e-01, 1.44594503e-01, 3.82902164e-01,
              9.95126201e-01, 8.88342370e-01, 2.03554600e-01, 5.20854213e-01,
              4.72565971e-01, 5.31987257e-01, 8.10630062e-01, 6.15749127e-01,
              8.39092896e-01, 2.34491599e-01, 6.55656706e-01, 8.76045950e-01,
              2.49382900e-01, 3.28617784e-01, 3.69421094e-01, 4.09575344e-01,
              7.30211869e-01, 1.51016549e-01, 9.38865332e-01, 4.71260386e-01,
              9.53654851e-01, 9.57876706e-01, 3.03021198e-01, 1.34443091e-01,
              2.78718361e-01, 4.11157836e-01, 3.52582154e-01, 5.93555702e-01,
              6.06433473e-01, 3.39607555e-01, 5.18692451e-03, 5.26852116e-01,
              9.30153479e-01, 5.55807088e-01, 7.66063846e-01, 4.66379306e-02,
              1.51940816e-01, 6.78442485e-01, 1.39683321e-01, 5.45485666e-02,
              2.81605392e-01, 6.98701128e-01, 5.38570234e-01, 8.10453702e-01,
              2.65933123e-01, 4.51571763e-01, 6.36202271e-01, 4.67129477e-01,
              7.96675475e-01, 1.04392889e-01, 3.37345768e-01, 6.56634083e-02,
              9.94176433e-02, 1.48662479e-01, 2.92117962e-01, 8.62799087e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.11471753, 0.84654928, 0.28112715, 0.36566305, 0.61842007,
              0.79431978, 0.55865716, 0.17383035, 0.21074578, 0.7529715 ,
              0.7385229 , 0.40611179, 0.11035207, 0.44025914, 0.64161062,
              0.99727915, 0.7022378 , 0.678529  , 0.61021743, 0.47703521,
              0.12124223, 0.81510846, 0.2707957 , 0.13465986, 0.57328656,
              0.92565831, 0.06383667, 0.49564109, 0.7326905 , 0.61870478,
              0.10420534, 0.01649035, 0.45552516, 0.84702652, 0.11283645,
              0.91416483, 0.05806456, 0.58487708, 0.20954177, 0.25529137,
              0.66779958, 0.52049375, 0.88060871, 0.22849073, 0.3539262 ,
              0.68699073, 0.74757429, 0.82353393, 0.79478105, 0.93187666,
              0.37271153, 0.15560559, 0.36793899, 0.53013335, 0.02171   ,
              0.44949096, 0.42591738, 0.80570689, 0.51255256, 0.81967744,
              0.74538762, 0.16344946, 0.10390786, 0.93642106, 0.70862291,
              0.5003022 , 0.52812957, 0.78796689, 0.97938628, 0.52901268,
              0.2677021 , 0.94106336, 0.15481656, 0.58542249, 0.23575807,
              0.75203825, 0.19355397, 0.12969512, 0.15952689, 0.81582969,
              0.60316665, 0.52689125, 0.68482867, 0.00700359, 0.88339279,
              0.82274294, 0.20807511, 0.02092075, 0.74358629, 0.00546447,
              0.88099479, 0.79233563, 0.15996442, 0.04759471, 0.96646249,
              0.05263527, 0.7981171 , 0.52059066, 0.38897326, 0.78525445])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.61071405, 0.41319576, 0.34345201, 0.96841814, 0.18275554,
              0.22638641, 0.03594912, 0.29187754, 0.47805903, 0.2979777 ,
              0.5596578 , 0.21911547, 0.59132302, 0.58389896, 0.14855448,
              0.14052709, 0.91978186, 0.0827772 , 0.56746922, 0.50946749,
              0.91245519, 0.05336367, 0.44128581, 0.12848839, 0.70801437,
              0.74444137, 0.7245953 , 0.37876914, 0.63614881, 0.97235571,
              0.31848525, 0.87567307, 0.02154197, 0.67667333, 0.14218596,
              0.21442594, 0.8335273 , 0.47135192, 0.78761947, 0.84605492,
              0.30146724, 0.19919375, 0.72715749, 0.76798005, 0.32022521,
              0.99882549, 0.51125729, 0.24716426, 0.89182498, 0.04529608,
              0.27774187, 0.99423382, 0.90968675, 0.58453385, 0.45339738,
              0.19890192, 0.59915585, 0.19264584, 0.92736425, 0.87716936,
              0.20006936, 0.72945472, 0.80368109, 0.94316613, 0.50211059,
              0.48965911, 0.08460223, 0.10213455, 0.82929907, 0.96378316,
              0.82734203, 0.32669316, 0.03476767, 0.29863183, 0.65867356,
              0.01292569, 0.52564641, 0.58895649, 0.08646285, 0.27614411,
              0.54188516, 0.44258871, 0.86740962, 0.39399332, 0.44321004,
              0.79657674, 0.49267965, 0.77912728, 0.87392455, 0.39321669,
              0.74271471, 0.15613484, 0.04216166, 0.10975767, 0.45316099,
              0.89028006, 0.51816664, 0.5769596 , 0.44839109, 0.14538649])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.66859138, 0.74369933, 0.11270908, 0.40298941, 0.48067365,
              0.86775938, 0.04688151, 0.75010289, 0.81853635, 0.87724806,
              0.19936613, 0.86191005, 0.27154662, 0.16976639, 0.22447504,
              0.86900476, 0.98422483, 0.91653322, 0.21727941, 0.99411725,
              0.75443023, 0.66289782, 0.5942874 , 0.59105583, 0.14737038,
              0.9227797 , 0.69452811, 0.01923844, 0.14359597, 0.69343181,
              0.82362117, 0.89890489, 0.38860924, 0.15444172, 0.95704165,
              0.53126648, 0.66617445, 0.88608613, 0.91649878, 0.58289009,
              0.33270077, 0.93202512, 0.17583268, 0.50652251, 0.46584963,
              0.29194302, 0.84416982, 0.38751663, 0.877247  , 0.27776193,
              0.40806008, 0.53988137, 0.29826597, 0.85036568, 0.06960436,
              0.528409  , 0.24777669, 0.38201956, 0.9504251 , 0.49281594,
              0.26503396, 0.26493326, 0.23146177, 0.20077543, 0.04022278,
              0.28682567, 0.8889123 , 0.36490194, 0.71052312, 0.61719327,
              0.02560118, 0.93889798, 0.97945182, 0.05505073, 0.98731978,
              0.0848249 , 0.33255244, 0.84689353, 0.83303539, 0.72617241,
              0.9783002 , 0.79882427, 0.61938817, 0.79177374, 0.69577357,
              0.06585609, 0.8296787 , 0.65901298, 0.90411216, 0.6440258 ,
              0.86572463, 0.36547861, 0.48385994, 0.26919938, 0.9698181 ,
              0.99907994, 0.98538351, 0.81965803, 0.01238998, 0.49358655])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([9.32095445e-01, 1.76561081e-01, 7.77493879e-01, 2.56202718e-01,
              4.04788170e-01, 2.82543839e-02, 4.23937117e-01, 7.62415797e-01,
              1.27220843e-01, 6.29499221e-02, 2.73153090e-01, 7.94092309e-01,
              4.09883703e-01, 3.23072568e-01, 7.89766023e-01, 2.58214079e-01,
              3.06082426e-01, 7.76927325e-01, 3.10149327e-01, 7.13152722e-02,
              4.57925118e-01, 7.33366756e-02, 2.27599846e-01, 5.44611609e-04,
              3.67974219e-01, 1.87997753e-01, 2.52399731e-01, 4.88032969e-02,
              9.02130228e-02, 8.72129065e-01, 9.57959580e-01, 8.75264516e-01,
              7.19271413e-01, 4.03766362e-01, 5.73676206e-01, 8.03042291e-01,
              7.01629688e-01, 1.60634262e-01, 1.41582065e-01, 9.31114185e-01,
              9.53395020e-01, 3.45745993e-01, 1.44594503e-01, 3.82902164e-01,
              9.95126201e-01, 8.88342370e-01, 2.03554600e-01, 5.20854213e-01,
              4.72565971e-01, 5.31987257e-01, 8.10630062e-01, 6.15749127e-01,
              8.39092896e-01, 2.34491599e-01, 6.55656706e-01, 8.76045950e-01,
              2.49382900e-01, 3.28617784e-01, 3.69421094e-01, 4.09575344e-01,
              7.30211869e-01, 1.51016549e-01, 9.38865332e-01, 4.71260386e-01,
              9.53654851e-01, 9.57876706e-01, 3.03021198e-01, 1.34443091e-01,
              2.78718361e-01, 4.11157836e-01, 3.52582154e-01, 5.93555702e-01,
              6.06433473e-01, 3.39607555e-01, 5.18692451e-03, 5.26852116e-01,
              9.30153479e-01, 5.55807088e-01, 7.66063846e-01, 4.66379306e-02,
              1.51940816e-01, 6.78442485e-01, 1.39683321e-01, 5.45485666e-02,
              2.81605392e-01, 6.98701128e-01, 5.38570234e-01, 8.10453702e-01,
              2.65933123e-01, 4.51571763e-01, 6.36202271e-01, 4.67129477e-01,
              7.96675475e-01, 1.04392889e-01, 3.37345768e-01, 6.56634083e-02,
              9.94176433e-02, 1.48662479e-01, 2.92117962e-01, 8.62799087e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.11471753, 0.84654928, 0.28112715, 0.36566305, 0.61842007,
              0.79431978, 0.55865716, 0.17383035, 0.21074578, 0.7529715 ,
              0.7385229 , 0.40611179, 0.11035207, 0.44025914, 0.64161062,
              0.99727915, 0.7022378 , 0.678529  , 0.61021743, 0.47703521,
              0.12124223, 0.81510846, 0.2707957 , 0.13465986, 0.57328656,
              0.92565831, 0.06383667, 0.49564109, 0.7326905 , 0.61870478,
              0.10420534, 0.01649035, 0.45552516, 0.84702652, 0.11283645,
              0.91416483, 0.05806456, 0.58487708, 0.20954177, 0.25529137,
              0.66779958, 0.52049375, 0.88060871, 0.22849073, 0.3539262 ,
              0.68699073, 0.74757429, 0.82353393, 0.79478105, 0.93187666,
              0.37271153, 0.15560559, 0.36793899, 0.53013335, 0.02171   ,
              0.44949096, 0.42591738, 0.80570689, 0.51255256, 0.81967744,
              0.74538762, 0.16344946, 0.10390786, 0.93642106, 0.70862291,
              0.5003022 , 0.52812957, 0.78796689, 0.97938628, 0.52901268,
              0.2677021 , 0.94106336, 0.15481656, 0.58542249, 0.23575807,
              0.75203825, 0.19355397, 0.12969512, 0.15952689, 0.81582969,
              0.60316665, 0.52689125, 0.68482867, 0.00700359, 0.88339279,
              0.82274294, 0.20807511, 0.02092075, 0.74358629, 0.00546447,
              0.88099479, 0.79233563, 0.15996442, 0.04759471, 0.96646249,
              0.05263527, 0.7981171 , 0.52059066, 0.38897326, 0.78525445])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.51434462, 0.47332609, 0.23897295, 0.96635765, 0.53932518,
              0.86228782, 0.31070186, 0.05954552, 0.51489162, 0.56008119,
              0.80175628, 0.43586446, 0.83138434, 0.52082884, 0.26613032,
              0.778661  , 0.56015574, 0.31840562, 0.23943553, 0.53337822,
              0.97846546, 0.12533981, 0.65504873, 0.08537587, 0.26077382,
              0.94175255, 0.42921967, 0.15325052, 0.13059501, 0.78663978,
              0.29499639, 0.38858231, 0.78485076, 0.53665624, 0.82498914,
              0.0718709 , 0.06716471, 0.94919301, 0.9963066 , 0.13417726,
              0.81143533, 0.66540185, 0.58554616, 0.22832921, 0.58848256,
              0.74677471, 0.83185519, 0.48297472, 0.56484126, 0.47804931,
              0.00533125, 0.77648349, 0.22859026, 0.82973952, 0.0485117 ,
              0.71120601, 0.9275939 , 0.43271417, 0.33841011, 0.82348456,
              0.54819934, 0.81388206, 0.10992969, 0.05741136, 0.1236742 ,
              0.46367027, 0.99932516, 0.63422643, 0.65773619, 0.1608162 ,
              0.18659164, 0.54475995, 0.67345999, 0.54635156, 0.38026018,
              0.72020072, 0.05989951, 0.56504038, 0.80659859, 0.51233688,
              0.88863326, 0.21464388, 0.61424146, 0.8705928 , 0.84860676,
              0.34501132, 0.98245642, 0.22479761, 0.50083413, 0.45090324,
              0.58661095, 0.74353765, 0.47969113, 0.17669647, 0.60279232,
              0.49144373, 0.94968502, 0.05677794, 0.71191444, 0.0404466 ])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.35183365, 0.92750552, 0.36481941, 0.08403362, 0.2261729 ,
              0.22543264, 0.03628278, 0.52916575, 0.15094416, 0.24578925,
              0.04401412, 0.81536537, 0.97457024, 0.60280201, 0.07138935,
              0.93288759, 0.35070964, 0.81415704, 0.80168526, 0.40747331,
              0.64612675, 0.79326485, 0.48448446, 0.19541529, 0.94361618,
              0.53809447, 0.70328044, 0.13142042, 0.82901767, 0.18560032,
              0.73542315, 0.21329886, 0.60882803, 0.65342603, 0.53751363,
              0.66944634, 0.77256643, 0.67092546, 0.84509305, 0.38272071,
              0.66234237, 0.6086048 , 0.31730951, 0.99723836, 0.39155503,
              0.60360028, 0.35144145, 0.63696607, 0.23813515, 0.40794677,
              0.13500317, 0.0526603 , 0.34865144, 0.58454329, 0.14251536,
              0.35216852, 0.20604026, 0.67548186, 0.47367111, 0.75048043,
              0.81398792, 0.35825715, 0.0419357 , 0.79629366, 0.62188163,
              0.76716328, 0.17776785, 0.30101463, 0.27332921, 0.51174556,
              0.12198545, 0.65950995, 0.1789006 , 0.71854165, 0.81319849,
              0.65344144, 0.85057013, 0.22634862, 0.69599495, 0.56900741,
              0.87628992, 0.63877895, 0.88417201, 0.83438698, 0.87784214,
              0.24405524, 0.15203442, 0.8207974 , 0.99204181, 0.71235345,
              0.82163657, 0.78154287, 0.27091569, 0.20356621, 0.16396069,
              0.7672582 , 0.30473701, 0.67337067, 0.7794966 , 0.69452395])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.77274044, 0.18562169, 0.38096812, 0.35564808, 0.15327776,
              0.55541353, 0.64306906, 0.3246626 , 0.83693368, 0.55432985,
              0.94607399, 0.30132208, 0.46439619, 0.32869255, 0.53764532,
              0.92311202, 0.4096683 , 0.9172938 , 0.22508478, 0.55913716,
              0.85885391, 0.32944319, 0.41324096, 0.0037646 , 0.33853633,
              0.34183961, 0.41391859, 0.04446713, 0.98009487, 0.49320719,
              0.68516337, 0.30122059, 0.0231964 , 0.47746303, 0.20874973,
              0.94785588, 0.92291731, 0.35147446, 0.03582792, 0.75145255,
              0.52130481, 0.38302482, 0.75919287, 0.56571097, 0.15868188,
              0.56724887, 0.91833325, 0.05734458, 0.23589453, 0.62797781,
              0.17553604, 0.05389647, 0.13998055, 0.18669414, 0.38716417,
              0.84693063, 0.88391101, 0.15919098, 0.5967851 , 0.84791148,
              0.76207146, 0.54163878, 0.31886542, 0.02612531, 0.06860978,
              0.9917356 , 0.69192329, 0.27525657, 0.91121721, 0.23504327,
              0.51053651, 0.67800547, 0.78765681, 0.53627243, 0.5411067 ,
              0.80953203, 0.02685135, 0.34962083, 0.89375413, 0.13263223,
              0.24715193, 0.88342934, 0.6591539 , 0.14393529, 0.55056821,
              0.75921248, 0.43458896, 0.95476718, 0.38714797, 0.36151746,
              0.96803044, 0.28155874, 0.09773638, 0.68838063, 0.11306807,
              0.50529459, 0.10921089, 0.24742589, 0.70358387, 0.89143403])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([9.17279228e-01, 2.55122541e-01, 2.96079253e-01, 1.22592106e-01,
              4.98860524e-01, 2.71490787e-01, 5.58023032e-01, 5.05272477e-01,
              6.87443949e-01, 3.03381493e-01, 8.66439989e-01, 7.22519767e-01,
              4.32556410e-01, 5.25633037e-01, 4.51277040e-01, 9.87254700e-01,
              8.86668266e-01, 1.99079065e-01, 5.98340808e-01, 6.71393773e-01,
              7.92240388e-01, 3.44433959e-01, 5.17826113e-01, 2.65895068e-01,
              1.51475670e-01, 1.64852179e-01, 9.38472825e-02, 5.92258087e-01,
              6.99030477e-01, 5.76265483e-02, 9.03224246e-01, 6.69271180e-01,
              5.64966146e-01, 2.51230819e-01, 6.13449694e-01, 6.78463594e-01,
              1.52778367e-01, 3.47141508e-01, 6.52453649e-01, 6.82472580e-03,
              9.93726807e-01, 6.99165346e-01, 9.09905629e-01, 8.46393220e-01,
              6.93917257e-02, 9.65283363e-01, 2.85754656e-01, 1.42778388e-01,
              2.04298629e-01, 9.56926267e-01, 6.88277937e-01, 4.52807381e-02,
              8.92599700e-01, 7.69466588e-01, 9.73167474e-02, 6.69441416e-01,
              7.28006126e-01, 5.58000227e-01, 6.78606906e-01, 5.12919078e-01,
              6.74620879e-01, 9.12447350e-03, 3.52659229e-01, 4.36157166e-01,
              1.90733797e-01, 8.71059528e-01, 4.94712101e-01, 3.12052957e-01,
              2.60048440e-01, 1.34533846e-01, 5.99563513e-01, 5.56117272e-01,
              9.28839809e-01, 9.99120447e-01, 2.34698556e-02, 5.99738583e-01,
              5.97752873e-01, 2.82353528e-02, 1.81147140e-01, 6.12642690e-01,
              4.82799719e-01, 7.69394659e-01, 1.02969451e-01, 6.82541420e-01,
              3.14805937e-01, 4.49684584e-01, 1.03032644e-01, 5.10716044e-01,
              9.37751150e-01, 9.03294436e-01, 5.75830172e-01, 5.64354234e-01,
              5.53065855e-04, 7.51900454e-01, 5.14733806e-01, 1.95722579e-01,
              2.39066623e-01, 6.51092247e-01, 6.04739092e-02, 4.60992728e-01])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.99994687, 0.59716853, 0.82029382, 0.67599024, 0.95047131,
              0.30595836, 0.72974081, 0.72084603, 0.07022763, 0.26010373,
              0.42778982, 0.40855516, 0.79992045, 0.31569108, 0.62084503,
              0.15255629, 0.44545246, 0.93366763, 0.45760234, 0.80963401,
              0.02045396, 0.10201235, 0.29971995, 0.76955243, 0.0160226 ,
              0.86153397, 0.73976986, 0.4870125 , 0.0947525 , 0.40295851,
              0.94078604, 0.90868025, 0.16632019, 0.43357421, 0.6683495 ,
              0.10402463, 0.78053113, 0.527677  , 0.88124618, 0.16122124,
              0.16706983, 0.33912724, 0.78774215, 0.85249065, 0.39771716,
              0.81544396, 0.67930986, 0.75021003, 0.48722981, 0.70421237,
              0.6815324 , 0.89377672, 0.68159291, 0.1694723 , 0.12465736,
              0.38693484, 0.53591028, 0.78728178, 0.98014736, 0.81869222,
              0.17597198, 0.6964893 , 0.34534218, 0.77706929, 0.46774843,
              0.51408524, 0.22106521, 0.27096071, 0.49292153, 0.4987858 ,
              0.90091847, 0.74811795, 0.01668096, 0.2828611 , 0.22699237,
              0.03385696, 0.30398983, 0.34961448, 0.24441747, 0.57711809,
              0.00966011, 0.85279911, 0.79108979, 0.8572678 , 0.22566681,
              0.4524522 , 0.07364638, 0.63538296, 0.92295303, 0.59278934,
              0.01224415, 0.34199205, 0.77543145, 0.30973587, 0.58269652,
              0.45710036, 0.60428017, 0.05876503, 0.73669256, 0.90572754])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.35183365, 0.92750552, 0.36481941, 0.08403362, 0.2261729 ,
              0.22543264, 0.03628278, 0.52916575, 0.15094416, 0.24578925,
              0.04401412, 0.81536537, 0.97457024, 0.60280201, 0.07138935,
              0.93288759, 0.35070964, 0.81415704, 0.80168526, 0.40747331,
              0.64612675, 0.79326485, 0.48448446, 0.19541529, 0.94361618,
              0.53809447, 0.70328044, 0.13142042, 0.82901767, 0.18560032,
              0.73542315, 0.21329886, 0.60882803, 0.65342603, 0.53751363,
              0.66944634, 0.77256643, 0.67092546, 0.84509305, 0.38272071,
              0.66234237, 0.6086048 , 0.31730951, 0.99723836, 0.39155503,
              0.60360028, 0.35144145, 0.63696607, 0.23813515, 0.40794677,
              0.13500317, 0.0526603 , 0.34865144, 0.58454329, 0.14251536,
              0.35216852, 0.20604026, 0.67548186, 0.47367111, 0.75048043,
              0.81398792, 0.35825715, 0.0419357 , 0.79629366, 0.62188163,
              0.76716328, 0.17776785, 0.30101463, 0.27332921, 0.51174556,
              0.12198545, 0.65950995, 0.1789006 , 0.71854165, 0.81319849,
              0.65344144, 0.85057013, 0.22634862, 0.69599495, 0.56900741,
              0.87628992, 0.63877895, 0.88417201, 0.83438698, 0.87784214,
              0.24405524, 0.15203442, 0.8207974 , 0.99204181, 0.71235345,
              0.82163657, 0.78154287, 0.27091569, 0.20356621, 0.16396069,
              0.7672582 , 0.30473701, 0.67337067, 0.7794966 , 0.69452395])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.77274044, 0.18562169, 0.38096812, 0.35564808, 0.15327776,
              0.55541353, 0.64306906, 0.3246626 , 0.83693368, 0.55432985,
              0.94607399, 0.30132208, 0.46439619, 0.32869255, 0.53764532,
              0.92311202, 0.4096683 , 0.9172938 , 0.22508478, 0.55913716,
              0.85885391, 0.32944319, 0.41324096, 0.0037646 , 0.33853633,
              0.34183961, 0.41391859, 0.04446713, 0.98009487, 0.49320719,
              0.68516337, 0.30122059, 0.0231964 , 0.47746303, 0.20874973,
              0.94785588, 0.92291731, 0.35147446, 0.03582792, 0.75145255,
              0.52130481, 0.38302482, 0.75919287, 0.56571097, 0.15868188,
              0.56724887, 0.91833325, 0.05734458, 0.23589453, 0.62797781,
              0.17553604, 0.05389647, 0.13998055, 0.18669414, 0.38716417,
              0.84693063, 0.88391101, 0.15919098, 0.5967851 , 0.84791148,
              0.76207146, 0.54163878, 0.31886542, 0.02612531, 0.06860978,
              0.9917356 , 0.69192329, 0.27525657, 0.91121721, 0.23504327,
              0.51053651, 0.67800547, 0.78765681, 0.53627243, 0.5411067 ,
              0.80953203, 0.02685135, 0.34962083, 0.89375413, 0.13263223,
              0.24715193, 0.88342934, 0.6591539 , 0.14393529, 0.55056821,
              0.75921248, 0.43458896, 0.95476718, 0.38714797, 0.36151746,
              0.96803044, 0.28155874, 0.09773638, 0.68838063, 0.11306807,
              0.50529459, 0.10921089, 0.24742589, 0.70358387, 0.89143403])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([9.17279228e-01, 2.55122541e-01, 2.96079253e-01, 1.22592106e-01,
              4.98860524e-01, 2.71490787e-01, 5.58023032e-01, 5.05272477e-01,
              6.87443949e-01, 3.03381493e-01, 8.66439989e-01, 7.22519767e-01,
              4.32556410e-01, 5.25633037e-01, 4.51277040e-01, 9.87254700e-01,
              8.86668266e-01, 1.99079065e-01, 5.98340808e-01, 6.71393773e-01,
              7.92240388e-01, 3.44433959e-01, 5.17826113e-01, 2.65895068e-01,
              1.51475670e-01, 1.64852179e-01, 9.38472825e-02, 5.92258087e-01,
              6.99030477e-01, 5.76265483e-02, 9.03224246e-01, 6.69271180e-01,
              5.64966146e-01, 2.51230819e-01, 6.13449694e-01, 6.78463594e-01,
              1.52778367e-01, 3.47141508e-01, 6.52453649e-01, 6.82472580e-03,
              9.93726807e-01, 6.99165346e-01, 9.09905629e-01, 8.46393220e-01,
              6.93917257e-02, 9.65283363e-01, 2.85754656e-01, 1.42778388e-01,
              2.04298629e-01, 9.56926267e-01, 6.88277937e-01, 4.52807381e-02,
              8.92599700e-01, 7.69466588e-01, 9.73167474e-02, 6.69441416e-01,
              7.28006126e-01, 5.58000227e-01, 6.78606906e-01, 5.12919078e-01,
              6.74620879e-01, 9.12447350e-03, 3.52659229e-01, 4.36157166e-01,
              1.90733797e-01, 8.71059528e-01, 4.94712101e-01, 3.12052957e-01,
              2.60048440e-01, 1.34533846e-01, 5.99563513e-01, 5.56117272e-01,
              9.28839809e-01, 9.99120447e-01, 2.34698556e-02, 5.99738583e-01,
              5.97752873e-01, 2.82353528e-02, 1.81147140e-01, 6.12642690e-01,
              4.82799719e-01, 7.69394659e-01, 1.02969451e-01, 6.82541420e-01,
              3.14805937e-01, 4.49684584e-01, 1.03032644e-01, 5.10716044e-01,
              9.37751150e-01, 9.03294436e-01, 5.75830172e-01, 5.64354234e-01,
              5.53065855e-04, 7.51900454e-01, 5.14733806e-01, 1.95722579e-01,
              2.39066623e-01, 6.51092247e-01, 6.04739092e-02, 4.60992728e-01])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.91883299, 0.38586742, 0.96294873, 0.53436276, 0.01959389,
              0.56995542, 0.98567057, 0.27024596, 0.78083859, 0.1194132 ,
              0.2314568 , 0.90457833, 0.28650017, 0.5058479 , 0.97983884,
              0.89439515, 0.48634066, 0.10374806, 0.69409316, 0.11344844,
              0.73488209, 0.32818405, 0.31202249, 0.58285352, 0.74067356,
              0.32183152, 0.53799004, 0.40005007, 0.51545479, 0.55502516,
              0.22703095, 0.83558222, 0.1751201 , 0.24167727, 0.50785406,
              0.47393897, 0.98989252, 0.05363988, 0.98635154, 0.38740803,
              0.01810247, 0.46066914, 0.04882021, 0.91651274, 0.89220923,
              0.80955603, 0.53060491, 0.31006886, 0.04025709, 0.33592466,
              0.33413594, 0.01435026, 0.8290766 , 0.75447705, 0.87430124,
              0.36794875, 0.30485081, 0.56922411, 0.57283771, 0.25170102,
              0.60072687, 0.1767466 , 0.5578812 , 0.80158627, 0.95519803,
              0.16346792, 0.44395558, 0.14373102, 0.85876696, 0.61141454,
              0.1182218 , 0.32939922, 0.25928621, 0.73981434, 0.67393342,
              0.7921646 , 0.28041636, 0.24574449, 0.66648514, 0.11309228,
              0.63972848, 0.97959676, 0.3286529 , 0.83883717, 0.61743539,
              0.56809121, 0.63089511, 0.01534733, 0.9551549 , 0.12324066,
              0.33779198, 0.36699722, 0.24155551, 0.81817548, 0.24370368,
              0.57610631, 0.42847576, 0.46633394, 0.24808528, 0.21432358])}]]


