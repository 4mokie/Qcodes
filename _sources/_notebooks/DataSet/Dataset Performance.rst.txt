
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='164b2337-b8aa-4cd3-ba18-76978596626c'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='db3186ae-9de8-48f2-90f0-fc3ed12c199d'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.330446605500412],
     [0.183387294712968],
     [0.905340724339114],
     [0.0183923167267959],
     [0.585570777842921],
     [0.842284626743999],
     [0.046185268938722],
     [0.491653166243223],
     [0.0435406076440468],
     [0.87406480747334],
     [0.12806982371755],
     [0.334243114220135],
     [0.543314101904851],
     [0.118280379327402],
     [0.582632976258361],
     [0.812231677888414],
     [0.674300635492308],
     [0.560870999087079],
     [0.416923786338568],
     [0.154868654800321],
     [0.417940792178187],
     [0.760349339663593],
     [0.0853084221260495],
     [0.173022821425099],
     [0.818421776380866],
     [0.198537670037865],
     [0.127631663110127],
     [0.167367539107162],
     [0.94235660776179],
     [0.75851444508372],
     [0.156333288928262],
     [0.76777958294558],
     [0.858032559852847],
     [0.153711643091719],
     [0.167080778024637],
     [0.806451688954872],
     [0.352580217676138],
     [0.142752647641642],
     [0.763263324775735],
     [0.196060873356879],
     [0.768663339166083],
     [0.999237840840206],
     [0.892456046425728],
     [0.984325242794681],
     [0.719165107352208],
     [0.571928510415187],
     [0.59375675553018],
     [0.461558722642756],
     [0.746181601513688],
     [0.56875421883237],
     [0.556852213411616],
     [0.829142723335909],
     [0.315328060931651],
     [0.598063558443456],
     [0.869565143939629],
     [0.026433479691456],
     [0.179358736639336],
     [0.397420401184059],
     [0.641775432119025],
     [0.877563667226502],
     [0.439101997815767],
     [0.980824578008375],
     [0.41916448322416],
     [0.878031338097801],
     [0.313070899334915],
     [0.652660099379581],
     [0.365493847286351],
     [0.742625421065537],
     [0.315805054220344],
     [0.946253232697315],
     [0.5952922625003],
     [0.978912365213914],
     [0.334348845855941],
     [0.585329931931472],
     [0.795002159361342],
     [0.356940707589748],
     [0.520185327845007],
     [0.111200766261357],
     [0.993458830491569],
     [0.356879061218265],
     [0.797378862320488],
     [0.776140191792457],
     [0.938492739628609],
     [0.648032999578701],
     [0.8577420129076],
     [0.408576119767575],
     [0.648892360664111],
     [0.281660718089893],
     [0.627278258553215],
     [0.593720607739841],
     [0.603814596304649],
     [0.89191627691548],
     [0.745379875795201],
     [0.274997739886156],
     [0.649489660071242],
     [0.250060053818926],
     [0.434828888937282],
     [0.462898407155137],
     [0.339038702588926],
     [0.479762196716168]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.79154062])],
     [array([0.26405124])],
     [array([0.75428182])],
     [array([0.12056064])],
     [array([0.1410076])],
     [array([0.96213501])],
     [array([0.65320045])],
     [array([0.8231771])],
     [array([0.21668212])],
     [array([0.67314214])],
     [array([0.33319526])],
     [array([0.84789854])],
     [array([0.08025746])],
     [array([0.67965814])],
     [array([0.42302423])],
     [array([0.97449017])],
     [array([0.67932341])],
     [array([0.98538087])],
     [array([0.88496524])],
     [array([0.11118147])],
     [array([0.76246683])],
     [array([0.26442762])],
     [array([0.1847334])],
     [array([0.13229397])],
     [array([0.65107679])],
     [array([0.44680032])],
     [array([0.2779279])],
     [array([0.16944484])],
     [array([0.14089575])],
     [array([0.20184435])],
     [array([0.98026862])],
     [array([0.23151705])],
     [array([0.95787857])],
     [array([0.23862856])],
     [array([0.95324899])],
     [array([0.19334562])],
     [array([0.87217336])],
     [array([0.59297855])],
     [array([0.33027559])],
     [array([0.07595158])],
     [array([0.21703155])],
     [array([0.840507])],
     [array([0.38208016])],
     [array([0.71204381])],
     [array([0.40952583])],
     [array([0.43350045])],
     [array([0.05043492])],
     [array([0.90154893])],
     [array([0.26711928])],
     [array([0.58707513])],
     [array([0.01104662])],
     [array([0.08810396])],
     [array([0.85228195])],
     [array([0.38296007])],
     [array([0.01054435])],
     [array([0.68838933])],
     [array([0.56570393])],
     [array([0.05523529])],
     [array([0.20644213])],
     [array([0.42693269])],
     [array([0.16112974])],
     [array([0.04224004])],
     [array([0.94252466])],
     [array([0.96274016])],
     [array([0.7671807])],
     [array([0.28838824])],
     [array([0.57965231])],
     [array([0.57380669])],
     [array([0.77314716])],
     [array([0.15546889])],
     [array([0.61531996])],
     [array([0.5299907])],
     [array([0.27581694])],
     [array([0.72913037])],
     [array([0.61115271])],
     [array([0.96649409])],
     [array([0.75875063])],
     [array([0.33566932])],
     [array([0.20133568])],
     [array([0.02400415])],
     [array([0.75704461])],
     [array([0.40503888])],
     [array([0.40211535])],
     [array([0.21058488])],
     [array([0.89246994])],
     [array([0.81408853])],
     [array([0.84693524])],
     [array([0.30358515])],
     [array([0.39241058])],
     [array([0.95036531])],
     [array([0.54578558])],
     [array([0.99329669])],
     [array([0.48898787])],
     [array([0.0028232])],
     [array([0.42913603])],
     [array([0.32634822])],
     [array([0.1236878])],
     [array([0.82778298])],
     [array([0.71337953])],
     [array([0.72014405])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.79154062, 0.26405124, 0.75428182, 0.12056064, 0.1410076 ,
           0.96213501, 0.65320045, 0.8231771 , 0.21668212, 0.67314214,
           0.33319526, 0.84789854, 0.08025746, 0.67965814, 0.42302423,
           0.97449017, 0.67932341, 0.98538087, 0.88496524, 0.11118147,
           0.76246683, 0.26442762, 0.1847334 , 0.13229397, 0.65107679,
           0.44680032, 0.2779279 , 0.16944484, 0.14089575, 0.20184435,
           0.98026862, 0.23151705, 0.95787857, 0.23862856, 0.95324899,
           0.19334562, 0.87217336, 0.59297855, 0.33027559, 0.07595158,
           0.21703155, 0.840507  , 0.38208016, 0.71204381, 0.40952583,
           0.43350045, 0.05043492, 0.90154893, 0.26711928, 0.58707513,
           0.01104662, 0.08810396, 0.85228195, 0.38296007, 0.01054435,
           0.68838933, 0.56570393, 0.05523529, 0.20644213, 0.42693269,
           0.16112974, 0.04224004, 0.94252466, 0.96274016, 0.7671807 ,
           0.28838824, 0.57965231, 0.57380669, 0.77314716, 0.15546889,
           0.61531996, 0.5299907 , 0.27581694, 0.72913037, 0.61115271,
           0.96649409, 0.75875063, 0.33566932, 0.20133568, 0.02400415,
           0.75704461, 0.40503888, 0.40211535, 0.21058488, 0.89246994,
           0.81408853, 0.84693524, 0.30358515, 0.39241058, 0.95036531,
           0.54578558, 0.99329669, 0.48898787, 0.0028232 , 0.42913603,
           0.32634822, 0.1236878 , 0.82778298, 0.71337953, 0.72014405])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.33044661, 0.18338729, 0.90534072, 0.01839232, 0.58557078,
              0.84228463, 0.04618527, 0.49165317, 0.04354061, 0.87406481,
              0.12806982, 0.33424311, 0.5433141 , 0.11828038, 0.58263298,
              0.81223168, 0.67430064, 0.560871  , 0.41692379, 0.15486865,
              0.41794079, 0.76034934, 0.08530842, 0.17302282, 0.81842178,
              0.19853767, 0.12763166, 0.16736754, 0.94235661, 0.75851445,
              0.15633329, 0.76777958, 0.85803256, 0.15371164, 0.16708078,
              0.80645169, 0.35258022, 0.14275265, 0.76326332, 0.19606087,
              0.76866334, 0.99923784, 0.89245605, 0.98432524, 0.71916511,
              0.57192851, 0.59375676, 0.46155872, 0.7461816 , 0.56875422,
              0.55685221, 0.82914272, 0.31532806, 0.59806356, 0.86956514,
              0.02643348, 0.17935874, 0.3974204 , 0.64177543, 0.87756367,
              0.439102  , 0.98082458, 0.41916448, 0.87803134, 0.3130709 ,
              0.6526601 , 0.36549385, 0.74262542, 0.31580505, 0.94625323,
              0.59529226, 0.97891237, 0.33434885, 0.58532993, 0.79500216,
              0.35694071, 0.52018533, 0.11120077, 0.99345883, 0.35687906,
              0.79737886, 0.77614019, 0.93849274, 0.648033  , 0.85774201,
              0.40857612, 0.64889236, 0.28166072, 0.62727826, 0.59372061,
              0.6038146 , 0.89191628, 0.74537988, 0.27499774, 0.64948966,
              0.25006005, 0.43482889, 0.46289841, 0.3390387 , 0.4797622 ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.35059431, 0.48573634, 0.99439093, 0.29159705, 0.8699129 ,
              0.046447  , 0.64088428, 0.05323308, 0.34526542, 0.80485146,
              0.16344335, 0.51910489, 0.37119062, 0.37087582, 0.00935799,
              0.05813262, 0.59898277, 0.20777385, 0.44344935, 0.11131279,
              0.85159088, 0.53975197, 0.96819078, 0.70763965, 0.81000477,
              0.53846089, 0.43197585, 0.23630316, 0.33122461, 0.24289923,
              0.16638739, 0.07214621, 0.72516987, 0.1728524 , 0.47683641,
              0.8313008 , 0.87690427, 0.28406589, 0.98502153, 0.91116556,
              0.77459157, 0.06471862, 0.62535987, 0.01063044, 0.83173245,
              0.07341129, 0.69089602, 0.33738962, 0.56680099, 0.66660491,
              0.31267798, 0.97854026, 0.27516302, 0.60882862, 0.19665692,
              0.09398986, 0.03926241, 0.69864764, 0.16595852, 0.26550379,
              0.94418016, 0.19223986, 0.89693406, 0.29942072, 0.14214302,
              0.33229996, 0.33855097, 0.38834738, 0.78897181, 0.27445606,
              0.78411597, 0.91561861, 0.80760642, 0.77110007, 0.77236017,
              0.66074961, 0.02378157, 0.25550676, 0.5289098 , 0.44015409,
              0.85974739, 0.95681961, 0.25139651, 0.70080092, 0.53850882,
              0.32688265, 0.43305076, 0.40296235, 0.59865519, 0.18624023,
              0.04645457, 0.5846767 , 0.66034234, 0.4537738 , 0.5515165 ,
              0.70820326, 0.22590325, 0.99106346, 0.91289665, 0.9308245 ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.16800391, 0.71459757, 0.56460522, 0.449275  , 0.27964416,
              0.02660313, 0.383012  , 0.97736248, 0.13197701, 0.7993705 ,
              0.59530691, 0.74108283, 0.76137001, 0.42021007, 0.62199917,
              0.05555977, 0.7727179 , 0.38295537, 0.45028471, 0.45487388,
              0.41311662, 0.78871588, 0.92263745, 0.65120489, 0.24233445,
              0.49484583, 0.32830419, 0.85724418, 0.62104769, 0.36870633,
              0.43534741, 0.18772994, 0.56825046, 0.77340266, 0.3011309 ,
              0.03392953, 0.31760786, 0.35942131, 0.54444421, 0.59339444,
              0.59249079, 0.2049781 , 0.92714621, 0.88520605, 0.8771065 ,
              0.87817669, 0.37837692, 0.63596638, 0.7868287 , 0.87108152,
              0.04813795, 0.73890102, 0.94286529, 0.76314936, 0.21110789,
              0.06591395, 0.02976451, 0.90834189, 0.69721199, 0.23408849,
              0.09153038, 0.91545353, 0.25351516, 0.84942802, 0.45109449,
              0.26008768, 0.56847106, 0.79823707, 0.7017074 , 0.58906756,
              0.19134955, 0.85869985, 0.77405177, 0.71640123, 0.32281065,
              0.75393909, 0.82765101, 0.67094855, 0.75046923, 0.30361861,
              0.78607708, 0.22043745, 0.34201732, 0.43165721, 0.9611544 ,
              0.71203713, 0.47588045, 0.7262439 , 0.66582003, 0.04366774,
              0.91820297, 0.07213149, 0.52386687, 0.42741804, 0.89414078,
              0.29073902, 0.94570222, 0.43560458, 0.79314692, 0.71604988])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.73664394, 0.24876782, 0.17141404, 0.33836999, 0.82542761,
              0.32071217, 0.02533312, 0.42269844, 0.68505626, 0.19038532,
              0.3412728 , 0.14675758, 0.78346474, 0.32086483, 0.65400016,
              0.47421226, 0.08526556, 0.98238961, 0.07908528, 0.99700617,
              0.11530376, 0.00451169, 0.1318659 , 0.56202216, 0.09862002,
              0.13738687, 0.50956909, 0.8929086 , 0.28758736, 0.19692997,
              0.87944113, 0.02207764, 0.77548273, 0.38510684, 0.09436112,
              0.24267372, 0.73192278, 0.31702051, 0.58411738, 0.03824676,
              0.63582538, 0.11369678, 0.67096287, 0.02765138, 0.32775871,
              0.61018394, 0.77342061, 0.86350134, 0.78242164, 0.15219823,
              0.58504961, 0.05289753, 0.67135978, 0.95373268, 0.75466144,
              0.93276633, 0.11162903, 0.37316522, 0.03282197, 0.61952131,
              0.12768839, 0.76527499, 0.39345435, 0.4349157 , 0.0356911 ,
              0.72631658, 0.89723515, 0.63318792, 0.83176298, 0.90654114,
              0.32451473, 0.76031196, 0.27530241, 0.76313199, 0.87603406,
              0.14217846, 0.12564486, 0.32663108, 0.05190275, 0.67794259,
              0.3493102 , 0.59353635, 0.77414934, 0.25983371, 0.64080419,
              0.4788267 , 0.9187217 , 0.35766241, 0.05903916, 0.58638958,
              0.29472414, 0.09595259, 0.43380106, 0.79068727, 0.54570574,
              0.80162928, 0.1481186 , 0.0996292 , 0.66945882, 0.74377227])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.33044661, 0.18338729, 0.90534072, 0.01839232, 0.58557078,
              0.84228463, 0.04618527, 0.49165317, 0.04354061, 0.87406481,
              0.12806982, 0.33424311, 0.5433141 , 0.11828038, 0.58263298,
              0.81223168, 0.67430064, 0.560871  , 0.41692379, 0.15486865,
              0.41794079, 0.76034934, 0.08530842, 0.17302282, 0.81842178,
              0.19853767, 0.12763166, 0.16736754, 0.94235661, 0.75851445,
              0.15633329, 0.76777958, 0.85803256, 0.15371164, 0.16708078,
              0.80645169, 0.35258022, 0.14275265, 0.76326332, 0.19606087,
              0.76866334, 0.99923784, 0.89245605, 0.98432524, 0.71916511,
              0.57192851, 0.59375676, 0.46155872, 0.7461816 , 0.56875422,
              0.55685221, 0.82914272, 0.31532806, 0.59806356, 0.86956514,
              0.02643348, 0.17935874, 0.3974204 , 0.64177543, 0.87756367,
              0.439102  , 0.98082458, 0.41916448, 0.87803134, 0.3130709 ,
              0.6526601 , 0.36549385, 0.74262542, 0.31580505, 0.94625323,
              0.59529226, 0.97891237, 0.33434885, 0.58532993, 0.79500216,
              0.35694071, 0.52018533, 0.11120077, 0.99345883, 0.35687906,
              0.79737886, 0.77614019, 0.93849274, 0.648033  , 0.85774201,
              0.40857612, 0.64889236, 0.28166072, 0.62727826, 0.59372061,
              0.6038146 , 0.89191628, 0.74537988, 0.27499774, 0.64948966,
              0.25006005, 0.43482889, 0.46289841, 0.3390387 , 0.4797622 ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.35059431, 0.48573634, 0.99439093, 0.29159705, 0.8699129 ,
              0.046447  , 0.64088428, 0.05323308, 0.34526542, 0.80485146,
              0.16344335, 0.51910489, 0.37119062, 0.37087582, 0.00935799,
              0.05813262, 0.59898277, 0.20777385, 0.44344935, 0.11131279,
              0.85159088, 0.53975197, 0.96819078, 0.70763965, 0.81000477,
              0.53846089, 0.43197585, 0.23630316, 0.33122461, 0.24289923,
              0.16638739, 0.07214621, 0.72516987, 0.1728524 , 0.47683641,
              0.8313008 , 0.87690427, 0.28406589, 0.98502153, 0.91116556,
              0.77459157, 0.06471862, 0.62535987, 0.01063044, 0.83173245,
              0.07341129, 0.69089602, 0.33738962, 0.56680099, 0.66660491,
              0.31267798, 0.97854026, 0.27516302, 0.60882862, 0.19665692,
              0.09398986, 0.03926241, 0.69864764, 0.16595852, 0.26550379,
              0.94418016, 0.19223986, 0.89693406, 0.29942072, 0.14214302,
              0.33229996, 0.33855097, 0.38834738, 0.78897181, 0.27445606,
              0.78411597, 0.91561861, 0.80760642, 0.77110007, 0.77236017,
              0.66074961, 0.02378157, 0.25550676, 0.5289098 , 0.44015409,
              0.85974739, 0.95681961, 0.25139651, 0.70080092, 0.53850882,
              0.32688265, 0.43305076, 0.40296235, 0.59865519, 0.18624023,
              0.04645457, 0.5846767 , 0.66034234, 0.4537738 , 0.5515165 ,
              0.70820326, 0.22590325, 0.99106346, 0.91289665, 0.9308245 ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.16800391, 0.71459757, 0.56460522, 0.449275  , 0.27964416,
              0.02660313, 0.383012  , 0.97736248, 0.13197701, 0.7993705 ,
              0.59530691, 0.74108283, 0.76137001, 0.42021007, 0.62199917,
              0.05555977, 0.7727179 , 0.38295537, 0.45028471, 0.45487388,
              0.41311662, 0.78871588, 0.92263745, 0.65120489, 0.24233445,
              0.49484583, 0.32830419, 0.85724418, 0.62104769, 0.36870633,
              0.43534741, 0.18772994, 0.56825046, 0.77340266, 0.3011309 ,
              0.03392953, 0.31760786, 0.35942131, 0.54444421, 0.59339444,
              0.59249079, 0.2049781 , 0.92714621, 0.88520605, 0.8771065 ,
              0.87817669, 0.37837692, 0.63596638, 0.7868287 , 0.87108152,
              0.04813795, 0.73890102, 0.94286529, 0.76314936, 0.21110789,
              0.06591395, 0.02976451, 0.90834189, 0.69721199, 0.23408849,
              0.09153038, 0.91545353, 0.25351516, 0.84942802, 0.45109449,
              0.26008768, 0.56847106, 0.79823707, 0.7017074 , 0.58906756,
              0.19134955, 0.85869985, 0.77405177, 0.71640123, 0.32281065,
              0.75393909, 0.82765101, 0.67094855, 0.75046923, 0.30361861,
              0.78607708, 0.22043745, 0.34201732, 0.43165721, 0.9611544 ,
              0.71203713, 0.47588045, 0.7262439 , 0.66582003, 0.04366774,
              0.91820297, 0.07213149, 0.52386687, 0.42741804, 0.89414078,
              0.29073902, 0.94570222, 0.43560458, 0.79314692, 0.71604988])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.81389183, 0.92804738, 0.49670266, 0.24010815, 0.60417899,
              0.38209909, 0.04204139, 0.36145123, 0.67831804, 0.74746431,
              0.55558852, 0.84198211, 0.67649597, 0.33390305, 0.31847951,
              0.44821904, 0.04876747, 0.63611371, 0.48670494, 0.16521469,
              0.36962829, 0.58342316, 0.54778125, 0.98513405, 0.81100669,
              0.65441218, 0.92502148, 0.73166479, 0.07714978, 0.87987875,
              0.49204485, 0.97918297, 0.76098817, 0.27083287, 0.86868963,
              0.49173412, 0.47680281, 0.10769627, 0.96084043, 0.15223004,
              0.98074058, 0.45441856, 0.07377636, 0.68318914, 0.32232971,
              0.05468725, 0.12974444, 0.83664942, 0.48923504, 0.09377533,
              0.80181372, 0.55885227, 0.973804  , 0.38782832, 0.12690461,
              0.5912007 , 0.94759649, 0.54888528, 0.59465431, 0.15626667,
              0.85171639, 0.44716987, 0.29688492, 0.09349517, 0.22850726,
              0.41609633, 0.46546005, 0.69409942, 0.11431033, 0.48118823,
              0.40702895, 0.0916571 , 0.47052917, 0.11797886, 0.90449649,
              0.72467049, 0.9803305 , 0.11402209, 0.84423024, 0.62782153,
              0.13987361, 0.88041795, 0.20656117, 0.49512835, 0.57335077,
              0.97302799, 0.59942538, 0.44870438, 0.38960238, 0.23407458,
              0.28116694, 0.75077182, 0.09969738, 0.36388723, 0.55451995,
              0.90568208, 0.93487632, 0.44808967, 0.66834163, 0.05076976])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.79154062, 0.26405124, 0.75428182, 0.12056064, 0.1410076 ,
              0.96213501, 0.65320045, 0.8231771 , 0.21668212, 0.67314214,
              0.33319526, 0.84789854, 0.08025746, 0.67965814, 0.42302423,
              0.97449017, 0.67932341, 0.98538087, 0.88496524, 0.11118147,
              0.76246683, 0.26442762, 0.1847334 , 0.13229397, 0.65107679,
              0.44680032, 0.2779279 , 0.16944484, 0.14089575, 0.20184435,
              0.98026862, 0.23151705, 0.95787857, 0.23862856, 0.95324899,
              0.19334562, 0.87217336, 0.59297855, 0.33027559, 0.07595158,
              0.21703155, 0.840507  , 0.38208016, 0.71204381, 0.40952583,
              0.43350045, 0.05043492, 0.90154893, 0.26711928, 0.58707513,
              0.01104662, 0.08810396, 0.85228195, 0.38296007, 0.01054435,
              0.68838933, 0.56570393, 0.05523529, 0.20644213, 0.42693269,
              0.16112974, 0.04224004, 0.94252466, 0.96274016, 0.7671807 ,
              0.28838824, 0.57965231, 0.57380669, 0.77314716, 0.15546889,
              0.61531996, 0.5299907 , 0.27581694, 0.72913037, 0.61115271,
              0.96649409, 0.75875063, 0.33566932, 0.20133568, 0.02400415,
              0.75704461, 0.40503888, 0.40211535, 0.21058488, 0.89246994,
              0.81408853, 0.84693524, 0.30358515, 0.39241058, 0.95036531,
              0.54578558, 0.99329669, 0.48898787, 0.0028232 , 0.42913603,
              0.32634822, 0.1236878 , 0.82778298, 0.71337953, 0.72014405])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.33327606, 0.05726223, 0.89494954, 0.97501645, 0.905478  ,
              0.26172902, 0.97717515, 0.68595193, 0.45772671, 0.36090144,
              0.66644392, 0.29860942, 0.6342011 , 0.23196867, 0.72254075,
              0.84149606, 0.70407023, 0.51854859, 0.86665286, 0.71539507,
              0.99844044, 0.85683828, 0.0898585 , 0.77252367, 0.82476784,
              0.45821212, 0.95984856, 0.55478115, 0.70673753, 0.00184502,
              0.23722448, 0.37329445, 0.59357254, 0.17702038, 0.12440436,
              0.59392237, 0.38110206, 0.95650273, 0.03774745, 0.9650266 ,
              0.96282775, 0.95939472, 0.04609454, 0.88705128, 0.76250529,
              0.62435726, 0.00320734, 0.35335648, 0.39946736, 0.10738557,
              0.17573785, 0.4130801 , 0.14146852, 0.70286939, 0.4751331 ,
              0.05296208, 0.19750409, 0.42928181, 0.10345681, 0.57339671,
              0.08997599, 0.3467753 , 0.71579287, 0.5632437 , 0.77323838,
              0.44799286, 0.09710136, 0.85219779, 0.87542337, 0.63288121,
              0.49652547, 0.89684248, 0.87144407, 0.05309801, 0.07152041,
              0.39814503, 0.48650688, 0.7773183 , 0.56314349, 0.46340099,
              0.83184098, 0.48167041, 0.15742211, 0.11768548, 0.70694431,
              0.9637339 , 0.127334  , 0.15082234, 0.5159487 , 0.02681251,
              0.24973875, 0.93114179, 0.98640234, 0.60258136, 0.20938369,
              0.43722085, 0.20978909, 0.46480729, 0.09589731, 0.47437902])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.30135604, 0.88015264, 0.54630148, 0.62196869, 0.9132178 ,
              0.56137488, 0.34091227, 0.69433026, 0.86853812, 0.76368956,
              0.52486377, 0.90039899, 0.6246976 , 0.88265836, 0.0271234 ,
              0.65312771, 0.47068103, 0.42631719, 0.39803803, 0.06975752,
              0.9712733 , 0.19137701, 0.58130841, 0.06478039, 0.14575653,
              0.89244093, 0.3715338 , 0.37407704, 0.60316911, 0.0689182 ,
              0.15476475, 0.88081857, 0.81757742, 0.29080512, 0.76714212,
              0.56803247, 0.25671082, 0.62080476, 0.37997436, 0.1706795 ,
              0.85177337, 0.83905827, 0.26414901, 0.59881456, 0.69575404,
              0.25438976, 0.63465018, 0.7060171 , 0.31293365, 0.4737435 ,
              0.40022207, 0.35248686, 0.52355526, 0.86585291, 0.50192531,
              0.97237522, 0.21063178, 0.61841108, 0.63199337, 0.70196434,
              0.30139966, 0.05255078, 0.53388271, 0.05682553, 0.9027999 ,
              0.32863369, 0.54370577, 0.59877112, 0.16346013, 0.25459775,
              0.94636563, 0.13362878, 0.56533257, 0.23413197, 0.80351828,
              0.73524187, 0.26298678, 0.85104515, 0.00720215, 0.7650695 ,
              0.68937863, 0.12240607, 0.32728438, 0.15667675, 0.87700566,
              0.41688022, 0.30087854, 0.91211328, 0.23319542, 0.1370347 ,
              0.79798554, 0.70370853, 0.75619066, 0.57924761, 0.69656024,
              0.67867347, 0.14327013, 0.29244438, 0.01438311, 0.65143109])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.68475158, 0.23649425, 0.07075879, 0.86723286, 0.12815732,
              0.47361795, 0.26158306, 0.09996126, 0.57556721, 0.36552188,
              0.10181859, 0.7776588 , 0.76265148, 0.76204965, 0.14169306,
              0.14607288, 0.74847201, 0.87161032, 0.11169411, 0.38399543,
              0.36791887, 0.28287963, 0.38857889, 0.39834781, 0.15090436,
              0.91870083, 0.52302411, 0.24386356, 0.37516008, 0.70068856,
              0.70187423, 0.87640752, 0.17382219, 0.37580334, 0.18734555,
              0.14599392, 0.03546916, 0.26689743, 0.68346301, 0.75161357,
              0.40117791, 0.46684318, 0.08963203, 0.10512473, 0.80896551,
              0.32155029, 0.41037107, 0.3888911 , 0.18309589, 0.80135687,
              0.85943616, 0.97344333, 0.55630972, 0.14719843, 0.99107609,
              0.11714848, 0.12961069, 0.86474496, 0.55493728, 0.92662907,
              0.33118219, 0.88819435, 0.30277175, 0.26152867, 0.72509375,
              0.33338493, 0.43169883, 0.50568   , 0.07461762, 0.34564038,
              0.65337153, 0.14211117, 0.19349185, 0.05024449, 0.51401405,
              0.66300792, 0.96048893, 0.60749009, 0.60235911, 0.88009699,
              0.87998379, 0.63508636, 0.95673072, 0.44016287, 0.27810573,
              0.00602773, 0.75463753, 0.95861896, 0.80196496, 0.66645387,
              0.24793004, 0.68358899, 0.85057561, 0.09365193, 0.13394235,
              0.96324227, 0.7396699 , 0.38309571, 0.56794234, 0.37119313])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.79154062, 0.26405124, 0.75428182, 0.12056064, 0.1410076 ,
              0.96213501, 0.65320045, 0.8231771 , 0.21668212, 0.67314214,
              0.33319526, 0.84789854, 0.08025746, 0.67965814, 0.42302423,
              0.97449017, 0.67932341, 0.98538087, 0.88496524, 0.11118147,
              0.76246683, 0.26442762, 0.1847334 , 0.13229397, 0.65107679,
              0.44680032, 0.2779279 , 0.16944484, 0.14089575, 0.20184435,
              0.98026862, 0.23151705, 0.95787857, 0.23862856, 0.95324899,
              0.19334562, 0.87217336, 0.59297855, 0.33027559, 0.07595158,
              0.21703155, 0.840507  , 0.38208016, 0.71204381, 0.40952583,
              0.43350045, 0.05043492, 0.90154893, 0.26711928, 0.58707513,
              0.01104662, 0.08810396, 0.85228195, 0.38296007, 0.01054435,
              0.68838933, 0.56570393, 0.05523529, 0.20644213, 0.42693269,
              0.16112974, 0.04224004, 0.94252466, 0.96274016, 0.7671807 ,
              0.28838824, 0.57965231, 0.57380669, 0.77314716, 0.15546889,
              0.61531996, 0.5299907 , 0.27581694, 0.72913037, 0.61115271,
              0.96649409, 0.75875063, 0.33566932, 0.20133568, 0.02400415,
              0.75704461, 0.40503888, 0.40211535, 0.21058488, 0.89246994,
              0.81408853, 0.84693524, 0.30358515, 0.39241058, 0.95036531,
              0.54578558, 0.99329669, 0.48898787, 0.0028232 , 0.42913603,
              0.32634822, 0.1236878 , 0.82778298, 0.71337953, 0.72014405])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.33327606, 0.05726223, 0.89494954, 0.97501645, 0.905478  ,
              0.26172902, 0.97717515, 0.68595193, 0.45772671, 0.36090144,
              0.66644392, 0.29860942, 0.6342011 , 0.23196867, 0.72254075,
              0.84149606, 0.70407023, 0.51854859, 0.86665286, 0.71539507,
              0.99844044, 0.85683828, 0.0898585 , 0.77252367, 0.82476784,
              0.45821212, 0.95984856, 0.55478115, 0.70673753, 0.00184502,
              0.23722448, 0.37329445, 0.59357254, 0.17702038, 0.12440436,
              0.59392237, 0.38110206, 0.95650273, 0.03774745, 0.9650266 ,
              0.96282775, 0.95939472, 0.04609454, 0.88705128, 0.76250529,
              0.62435726, 0.00320734, 0.35335648, 0.39946736, 0.10738557,
              0.17573785, 0.4130801 , 0.14146852, 0.70286939, 0.4751331 ,
              0.05296208, 0.19750409, 0.42928181, 0.10345681, 0.57339671,
              0.08997599, 0.3467753 , 0.71579287, 0.5632437 , 0.77323838,
              0.44799286, 0.09710136, 0.85219779, 0.87542337, 0.63288121,
              0.49652547, 0.89684248, 0.87144407, 0.05309801, 0.07152041,
              0.39814503, 0.48650688, 0.7773183 , 0.56314349, 0.46340099,
              0.83184098, 0.48167041, 0.15742211, 0.11768548, 0.70694431,
              0.9637339 , 0.127334  , 0.15082234, 0.5159487 , 0.02681251,
              0.24973875, 0.93114179, 0.98640234, 0.60258136, 0.20938369,
              0.43722085, 0.20978909, 0.46480729, 0.09589731, 0.47437902])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.30135604, 0.88015264, 0.54630148, 0.62196869, 0.9132178 ,
              0.56137488, 0.34091227, 0.69433026, 0.86853812, 0.76368956,
              0.52486377, 0.90039899, 0.6246976 , 0.88265836, 0.0271234 ,
              0.65312771, 0.47068103, 0.42631719, 0.39803803, 0.06975752,
              0.9712733 , 0.19137701, 0.58130841, 0.06478039, 0.14575653,
              0.89244093, 0.3715338 , 0.37407704, 0.60316911, 0.0689182 ,
              0.15476475, 0.88081857, 0.81757742, 0.29080512, 0.76714212,
              0.56803247, 0.25671082, 0.62080476, 0.37997436, 0.1706795 ,
              0.85177337, 0.83905827, 0.26414901, 0.59881456, 0.69575404,
              0.25438976, 0.63465018, 0.7060171 , 0.31293365, 0.4737435 ,
              0.40022207, 0.35248686, 0.52355526, 0.86585291, 0.50192531,
              0.97237522, 0.21063178, 0.61841108, 0.63199337, 0.70196434,
              0.30139966, 0.05255078, 0.53388271, 0.05682553, 0.9027999 ,
              0.32863369, 0.54370577, 0.59877112, 0.16346013, 0.25459775,
              0.94636563, 0.13362878, 0.56533257, 0.23413197, 0.80351828,
              0.73524187, 0.26298678, 0.85104515, 0.00720215, 0.7650695 ,
              0.68937863, 0.12240607, 0.32728438, 0.15667675, 0.87700566,
              0.41688022, 0.30087854, 0.91211328, 0.23319542, 0.1370347 ,
              0.79798554, 0.70370853, 0.75619066, 0.57924761, 0.69656024,
              0.67867347, 0.14327013, 0.29244438, 0.01438311, 0.65143109])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.21514535, 0.07323829, 0.64369144, 0.81805347, 0.20046043,
              0.61327567, 0.56741492, 0.60044342, 0.3617288 , 0.30460601,
              0.32195685, 0.48214231, 0.95631883, 0.48853462, 0.39872137,
              0.38353776, 0.78334322, 0.03071839, 0.69023154, 0.16115943,
              0.61457944, 0.30104066, 0.55678448, 0.87506101, 0.19939106,
              0.72236012, 0.65577954, 0.81566687, 0.04500035, 0.98232838,
              0.38018897, 0.23610279, 0.01412403, 0.09944493, 0.37198279,
              0.43610249, 0.45005674, 0.50369296, 0.35402422, 0.08016081,
              0.98442583, 0.4173934 , 0.20383786, 0.83570502, 0.51380071,
              0.20202587, 0.47548094, 0.17540222, 0.82375046, 0.94861991,
              0.70878949, 0.79704478, 0.1443988 , 0.56829426, 0.13651847,
              0.21867091, 0.44481747, 0.69548332, 0.19193141, 0.78380027,
              0.64551954, 0.25158672, 0.68496259, 0.71882951, 0.60255734,
              0.93131267, 0.66251106, 0.43465752, 0.48266481, 0.35566876,
              0.76925611, 0.55596496, 0.26647521, 0.55657475, 0.91541823,
              0.14475775, 0.17341123, 0.20865087, 0.73492175, 0.78787704,
              0.63399909, 0.70512446, 0.45329974, 0.59941978, 0.95437565,
              0.01432202, 0.19823045, 0.64737462, 0.21648122, 0.35519752,
              0.81972284, 0.80462763, 0.26266033, 0.32642473, 0.63615043,
              0.76436969, 0.92619581, 0.73385003, 0.47864415, 0.15863   ])}]]


