
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='7760c9f8-8f07-48e9-8989-4e417fed8a06'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='1ff44104-4456-4e1d-8532-219dc9250b29'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.661989631181421],
     [0.823368298490018],
     [0.160399178799853],
     [0.337643767753065],
     [0.130083540417236],
     [0.830035916215715],
     [0.161122073578975],
     [0.881474141046516],
     [0.880224482884623],
     [0.677304609327665],
     [0.309126209675739],
     [0.99289388917028],
     [0.917076182302233],
     [0.827860882706447],
     [0.460084146662542],
     [0.33175089460273],
     [0.210290563221166],
     [0.6631477991368],
     [0.224646810865989],
     [0.42614006676984],
     [0.734709191646194],
     [0.816019246707647],
     [0.154719733850538],
     [0.156971285180742],
     [0.242505294277379],
     [0.787202496266426],
     [0.442311382099494],
     [0.358335082680172],
     [0.523743690773707],
     [0.210654926995144],
     [0.741080540239469],
     [0.255997416655074],
     [0.512890855815163],
     [0.918196346079753],
     [0.939363578702197],
     [0.23337481715361],
     [0.987392130589949],
     [0.600717993511575],
     [0.609653086414639],
     [0.634741014017556],
     [0.967786585010219],
     [0.896185083412908],
     [0.404699234966956],
     [0.639145836541124],
     [0.978640799572837],
     [0.785768236756757],
     [0.768133046115982],
     [0.899103286084838],
     [0.443013289029579],
     [0.378017258721544],
     [0.0512102350441385],
     [0.413920553715177],
     [0.392320929370122],
     [0.351653630208506],
     [0.126694744385992],
     [0.178315902977743],
     [0.815411840584245],
     [0.729529260456899],
     [0.972894996957865],
     [0.649195049214502],
     [0.666608067652446],
     [0.783244565152847],
     [0.924916730849448],
     [0.0995967034203883],
     [0.246760269050806],
     [0.538952890300793],
     [0.102544942319892],
     [0.789137385228152],
     [0.108205591239791],
     [0.139055663408775],
     [0.325116798052748],
     [0.861387437745853],
     [0.796343413810666],
     [0.0884311467478325],
     [0.479702459086432],
     [0.945869741093548],
     [0.124765773336482],
     [0.62819373007935],
     [0.445972990313846],
     [0.269352256383774],
     [0.708647719875869],
     [0.600560557370067],
     [0.0430304448615733],
     [0.897566354581834],
     [0.986290976338142],
     [0.511371250336898],
     [0.318799265375363],
     [0.796660397153721],
     [0.453277720696576],
     [0.396254074588925],
     [0.0295701651461603],
     [0.857642202357843],
     [0.348210531760924],
     [0.461809831868561],
     [0.18486301065758],
     [0.0879655717498075],
     [0.116015572668431],
     [0.510598183056233],
     [0.401950365430398],
     [0.486012908185972]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.47575468])],
     [array([ 0.4066309])],
     [array([ 0.47127997])],
     [array([ 0.0631737])],
     [array([ 0.19841295])],
     [array([ 0.90343959])],
     [array([ 0.86552398])],
     [array([ 0.14945469])],
     [array([ 0.56602653])],
     [array([ 0.78722164])],
     [array([ 0.48038813])],
     [array([ 0.50344205])],
     [array([ 0.88315692])],
     [array([ 0.56459974])],
     [array([ 0.85709871])],
     [array([ 0.76522755])],
     [array([ 0.72436915])],
     [array([ 0.04996773])],
     [array([ 0.37436202])],
     [array([ 0.43140385])],
     [array([ 0.03578604])],
     [array([ 0.53119204])],
     [array([ 0.67230819])],
     [array([ 0.82593479])],
     [array([ 0.09366689])],
     [array([ 0.36829116])],
     [array([ 0.79178614])],
     [array([ 0.41574969])],
     [array([ 0.71204905])],
     [array([ 0.22408134])],
     [array([ 0.92994468])],
     [array([ 0.78317378])],
     [array([ 0.46005531])],
     [array([ 0.77893811])],
     [array([ 0.24034854])],
     [array([ 0.70233509])],
     [array([ 0.44260247])],
     [array([ 0.73556536])],
     [array([ 0.313263])],
     [array([ 0.47216703])],
     [array([ 0.20014906])],
     [array([ 0.78636368])],
     [array([ 0.66727584])],
     [array([ 0.03675224])],
     [array([ 0.06175581])],
     [array([ 0.48161388])],
     [array([ 0.36214396])],
     [array([ 0.41751152])],
     [array([ 0.23373972])],
     [array([ 0.55851449])],
     [array([ 0.44904968])],
     [array([ 0.37731587])],
     [array([ 0.72965623])],
     [array([ 0.34080493])],
     [array([ 0.54880022])],
     [array([ 0.35559406])],
     [array([ 0.2709744])],
     [array([ 0.51372999])],
     [array([ 0.37957258])],
     [array([ 0.56246082])],
     [array([ 0.59941286])],
     [array([ 0.97647232])],
     [array([ 0.93731787])],
     [array([ 0.65688269])],
     [array([ 0.00038655])],
     [array([ 0.31247335])],
     [array([ 0.65157387])],
     [array([ 0.00718726])],
     [array([ 0.43602961])],
     [array([ 0.64875229])],
     [array([ 0.89102133])],
     [array([ 0.8552523])],
     [array([ 0.29004859])],
     [array([ 0.42324788])],
     [array([ 0.25176221])],
     [array([ 0.12662059])],
     [array([ 0.36596878])],
     [array([ 0.62535942])],
     [array([ 0.67178888])],
     [array([ 0.47555328])],
     [array([ 0.77986634])],
     [array([ 0.19990048])],
     [array([ 0.81523951])],
     [array([ 0.37675768])],
     [array([ 0.96094173])],
     [array([ 0.40809959])],
     [array([ 0.77665933])],
     [array([ 0.0027932])],
     [array([ 0.41688932])],
     [array([ 0.02411994])],
     [array([ 0.48122445])],
     [array([ 0.61310778])],
     [array([ 0.59306841])],
     [array([ 0.21999658])],
     [array([ 0.37772004])],
     [array([ 0.80428047])],
     [array([ 0.94587596])],
     [array([ 0.64654082])],
     [array([ 0.49713185])],
     [array([ 0.18437147])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([  4.75754677e-01,   4.06630899e-01,   4.71279970e-01,
             6.31737022e-02,   1.98412952e-01,   9.03439590e-01,
             8.65523984e-01,   1.49454694e-01,   5.66026532e-01,
             7.87221640e-01,   4.80388126e-01,   5.03442045e-01,
             8.83156917e-01,   5.64599737e-01,   8.57098706e-01,
             7.65227549e-01,   7.24369155e-01,   4.99677302e-02,
             3.74362021e-01,   4.31403847e-01,   3.57860409e-02,
             5.31192042e-01,   6.72308186e-01,   8.25934786e-01,
             9.36668882e-02,   3.68291158e-01,   7.91786141e-01,
             4.15749689e-01,   7.12049047e-01,   2.24081343e-01,
             9.29944676e-01,   7.83173775e-01,   4.60055308e-01,
             7.78938109e-01,   2.40348537e-01,   7.02335094e-01,
             4.42602469e-01,   7.35565361e-01,   3.13262997e-01,
             4.72167025e-01,   2.00149059e-01,   7.86363676e-01,
             6.67275841e-01,   3.67522435e-02,   6.17558098e-02,
             4.81613883e-01,   3.62143962e-01,   4.17511525e-01,
             2.33739723e-01,   5.58514486e-01,   4.49049678e-01,
             3.77315874e-01,   7.29656232e-01,   3.40804927e-01,
             5.48800221e-01,   3.55594063e-01,   2.70974400e-01,
             5.13729988e-01,   3.79572584e-01,   5.62460820e-01,
             5.99412865e-01,   9.76472323e-01,   9.37317874e-01,
             6.56882692e-01,   3.86550994e-04,   3.12473351e-01,
             6.51573872e-01,   7.18726114e-03,   4.36029610e-01,
             6.48752285e-01,   8.91021330e-01,   8.55252299e-01,
             2.90048595e-01,   4.23247880e-01,   2.51762206e-01,
             1.26620594e-01,   3.65968778e-01,   6.25359422e-01,
             6.71788880e-01,   4.75553279e-01,   7.79866345e-01,
             1.99900481e-01,   8.15239513e-01,   3.76757677e-01,
             9.60941734e-01,   4.08099591e-01,   7.76659328e-01,
             2.79319862e-03,   4.16889319e-01,   2.41199358e-02,
             4.81224447e-01,   6.13107781e-01,   5.93068410e-01,
             2.19996580e-01,   3.77720040e-01,   8.04280471e-01,
             9.45875958e-01,   6.46540821e-01,   4.97131849e-01,
             1.84371465e-01])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.66198963,  0.8233683 ,  0.16039918,  0.33764377,  0.13008354,
               0.83003592,  0.16112207,  0.88147414,  0.88022448,  0.67730461,
               0.30912621,  0.99289389,  0.91707618,  0.82786088,  0.46008415,
               0.33175089,  0.21029056,  0.6631478 ,  0.22464681,  0.42614007,
               0.73470919,  0.81601925,  0.15471973,  0.15697129,  0.24250529,
               0.7872025 ,  0.44231138,  0.35833508,  0.52374369,  0.21065493,
               0.74108054,  0.25599742,  0.51289086,  0.91819635,  0.93936358,
               0.23337482,  0.98739213,  0.60071799,  0.60965309,  0.63474101,
               0.96778659,  0.89618508,  0.40469923,  0.63914584,  0.9786408 ,
               0.78576824,  0.76813305,  0.89910329,  0.44301329,  0.37801726,
               0.05121024,  0.41392055,  0.39232093,  0.35165363,  0.12669474,
               0.1783159 ,  0.81541184,  0.72952926,  0.972895  ,  0.64919505,
               0.66660807,  0.78324457,  0.92491673,  0.0995967 ,  0.24676027,
               0.53895289,  0.10254494,  0.78913739,  0.10820559,  0.13905566,
               0.3251168 ,  0.86138744,  0.79634341,  0.08843115,  0.47970246,
               0.94586974,  0.12476577,  0.62819373,  0.44597299,  0.26935226,
               0.70864772,  0.60056056,  0.04303044,  0.89756635,  0.98629098,
               0.51137125,  0.31879927,  0.7966604 ,  0.45327772,  0.39625407,
               0.02957017,  0.8576422 ,  0.34821053,  0.46180983,  0.18486301,
               0.08796557,  0.11601557,  0.51059818,  0.40195037,  0.48601291])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.77629219,  0.81854779,  0.72206995,  0.40818074,  0.54443528,
               0.98037573,  0.69920558,  0.50907333,  0.67696895,  0.49348782,
               0.36051564,  0.28308868,  0.62159785,  0.18860416,  0.91601803,
               0.31558129,  0.71488727,  0.04752266,  0.98927155,  0.95390793,
               0.16355798,  0.77748099,  0.10573187,  0.39610806,  0.77970035,
               0.67776547,  0.15224658,  0.6170226 ,  0.22574271,  0.67098095,
               0.8224803 ,  0.11591761,  0.21905071,  0.18271572,  0.36958226,
               0.80472135,  0.73454191,  0.69030186,  0.31081715,  0.33510535,
               0.99233417,  0.30530052,  0.93178121,  0.41790101,  0.59328381,
               0.6045294 ,  0.29994349,  0.23184826,  0.33027591,  0.57842386,
               0.19363655,  0.15373671,  0.70249357,  0.30387873,  0.60265267,
               0.53658828,  0.53160449,  0.55032468,  0.7857797 ,  0.47598544,
               0.91625029,  0.19154039,  0.57337481,  0.24323101,  0.42834663,
               0.65635204,  0.31537047,  0.70430204,  0.4545443 ,  0.92707905,
               0.9651747 ,  0.71445593,  0.47510256,  0.99960408,  0.17215235,
               0.28034835,  0.05971306,  0.3828174 ,  0.26468515,  0.65008259,
               0.13138636,  0.3154385 ,  0.66945062,  0.76460859,  0.69902615,
               0.1299236 ,  0.97440428,  0.59794371,  0.95177182,  0.0216716 ,
               0.64214646,  0.43723182,  0.8186287 ,  0.68094881,  0.93252538,
               0.82901693,  0.03093649,  0.95328502,  0.62597796,  0.40736026])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.60796792,  0.42136749,  0.27390658,  0.35671197,  0.48311217,
               0.48504749,  0.98196028,  0.41447217,  0.80868247,  0.50834216,
               0.12205964,  0.80144379,  0.13737723,  0.25856065,  0.10409604,
               0.39165354,  0.88556851,  0.40433702,  0.47183729,  0.32636935,
               0.60937673,  0.48790214,  0.02445519,  0.47998747,  0.42829808,
               0.84163734,  0.67110268,  0.14766803,  0.24663035,  0.11075932,
               0.1684259 ,  0.85401422,  0.81454727,  0.952062  ,  0.29324143,
               0.05111456,  0.66628464,  0.89649977,  0.82220163,  0.89634341,
               0.27417463,  0.96281609,  0.10633768,  0.71742408,  0.92939421,
               0.01487498,  0.34914533,  0.09202231,  0.71107333,  0.95687745,
               0.1819405 ,  0.14938879,  0.83337667,  0.63086055,  0.69883768,
               0.11980211,  0.48743675,  0.21297636,  0.82265292,  0.73084513,
               0.25335851,  0.47739925,  0.34838147,  0.66524346,  0.44634672,
               0.76546648,  0.23464059,  0.96946645,  0.22727035,  0.77596504,
               0.99202662,  0.14013019,  0.79354013,  0.83377267,  0.2883071 ,
               0.39006472,  0.22619318,  0.09683067,  0.77053211,  0.6734346 ,
               0.47271596,  0.21993901,  0.90734102,  0.04611811,  0.31625725,
               0.81624644,  0.08616585,  0.30273875,  0.5918    ,  0.65707335,
               0.74489611,  0.01091845,  0.48350671,  0.87527636,  0.66357711,
               0.53175006,  0.7135902 ,  0.36997226,  0.86242414,  0.31571721])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.9281446 ,  0.05682751,  0.83971941,  0.45037373,  0.78288546,
               0.54735012,  0.41022751,  0.92616415,  0.53047807,  0.79152098,
               0.71791088,  0.66679402,  0.19495615,  0.58698002,  0.03338802,
               0.06376495,  0.92625598,  0.39915246,  0.46003072,  0.47453878,
               0.6047716 ,  0.43523399,  0.81540141,  0.54847895,  0.43166439,
               0.79411749,  0.9344478 ,  0.27338616,  0.250373  ,  0.23177851,
               0.23695607,  0.37922274,  0.15702043,  0.9074164 ,  0.27460881,
               0.06537647,  0.53663745,  0.04992383,  0.86683059,  0.70128109,
               0.50589429,  0.19438015,  0.79793493,  0.80808524,  0.60762034,
               0.84690601,  0.1240348 ,  0.97278648,  0.23406862,  0.53531617,
               0.07286156,  0.58751993,  0.97664596,  0.9879412 ,  0.88398822,
               0.97714487,  0.02703589,  0.52595714,  0.12999662,  0.55903751,
               0.59518731,  0.83482929,  0.80951729,  0.71036321,  0.02681514,
               0.81999017,  0.93875321,  0.02886031,  0.73477388,  0.69646588,
               0.74300263,  0.94551934,  0.51787251,  0.95446287,  0.0850069 ,
               0.69961684,  0.71940484,  0.68550193,  0.87936821,  0.74574302,
               0.38323814,  0.46218019,  0.7425957 ,  0.79006647,  0.57360127,
               0.51750885,  0.14730517,  0.43493847,  0.00758034,  0.50892097,
               0.66921796,  0.4228233 ,  0.32702683,  0.62190735,  0.67415243,
               0.99742305,  0.55340793,  0.45511645,  0.28069787,  0.89145881])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.66198963,  0.8233683 ,  0.16039918,  0.33764377,  0.13008354,
               0.83003592,  0.16112207,  0.88147414,  0.88022448,  0.67730461,
               0.30912621,  0.99289389,  0.91707618,  0.82786088,  0.46008415,
               0.33175089,  0.21029056,  0.6631478 ,  0.22464681,  0.42614007,
               0.73470919,  0.81601925,  0.15471973,  0.15697129,  0.24250529,
               0.7872025 ,  0.44231138,  0.35833508,  0.52374369,  0.21065493,
               0.74108054,  0.25599742,  0.51289086,  0.91819635,  0.93936358,
               0.23337482,  0.98739213,  0.60071799,  0.60965309,  0.63474101,
               0.96778659,  0.89618508,  0.40469923,  0.63914584,  0.9786408 ,
               0.78576824,  0.76813305,  0.89910329,  0.44301329,  0.37801726,
               0.05121024,  0.41392055,  0.39232093,  0.35165363,  0.12669474,
               0.1783159 ,  0.81541184,  0.72952926,  0.972895  ,  0.64919505,
               0.66660807,  0.78324457,  0.92491673,  0.0995967 ,  0.24676027,
               0.53895289,  0.10254494,  0.78913739,  0.10820559,  0.13905566,
               0.3251168 ,  0.86138744,  0.79634341,  0.08843115,  0.47970246,
               0.94586974,  0.12476577,  0.62819373,  0.44597299,  0.26935226,
               0.70864772,  0.60056056,  0.04303044,  0.89756635,  0.98629098,
               0.51137125,  0.31879927,  0.7966604 ,  0.45327772,  0.39625407,
               0.02957017,  0.8576422 ,  0.34821053,  0.46180983,  0.18486301,
               0.08796557,  0.11601557,  0.51059818,  0.40195037,  0.48601291])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.77629219,  0.81854779,  0.72206995,  0.40818074,  0.54443528,
               0.98037573,  0.69920558,  0.50907333,  0.67696895,  0.49348782,
               0.36051564,  0.28308868,  0.62159785,  0.18860416,  0.91601803,
               0.31558129,  0.71488727,  0.04752266,  0.98927155,  0.95390793,
               0.16355798,  0.77748099,  0.10573187,  0.39610806,  0.77970035,
               0.67776547,  0.15224658,  0.6170226 ,  0.22574271,  0.67098095,
               0.8224803 ,  0.11591761,  0.21905071,  0.18271572,  0.36958226,
               0.80472135,  0.73454191,  0.69030186,  0.31081715,  0.33510535,
               0.99233417,  0.30530052,  0.93178121,  0.41790101,  0.59328381,
               0.6045294 ,  0.29994349,  0.23184826,  0.33027591,  0.57842386,
               0.19363655,  0.15373671,  0.70249357,  0.30387873,  0.60265267,
               0.53658828,  0.53160449,  0.55032468,  0.7857797 ,  0.47598544,
               0.91625029,  0.19154039,  0.57337481,  0.24323101,  0.42834663,
               0.65635204,  0.31537047,  0.70430204,  0.4545443 ,  0.92707905,
               0.9651747 ,  0.71445593,  0.47510256,  0.99960408,  0.17215235,
               0.28034835,  0.05971306,  0.3828174 ,  0.26468515,  0.65008259,
               0.13138636,  0.3154385 ,  0.66945062,  0.76460859,  0.69902615,
               0.1299236 ,  0.97440428,  0.59794371,  0.95177182,  0.0216716 ,
               0.64214646,  0.43723182,  0.8186287 ,  0.68094881,  0.93252538,
               0.82901693,  0.03093649,  0.95328502,  0.62597796,  0.40736026])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.60796792,  0.42136749,  0.27390658,  0.35671197,  0.48311217,
               0.48504749,  0.98196028,  0.41447217,  0.80868247,  0.50834216,
               0.12205964,  0.80144379,  0.13737723,  0.25856065,  0.10409604,
               0.39165354,  0.88556851,  0.40433702,  0.47183729,  0.32636935,
               0.60937673,  0.48790214,  0.02445519,  0.47998747,  0.42829808,
               0.84163734,  0.67110268,  0.14766803,  0.24663035,  0.11075932,
               0.1684259 ,  0.85401422,  0.81454727,  0.952062  ,  0.29324143,
               0.05111456,  0.66628464,  0.89649977,  0.82220163,  0.89634341,
               0.27417463,  0.96281609,  0.10633768,  0.71742408,  0.92939421,
               0.01487498,  0.34914533,  0.09202231,  0.71107333,  0.95687745,
               0.1819405 ,  0.14938879,  0.83337667,  0.63086055,  0.69883768,
               0.11980211,  0.48743675,  0.21297636,  0.82265292,  0.73084513,
               0.25335851,  0.47739925,  0.34838147,  0.66524346,  0.44634672,
               0.76546648,  0.23464059,  0.96946645,  0.22727035,  0.77596504,
               0.99202662,  0.14013019,  0.79354013,  0.83377267,  0.2883071 ,
               0.39006472,  0.22619318,  0.09683067,  0.77053211,  0.6734346 ,
               0.47271596,  0.21993901,  0.90734102,  0.04611811,  0.31625725,
               0.81624644,  0.08616585,  0.30273875,  0.5918    ,  0.65707335,
               0.74489611,  0.01091845,  0.48350671,  0.87527636,  0.66357711,
               0.53175006,  0.7135902 ,  0.36997226,  0.86242414,  0.31571721])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.47680827,  0.62783495,  0.68316938,  0.23491332,  0.74745575,
               0.85883323,  0.72676307,  0.14498843,  0.36690057,  0.23187981,
               0.86111005,  0.63128302,  0.8437867 ,  0.10219617,  0.04891631,
               0.48191087,  0.86931051,  0.68301686,  0.70922722,  0.77168123,
               0.15359388,  0.48181899,  0.07833163,  0.58922607,  0.58458277,
               0.36443979,  0.91615074,  0.1713184 ,  0.884843  ,  0.98352698,
               0.57706992,  0.72656095,  0.9231856 ,  0.45799956,  0.27339345,
               0.16512624,  0.62543268,  0.17738241,  0.44424422,  0.60884868,
               0.71534005,  0.64654062,  0.27606491,  0.15506936,  0.67013188,
               0.20402077,  0.19468845,  0.107655  ,  0.72186985,  0.4077861 ,
               0.63250886,  0.11895163,  0.44902171,  0.86842463,  0.06983703,
               0.29184953,  0.49132402,  0.2291502 ,  0.95745746,  0.5708395 ,
               0.14761901,  0.11674294,  0.46552719,  0.45904756,  0.97354205,
               0.936395  ,  0.15684916,  0.54843484,  0.90329651,  0.0014031 ,
               0.09323231,  0.47196048,  0.27731864,  0.94439711,  0.77224456,
               0.59852076,  0.27784965,  0.83567992,  0.85021797,  0.05416954,
               0.87661563,  0.07199051,  0.2652213 ,  0.97623287,  0.61871869,
               0.7364221 ,  0.24700526,  0.90459141,  0.54357874,  0.59805773,
               0.38741707,  0.27966343,  0.39142149,  0.71627824,  0.5091011 ,
               0.74835891,  0.28234639,  0.96022403,  0.16561147,  0.06175366])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  4.75754677e-01,   4.06630899e-01,   4.71279970e-01,
                6.31737022e-02,   1.98412952e-01,   9.03439590e-01,
                8.65523984e-01,   1.49454694e-01,   5.66026532e-01,
                7.87221640e-01,   4.80388126e-01,   5.03442045e-01,
                8.83156917e-01,   5.64599737e-01,   8.57098706e-01,
                7.65227549e-01,   7.24369155e-01,   4.99677302e-02,
                3.74362021e-01,   4.31403847e-01,   3.57860409e-02,
                5.31192042e-01,   6.72308186e-01,   8.25934786e-01,
                9.36668882e-02,   3.68291158e-01,   7.91786141e-01,
                4.15749689e-01,   7.12049047e-01,   2.24081343e-01,
                9.29944676e-01,   7.83173775e-01,   4.60055308e-01,
                7.78938109e-01,   2.40348537e-01,   7.02335094e-01,
                4.42602469e-01,   7.35565361e-01,   3.13262997e-01,
                4.72167025e-01,   2.00149059e-01,   7.86363676e-01,
                6.67275841e-01,   3.67522435e-02,   6.17558098e-02,
                4.81613883e-01,   3.62143962e-01,   4.17511525e-01,
                2.33739723e-01,   5.58514486e-01,   4.49049678e-01,
                3.77315874e-01,   7.29656232e-01,   3.40804927e-01,
                5.48800221e-01,   3.55594063e-01,   2.70974400e-01,
                5.13729988e-01,   3.79572584e-01,   5.62460820e-01,
                5.99412865e-01,   9.76472323e-01,   9.37317874e-01,
                6.56882692e-01,   3.86550994e-04,   3.12473351e-01,
                6.51573872e-01,   7.18726114e-03,   4.36029610e-01,
                6.48752285e-01,   8.91021330e-01,   8.55252299e-01,
                2.90048595e-01,   4.23247880e-01,   2.51762206e-01,
                1.26620594e-01,   3.65968778e-01,   6.25359422e-01,
                6.71788880e-01,   4.75553279e-01,   7.79866345e-01,
                1.99900481e-01,   8.15239513e-01,   3.76757677e-01,
                9.60941734e-01,   4.08099591e-01,   7.76659328e-01,
                2.79319862e-03,   4.16889319e-01,   2.41199358e-02,
                4.81224447e-01,   6.13107781e-01,   5.93068410e-01,
                2.19996580e-01,   3.77720040e-01,   8.04280471e-01,
                9.45875958e-01,   6.46540821e-01,   4.97131849e-01,
                1.84371465e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.56632272,  0.19281672,  0.40535181,  0.12280418,  0.91252597,
               0.37617402,  0.45026233,  0.60799361,  0.43428318,  0.51482343,
               0.24999014,  0.83036404,  0.320285  ,  0.27734086,  0.13317008,
               0.88028736,  0.52804649,  0.35943488,  0.13479518,  0.25743616,
               0.26258716,  0.55179146,  0.88568205,  0.63756938,  0.38351146,
               0.37727947,  0.50700586,  0.5497002 ,  0.37930521,  0.67047021,
               0.51895958,  0.08203698,  0.194689  ,  0.04759836,  0.80238928,
               0.17830958,  0.75969666,  0.17282843,  0.97188629,  0.74317218,
               0.24096671,  0.0202691 ,  0.42610375,  0.10974725,  0.72215242,
               0.59593956,  0.9089606 ,  0.44175562,  0.14025198,  0.20826216,
               0.64619554,  0.15396816,  0.04310709,  0.13447081,  0.27242967,
               0.96051309,  0.08286369,  0.26956691,  0.57103482,  0.41992637,
               0.94597802,  0.84813764,  0.36275996,  0.32276783,  0.2656991 ,
               0.5723782 ,  0.10171032,  0.05706553,  0.77730963,  0.31240352,
               0.4992636 ,  0.07210344,  0.61248084,  0.75431975,  0.39296205,
               0.35497847,  0.83018015,  0.98500359,  0.75419519,  0.68691481,
               0.94855533,  0.90493739,  0.8405226 ,  0.61526482,  0.57339593,
               0.17871729,  0.80747859,  0.94641377,  0.42507433,  0.06747381,
               0.71053892,  0.02318355,  0.50286999,  0.33953296,  0.32821656,
               0.72831705,  0.60604753,  0.06209816,  0.19010954,  0.80262739])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.12917956,  0.63274817,  0.66732882,  0.0116645 ,  0.25552897,
               0.36058576,  0.75618929,  0.91298704,  0.44318131,  0.06940041,
               0.71520341,  0.10964312,  0.62421374,  0.65879908,  0.89345964,
               0.4882527 ,  0.01399688,  0.31221244,  0.91919812,  0.05672919,
               0.57419061,  0.61676062,  0.9243148 ,  0.54876999,  0.85498432,
               0.56440336,  0.61969646,  0.62049084,  0.63370004,  0.66220899,
               0.79569074,  0.34513491,  0.26643292,  0.31845181,  0.80563459,
               0.56012205,  0.30409949,  0.65877855,  0.89975188,  0.35866676,
               0.32501249,  0.73567266,  0.99648344,  0.7693662 ,  0.2960722 ,
               0.94495026,  0.24385728,  0.43939489,  0.53737861,  0.61563945,
               0.57628227,  0.73489457,  0.07372084,  0.4155577 ,  0.06793104,
               0.13793235,  0.98059377,  0.55351561,  0.50904655,  0.83343561,
               0.20390671,  0.64967494,  0.99267065,  0.20846237,  0.79925052,
               0.89761483,  0.97501768,  0.89897107,  0.39326774,  0.64560099,
               0.0255796 ,  0.78072681,  0.50074579,  0.63280918,  0.74136191,
               0.73991857,  0.2226116 ,  0.74960372,  0.12197263,  0.74075221,
               0.38789722,  0.71562688,  0.25012675,  0.47154864,  0.25946436,
               0.91241233,  0.13957489,  0.14482578,  0.68691928,  0.48778373,
               0.17085507,  0.28238229,  0.54990279,  0.30730866,  0.41481821,
               0.53123132,  0.6633636 ,  0.98308648,  0.44728804,  0.5321124 ])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.84070364,  0.56063638,  0.22759731,  0.58006531,  0.68621058,
               0.84195669,  0.06642536,  0.46260319,  0.19152372,  0.78554107,
               0.95389653,  0.27315838,  0.00242082,  0.18918597,  0.99244163,
               0.83875183,  0.30372812,  0.69189222,  0.25100639,  0.20370159,
               0.8053522 ,  0.22085896,  0.11546309,  0.68864062,  0.69868609,
               0.36224037,  0.96764908,  0.38027671,  0.23421232,  0.89539995,
               0.68992015,  0.18827403,  0.81336763,  0.79857599,  0.18203279,
               0.17480883,  0.36804208,  0.96419144,  0.83477983,  0.98675943,
               0.47005728,  0.40989519,  0.30783203,  0.3973542 ,  0.53503153,
               0.63513007,  0.36063144,  0.11003047,  0.98546763,  0.58058253,
               0.38663458,  0.47985161,  0.06824616,  0.87480333,  0.31330495,
               0.50887585,  0.92207806,  0.44984902,  0.67518155,  0.58070853,
               0.21156776,  0.94212269,  0.44214974,  0.74127579,  0.63260778,
               0.81366442,  0.87437367,  0.5536313 ,  0.01958973,  0.24265717,
               0.93605939,  0.43122782,  0.22826465,  0.14423552,  0.83325535,
               0.90430389,  0.61481992,  0.8431469 ,  0.40155366,  0.47446232,
               0.8003653 ,  0.61940297,  0.62623141,  0.09855301,  0.37445214,
               0.87422553,  0.41735475,  0.06088473,  0.02338832,  0.73220502,
               0.57663574,  0.59511586,  0.76746778,  0.28124298,  0.84015855,
               0.46635542,  0.42756926,  0.72092699,  0.50472126,  0.71261549])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  4.75754677e-01,   4.06630899e-01,   4.71279970e-01,
                6.31737022e-02,   1.98412952e-01,   9.03439590e-01,
                8.65523984e-01,   1.49454694e-01,   5.66026532e-01,
                7.87221640e-01,   4.80388126e-01,   5.03442045e-01,
                8.83156917e-01,   5.64599737e-01,   8.57098706e-01,
                7.65227549e-01,   7.24369155e-01,   4.99677302e-02,
                3.74362021e-01,   4.31403847e-01,   3.57860409e-02,
                5.31192042e-01,   6.72308186e-01,   8.25934786e-01,
                9.36668882e-02,   3.68291158e-01,   7.91786141e-01,
                4.15749689e-01,   7.12049047e-01,   2.24081343e-01,
                9.29944676e-01,   7.83173775e-01,   4.60055308e-01,
                7.78938109e-01,   2.40348537e-01,   7.02335094e-01,
                4.42602469e-01,   7.35565361e-01,   3.13262997e-01,
                4.72167025e-01,   2.00149059e-01,   7.86363676e-01,
                6.67275841e-01,   3.67522435e-02,   6.17558098e-02,
                4.81613883e-01,   3.62143962e-01,   4.17511525e-01,
                2.33739723e-01,   5.58514486e-01,   4.49049678e-01,
                3.77315874e-01,   7.29656232e-01,   3.40804927e-01,
                5.48800221e-01,   3.55594063e-01,   2.70974400e-01,
                5.13729988e-01,   3.79572584e-01,   5.62460820e-01,
                5.99412865e-01,   9.76472323e-01,   9.37317874e-01,
                6.56882692e-01,   3.86550994e-04,   3.12473351e-01,
                6.51573872e-01,   7.18726114e-03,   4.36029610e-01,
                6.48752285e-01,   8.91021330e-01,   8.55252299e-01,
                2.90048595e-01,   4.23247880e-01,   2.51762206e-01,
                1.26620594e-01,   3.65968778e-01,   6.25359422e-01,
                6.71788880e-01,   4.75553279e-01,   7.79866345e-01,
                1.99900481e-01,   8.15239513e-01,   3.76757677e-01,
                9.60941734e-01,   4.08099591e-01,   7.76659328e-01,
                2.79319862e-03,   4.16889319e-01,   2.41199358e-02,
                4.81224447e-01,   6.13107781e-01,   5.93068410e-01,
                2.19996580e-01,   3.77720040e-01,   8.04280471e-01,
                9.45875958e-01,   6.46540821e-01,   4.97131849e-01,
                1.84371465e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.56632272,  0.19281672,  0.40535181,  0.12280418,  0.91252597,
               0.37617402,  0.45026233,  0.60799361,  0.43428318,  0.51482343,
               0.24999014,  0.83036404,  0.320285  ,  0.27734086,  0.13317008,
               0.88028736,  0.52804649,  0.35943488,  0.13479518,  0.25743616,
               0.26258716,  0.55179146,  0.88568205,  0.63756938,  0.38351146,
               0.37727947,  0.50700586,  0.5497002 ,  0.37930521,  0.67047021,
               0.51895958,  0.08203698,  0.194689  ,  0.04759836,  0.80238928,
               0.17830958,  0.75969666,  0.17282843,  0.97188629,  0.74317218,
               0.24096671,  0.0202691 ,  0.42610375,  0.10974725,  0.72215242,
               0.59593956,  0.9089606 ,  0.44175562,  0.14025198,  0.20826216,
               0.64619554,  0.15396816,  0.04310709,  0.13447081,  0.27242967,
               0.96051309,  0.08286369,  0.26956691,  0.57103482,  0.41992637,
               0.94597802,  0.84813764,  0.36275996,  0.32276783,  0.2656991 ,
               0.5723782 ,  0.10171032,  0.05706553,  0.77730963,  0.31240352,
               0.4992636 ,  0.07210344,  0.61248084,  0.75431975,  0.39296205,
               0.35497847,  0.83018015,  0.98500359,  0.75419519,  0.68691481,
               0.94855533,  0.90493739,  0.8405226 ,  0.61526482,  0.57339593,
               0.17871729,  0.80747859,  0.94641377,  0.42507433,  0.06747381,
               0.71053892,  0.02318355,  0.50286999,  0.33953296,  0.32821656,
               0.72831705,  0.60604753,  0.06209816,  0.19010954,  0.80262739])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.12917956,  0.63274817,  0.66732882,  0.0116645 ,  0.25552897,
               0.36058576,  0.75618929,  0.91298704,  0.44318131,  0.06940041,
               0.71520341,  0.10964312,  0.62421374,  0.65879908,  0.89345964,
               0.4882527 ,  0.01399688,  0.31221244,  0.91919812,  0.05672919,
               0.57419061,  0.61676062,  0.9243148 ,  0.54876999,  0.85498432,
               0.56440336,  0.61969646,  0.62049084,  0.63370004,  0.66220899,
               0.79569074,  0.34513491,  0.26643292,  0.31845181,  0.80563459,
               0.56012205,  0.30409949,  0.65877855,  0.89975188,  0.35866676,
               0.32501249,  0.73567266,  0.99648344,  0.7693662 ,  0.2960722 ,
               0.94495026,  0.24385728,  0.43939489,  0.53737861,  0.61563945,
               0.57628227,  0.73489457,  0.07372084,  0.4155577 ,  0.06793104,
               0.13793235,  0.98059377,  0.55351561,  0.50904655,  0.83343561,
               0.20390671,  0.64967494,  0.99267065,  0.20846237,  0.79925052,
               0.89761483,  0.97501768,  0.89897107,  0.39326774,  0.64560099,
               0.0255796 ,  0.78072681,  0.50074579,  0.63280918,  0.74136191,
               0.73991857,  0.2226116 ,  0.74960372,  0.12197263,  0.74075221,
               0.38789722,  0.71562688,  0.25012675,  0.47154864,  0.25946436,
               0.91241233,  0.13957489,  0.14482578,  0.68691928,  0.48778373,
               0.17085507,  0.28238229,  0.54990279,  0.30730866,  0.41481821,
               0.53123132,  0.6633636 ,  0.98308648,  0.44728804,  0.5321124 ])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.56979656,  0.07986397,  0.37658372,  0.74395644,  0.00642253,
               0.74610097,  0.16031972,  0.55074733,  0.63732823,  0.2891666 ,
               0.50930556,  0.80584948,  0.83832701,  0.81731599,  0.36955809,
               0.59044003,  0.05560606,  0.50979571,  0.03922826,  0.51678336,
               0.11172112,  0.96196942,  0.57025366,  0.57486142,  0.16914784,
               0.19970634,  0.37049998,  0.67516642,  0.32646044,  0.35038486,
               0.11207408,  0.310388  ,  0.93865657,  0.48596669,  0.24297704,
               0.75684453,  0.19792734,  0.82638397,  0.65103586,  0.52236345,
               0.66189056,  0.39847558,  0.85714883,  0.9856881 ,  0.57234635,
               0.59717876,  0.45241781,  0.54365615,  0.55037837,  0.40986768,
               0.24410161,  0.24042366,  0.1326967 ,  0.56369317,  0.14132538,
               0.58886568,  0.58083382,  0.60924825,  0.68506214,  0.08923543,
               0.45065427,  0.9866679 ,  0.16521593,  0.35575857,  0.83160838,
               0.04298938,  0.65137163,  0.37839475,  0.1422361 ,  0.16180718,
               0.48746226,  0.79776693,  0.24550141,  0.25341636,  0.5491147 ,
               0.44721703,  0.20305196,  0.87178365,  0.681488  ,  0.73969627,
               0.0061227 ,  0.25363051,  0.08933449,  0.19141901,  0.70458952,
               0.84790196,  0.42915488,  0.29613743,  0.09803473,  0.92654293,
               0.76729607,  0.62329892,  0.08012622,  0.5390914 ,  0.94417936,
               0.97968772,  0.21145085,  0.43439633,  0.78086655,  0.47499955])}]]


