
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='c29f91fa-b9ec-4842-884c-461479a21282'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='3b0e8121-746d-4ef5-8525-41d6f8b613ce'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.309241120915162],
     [0.125521100541898],
     [0.5534433595882],
     [0.211380280523064],
     [0.472757331586173],
     [0.574965959485053],
     [0.64961957242783],
     [0.235294235336756],
     [0.118732786828681],
     [0.590439163670581],
     [0.673259991085148],
     [0.821467284880803],
     [0.361614708039932],
     [0.985870321706498],
     [0.977088592507533],
     [0.661775292552257],
     [0.265636645113278],
     [0.953345303392135],
     [0.689719192741222],
     [0.545976828071996],
     [0.394295843958372],
     [0.712198183620682],
     [0.319520785519918],
     [0.546016068722564],
     [0.86811722277857],
     [0.638943611413135],
     [0.202517125283261],
     [0.793307248728343],
     [0.310893536102247],
     [0.993413743057655],
     [0.842644235550234],
     [0.545688404002925],
     [0.0758719747883775],
     [0.482682571237683],
     [0.597821758251865],
     [0.517301940859751],
     [0.95023403495611],
     [0.618755157388995],
     [0.130354186456541],
     [0.168253747631016],
     [0.523987114614342],
     [0.982719235952679],
     [0.0708719605654744],
     [0.0608622727016481],
     [0.291434975637263],
     [0.219105939111704],
     [0.061118704025403],
     [0.561442502705273],
     [0.733957964204808],
     [0.487027973483173],
     [0.889220484627275],
     [0.503882620731674],
     [0.945878143339887],
     [0.983890605492248],
     [0.73839509710828],
     [0.872505830735781],
     [0.557574525862314],
     [0.87801022038614],
     [0.115417359589881],
     [0.0898117812398207],
     [0.874847716717552],
     [0.998445706804314],
     [0.887903405620833],
     [0.524175721596068],
     [0.28902265234849],
     [0.736646823884958],
     [0.0989279787021388],
     [0.737566885988696],
     [0.345036912761137],
     [0.200858938434069],
     [0.336361227928278],
     [0.127232379607287],
     [0.76485640536804],
     [0.964309837418814],
     [0.618902188880911],
     [0.33344503956922],
     [0.749667723442097],
     [0.300200709791665],
     [0.733649350365566],
     [0.797649599894951],
     [0.00862827188969983],
     [0.22851390738074],
     [0.812371263728886],
     [0.545922630888413],
     [0.625390736585868],
     [0.314005425786745],
     [0.898572626007994],
     [0.922897695761001],
     [0.489267776869643],
     [0.489116805473803],
     [0.760370810535463],
     [0.635141012796576],
     [0.156446235344825],
     [0.96858996612009],
     [0.0126561012461144],
     [0.887652309929438],
     [0.173187912881962],
     [0.968156366166563],
     [0.342191282500326],
     [0.67094271294093]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.25896996])],
     [array([0.32248867])],
     [array([0.1406873])],
     [array([0.5945236])],
     [array([0.41346719])],
     [array([0.48829504])],
     [array([0.71964493])],
     [array([0.59981146])],
     [array([0.00276603])],
     [array([0.10667201])],
     [array([0.66454305])],
     [array([0.06634743])],
     [array([0.66639496])],
     [array([0.94472248])],
     [array([0.55638667])],
     [array([0.49437163])],
     [array([0.78683595])],
     [array([0.74127722])],
     [array([0.47788889])],
     [array([0.30676282])],
     [array([0.78333206])],
     [array([0.86983546])],
     [array([0.24603361])],
     [array([0.11211896])],
     [array([0.61697186])],
     [array([0.04169971])],
     [array([0.30875561])],
     [array([0.38296344])],
     [array([0.06255436])],
     [array([0.94079041])],
     [array([0.02622043])],
     [array([0.5273822])],
     [array([0.65618915])],
     [array([0.65781167])],
     [array([0.8036771])],
     [array([0.82611958])],
     [array([0.2050405])],
     [array([0.46115994])],
     [array([0.56490572])],
     [array([0.51961931])],
     [array([0.6895767])],
     [array([0.61755712])],
     [array([0.71427017])],
     [array([0.46579655])],
     [array([0.59379209])],
     [array([0.06557434])],
     [array([0.75802285])],
     [array([0.73299248])],
     [array([0.26854414])],
     [array([0.44591551])],
     [array([0.95049983])],
     [array([0.56038188])],
     [array([0.45205534])],
     [array([0.19355083])],
     [array([0.68753182])],
     [array([0.09368645])],
     [array([0.69009052])],
     [array([0.68007467])],
     [array([0.05072327])],
     [array([0.65060105])],
     [array([0.44613313])],
     [array([0.44416498])],
     [array([0.90339145])],
     [array([0.31418474])],
     [array([0.77858201])],
     [array([0.31772999])],
     [array([0.71163657])],
     [array([0.09225365])],
     [array([0.98706408])],
     [array([0.20272984])],
     [array([0.94550711])],
     [array([0.47782587])],
     [array([0.9363617])],
     [array([0.44297763])],
     [array([0.36591881])],
     [array([0.44735161])],
     [array([0.34052397])],
     [array([0.39652734])],
     [array([0.69163922])],
     [array([0.64514229])],
     [array([0.2429293])],
     [array([0.57973936])],
     [array([0.28452516])],
     [array([0.34391466])],
     [array([0.1583847])],
     [array([0.2061692])],
     [array([0.17344899])],
     [array([0.66367305])],
     [array([0.97347615])],
     [array([0.59734441])],
     [array([0.35695261])],
     [array([0.83964167])],
     [array([0.95129636])],
     [array([0.8457196])],
     [array([0.99880077])],
     [array([0.95395119])],
     [array([0.28448373])],
     [array([0.43515226])],
     [array([0.96110249])],
     [array([0.58019688])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.25896996, 0.32248867, 0.1406873 , 0.5945236 , 0.41346719,
           0.48829504, 0.71964493, 0.59981146, 0.00276603, 0.10667201,
           0.66454305, 0.06634743, 0.66639496, 0.94472248, 0.55638667,
           0.49437163, 0.78683595, 0.74127722, 0.47788889, 0.30676282,
           0.78333206, 0.86983546, 0.24603361, 0.11211896, 0.61697186,
           0.04169971, 0.30875561, 0.38296344, 0.06255436, 0.94079041,
           0.02622043, 0.5273822 , 0.65618915, 0.65781167, 0.8036771 ,
           0.82611958, 0.2050405 , 0.46115994, 0.56490572, 0.51961931,
           0.6895767 , 0.61755712, 0.71427017, 0.46579655, 0.59379209,
           0.06557434, 0.75802285, 0.73299248, 0.26854414, 0.44591551,
           0.95049983, 0.56038188, 0.45205534, 0.19355083, 0.68753182,
           0.09368645, 0.69009052, 0.68007467, 0.05072327, 0.65060105,
           0.44613313, 0.44416498, 0.90339145, 0.31418474, 0.77858201,
           0.31772999, 0.71163657, 0.09225365, 0.98706408, 0.20272984,
           0.94550711, 0.47782587, 0.9363617 , 0.44297763, 0.36591881,
           0.44735161, 0.34052397, 0.39652734, 0.69163922, 0.64514229,
           0.2429293 , 0.57973936, 0.28452516, 0.34391466, 0.1583847 ,
           0.2061692 , 0.17344899, 0.66367305, 0.97347615, 0.59734441,
           0.35695261, 0.83964167, 0.95129636, 0.8457196 , 0.99880077,
           0.95395119, 0.28448373, 0.43515226, 0.96110249, 0.58019688])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.30924112, 0.1255211 , 0.55344336, 0.21138028, 0.47275733,
              0.57496596, 0.64961957, 0.23529424, 0.11873279, 0.59043916,
              0.67325999, 0.82146728, 0.36161471, 0.98587032, 0.97708859,
              0.66177529, 0.26563665, 0.9533453 , 0.68971919, 0.54597683,
              0.39429584, 0.71219818, 0.31952079, 0.54601607, 0.86811722,
              0.63894361, 0.20251713, 0.79330725, 0.31089354, 0.99341374,
              0.84264424, 0.5456884 , 0.07587197, 0.48268257, 0.59782176,
              0.51730194, 0.95023403, 0.61875516, 0.13035419, 0.16825375,
              0.52398711, 0.98271924, 0.07087196, 0.06086227, 0.29143498,
              0.21910594, 0.0611187 , 0.5614425 , 0.73395796, 0.48702797,
              0.88922048, 0.50388262, 0.94587814, 0.98389061, 0.7383951 ,
              0.87250583, 0.55757453, 0.87801022, 0.11541736, 0.08981178,
              0.87484772, 0.99844571, 0.88790341, 0.52417572, 0.28902265,
              0.73664682, 0.09892798, 0.73756689, 0.34503691, 0.20085894,
              0.33636123, 0.12723238, 0.76485641, 0.96430984, 0.61890219,
              0.33344504, 0.74966772, 0.30020071, 0.73364935, 0.7976496 ,
              0.00862827, 0.22851391, 0.81237126, 0.54592263, 0.62539074,
              0.31400543, 0.89857263, 0.9228977 , 0.48926778, 0.48911681,
              0.76037081, 0.63514101, 0.15644624, 0.96858997, 0.0126561 ,
              0.88765231, 0.17318791, 0.96815637, 0.34219128, 0.67094271])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.20839834, 0.4401128 , 0.22893224, 0.94701679, 0.53743776,
              0.89484384, 0.85973766, 0.78275321, 0.57800368, 0.1908103 ,
              0.80534599, 0.76879955, 0.75728551, 0.97426917, 0.37116407,
              0.77427445, 0.16354274, 0.70871058, 0.2442276 , 0.81392402,
              0.98954834, 0.16161844, 0.04431867, 0.68802273, 0.91413783,
              0.49252748, 0.90536167, 0.37067779, 0.88432606, 0.77139745,
              0.46869225, 0.19803231, 0.63805317, 0.5707049 , 0.09282284,
              0.65137787, 0.74172774, 0.0269145 , 0.35443165, 0.37120679,
              0.09605886, 0.24564548, 0.20069112, 0.9644535 , 0.03114837,
              0.99621208, 0.95707155, 0.89972982, 0.56331329, 0.96274751,
              0.16505797, 0.0594638 , 0.79299417, 0.96768079, 0.27979965,
              0.62415233, 0.29458883, 0.94260059, 0.25980122, 0.38492372,
              0.25729378, 0.07144971, 0.75082157, 0.55474888, 0.39349189,
              0.55062984, 0.79632092, 0.36573062, 0.82062831, 0.51316682,
              0.60750185, 0.93402897, 0.07331725, 0.67253185, 0.12140491,
              0.53097215, 0.68995087, 0.16634251, 0.25814575, 0.5518674 ,
              0.80685793, 0.24406312, 0.44494512, 0.9388788 , 0.70743018,
              0.7963526 , 0.34969051, 0.78150828, 0.16135809, 0.05996032,
              0.16799314, 0.77997332, 0.76070958, 0.60442744, 0.31631831,
              0.43791042, 0.99999575, 0.42463659, 0.75434403, 0.984899  ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.60401252, 0.40831815, 0.49104759, 0.57963755, 0.25673742,
              0.03427345, 0.69779813, 0.72442343, 0.31590238, 0.68316565,
              0.455795  , 0.30088358, 0.78564874, 0.45142302, 0.25270811,
              0.43993663, 0.4534051 , 0.58941959, 0.59885991, 0.6769322 ,
              0.83539954, 0.07789498, 0.47811041, 0.13215871, 0.12818835,
              0.33417505, 0.55888677, 0.18293659, 0.04782999, 0.51841125,
              0.06992885, 0.21488808, 0.53812788, 0.09240507, 0.16054122,
              0.12634924, 0.58157427, 0.58772589, 0.15243934, 0.10185927,
              0.63576955, 0.15145989, 0.52603801, 0.58019219, 0.98587956,
              0.12541023, 0.8525155 , 0.86852606, 0.98752468, 0.14112937,
              0.74121834, 0.68407964, 0.35777991, 0.78823548, 0.49334348,
              0.47219467, 0.38081364, 0.77165193, 0.87849949, 0.1034856 ,
              0.54617052, 0.04185373, 0.27326967, 0.44768739, 0.33202835,
              0.45679756, 0.64336952, 0.03842362, 0.34901963, 0.93259808,
              0.34708596, 0.91776388, 0.04989076, 0.81891427, 0.04858512,
              0.85763416, 0.25337727, 0.18807804, 0.67540618, 0.37707353,
              0.51227642, 0.38066911, 0.64836053, 0.46383386, 0.71956192,
              0.57238214, 0.45385189, 0.78756969, 0.18144965, 0.08029849,
              0.85368314, 0.34387003, 0.9268186 , 0.86427174, 0.51991853,
              0.55037962, 0.04432505, 0.64938872, 0.63955376, 0.73411157])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.33407662, 0.12859971, 0.9839494 , 0.91276573, 0.32071569,
              0.87427337, 0.13413346, 0.76410149, 0.46431472, 0.73589209,
              0.70556241, 0.69382983, 0.51726951, 0.35080405, 0.0328079 ,
              0.71690129, 0.04952084, 0.0124059 , 0.52397245, 0.3064327 ,
              0.2127723 , 0.81269492, 0.22014626, 0.36161684, 0.9316059 ,
              0.89885071, 0.12994278, 0.11597055, 0.1034596 , 0.85680766,
              0.6494899 , 0.31626888, 0.77500234, 0.06673266, 0.69267026,
              0.00756449, 0.04749273, 0.7722259 , 0.71623373, 0.64716476,
              0.93016216, 0.61183086, 0.54095748, 0.06847146, 0.81470151,
              0.41191183, 0.55053178, 0.85606327, 0.41789701, 0.985339  ,
              0.60716489, 0.09650651, 0.890516  , 0.25101442, 0.67511922,
              0.482712  , 0.20158924, 0.63348816, 0.87006163, 0.65375643,
              0.37626238, 0.14262326, 0.72900642, 0.03771855, 0.8681015 ,
              0.15905485, 0.84281061, 0.90244197, 0.81458025, 0.4811663 ,
              0.94222657, 0.16902543, 0.32179716, 0.9075764 , 0.07163591,
              0.49842318, 0.89731992, 0.36991299, 0.70182752, 0.67549191,
              0.1624564 , 0.63671659, 0.96639855, 0.16173769, 0.05044047,
              0.52334179, 0.53692983, 0.34325212, 0.67064883, 0.6835163 ,
              0.68266707, 0.82732301, 0.3665976 , 0.20869055, 0.84261216,
              0.10411879, 0.05486445, 0.46526038, 0.15817891, 0.87713542])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.30924112, 0.1255211 , 0.55344336, 0.21138028, 0.47275733,
              0.57496596, 0.64961957, 0.23529424, 0.11873279, 0.59043916,
              0.67325999, 0.82146728, 0.36161471, 0.98587032, 0.97708859,
              0.66177529, 0.26563665, 0.9533453 , 0.68971919, 0.54597683,
              0.39429584, 0.71219818, 0.31952079, 0.54601607, 0.86811722,
              0.63894361, 0.20251713, 0.79330725, 0.31089354, 0.99341374,
              0.84264424, 0.5456884 , 0.07587197, 0.48268257, 0.59782176,
              0.51730194, 0.95023403, 0.61875516, 0.13035419, 0.16825375,
              0.52398711, 0.98271924, 0.07087196, 0.06086227, 0.29143498,
              0.21910594, 0.0611187 , 0.5614425 , 0.73395796, 0.48702797,
              0.88922048, 0.50388262, 0.94587814, 0.98389061, 0.7383951 ,
              0.87250583, 0.55757453, 0.87801022, 0.11541736, 0.08981178,
              0.87484772, 0.99844571, 0.88790341, 0.52417572, 0.28902265,
              0.73664682, 0.09892798, 0.73756689, 0.34503691, 0.20085894,
              0.33636123, 0.12723238, 0.76485641, 0.96430984, 0.61890219,
              0.33344504, 0.74966772, 0.30020071, 0.73364935, 0.7976496 ,
              0.00862827, 0.22851391, 0.81237126, 0.54592263, 0.62539074,
              0.31400543, 0.89857263, 0.9228977 , 0.48926778, 0.48911681,
              0.76037081, 0.63514101, 0.15644624, 0.96858997, 0.0126561 ,
              0.88765231, 0.17318791, 0.96815637, 0.34219128, 0.67094271])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.20839834, 0.4401128 , 0.22893224, 0.94701679, 0.53743776,
              0.89484384, 0.85973766, 0.78275321, 0.57800368, 0.1908103 ,
              0.80534599, 0.76879955, 0.75728551, 0.97426917, 0.37116407,
              0.77427445, 0.16354274, 0.70871058, 0.2442276 , 0.81392402,
              0.98954834, 0.16161844, 0.04431867, 0.68802273, 0.91413783,
              0.49252748, 0.90536167, 0.37067779, 0.88432606, 0.77139745,
              0.46869225, 0.19803231, 0.63805317, 0.5707049 , 0.09282284,
              0.65137787, 0.74172774, 0.0269145 , 0.35443165, 0.37120679,
              0.09605886, 0.24564548, 0.20069112, 0.9644535 , 0.03114837,
              0.99621208, 0.95707155, 0.89972982, 0.56331329, 0.96274751,
              0.16505797, 0.0594638 , 0.79299417, 0.96768079, 0.27979965,
              0.62415233, 0.29458883, 0.94260059, 0.25980122, 0.38492372,
              0.25729378, 0.07144971, 0.75082157, 0.55474888, 0.39349189,
              0.55062984, 0.79632092, 0.36573062, 0.82062831, 0.51316682,
              0.60750185, 0.93402897, 0.07331725, 0.67253185, 0.12140491,
              0.53097215, 0.68995087, 0.16634251, 0.25814575, 0.5518674 ,
              0.80685793, 0.24406312, 0.44494512, 0.9388788 , 0.70743018,
              0.7963526 , 0.34969051, 0.78150828, 0.16135809, 0.05996032,
              0.16799314, 0.77997332, 0.76070958, 0.60442744, 0.31631831,
              0.43791042, 0.99999575, 0.42463659, 0.75434403, 0.984899  ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.60401252, 0.40831815, 0.49104759, 0.57963755, 0.25673742,
              0.03427345, 0.69779813, 0.72442343, 0.31590238, 0.68316565,
              0.455795  , 0.30088358, 0.78564874, 0.45142302, 0.25270811,
              0.43993663, 0.4534051 , 0.58941959, 0.59885991, 0.6769322 ,
              0.83539954, 0.07789498, 0.47811041, 0.13215871, 0.12818835,
              0.33417505, 0.55888677, 0.18293659, 0.04782999, 0.51841125,
              0.06992885, 0.21488808, 0.53812788, 0.09240507, 0.16054122,
              0.12634924, 0.58157427, 0.58772589, 0.15243934, 0.10185927,
              0.63576955, 0.15145989, 0.52603801, 0.58019219, 0.98587956,
              0.12541023, 0.8525155 , 0.86852606, 0.98752468, 0.14112937,
              0.74121834, 0.68407964, 0.35777991, 0.78823548, 0.49334348,
              0.47219467, 0.38081364, 0.77165193, 0.87849949, 0.1034856 ,
              0.54617052, 0.04185373, 0.27326967, 0.44768739, 0.33202835,
              0.45679756, 0.64336952, 0.03842362, 0.34901963, 0.93259808,
              0.34708596, 0.91776388, 0.04989076, 0.81891427, 0.04858512,
              0.85763416, 0.25337727, 0.18807804, 0.67540618, 0.37707353,
              0.51227642, 0.38066911, 0.64836053, 0.46383386, 0.71956192,
              0.57238214, 0.45385189, 0.78756969, 0.18144965, 0.08029849,
              0.85368314, 0.34387003, 0.9268186 , 0.86427174, 0.51991853,
              0.55037962, 0.04432505, 0.64938872, 0.63955376, 0.73411157])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([6.42068906e-01, 4.77486508e-01, 3.68548372e-01, 8.80986798e-01,
              4.56789286e-01, 8.00980520e-01, 2.31728955e-01, 2.63839029e-01,
              6.08253694e-01, 1.68807004e-01, 9.39302045e-01, 3.11734595e-02,
              6.05544800e-01, 5.11499721e-01, 4.40392120e-01, 3.23322674e-01,
              1.19451395e-01, 7.65875148e-01, 5.69884615e-02, 8.02494030e-01,
              2.29497709e-01, 4.51305205e-01, 3.13456877e-01, 3.44238367e-01,
              1.65498424e-01, 2.87630218e-01, 5.71207710e-01, 8.53122350e-01,
              1.86910621e-01, 5.90487186e-01, 6.51657827e-01, 2.49034075e-01,
              2.06700564e-01, 9.37612470e-01, 3.79916790e-01, 2.83278393e-01,
              3.67097074e-01, 3.34431944e-01, 7.36103732e-01, 6.13519363e-01,
              9.29017810e-01, 4.08626831e-01, 2.70477840e-01, 1.19587776e-01,
              8.73215781e-01, 7.50461426e-01, 1.72951217e-01, 5.61364048e-01,
              9.21156111e-01, 7.34567837e-01, 8.44261860e-01, 4.13709198e-01,
              3.00145235e-01, 7.20560497e-01, 5.61461356e-01, 2.94487237e-01,
              3.73987040e-01, 7.61395561e-01, 9.78737975e-01, 3.51724772e-01,
              5.26004233e-01, 5.30464613e-01, 7.99968145e-01, 3.93078599e-01,
              1.84629964e-01, 6.28618695e-01, 6.64603455e-02, 2.25749616e-02,
              2.08674968e-01, 1.25319824e-01, 1.72951906e-01, 5.05797852e-01,
              8.77613720e-03, 2.35642278e-01, 3.21767272e-01, 5.52941503e-01,
              9.07234914e-01, 2.30033814e-01, 9.14792251e-01, 2.28181493e-01,
              2.24291096e-02, 9.43641540e-01, 5.48988375e-01, 2.84569286e-01,
              9.60386937e-01, 1.81083132e-01, 8.07256923e-01, 5.61561229e-01,
              8.96078379e-01, 6.87202779e-01, 3.22708468e-04, 2.58498918e-01,
              1.19454482e-01, 2.24561401e-01, 6.58411140e-01, 5.38037102e-01,
              3.23098846e-01, 5.11173492e-01, 7.59659570e-01, 6.22662529e-01])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.25896996, 0.32248867, 0.1406873 , 0.5945236 , 0.41346719,
              0.48829504, 0.71964493, 0.59981146, 0.00276603, 0.10667201,
              0.66454305, 0.06634743, 0.66639496, 0.94472248, 0.55638667,
              0.49437163, 0.78683595, 0.74127722, 0.47788889, 0.30676282,
              0.78333206, 0.86983546, 0.24603361, 0.11211896, 0.61697186,
              0.04169971, 0.30875561, 0.38296344, 0.06255436, 0.94079041,
              0.02622043, 0.5273822 , 0.65618915, 0.65781167, 0.8036771 ,
              0.82611958, 0.2050405 , 0.46115994, 0.56490572, 0.51961931,
              0.6895767 , 0.61755712, 0.71427017, 0.46579655, 0.59379209,
              0.06557434, 0.75802285, 0.73299248, 0.26854414, 0.44591551,
              0.95049983, 0.56038188, 0.45205534, 0.19355083, 0.68753182,
              0.09368645, 0.69009052, 0.68007467, 0.05072327, 0.65060105,
              0.44613313, 0.44416498, 0.90339145, 0.31418474, 0.77858201,
              0.31772999, 0.71163657, 0.09225365, 0.98706408, 0.20272984,
              0.94550711, 0.47782587, 0.9363617 , 0.44297763, 0.36591881,
              0.44735161, 0.34052397, 0.39652734, 0.69163922, 0.64514229,
              0.2429293 , 0.57973936, 0.28452516, 0.34391466, 0.1583847 ,
              0.2061692 , 0.17344899, 0.66367305, 0.97347615, 0.59734441,
              0.35695261, 0.83964167, 0.95129636, 0.8457196 , 0.99880077,
              0.95395119, 0.28448373, 0.43515226, 0.96110249, 0.58019688])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.12017651, 0.48621081, 0.72326162, 0.92684122, 0.02649008,
              0.25748608, 0.77712174, 0.48765304, 0.97322929, 0.86996847,
              0.00109251, 0.24783588, 0.17726273, 0.83557726, 0.17760671,
              0.29157334, 0.56776044, 0.62916168, 0.73930889, 0.76588451,
              0.16012048, 0.32695407, 0.80295168, 0.19580657, 0.52336165,
              0.08630494, 0.58125616, 0.47636188, 0.7502261 , 0.94887734,
              0.43332751, 0.81772498, 0.47080346, 0.18045166, 0.65627162,
              0.60156199, 0.14023327, 0.56499327, 0.60735184, 0.52746883,
              0.12351978, 0.17276246, 0.13164587, 0.71217351, 0.73104101,
              0.96686645, 0.64354383, 0.68255857, 0.2509419 , 0.57871027,
              0.27569251, 0.79105022, 0.12015542, 0.18797408, 0.72586391,
              0.02319972, 0.50086691, 0.03010508, 0.07688937, 0.84534506,
              0.7417244 , 0.964821  , 0.54323455, 0.28561175, 0.01936924,
              0.96303709, 0.50175463, 0.02925009, 0.07481814, 0.58380835,
              0.3136425 , 0.87356788, 0.1161683 , 0.54445438, 0.60933727,
              0.28110199, 0.90244602, 0.90828422, 0.6432104 , 0.29878544,
              0.1578819 , 0.03597794, 0.47162699, 0.70956968, 0.09510132,
              0.16531878, 0.96888617, 0.10740099, 0.47313267, 0.05487447,
              0.45929158, 0.79543122, 0.49994855, 0.58106538, 0.86672   ,
              0.48004968, 0.67805348, 0.47193109, 0.11722119, 0.23058479])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.18101078, 0.38210261, 0.05957178, 0.2886185 , 0.38857564,
              0.93913059, 0.94547492, 0.65276277, 0.06729077, 0.7850319 ,
              0.21107523, 0.59644128, 0.89661073, 0.38371297, 0.26284927,
              0.65535557, 0.75381111, 0.65413954, 0.48573885, 0.48186826,
              0.48276709, 0.05716103, 0.39874563, 0.07917842, 0.77084635,
              0.32591712, 0.02098503, 0.07387839, 0.88097021, 0.63109207,
              0.9887405 , 0.91310744, 0.67979246, 0.30346081, 0.8347631 ,
              0.24820001, 0.19809843, 0.66602053, 0.49370287, 0.00698535,
              0.22476966, 0.11170639, 0.36105578, 0.53384839, 0.24365762,
              0.45847853, 0.68461331, 0.26908017, 0.62659769, 0.05039953,
              0.35664338, 0.80419245, 0.19867788, 0.41453971, 0.79850207,
              0.99907206, 0.05993011, 0.91665278, 0.60821553, 0.8760532 ,
              0.14144964, 0.85986808, 0.50809196, 0.23308404, 0.6066254 ,
              0.72252637, 0.91975693, 0.57715119, 0.57445388, 0.25398536,
              0.30089596, 0.70428505, 0.72046613, 0.26457198, 0.79340071,
              0.98794461, 0.64975657, 0.29397843, 0.03208232, 0.83308407,
              0.33766942, 0.96167456, 0.60283004, 0.36170184, 0.06597535,
              0.54189854, 0.75446048, 0.73604309, 0.21392516, 0.26780102,
              0.51364962, 0.04232179, 0.9046626 , 0.43162382, 0.94479897,
              0.23332109, 0.80221292, 0.69555761, 0.04267634, 0.78743823])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.32736736, 0.1559494 , 0.34703967, 0.71674902, 0.46820198,
              0.19693782, 0.99098466, 0.1649205 , 0.37767939, 0.20638498,
              0.92879778, 0.26534349, 0.95287218, 0.39967243, 0.08360321,
              0.94804648, 0.45706239, 0.10942377, 0.2746926 , 0.92361188,
              0.70589215, 0.56112059, 0.51773701, 0.10890142, 0.29944687,
              0.54623253, 0.42019886, 0.41614056, 0.99051963, 0.18188424,
              0.92102851, 0.98325561, 0.34903844, 0.0175172 , 0.92061322,
              0.0849326 , 0.40145604, 0.37864867, 0.46430821, 0.77784824,
              0.56590903, 0.83667716, 0.93797454, 0.1129924 , 0.45215695,
              0.76516996, 0.00162619, 0.9898274 , 0.54355334, 0.90987536,
              0.36051715, 0.70454768, 0.17132557, 0.27491321, 0.56402826,
              0.89014723, 0.15661147, 0.80693027, 0.06263569, 0.22700284,
              0.74605586, 0.60419247, 0.53595744, 0.98871194, 0.95152005,
              0.50760067, 0.20751551, 0.8914622 , 0.02547397, 0.31515356,
              0.12111075, 0.32039974, 0.11037717, 0.78228697, 0.28118118,
              0.30031689, 0.25930104, 0.63295329, 0.95505086, 0.06381519,
              0.20724651, 0.57663919, 0.87953292, 0.31495114, 0.00794264,
              0.37972551, 0.68514969, 0.55626587, 0.32853566, 0.29139466,
              0.86810409, 0.16307754, 0.85346821, 0.44494107, 0.14965589,
              0.04816116, 0.80883375, 0.63103066, 0.25969492, 0.42412914])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.25896996, 0.32248867, 0.1406873 , 0.5945236 , 0.41346719,
              0.48829504, 0.71964493, 0.59981146, 0.00276603, 0.10667201,
              0.66454305, 0.06634743, 0.66639496, 0.94472248, 0.55638667,
              0.49437163, 0.78683595, 0.74127722, 0.47788889, 0.30676282,
              0.78333206, 0.86983546, 0.24603361, 0.11211896, 0.61697186,
              0.04169971, 0.30875561, 0.38296344, 0.06255436, 0.94079041,
              0.02622043, 0.5273822 , 0.65618915, 0.65781167, 0.8036771 ,
              0.82611958, 0.2050405 , 0.46115994, 0.56490572, 0.51961931,
              0.6895767 , 0.61755712, 0.71427017, 0.46579655, 0.59379209,
              0.06557434, 0.75802285, 0.73299248, 0.26854414, 0.44591551,
              0.95049983, 0.56038188, 0.45205534, 0.19355083, 0.68753182,
              0.09368645, 0.69009052, 0.68007467, 0.05072327, 0.65060105,
              0.44613313, 0.44416498, 0.90339145, 0.31418474, 0.77858201,
              0.31772999, 0.71163657, 0.09225365, 0.98706408, 0.20272984,
              0.94550711, 0.47782587, 0.9363617 , 0.44297763, 0.36591881,
              0.44735161, 0.34052397, 0.39652734, 0.69163922, 0.64514229,
              0.2429293 , 0.57973936, 0.28452516, 0.34391466, 0.1583847 ,
              0.2061692 , 0.17344899, 0.66367305, 0.97347615, 0.59734441,
              0.35695261, 0.83964167, 0.95129636, 0.8457196 , 0.99880077,
              0.95395119, 0.28448373, 0.43515226, 0.96110249, 0.58019688])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.12017651, 0.48621081, 0.72326162, 0.92684122, 0.02649008,
              0.25748608, 0.77712174, 0.48765304, 0.97322929, 0.86996847,
              0.00109251, 0.24783588, 0.17726273, 0.83557726, 0.17760671,
              0.29157334, 0.56776044, 0.62916168, 0.73930889, 0.76588451,
              0.16012048, 0.32695407, 0.80295168, 0.19580657, 0.52336165,
              0.08630494, 0.58125616, 0.47636188, 0.7502261 , 0.94887734,
              0.43332751, 0.81772498, 0.47080346, 0.18045166, 0.65627162,
              0.60156199, 0.14023327, 0.56499327, 0.60735184, 0.52746883,
              0.12351978, 0.17276246, 0.13164587, 0.71217351, 0.73104101,
              0.96686645, 0.64354383, 0.68255857, 0.2509419 , 0.57871027,
              0.27569251, 0.79105022, 0.12015542, 0.18797408, 0.72586391,
              0.02319972, 0.50086691, 0.03010508, 0.07688937, 0.84534506,
              0.7417244 , 0.964821  , 0.54323455, 0.28561175, 0.01936924,
              0.96303709, 0.50175463, 0.02925009, 0.07481814, 0.58380835,
              0.3136425 , 0.87356788, 0.1161683 , 0.54445438, 0.60933727,
              0.28110199, 0.90244602, 0.90828422, 0.6432104 , 0.29878544,
              0.1578819 , 0.03597794, 0.47162699, 0.70956968, 0.09510132,
              0.16531878, 0.96888617, 0.10740099, 0.47313267, 0.05487447,
              0.45929158, 0.79543122, 0.49994855, 0.58106538, 0.86672   ,
              0.48004968, 0.67805348, 0.47193109, 0.11722119, 0.23058479])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.18101078, 0.38210261, 0.05957178, 0.2886185 , 0.38857564,
              0.93913059, 0.94547492, 0.65276277, 0.06729077, 0.7850319 ,
              0.21107523, 0.59644128, 0.89661073, 0.38371297, 0.26284927,
              0.65535557, 0.75381111, 0.65413954, 0.48573885, 0.48186826,
              0.48276709, 0.05716103, 0.39874563, 0.07917842, 0.77084635,
              0.32591712, 0.02098503, 0.07387839, 0.88097021, 0.63109207,
              0.9887405 , 0.91310744, 0.67979246, 0.30346081, 0.8347631 ,
              0.24820001, 0.19809843, 0.66602053, 0.49370287, 0.00698535,
              0.22476966, 0.11170639, 0.36105578, 0.53384839, 0.24365762,
              0.45847853, 0.68461331, 0.26908017, 0.62659769, 0.05039953,
              0.35664338, 0.80419245, 0.19867788, 0.41453971, 0.79850207,
              0.99907206, 0.05993011, 0.91665278, 0.60821553, 0.8760532 ,
              0.14144964, 0.85986808, 0.50809196, 0.23308404, 0.6066254 ,
              0.72252637, 0.91975693, 0.57715119, 0.57445388, 0.25398536,
              0.30089596, 0.70428505, 0.72046613, 0.26457198, 0.79340071,
              0.98794461, 0.64975657, 0.29397843, 0.03208232, 0.83308407,
              0.33766942, 0.96167456, 0.60283004, 0.36170184, 0.06597535,
              0.54189854, 0.75446048, 0.73604309, 0.21392516, 0.26780102,
              0.51364962, 0.04232179, 0.9046626 , 0.43162382, 0.94479897,
              0.23332109, 0.80221292, 0.69555761, 0.04267634, 0.78743823])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.25223288, 0.82014864, 0.40224472, 0.2751771 , 0.92915585,
              0.99791262, 0.83737935, 0.43840109, 0.40917178, 0.4502805 ,
              0.43888254, 0.45945802, 0.08405471, 0.47343875, 0.75525043,
              0.75924873, 0.26781773, 0.92973551, 0.1835491 , 0.43066674,
              0.55233955, 0.50817967, 0.11129061, 0.6001165 , 0.65465455,
              0.28420831, 0.08661677, 0.27493628, 0.76363459, 0.32056976,
              0.56001425, 0.22644917, 0.53602819, 0.44530203, 0.52592966,
              0.24959576, 0.64390791, 0.83568967, 0.50579185, 0.15566933,
              0.04338277, 0.17881281, 0.50158617, 0.53776317, 0.02120267,
              0.6346772 , 0.89047726, 0.13335535, 0.80308389, 0.7804651 ,
              0.6109944 , 0.98088459, 0.28999459, 0.22276195, 0.27667926,
              0.71183771, 0.93088451, 0.20334632, 0.20501078, 0.44073398,
              0.1400978 , 0.41522651, 0.33543582, 0.66056624, 0.20956024,
              0.80517595, 0.13927544, 0.46392273, 0.24307376, 0.65337862,
              0.93884415, 0.11706435, 0.76436712, 0.82713914, 0.62693799,
              0.34348655, 0.15086982, 0.69452781, 0.81055956, 0.65887592,
              0.92738985, 0.23177785, 0.07065089, 0.87287021, 0.13092535,
              0.34824716, 0.40299557, 0.74959324, 0.68636175, 0.08053647,
              0.35711664, 0.18285902, 0.7060948 , 0.11899445, 0.05634143,
              0.3233084 , 0.86132305, 0.78846709, 0.53345357, 0.26019946])}]]


