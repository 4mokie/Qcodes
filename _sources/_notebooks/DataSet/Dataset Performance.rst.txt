
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='17cd4610-f2a9-429a-9260-65c310667e10'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='0dad83f1-a586-432b-8844-6a4ac2c80606'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.301153092473021],
     [0.0577269138702604],
     [0.539448750059408],
     [0.0330157714600291],
     [0.656978056145434],
     [0.0475184816995116],
     [0.852969868408183],
     [0.209827366219919],
     [0.909663124935816],
     [0.388583231384368],
     [0.498160763606878],
     [0.401036279923584],
     [0.6108664321149],
     [0.334472823698259],
     [0.200064343550289],
     [0.678096362156616],
     [0.903712064366133],
     [0.951983614081361],
     [0.195376946148991],
     [0.775214252964678],
     [0.0467396097422943],
     [0.459134662491361],
     [0.940116076421627],
     [0.175494430239332],
     [0.927096346541481],
     [0.639599476810851],
     [0.00827403639415336],
     [0.027604427306788],
     [0.148629581079397],
     [0.346897994438101],
     [0.163962998428636],
     [0.843699478669518],
     [0.615001691955699],
     [0.146787928996884],
     [0.0828881795972161],
     [0.867525244608235],
     [0.867218470748227],
     [0.648759913959966],
     [0.0306851723019307],
     [0.90995721285345],
     [0.883803519640494],
     [0.271201732921284],
     [0.276147388708109],
     [0.163641384997693],
     [0.180112495617457],
     [0.138963738360442],
     [0.37178957236513],
     [0.835643953113195],
     [0.819756353074312],
     [0.0515951044154164],
     [0.924884792844545],
     [0.037674742670737],
     [0.79912640371115],
     [0.220982157718683],
     [0.617680395302856],
     [0.457987279254979],
     [0.0327905496268043],
     [0.213567787904724],
     [0.801469391010492],
     [0.780046832433219],
     [0.974044265469225],
     [0.72399377133547],
     [0.544323598291166],
     [0.93322286314496],
     [0.692355471260509],
     [0.287256664018511],
     [0.311083003953868],
     [0.326957724674953],
     [0.679781240166514],
     [0.503132624432059],
     [0.876429629894827],
     [0.223972693340768],
     [0.643578853555081],
     [0.394302389797131],
     [0.85709346111043],
     [0.453478865242018],
     [0.864266418273113],
     [0.333822319367401],
     [0.506167491005595],
     [0.077958539995563],
     [0.960285931167155],
     [0.0898307981564922],
     [0.101211448717495],
     [0.539954594968804],
     [0.0771450225189327],
     [0.770178633487083],
     [0.893540819655115],
     [0.109364719401105],
     [0.447148891170943],
     [0.300056648496646],
     [0.330147281740866],
     [0.255427929229055],
     [0.851922094941883],
     [0.874735446048352],
     [0.560583735859551],
     [0.714647269478417],
     [0.897400915850198],
     [0.219243621487798],
     [0.00780187737638671],
     [0.236772385504647]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.23702226])],
     [array([0.85453966])],
     [array([0.61869045])],
     [array([0.84465805])],
     [array([0.09826885])],
     [array([0.98524966])],
     [array([0.10288157])],
     [array([0.90409342])],
     [array([0.09456638])],
     [array([0.96136489])],
     [array([0.9026984])],
     [array([0.2883972])],
     [array([0.59722006])],
     [array([0.19165984])],
     [array([0.74876129])],
     [array([0.75537305])],
     [array([0.29839278])],
     [array([0.57506963])],
     [array([0.05515604])],
     [array([0.51425165])],
     [array([0.21770518])],
     [array([0.32820386])],
     [array([0.7497047])],
     [array([0.54476425])],
     [array([0.89771712])],
     [array([0.86129528])],
     [array([0.69739161])],
     [array([0.49267129])],
     [array([0.97922313])],
     [array([0.14758285])],
     [array([0.92265054])],
     [array([0.01048546])],
     [array([0.83560941])],
     [array([0.04584653])],
     [array([0.30284162])],
     [array([0.6532923])],
     [array([0.09697245])],
     [array([0.60792792])],
     [array([0.5516442])],
     [array([0.70998827])],
     [array([0.50743579])],
     [array([0.04105246])],
     [array([0.68779401])],
     [array([0.84682711])],
     [array([0.97187028])],
     [array([0.97794854])],
     [array([0.41489819])],
     [array([0.04560051])],
     [array([0.66098597])],
     [array([0.77397646])],
     [array([0.66957928])],
     [array([0.6143488])],
     [array([0.23660742])],
     [array([0.52649168])],
     [array([0.16607542])],
     [array([0.9207837])],
     [array([0.29727395])],
     [array([0.35737699])],
     [array([0.10878614])],
     [array([0.45700102])],
     [array([0.86053724])],
     [array([0.01828253])],
     [array([0.56480321])],
     [array([0.99485654])],
     [array([0.44208571])],
     [array([0.56275021])],
     [array([0.55684929])],
     [array([0.59700107])],
     [array([0.43558365])],
     [array([0.89374647])],
     [array([0.17174205])],
     [array([0.84710692])],
     [array([0.25003919])],
     [array([0.39739014])],
     [array([0.68104507])],
     [array([0.31612689])],
     [array([0.77867223])],
     [array([0.4223803])],
     [array([0.69784513])],
     [array([0.56074212])],
     [array([0.8831751])],
     [array([0.73451185])],
     [array([0.27189966])],
     [array([0.91926886])],
     [array([0.9363323])],
     [array([0.05869847])],
     [array([0.17919561])],
     [array([0.79559756])],
     [array([0.75797422])],
     [array([0.32698525])],
     [array([0.05027803])],
     [array([0.83657909])],
     [array([0.14362912])],
     [array([0.7779777])],
     [array([0.79635792])],
     [array([0.00494974])],
     [array([0.22790413])],
     [array([0.23662964])],
     [array([0.50894316])],
     [array([0.81008403])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.23702226, 0.85453966, 0.61869045, 0.84465805, 0.09826885,
           0.98524966, 0.10288157, 0.90409342, 0.09456638, 0.96136489,
           0.9026984 , 0.2883972 , 0.59722006, 0.19165984, 0.74876129,
           0.75537305, 0.29839278, 0.57506963, 0.05515604, 0.51425165,
           0.21770518, 0.32820386, 0.7497047 , 0.54476425, 0.89771712,
           0.86129528, 0.69739161, 0.49267129, 0.97922313, 0.14758285,
           0.92265054, 0.01048546, 0.83560941, 0.04584653, 0.30284162,
           0.6532923 , 0.09697245, 0.60792792, 0.5516442 , 0.70998827,
           0.50743579, 0.04105246, 0.68779401, 0.84682711, 0.97187028,
           0.97794854, 0.41489819, 0.04560051, 0.66098597, 0.77397646,
           0.66957928, 0.6143488 , 0.23660742, 0.52649168, 0.16607542,
           0.9207837 , 0.29727395, 0.35737699, 0.10878614, 0.45700102,
           0.86053724, 0.01828253, 0.56480321, 0.99485654, 0.44208571,
           0.56275021, 0.55684929, 0.59700107, 0.43558365, 0.89374647,
           0.17174205, 0.84710692, 0.25003919, 0.39739014, 0.68104507,
           0.31612689, 0.77867223, 0.4223803 , 0.69784513, 0.56074212,
           0.8831751 , 0.73451185, 0.27189966, 0.91926886, 0.9363323 ,
           0.05869847, 0.17919561, 0.79559756, 0.75797422, 0.32698525,
           0.05027803, 0.83657909, 0.14362912, 0.7779777 , 0.79635792,
           0.00494974, 0.22790413, 0.23662964, 0.50894316, 0.81008403])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.30115309, 0.05772691, 0.53944875, 0.03301577, 0.65697806,
              0.04751848, 0.85296987, 0.20982737, 0.90966312, 0.38858323,
              0.49816076, 0.40103628, 0.61086643, 0.33447282, 0.20006434,
              0.67809636, 0.90371206, 0.95198361, 0.19537695, 0.77521425,
              0.04673961, 0.45913466, 0.94011608, 0.17549443, 0.92709635,
              0.63959948, 0.00827404, 0.02760443, 0.14862958, 0.34689799,
              0.163963  , 0.84369948, 0.61500169, 0.14678793, 0.08288818,
              0.86752524, 0.86721847, 0.64875991, 0.03068517, 0.90995721,
              0.88380352, 0.27120173, 0.27614739, 0.16364138, 0.1801125 ,
              0.13896374, 0.37178957, 0.83564395, 0.81975635, 0.0515951 ,
              0.92488479, 0.03767474, 0.7991264 , 0.22098216, 0.6176804 ,
              0.45798728, 0.03279055, 0.21356779, 0.80146939, 0.78004683,
              0.97404427, 0.72399377, 0.5443236 , 0.93322286, 0.69235547,
              0.28725666, 0.311083  , 0.32695772, 0.67978124, 0.50313262,
              0.87642963, 0.22397269, 0.64357885, 0.39430239, 0.85709346,
              0.45347887, 0.86426642, 0.33382232, 0.50616749, 0.07795854,
              0.96028593, 0.0898308 , 0.10121145, 0.53995459, 0.07714502,
              0.77017863, 0.89354082, 0.10936472, 0.44714889, 0.30005665,
              0.33014728, 0.25542793, 0.85192209, 0.87473545, 0.56058374,
              0.71464727, 0.89740092, 0.21924362, 0.00780188, 0.23677239])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([9.22162380e-01, 2.29281514e-01, 2.98125929e-01, 1.01266068e-01,
              1.46732153e-01, 4.07615696e-01, 2.50908429e-01, 3.38573016e-01,
              1.51416699e-01, 4.67811460e-01, 9.73152480e-01, 8.40565292e-01,
              7.54394804e-01, 7.17559412e-01, 7.08506264e-02, 8.25590464e-01,
              4.94536991e-01, 8.24887756e-01, 4.18243063e-01, 7.73282366e-01,
              8.95104945e-01, 6.92020773e-01, 4.42029902e-01, 8.60234406e-01,
              3.67678746e-01, 4.20980758e-02, 4.80596198e-01, 9.51628458e-01,
              9.66747042e-01, 8.66242589e-01, 1.47553544e-01, 8.62749325e-01,
              6.84794529e-01, 7.24408361e-01, 1.13407601e-01, 3.74118399e-01,
              5.17549112e-02, 5.17615285e-01, 7.94956408e-01, 1.00477640e-01,
              5.19699588e-01, 2.09504297e-01, 1.62535073e-01, 5.02215912e-01,
              3.60339524e-01, 2.77069498e-01, 3.09015077e-01, 8.52312306e-01,
              8.06597956e-04, 1.34258842e-01, 7.13704732e-01, 9.04808197e-01,
              3.37289625e-01, 3.33739799e-01, 1.14484981e-01, 4.97735635e-02,
              3.84371885e-01, 4.27713198e-01, 7.20919911e-01, 3.80612127e-01,
              1.49177287e-02, 2.81727115e-01, 4.22671375e-02, 9.95004079e-01,
              6.81215617e-02, 7.36152749e-01, 2.77017589e-01, 7.73746549e-01,
              9.36592119e-01, 2.22696405e-01, 1.43944696e-01, 7.01456962e-01,
              9.02208058e-01, 2.91465307e-01, 5.66362559e-01, 3.68302858e-01,
              8.16853907e-01, 2.53023912e-01, 1.22834839e-01, 3.92061648e-01,
              2.70460889e-02, 2.77184820e-01, 2.64627742e-02, 3.23677414e-01,
              3.55446101e-02, 8.99363056e-01, 5.21945015e-01, 8.14949791e-02,
              6.66082362e-01, 6.64137644e-02, 5.17754404e-01, 7.96406459e-01,
              2.50990616e-02, 5.05114329e-02, 7.07556287e-01, 8.30251501e-01,
              9.01316050e-01, 8.07732784e-01, 4.21235122e-01, 4.97474812e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([1.44570083e-01, 3.78974798e-01, 5.10726159e-01, 8.52727352e-02,
              8.77570803e-01, 1.47147290e-01, 3.60975647e-01, 8.43690454e-01,
              6.90108311e-01, 1.59770993e-01, 3.21212017e-01, 8.02923613e-01,
              4.82258199e-01, 4.80535006e-01, 6.21133030e-01, 7.28217716e-01,
              2.25781424e-01, 8.34345361e-02, 4.30909269e-01, 2.10819461e-01,
              7.68441622e-01, 6.95725972e-01, 7.12787479e-01, 4.15878469e-01,
              1.32408357e-01, 4.94908628e-01, 5.18796547e-01, 8.58378368e-01,
              1.24756902e-01, 8.58827920e-01, 8.66563966e-01, 6.73029579e-01,
              7.27387926e-01, 4.59419864e-02, 1.94404731e-01, 5.75518544e-01,
              2.88399324e-01, 3.37808839e-01, 3.17537801e-01, 6.89476029e-01,
              2.84004761e-01, 4.97818099e-01, 6.64933575e-01, 7.31896502e-01,
              6.36126758e-01, 4.85665933e-01, 5.93856334e-01, 2.01575250e-01,
              4.74238463e-01, 5.00437952e-01, 8.58278041e-01, 8.33529084e-02,
              1.64891302e-01, 3.39416057e-01, 4.40312266e-01, 2.91307095e-01,
              5.64210921e-02, 2.74698426e-01, 3.42171911e-01, 5.14690940e-02,
              7.66491426e-01, 9.44645795e-01, 9.39921117e-01, 3.03534313e-01,
              7.49638292e-01, 3.53139390e-01, 7.42080598e-01, 1.04835989e-01,
              6.33293561e-01, 1.76427459e-01, 6.01691307e-01, 5.36254490e-01,
              5.36699838e-04, 1.34000482e-01, 4.21716323e-01, 8.42780400e-01,
              8.22083723e-01, 5.33056423e-01, 7.83084149e-01, 4.02581845e-01,
              7.50146301e-01, 6.11927350e-01, 3.90544454e-01, 8.22965715e-01,
              2.04000009e-01, 7.16445377e-01, 5.30317689e-01, 6.76291238e-01,
              9.73946686e-01, 2.43127759e-01, 5.53601324e-01, 9.25125253e-01,
              8.16065937e-01, 5.92787494e-01, 1.09826638e-01, 3.39911296e-01,
              2.58311152e-01, 9.85626252e-01, 1.50316424e-02, 3.59526504e-01])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.43544285, 0.35342945, 0.871086  , 0.22498514, 0.23133731,
              0.55887472, 0.26950983, 0.64085915, 0.83655768, 0.05280815,
              0.90588987, 0.83596962, 0.55345567, 0.64433211, 0.31821928,
              0.5674536 , 0.0710958 , 0.26298092, 0.55743236, 0.4336672 ,
              0.16372469, 0.96039912, 0.30428837, 0.22452135, 0.98168246,
              0.07723452, 0.96453799, 0.45417132, 0.10410873, 0.56281874,
              0.80359918, 0.18586847, 0.2447285 , 0.66489385, 0.15605967,
              0.73945726, 0.57933793, 0.78242119, 0.11981273, 0.97665024,
              0.51572154, 0.70532437, 0.96240291, 0.61454758, 0.27792416,
              0.38164889, 0.8854871 , 0.92297617, 0.49323345, 0.47339054,
              0.85843308, 0.53812602, 0.52231716, 0.22693709, 0.25877082,
              0.28742937, 0.9945308 , 0.97959998, 0.99841253, 0.5232276 ,
              0.55651507, 0.91956966, 0.22430252, 0.75191008, 0.83369025,
              0.98020595, 0.61815524, 0.65332437, 0.97173387, 0.23190889,
              0.21487447, 0.43527546, 0.13406645, 0.71830707, 0.55073077,
              0.93831967, 0.55267209, 0.82124882, 0.88401765, 0.32174048,
              0.18275828, 0.1276368 , 0.4795676 , 0.37168349, 0.52928185,
              0.59458046, 0.0630275 , 0.11595763, 0.56243547, 0.40425773,
              0.27945216, 0.64356599, 0.40552742, 0.1862924 , 0.92236798,
              0.06859772, 0.46079803, 0.78260695, 0.23629811, 0.44923136])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.30115309, 0.05772691, 0.53944875, 0.03301577, 0.65697806,
              0.04751848, 0.85296987, 0.20982737, 0.90966312, 0.38858323,
              0.49816076, 0.40103628, 0.61086643, 0.33447282, 0.20006434,
              0.67809636, 0.90371206, 0.95198361, 0.19537695, 0.77521425,
              0.04673961, 0.45913466, 0.94011608, 0.17549443, 0.92709635,
              0.63959948, 0.00827404, 0.02760443, 0.14862958, 0.34689799,
              0.163963  , 0.84369948, 0.61500169, 0.14678793, 0.08288818,
              0.86752524, 0.86721847, 0.64875991, 0.03068517, 0.90995721,
              0.88380352, 0.27120173, 0.27614739, 0.16364138, 0.1801125 ,
              0.13896374, 0.37178957, 0.83564395, 0.81975635, 0.0515951 ,
              0.92488479, 0.03767474, 0.7991264 , 0.22098216, 0.6176804 ,
              0.45798728, 0.03279055, 0.21356779, 0.80146939, 0.78004683,
              0.97404427, 0.72399377, 0.5443236 , 0.93322286, 0.69235547,
              0.28725666, 0.311083  , 0.32695772, 0.67978124, 0.50313262,
              0.87642963, 0.22397269, 0.64357885, 0.39430239, 0.85709346,
              0.45347887, 0.86426642, 0.33382232, 0.50616749, 0.07795854,
              0.96028593, 0.0898308 , 0.10121145, 0.53995459, 0.07714502,
              0.77017863, 0.89354082, 0.10936472, 0.44714889, 0.30005665,
              0.33014728, 0.25542793, 0.85192209, 0.87473545, 0.56058374,
              0.71464727, 0.89740092, 0.21924362, 0.00780188, 0.23677239])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([9.22162380e-01, 2.29281514e-01, 2.98125929e-01, 1.01266068e-01,
              1.46732153e-01, 4.07615696e-01, 2.50908429e-01, 3.38573016e-01,
              1.51416699e-01, 4.67811460e-01, 9.73152480e-01, 8.40565292e-01,
              7.54394804e-01, 7.17559412e-01, 7.08506264e-02, 8.25590464e-01,
              4.94536991e-01, 8.24887756e-01, 4.18243063e-01, 7.73282366e-01,
              8.95104945e-01, 6.92020773e-01, 4.42029902e-01, 8.60234406e-01,
              3.67678746e-01, 4.20980758e-02, 4.80596198e-01, 9.51628458e-01,
              9.66747042e-01, 8.66242589e-01, 1.47553544e-01, 8.62749325e-01,
              6.84794529e-01, 7.24408361e-01, 1.13407601e-01, 3.74118399e-01,
              5.17549112e-02, 5.17615285e-01, 7.94956408e-01, 1.00477640e-01,
              5.19699588e-01, 2.09504297e-01, 1.62535073e-01, 5.02215912e-01,
              3.60339524e-01, 2.77069498e-01, 3.09015077e-01, 8.52312306e-01,
              8.06597956e-04, 1.34258842e-01, 7.13704732e-01, 9.04808197e-01,
              3.37289625e-01, 3.33739799e-01, 1.14484981e-01, 4.97735635e-02,
              3.84371885e-01, 4.27713198e-01, 7.20919911e-01, 3.80612127e-01,
              1.49177287e-02, 2.81727115e-01, 4.22671375e-02, 9.95004079e-01,
              6.81215617e-02, 7.36152749e-01, 2.77017589e-01, 7.73746549e-01,
              9.36592119e-01, 2.22696405e-01, 1.43944696e-01, 7.01456962e-01,
              9.02208058e-01, 2.91465307e-01, 5.66362559e-01, 3.68302858e-01,
              8.16853907e-01, 2.53023912e-01, 1.22834839e-01, 3.92061648e-01,
              2.70460889e-02, 2.77184820e-01, 2.64627742e-02, 3.23677414e-01,
              3.55446101e-02, 8.99363056e-01, 5.21945015e-01, 8.14949791e-02,
              6.66082362e-01, 6.64137644e-02, 5.17754404e-01, 7.96406459e-01,
              2.50990616e-02, 5.05114329e-02, 7.07556287e-01, 8.30251501e-01,
              9.01316050e-01, 8.07732784e-01, 4.21235122e-01, 4.97474812e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([1.44570083e-01, 3.78974798e-01, 5.10726159e-01, 8.52727352e-02,
              8.77570803e-01, 1.47147290e-01, 3.60975647e-01, 8.43690454e-01,
              6.90108311e-01, 1.59770993e-01, 3.21212017e-01, 8.02923613e-01,
              4.82258199e-01, 4.80535006e-01, 6.21133030e-01, 7.28217716e-01,
              2.25781424e-01, 8.34345361e-02, 4.30909269e-01, 2.10819461e-01,
              7.68441622e-01, 6.95725972e-01, 7.12787479e-01, 4.15878469e-01,
              1.32408357e-01, 4.94908628e-01, 5.18796547e-01, 8.58378368e-01,
              1.24756902e-01, 8.58827920e-01, 8.66563966e-01, 6.73029579e-01,
              7.27387926e-01, 4.59419864e-02, 1.94404731e-01, 5.75518544e-01,
              2.88399324e-01, 3.37808839e-01, 3.17537801e-01, 6.89476029e-01,
              2.84004761e-01, 4.97818099e-01, 6.64933575e-01, 7.31896502e-01,
              6.36126758e-01, 4.85665933e-01, 5.93856334e-01, 2.01575250e-01,
              4.74238463e-01, 5.00437952e-01, 8.58278041e-01, 8.33529084e-02,
              1.64891302e-01, 3.39416057e-01, 4.40312266e-01, 2.91307095e-01,
              5.64210921e-02, 2.74698426e-01, 3.42171911e-01, 5.14690940e-02,
              7.66491426e-01, 9.44645795e-01, 9.39921117e-01, 3.03534313e-01,
              7.49638292e-01, 3.53139390e-01, 7.42080598e-01, 1.04835989e-01,
              6.33293561e-01, 1.76427459e-01, 6.01691307e-01, 5.36254490e-01,
              5.36699838e-04, 1.34000482e-01, 4.21716323e-01, 8.42780400e-01,
              8.22083723e-01, 5.33056423e-01, 7.83084149e-01, 4.02581845e-01,
              7.50146301e-01, 6.11927350e-01, 3.90544454e-01, 8.22965715e-01,
              2.04000009e-01, 7.16445377e-01, 5.30317689e-01, 6.76291238e-01,
              9.73946686e-01, 2.43127759e-01, 5.53601324e-01, 9.25125253e-01,
              8.16065937e-01, 5.92787494e-01, 1.09826638e-01, 3.39911296e-01,
              2.58311152e-01, 9.85626252e-01, 1.50316424e-02, 3.59526504e-01])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.34434115, 0.91080321, 0.23788498, 0.5981273 , 0.09733442,
              0.78674642, 0.62282422, 0.40797736, 0.96020297, 0.50846465,
              0.43754043, 0.66911469, 0.11661836, 0.26741968, 0.54511492,
              0.80428752, 0.75281326, 0.60135028, 0.99301205, 0.51993879,
              0.70402744, 0.65123601, 0.04082201, 0.30314674, 0.63580463,
              0.80376805, 0.23758642, 0.90572268, 0.28732317, 0.2299084 ,
              0.08344637, 0.55666691, 0.6455711 , 0.41762072, 0.7846156 ,
              0.36463976, 0.84835236, 0.20736382, 0.26552098, 0.01609555,
              0.95791554, 0.38010039, 0.33973703, 0.47565296, 0.49382262,
              0.79325517, 0.7547431 , 0.82545546, 0.11543132, 0.96842874,
              0.1112038 , 0.78984799, 0.1392743 , 0.24042724, 0.71003645,
              0.28725942, 0.86465452, 0.70237413, 0.50682323, 0.19864207,
              0.19212576, 0.02946764, 0.17457632, 0.0167261 , 0.86163526,
              0.16921088, 0.39132134, 0.54451186, 0.9045858 , 0.87140182,
              0.79673816, 0.53209821, 0.77011668, 0.17072207, 0.64393619,
              0.2942124 , 0.92577826, 0.56060034, 0.96016139, 0.91845618,
              0.99480659, 0.98189   , 0.37986524, 0.78805509, 0.85247601,
              0.69495307, 0.23238413, 0.69885848, 0.46025585, 0.0663218 ,
              0.47326717, 0.45475517, 0.0480797 , 0.98293756, 0.11735113,
              0.9411557 , 0.86883025, 0.52766949, 0.99948707, 0.32110848])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.23702226, 0.85453966, 0.61869045, 0.84465805, 0.09826885,
              0.98524966, 0.10288157, 0.90409342, 0.09456638, 0.96136489,
              0.9026984 , 0.2883972 , 0.59722006, 0.19165984, 0.74876129,
              0.75537305, 0.29839278, 0.57506963, 0.05515604, 0.51425165,
              0.21770518, 0.32820386, 0.7497047 , 0.54476425, 0.89771712,
              0.86129528, 0.69739161, 0.49267129, 0.97922313, 0.14758285,
              0.92265054, 0.01048546, 0.83560941, 0.04584653, 0.30284162,
              0.6532923 , 0.09697245, 0.60792792, 0.5516442 , 0.70998827,
              0.50743579, 0.04105246, 0.68779401, 0.84682711, 0.97187028,
              0.97794854, 0.41489819, 0.04560051, 0.66098597, 0.77397646,
              0.66957928, 0.6143488 , 0.23660742, 0.52649168, 0.16607542,
              0.9207837 , 0.29727395, 0.35737699, 0.10878614, 0.45700102,
              0.86053724, 0.01828253, 0.56480321, 0.99485654, 0.44208571,
              0.56275021, 0.55684929, 0.59700107, 0.43558365, 0.89374647,
              0.17174205, 0.84710692, 0.25003919, 0.39739014, 0.68104507,
              0.31612689, 0.77867223, 0.4223803 , 0.69784513, 0.56074212,
              0.8831751 , 0.73451185, 0.27189966, 0.91926886, 0.9363323 ,
              0.05869847, 0.17919561, 0.79559756, 0.75797422, 0.32698525,
              0.05027803, 0.83657909, 0.14362912, 0.7779777 , 0.79635792,
              0.00494974, 0.22790413, 0.23662964, 0.50894316, 0.81008403])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.64815156, 0.03720099, 0.26336799, 0.93902739, 0.56734004,
              0.33568718, 0.4644435 , 0.36513769, 0.96399866, 0.8515884 ,
              0.69956115, 0.79539248, 0.01220234, 0.49196313, 0.62914999,
              0.89776866, 0.90758312, 0.0247973 , 0.19771163, 0.07836486,
              0.53921436, 0.21130267, 0.56042128, 0.04785484, 0.61212146,
              0.56378885, 0.81175808, 0.83123306, 0.40767973, 0.35861505,
              0.89320119, 0.53710619, 0.61629091, 0.59844974, 0.98208278,
              0.59335449, 0.8439662 , 0.84813183, 0.70427541, 0.94576547,
              0.14104627, 0.51529879, 0.76691096, 0.31874913, 0.32605249,
              0.69409014, 0.10661772, 0.64898653, 0.11806513, 0.09204873,
              0.70477876, 0.81805717, 0.42227095, 0.78540117, 0.95695013,
              0.78871332, 0.58299579, 0.68526818, 0.09123391, 0.66756479,
              0.68283609, 0.11353929, 0.91014894, 0.16642088, 0.19067133,
              0.44497968, 0.04758894, 0.91427038, 0.97267501, 0.05641727,
              0.82238636, 0.72940203, 0.73321825, 0.39170391, 0.39372793,
              0.945051  , 0.19691581, 0.4282    , 0.66708886, 0.92013127,
              0.98705644, 0.08383963, 0.3777606 , 0.00413264, 0.36370215,
              0.85879504, 0.67812521, 0.97721953, 0.00181708, 0.68622027,
              0.35517836, 0.89123065, 0.76798262, 0.01198997, 0.17271054,
              0.79848259, 0.55643213, 0.46202323, 0.29228546, 0.64926186])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.81568805, 0.48147311, 0.89070953, 0.43429724, 0.36354958,
              0.92658001, 0.32341832, 0.65192569, 0.50082221, 0.7820186 ,
              0.60477547, 0.13731356, 0.83204013, 0.19209635, 0.89705312,
              0.03802361, 0.16303912, 0.31988741, 0.1523463 , 0.65316777,
              0.21996791, 0.06283788, 0.61790182, 0.87324688, 0.77692904,
              0.83141907, 0.46645347, 0.47244511, 0.58988312, 0.31567668,
              0.30265201, 0.85118167, 0.58007749, 0.48331042, 0.39574754,
              0.36335227, 0.55001125, 0.41200284, 0.15516252, 0.05371399,
              0.78288255, 0.07027019, 0.26251396, 0.6489638 , 0.70663201,
              0.77603551, 0.09296666, 0.50861611, 0.45273028, 0.86277394,
              0.95125889, 0.96278839, 0.95218958, 0.71312225, 0.63637713,
              0.31337953, 0.1190694 , 0.6900236 , 0.83311283, 0.44868575,
              0.65912225, 0.86530882, 0.26817893, 0.49780522, 0.30175223,
              0.32934074, 0.5019122 , 0.95844519, 0.69960304, 0.7637833 ,
              0.86854465, 0.03172005, 0.70036741, 0.28685068, 0.28683939,
              0.63058801, 0.35670343, 0.20356901, 0.07555218, 0.41981457,
              0.27190986, 0.36456037, 0.623502  , 0.5340248 , 0.63763816,
              0.34876512, 0.95401476, 0.20861274, 0.7098714 , 0.87020729,
              0.77830286, 0.74774356, 0.34377995, 0.10649838, 0.98660346,
              0.04410472, 0.89628253, 0.12199894, 0.01248245, 0.7302639 ])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.50717458, 0.89415923, 0.84936349, 0.3982672 , 0.07294373,
              0.3891125 , 0.94360137, 0.28459264, 0.92400426, 0.49359679,
              0.73738374, 0.50483902, 0.06508061, 0.44203549, 0.69914163,
              0.6247978 , 0.49619908, 0.38308872, 0.84395777, 0.95340121,
              0.4994478 , 0.77620328, 0.69100949, 0.87733095, 0.50080959,
              0.94585039, 0.08530108, 0.94596583, 0.75694071, 0.72200016,
              0.9416729 , 0.51919467, 0.71784982, 0.74213091, 0.30829546,
              0.07886702, 0.36874183, 0.25756294, 0.09938445, 0.0125308 ,
              0.40373357, 0.59285303, 0.50743643, 0.10434018, 0.24107885,
              0.21939216, 0.39563802, 0.09484987, 0.6759197 , 0.86797737,
              0.82830248, 0.00983117, 0.93075893, 0.03939393, 0.01129915,
              0.30723781, 0.27406765, 0.06692962, 0.2235393 , 0.34136336,
              0.53623461, 0.32031095, 0.69948595, 0.93449768, 0.29507512,
              0.52662522, 0.52960474, 0.81825743, 0.83666197, 0.26393669,
              0.42336254, 0.07269977, 0.87397183, 0.23914594, 0.33450195,
              0.02354713, 0.45089843, 0.19238318, 0.45039335, 0.0259706 ,
              0.21306315, 0.66942178, 0.43147358, 0.44199403, 0.48566364,
              0.82618065, 0.76905272, 0.17465698, 0.7097149 , 0.94266753,
              0.61316583, 0.87591633, 0.61377994, 0.79675539, 0.85382117,
              0.08384473, 0.31162977, 0.87623359, 0.87715543, 0.84342463])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.23702226, 0.85453966, 0.61869045, 0.84465805, 0.09826885,
              0.98524966, 0.10288157, 0.90409342, 0.09456638, 0.96136489,
              0.9026984 , 0.2883972 , 0.59722006, 0.19165984, 0.74876129,
              0.75537305, 0.29839278, 0.57506963, 0.05515604, 0.51425165,
              0.21770518, 0.32820386, 0.7497047 , 0.54476425, 0.89771712,
              0.86129528, 0.69739161, 0.49267129, 0.97922313, 0.14758285,
              0.92265054, 0.01048546, 0.83560941, 0.04584653, 0.30284162,
              0.6532923 , 0.09697245, 0.60792792, 0.5516442 , 0.70998827,
              0.50743579, 0.04105246, 0.68779401, 0.84682711, 0.97187028,
              0.97794854, 0.41489819, 0.04560051, 0.66098597, 0.77397646,
              0.66957928, 0.6143488 , 0.23660742, 0.52649168, 0.16607542,
              0.9207837 , 0.29727395, 0.35737699, 0.10878614, 0.45700102,
              0.86053724, 0.01828253, 0.56480321, 0.99485654, 0.44208571,
              0.56275021, 0.55684929, 0.59700107, 0.43558365, 0.89374647,
              0.17174205, 0.84710692, 0.25003919, 0.39739014, 0.68104507,
              0.31612689, 0.77867223, 0.4223803 , 0.69784513, 0.56074212,
              0.8831751 , 0.73451185, 0.27189966, 0.91926886, 0.9363323 ,
              0.05869847, 0.17919561, 0.79559756, 0.75797422, 0.32698525,
              0.05027803, 0.83657909, 0.14362912, 0.7779777 , 0.79635792,
              0.00494974, 0.22790413, 0.23662964, 0.50894316, 0.81008403])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.64815156, 0.03720099, 0.26336799, 0.93902739, 0.56734004,
              0.33568718, 0.4644435 , 0.36513769, 0.96399866, 0.8515884 ,
              0.69956115, 0.79539248, 0.01220234, 0.49196313, 0.62914999,
              0.89776866, 0.90758312, 0.0247973 , 0.19771163, 0.07836486,
              0.53921436, 0.21130267, 0.56042128, 0.04785484, 0.61212146,
              0.56378885, 0.81175808, 0.83123306, 0.40767973, 0.35861505,
              0.89320119, 0.53710619, 0.61629091, 0.59844974, 0.98208278,
              0.59335449, 0.8439662 , 0.84813183, 0.70427541, 0.94576547,
              0.14104627, 0.51529879, 0.76691096, 0.31874913, 0.32605249,
              0.69409014, 0.10661772, 0.64898653, 0.11806513, 0.09204873,
              0.70477876, 0.81805717, 0.42227095, 0.78540117, 0.95695013,
              0.78871332, 0.58299579, 0.68526818, 0.09123391, 0.66756479,
              0.68283609, 0.11353929, 0.91014894, 0.16642088, 0.19067133,
              0.44497968, 0.04758894, 0.91427038, 0.97267501, 0.05641727,
              0.82238636, 0.72940203, 0.73321825, 0.39170391, 0.39372793,
              0.945051  , 0.19691581, 0.4282    , 0.66708886, 0.92013127,
              0.98705644, 0.08383963, 0.3777606 , 0.00413264, 0.36370215,
              0.85879504, 0.67812521, 0.97721953, 0.00181708, 0.68622027,
              0.35517836, 0.89123065, 0.76798262, 0.01198997, 0.17271054,
              0.79848259, 0.55643213, 0.46202323, 0.29228546, 0.64926186])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.81568805, 0.48147311, 0.89070953, 0.43429724, 0.36354958,
              0.92658001, 0.32341832, 0.65192569, 0.50082221, 0.7820186 ,
              0.60477547, 0.13731356, 0.83204013, 0.19209635, 0.89705312,
              0.03802361, 0.16303912, 0.31988741, 0.1523463 , 0.65316777,
              0.21996791, 0.06283788, 0.61790182, 0.87324688, 0.77692904,
              0.83141907, 0.46645347, 0.47244511, 0.58988312, 0.31567668,
              0.30265201, 0.85118167, 0.58007749, 0.48331042, 0.39574754,
              0.36335227, 0.55001125, 0.41200284, 0.15516252, 0.05371399,
              0.78288255, 0.07027019, 0.26251396, 0.6489638 , 0.70663201,
              0.77603551, 0.09296666, 0.50861611, 0.45273028, 0.86277394,
              0.95125889, 0.96278839, 0.95218958, 0.71312225, 0.63637713,
              0.31337953, 0.1190694 , 0.6900236 , 0.83311283, 0.44868575,
              0.65912225, 0.86530882, 0.26817893, 0.49780522, 0.30175223,
              0.32934074, 0.5019122 , 0.95844519, 0.69960304, 0.7637833 ,
              0.86854465, 0.03172005, 0.70036741, 0.28685068, 0.28683939,
              0.63058801, 0.35670343, 0.20356901, 0.07555218, 0.41981457,
              0.27190986, 0.36456037, 0.623502  , 0.5340248 , 0.63763816,
              0.34876512, 0.95401476, 0.20861274, 0.7098714 , 0.87020729,
              0.77830286, 0.74774356, 0.34377995, 0.10649838, 0.98660346,
              0.04410472, 0.89628253, 0.12199894, 0.01248245, 0.7302639 ])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([5.36828217e-02, 4.53175077e-02, 3.10609711e-01, 6.66302534e-01,
              1.69833770e-01, 2.20369431e-01, 9.75230537e-01, 6.83481266e-01,
              8.95425189e-01, 2.75162999e-01, 8.94698542e-01, 1.88486171e-01,
              1.66908392e-01, 2.75559018e-01, 7.62382516e-01, 3.49398386e-01,
              1.98346088e-01, 5.52934197e-03, 7.83242894e-01, 6.09841289e-01,
              8.27277939e-01, 7.72312176e-02, 1.06944760e-01, 6.41127067e-01,
              5.56726118e-01, 7.50850778e-01, 8.29062919e-01, 9.94375980e-01,
              3.00045551e-01, 6.50505977e-01, 6.16498669e-01, 3.90223429e-01,
              9.09133016e-02, 5.94807223e-01, 1.24255131e-01, 4.42519361e-01,
              9.31522554e-01, 4.63637230e-01, 2.68756957e-01, 2.26401070e-01,
              3.31006635e-01, 7.06743656e-01, 2.64112051e-01, 2.19904650e-01,
              9.40974115e-01, 1.21464354e-01, 2.59390771e-01, 8.69877497e-01,
              2.21378729e-01, 5.91991544e-01, 3.76432763e-01, 3.78714281e-01,
              6.29851954e-01, 4.20502274e-01, 4.43182860e-01, 8.71892712e-01,
              5.57172925e-01, 6.11517131e-01, 2.65708519e-01, 2.98907849e-02,
              2.24404308e-01, 7.84507430e-03, 6.66981085e-01, 3.56147990e-02,
              5.74066558e-01, 5.24146485e-01, 2.45636848e-02, 1.43049241e-01,
              2.49098409e-01, 4.97491847e-01, 7.29051096e-01, 8.90422083e-02,
              8.15992413e-01, 7.94975204e-01, 5.48332844e-01, 8.81189225e-01,
              7.60737812e-01, 7.70862797e-01, 1.33774010e-04, 7.29957282e-02,
              8.68585259e-01, 5.46247732e-01, 7.80676913e-01, 9.92498593e-01,
              7.01433958e-01, 3.19802127e-01, 7.99897180e-01, 3.47972816e-01,
              5.27199919e-02, 7.12744333e-01, 6.46167136e-01, 8.12444018e-01,
              5.54025564e-01, 6.86152509e-01, 6.44804619e-01, 1.40479220e-01,
              2.39645867e-01, 6.17529986e-01, 3.53444582e-01, 9.65341471e-01])}]]


