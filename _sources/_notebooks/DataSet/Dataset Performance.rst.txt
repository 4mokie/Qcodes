
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='1195ad37-e9b8-4207-8989-391b17d877d8'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='01276325-96af-45c6-8f73-2b4f1165d614'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.694430845542344],
     [0.55667583231879],
     [0.36280309448242],
     [0.435554076008184],
     [0.872970387405143],
     [0.50043247652359],
     [0.0817697865013547],
     [0.664705516349308],
     [0.57174417355482],
     [0.0189991468015108],
     [0.288270436491942],
     [0.139519320285045],
     [0.709167332989946],
     [0.426478215812031],
     [0.67238053797078],
     [0.762973824411644],
     [0.529611938398736],
     [0.950888091477913],
     [0.324360805016093],
     [0.820955244722767],
     [0.286771732665186],
     [0.534281580811996],
     [0.693795135010593],
     [0.844724544783908],
     [0.906671899839592],
     [0.20367713352307],
     [0.576534176326822],
     [0.949865938766947],
     [0.508835479617162],
     [0.661704970693184],
     [0.830043108278898],
     [0.0219970211842814],
     [0.0553256417450285],
     [0.0612706898787927],
     [0.583455062968747],
     [0.83852430935817],
     [0.999302180947681],
     [0.851205510129861],
     [0.0501189121153734],
     [0.928745055287231],
     [0.460662582647155],
     [0.351507084441052],
     [0.805155288610903],
     [0.383863688122494],
     [0.475981464687474],
     [0.109913270490634],
     [0.869011723479507],
     [0.676592946096279],
     [0.292295367707554],
     [0.214833719127372],
     [0.317836646991028],
     [0.177820059494055],
     [0.692407091139051],
     [0.712307885252379],
     [0.0375043466431725],
     [0.342473439042253],
     [0.828197466443084],
     [0.933219549432346],
     [0.123445998517661],
     [0.491795888878966],
     [0.914063525352097],
     [0.0182025028219184],
     [0.751086616425684],
     [0.409953151078683],
     [0.690959228806242],
     [0.768104213456166],
     [0.882457047796702],
     [0.740667276243258],
     [0.0683187507469399],
     [0.498463129625064],
     [0.333402985304921],
     [0.863647192510199],
     [0.847065569034084],
     [0.708839629476493],
     [0.36521581655686],
     [0.0272313020371086],
     [0.794517268114312],
     [0.105598618730097],
     [0.224364305125676],
     [0.2847814221043],
     [0.780979068881014],
     [0.872245278222342],
     [0.89038281834483],
     [0.553037332602504],
     [0.624184086638795],
     [0.382309379673485],
     [0.477049481071014],
     [0.323696489054175],
     [0.607235323788455],
     [0.58616323869862],
     [0.317939139435928],
     [0.811262208962587],
     [0.124860630462399],
     [0.487466997091839],
     [0.499735846476765],
     [0.114103313064172],
     [0.595215926514861],
     [0.345008284608181],
     [0.176131373636388],
     [0.588628999172608]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.74619055])],
     [array([0.33786827])],
     [array([0.94699171])],
     [array([0.91357618])],
     [array([0.07843793])],
     [array([0.66861315])],
     [array([0.03104412])],
     [array([0.78979509])],
     [array([0.64929929])],
     [array([0.1561072])],
     [array([0.49496538])],
     [array([0.61789477])],
     [array([0.12497948])],
     [array([0.74186962])],
     [array([0.78017238])],
     [array([0.7871193])],
     [array([0.05036574])],
     [array([0.02392483])],
     [array([0.39140713])],
     [array([0.30168046])],
     [array([0.10848234])],
     [array([0.17713366])],
     [array([0.9300219])],
     [array([0.82400923])],
     [array([0.09038007])],
     [array([0.14683974])],
     [array([0.77502943])],
     [array([0.01592311])],
     [array([0.00401389])],
     [array([0.62215096])],
     [array([0.69224087])],
     [array([0.90672277])],
     [array([0.67823913])],
     [array([0.53846808])],
     [array([0.07227555])],
     [array([0.32678992])],
     [array([0.7884056])],
     [array([0.34646747])],
     [array([0.26126257])],
     [array([0.9092006])],
     [array([0.10403147])],
     [array([0.51721502])],
     [array([0.75832009])],
     [array([0.48683089])],
     [array([0.96334659])],
     [array([0.5220697])],
     [array([0.75643489])],
     [array([0.30574761])],
     [array([0.98130196])],
     [array([0.82893148])],
     [array([0.27107559])],
     [array([0.0306753])],
     [array([0.72243376])],
     [array([0.62003745])],
     [array([0.04128943])],
     [array([0.52885998])],
     [array([0.63215781])],
     [array([0.62946605])],
     [array([0.28593126])],
     [array([0.25413808])],
     [array([0.51901088])],
     [array([0.03692971])],
     [array([0.06577539])],
     [array([0.67325308])],
     [array([0.71929748])],
     [array([0.04819842])],
     [array([0.70807697])],
     [array([0.32008239])],
     [array([0.60022234])],
     [array([0.51887977])],
     [array([0.54497939])],
     [array([0.18762108])],
     [array([0.90676717])],
     [array([0.13716104])],
     [array([0.85200689])],
     [array([0.7618069])],
     [array([0.80131347])],
     [array([0.38623931])],
     [array([0.03538727])],
     [array([0.99728416])],
     [array([0.92484687])],
     [array([0.5643478])],
     [array([0.90330165])],
     [array([0.21801387])],
     [array([0.30431255])],
     [array([0.34857346])],
     [array([0.53577474])],
     [array([0.55759138])],
     [array([0.81068504])],
     [array([0.50745423])],
     [array([0.26128099])],
     [array([0.15167319])],
     [array([0.35536313])],
     [array([0.92471704])],
     [array([0.51750872])],
     [array([0.30062478])],
     [array([0.7889559])],
     [array([0.94434014])],
     [array([0.02048096])],
     [array([0.86088475])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.74619055, 0.33786827, 0.94699171, 0.91357618, 0.07843793,
           0.66861315, 0.03104412, 0.78979509, 0.64929929, 0.1561072 ,
           0.49496538, 0.61789477, 0.12497948, 0.74186962, 0.78017238,
           0.7871193 , 0.05036574, 0.02392483, 0.39140713, 0.30168046,
           0.10848234, 0.17713366, 0.9300219 , 0.82400923, 0.09038007,
           0.14683974, 0.77502943, 0.01592311, 0.00401389, 0.62215096,
           0.69224087, 0.90672277, 0.67823913, 0.53846808, 0.07227555,
           0.32678992, 0.7884056 , 0.34646747, 0.26126257, 0.9092006 ,
           0.10403147, 0.51721502, 0.75832009, 0.48683089, 0.96334659,
           0.5220697 , 0.75643489, 0.30574761, 0.98130196, 0.82893148,
           0.27107559, 0.0306753 , 0.72243376, 0.62003745, 0.04128943,
           0.52885998, 0.63215781, 0.62946605, 0.28593126, 0.25413808,
           0.51901088, 0.03692971, 0.06577539, 0.67325308, 0.71929748,
           0.04819842, 0.70807697, 0.32008239, 0.60022234, 0.51887977,
           0.54497939, 0.18762108, 0.90676717, 0.13716104, 0.85200689,
           0.7618069 , 0.80131347, 0.38623931, 0.03538727, 0.99728416,
           0.92484687, 0.5643478 , 0.90330165, 0.21801387, 0.30431255,
           0.34857346, 0.53577474, 0.55759138, 0.81068504, 0.50745423,
           0.26128099, 0.15167319, 0.35536313, 0.92471704, 0.51750872,
           0.30062478, 0.7889559 , 0.94434014, 0.02048096, 0.86088475])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.69443085, 0.55667583, 0.36280309, 0.43555408, 0.87297039,
              0.50043248, 0.08176979, 0.66470552, 0.57174417, 0.01899915,
              0.28827044, 0.13951932, 0.70916733, 0.42647822, 0.67238054,
              0.76297382, 0.52961194, 0.95088809, 0.32436081, 0.82095524,
              0.28677173, 0.53428158, 0.69379514, 0.84472454, 0.9066719 ,
              0.20367713, 0.57653418, 0.94986594, 0.50883548, 0.66170497,
              0.83004311, 0.02199702, 0.05532564, 0.06127069, 0.58345506,
              0.83852431, 0.99930218, 0.85120551, 0.05011891, 0.92874506,
              0.46066258, 0.35150708, 0.80515529, 0.38386369, 0.47598146,
              0.10991327, 0.86901172, 0.67659295, 0.29229537, 0.21483372,
              0.31783665, 0.17782006, 0.69240709, 0.71230789, 0.03750435,
              0.34247344, 0.82819747, 0.93321955, 0.123446  , 0.49179589,
              0.91406353, 0.0182025 , 0.75108662, 0.40995315, 0.69095923,
              0.76810421, 0.88245705, 0.74066728, 0.06831875, 0.49846313,
              0.33340299, 0.86364719, 0.84706557, 0.70883963, 0.36521582,
              0.0272313 , 0.79451727, 0.10559862, 0.22436431, 0.28478142,
              0.78097907, 0.87224528, 0.89038282, 0.55303733, 0.62418409,
              0.38230938, 0.47704948, 0.32369649, 0.60723532, 0.58616324,
              0.31793914, 0.81126221, 0.12486063, 0.487467  , 0.49973585,
              0.11410331, 0.59521593, 0.34500828, 0.17613137, 0.588629  ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.97713592, 0.06686628, 0.02687657, 0.10470804, 0.66175102,
              0.55563856, 0.34766374, 0.07059739, 0.74293906, 0.63465866,
              0.32071653, 0.44526474, 0.80902362, 0.22038198, 0.30942939,
              0.80085331, 0.97863018, 0.85761985, 0.90548654, 0.62065509,
              0.14185501, 0.71268274, 0.49950274, 0.95615861, 0.91747189,
              0.78534374, 0.49715674, 0.22584288, 0.00664844, 0.6173331 ,
              0.5181737 , 0.32013623, 0.36686455, 0.61094755, 0.49344048,
              0.85695191, 0.18683955, 0.70967029, 0.50780007, 0.51073175,
              0.26823967, 0.35306159, 0.79676807, 0.30865142, 0.66824126,
              0.33264949, 0.20873148, 0.01259862, 0.2867121 , 0.30201233,
              0.6713078 , 0.14146317, 0.45518664, 0.10275259, 0.0844442 ,
              0.91689694, 0.28831213, 0.37227886, 0.40820114, 0.99495096,
              0.25108071, 0.03330572, 0.06791374, 0.27861112, 0.04083995,
              0.04966391, 0.52897988, 0.12737884, 0.16909543, 0.61329759,
              0.43998573, 0.44645377, 0.59427999, 0.31507379, 0.19419387,
              0.21468622, 0.73632278, 0.99553209, 0.90657847, 0.89823379,
              0.8482528 , 0.58904301, 0.0603368 , 0.65312686, 0.78166957,
              0.17737511, 0.37787831, 0.9454156 , 0.63587114, 0.91648134,
              0.80180102, 0.05813901, 0.94655949, 0.62147637, 0.55277955,
              0.10695102, 0.29882617, 0.26155105, 0.04336221, 0.97223222])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.4476165 , 0.03363786, 0.55335219, 0.13735993, 0.82092155,
              0.00419737, 0.28446843, 0.18252971, 0.17170607, 0.27177345,
              0.26777835, 0.67155269, 0.24374565, 0.96230065, 0.18019317,
              0.85075296, 0.12582679, 0.24606568, 0.91401706, 0.47308834,
              0.63668392, 0.55494114, 0.21814981, 0.10153721, 0.6626768 ,
              0.00416792, 0.10125859, 0.93635668, 0.01197135, 0.68189219,
              0.68897145, 0.72634615, 0.97273268, 0.66486018, 0.31765674,
              0.40535109, 0.56983   , 0.36461283, 0.47359409, 0.08858057,
              0.6422688 , 0.96076734, 0.0571728 , 0.55615107, 0.61385587,
              0.64240751, 0.44183751, 0.71543977, 0.54304682, 0.6982057 ,
              0.29422791, 0.83693271, 0.79023468, 0.42174664, 0.9858691 ,
              0.43349315, 0.72504611, 0.6970914 , 0.55923248, 0.54664674,
              0.65495404, 0.02266887, 0.48411195, 0.87167205, 0.75345744,
              0.63369017, 0.10693472, 0.69762935, 0.83287904, 0.20763944,
              0.21330729, 0.38273155, 0.85553502, 0.70018298, 0.64386167,
              0.59250038, 0.03428029, 0.85868333, 0.24695321, 0.20648919,
              0.1769024 , 0.95382355, 0.47124291, 0.94612826, 0.40461537,
              0.88565269, 0.7234794 , 0.11265429, 0.57800615, 0.6984331 ,
              0.32709145, 0.80039471, 0.27714653, 0.17637409, 0.26407065,
              0.44938239, 0.91114377, 0.46167929, 0.48685178, 0.62332561])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.77755968, 0.68220202, 0.62789084, 0.09770113, 0.46103172,
              0.98379463, 0.85329701, 0.19561344, 0.31694746, 0.88451686,
              0.15003942, 0.13839407, 0.0660254 , 0.31508058, 0.79243101,
              0.77392649, 0.18829612, 0.66507893, 0.23729916, 0.42487351,
              0.95456028, 0.42396323, 0.26440068, 0.55736996, 0.15967216,
              0.77881746, 0.23819743, 0.49280826, 0.03504219, 0.90736899,
              0.73550617, 0.24874807, 0.45965267, 0.06931088, 0.32932255,
              0.97518477, 0.6065368 , 0.55547074, 0.48377337, 0.11047177,
              0.33624084, 0.20085808, 0.95723528, 0.93981973, 0.90949935,
              0.31396778, 0.18893453, 0.51156759, 0.16424373, 0.48380434,
              0.44098225, 0.11794383, 0.22901951, 0.83063525, 0.69161097,
              0.88642443, 0.38635913, 0.1546152 , 0.78111829, 0.38916189,
              0.32434738, 0.42889027, 0.82820236, 0.18782642, 0.33871799,
              0.62714374, 0.97807942, 0.40574734, 0.06339043, 0.25754988,
              0.7444404 , 0.81531568, 0.09456286, 0.23416958, 0.29428676,
              0.55102259, 0.27364205, 0.82026116, 0.14836137, 0.63037539,
              0.71065905, 0.71628833, 0.56589038, 0.03420382, 0.8417201 ,
              0.68339161, 0.30216435, 0.88752589, 0.32179415, 0.65998317,
              0.1951129 , 0.83690182, 0.79021769, 0.98812524, 0.50430838,
              0.37414599, 0.14107732, 0.75754597, 0.64563229, 0.67825302])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.69443085, 0.55667583, 0.36280309, 0.43555408, 0.87297039,
              0.50043248, 0.08176979, 0.66470552, 0.57174417, 0.01899915,
              0.28827044, 0.13951932, 0.70916733, 0.42647822, 0.67238054,
              0.76297382, 0.52961194, 0.95088809, 0.32436081, 0.82095524,
              0.28677173, 0.53428158, 0.69379514, 0.84472454, 0.9066719 ,
              0.20367713, 0.57653418, 0.94986594, 0.50883548, 0.66170497,
              0.83004311, 0.02199702, 0.05532564, 0.06127069, 0.58345506,
              0.83852431, 0.99930218, 0.85120551, 0.05011891, 0.92874506,
              0.46066258, 0.35150708, 0.80515529, 0.38386369, 0.47598146,
              0.10991327, 0.86901172, 0.67659295, 0.29229537, 0.21483372,
              0.31783665, 0.17782006, 0.69240709, 0.71230789, 0.03750435,
              0.34247344, 0.82819747, 0.93321955, 0.123446  , 0.49179589,
              0.91406353, 0.0182025 , 0.75108662, 0.40995315, 0.69095923,
              0.76810421, 0.88245705, 0.74066728, 0.06831875, 0.49846313,
              0.33340299, 0.86364719, 0.84706557, 0.70883963, 0.36521582,
              0.0272313 , 0.79451727, 0.10559862, 0.22436431, 0.28478142,
              0.78097907, 0.87224528, 0.89038282, 0.55303733, 0.62418409,
              0.38230938, 0.47704948, 0.32369649, 0.60723532, 0.58616324,
              0.31793914, 0.81126221, 0.12486063, 0.487467  , 0.49973585,
              0.11410331, 0.59521593, 0.34500828, 0.17613137, 0.588629  ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.97713592, 0.06686628, 0.02687657, 0.10470804, 0.66175102,
              0.55563856, 0.34766374, 0.07059739, 0.74293906, 0.63465866,
              0.32071653, 0.44526474, 0.80902362, 0.22038198, 0.30942939,
              0.80085331, 0.97863018, 0.85761985, 0.90548654, 0.62065509,
              0.14185501, 0.71268274, 0.49950274, 0.95615861, 0.91747189,
              0.78534374, 0.49715674, 0.22584288, 0.00664844, 0.6173331 ,
              0.5181737 , 0.32013623, 0.36686455, 0.61094755, 0.49344048,
              0.85695191, 0.18683955, 0.70967029, 0.50780007, 0.51073175,
              0.26823967, 0.35306159, 0.79676807, 0.30865142, 0.66824126,
              0.33264949, 0.20873148, 0.01259862, 0.2867121 , 0.30201233,
              0.6713078 , 0.14146317, 0.45518664, 0.10275259, 0.0844442 ,
              0.91689694, 0.28831213, 0.37227886, 0.40820114, 0.99495096,
              0.25108071, 0.03330572, 0.06791374, 0.27861112, 0.04083995,
              0.04966391, 0.52897988, 0.12737884, 0.16909543, 0.61329759,
              0.43998573, 0.44645377, 0.59427999, 0.31507379, 0.19419387,
              0.21468622, 0.73632278, 0.99553209, 0.90657847, 0.89823379,
              0.8482528 , 0.58904301, 0.0603368 , 0.65312686, 0.78166957,
              0.17737511, 0.37787831, 0.9454156 , 0.63587114, 0.91648134,
              0.80180102, 0.05813901, 0.94655949, 0.62147637, 0.55277955,
              0.10695102, 0.29882617, 0.26155105, 0.04336221, 0.97223222])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.4476165 , 0.03363786, 0.55335219, 0.13735993, 0.82092155,
              0.00419737, 0.28446843, 0.18252971, 0.17170607, 0.27177345,
              0.26777835, 0.67155269, 0.24374565, 0.96230065, 0.18019317,
              0.85075296, 0.12582679, 0.24606568, 0.91401706, 0.47308834,
              0.63668392, 0.55494114, 0.21814981, 0.10153721, 0.6626768 ,
              0.00416792, 0.10125859, 0.93635668, 0.01197135, 0.68189219,
              0.68897145, 0.72634615, 0.97273268, 0.66486018, 0.31765674,
              0.40535109, 0.56983   , 0.36461283, 0.47359409, 0.08858057,
              0.6422688 , 0.96076734, 0.0571728 , 0.55615107, 0.61385587,
              0.64240751, 0.44183751, 0.71543977, 0.54304682, 0.6982057 ,
              0.29422791, 0.83693271, 0.79023468, 0.42174664, 0.9858691 ,
              0.43349315, 0.72504611, 0.6970914 , 0.55923248, 0.54664674,
              0.65495404, 0.02266887, 0.48411195, 0.87167205, 0.75345744,
              0.63369017, 0.10693472, 0.69762935, 0.83287904, 0.20763944,
              0.21330729, 0.38273155, 0.85553502, 0.70018298, 0.64386167,
              0.59250038, 0.03428029, 0.85868333, 0.24695321, 0.20648919,
              0.1769024 , 0.95382355, 0.47124291, 0.94612826, 0.40461537,
              0.88565269, 0.7234794 , 0.11265429, 0.57800615, 0.6984331 ,
              0.32709145, 0.80039471, 0.27714653, 0.17637409, 0.26407065,
              0.44938239, 0.91114377, 0.46167929, 0.48685178, 0.62332561])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.48448174, 0.11889194, 0.23237484, 0.51479036, 0.70700518,
              0.95165711, 0.240232  , 0.78287499, 0.84020549, 0.5288178 ,
              0.14914425, 0.1438007 , 0.25592018, 0.78192591, 0.50258966,
              0.61802858, 0.38715747, 0.79756911, 0.52628117, 0.88594824,
              0.90536135, 0.74423599, 0.81031749, 0.5704963 , 0.81687709,
              0.96375522, 0.04230373, 0.37033569, 0.00780071, 0.58073665,
              0.17833048, 0.82898078, 0.6459093 , 0.58452177, 0.83471483,
              0.27104187, 0.42771213, 0.99484535, 0.12413916, 0.72216303,
              0.56827418, 0.66506483, 0.52426425, 0.53296355, 0.56956052,
              0.52334935, 0.35369978, 0.01749055, 0.02631728, 0.62222733,
              0.80665514, 0.17918458, 0.12587665, 0.94046805, 0.30377927,
              0.98894097, 0.78389295, 0.56842339, 0.77081774, 0.79938589,
              0.98502613, 0.73107223, 0.37535575, 0.49489783, 0.84667567,
              0.82972025, 0.78823112, 0.45518562, 0.86990125, 0.98823378,
              0.38658825, 0.52883524, 0.76409912, 0.21557132, 0.92783998,
              0.23493309, 0.36522337, 0.71134052, 0.07436219, 0.28445394,
              0.07873406, 0.53140176, 0.85607815, 0.63239992, 0.68765421,
              0.04236603, 0.71281261, 0.25351105, 0.91387856, 0.0032477 ,
              0.57236323, 0.36861389, 0.1719756 , 0.59163554, 0.26097744,
              0.89156344, 0.17645364, 0.41003495, 0.50014822, 0.16512916])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.74619055, 0.33786827, 0.94699171, 0.91357618, 0.07843793,
              0.66861315, 0.03104412, 0.78979509, 0.64929929, 0.1561072 ,
              0.49496538, 0.61789477, 0.12497948, 0.74186962, 0.78017238,
              0.7871193 , 0.05036574, 0.02392483, 0.39140713, 0.30168046,
              0.10848234, 0.17713366, 0.9300219 , 0.82400923, 0.09038007,
              0.14683974, 0.77502943, 0.01592311, 0.00401389, 0.62215096,
              0.69224087, 0.90672277, 0.67823913, 0.53846808, 0.07227555,
              0.32678992, 0.7884056 , 0.34646747, 0.26126257, 0.9092006 ,
              0.10403147, 0.51721502, 0.75832009, 0.48683089, 0.96334659,
              0.5220697 , 0.75643489, 0.30574761, 0.98130196, 0.82893148,
              0.27107559, 0.0306753 , 0.72243376, 0.62003745, 0.04128943,
              0.52885998, 0.63215781, 0.62946605, 0.28593126, 0.25413808,
              0.51901088, 0.03692971, 0.06577539, 0.67325308, 0.71929748,
              0.04819842, 0.70807697, 0.32008239, 0.60022234, 0.51887977,
              0.54497939, 0.18762108, 0.90676717, 0.13716104, 0.85200689,
              0.7618069 , 0.80131347, 0.38623931, 0.03538727, 0.99728416,
              0.92484687, 0.5643478 , 0.90330165, 0.21801387, 0.30431255,
              0.34857346, 0.53577474, 0.55759138, 0.81068504, 0.50745423,
              0.26128099, 0.15167319, 0.35536313, 0.92471704, 0.51750872,
              0.30062478, 0.7889559 , 0.94434014, 0.02048096, 0.86088475])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.67355752, 0.64518274, 0.59760849, 0.65210336, 0.65197401,
              0.19768519, 0.52826834, 0.74975627, 0.80037206, 0.91636648,
              0.42571478, 0.38917101, 0.1592494 , 0.66247816, 0.73169696,
              0.54391048, 0.66765533, 0.28995019, 0.44653863, 0.70851588,
              0.01003174, 0.74240057, 0.8507382 , 0.16956603, 0.04875687,
              0.67231166, 0.06007515, 0.07624059, 0.87673576, 0.58863801,
              0.97222109, 0.32885202, 0.45036555, 0.44973153, 0.14636192,
              0.67031219, 0.1449498 , 0.90258533, 0.49435931, 0.73887772,
              0.41292394, 0.38640456, 0.13096166, 0.50035901, 0.71088892,
              0.94555409, 0.05448193, 0.15880761, 0.97411427, 0.59075378,
              0.07386647, 0.59355513, 0.97732019, 0.57118879, 0.92483782,
              0.61943505, 0.85653193, 0.23024863, 0.75472269, 0.9531149 ,
              0.57119655, 0.17171299, 0.10768584, 0.85875686, 0.27402218,
              0.93930032, 0.48260754, 0.89983763, 0.04996768, 0.75991814,
              0.00218595, 0.51173144, 0.60572487, 0.1225298 , 0.60948796,
              0.12667586, 0.93529571, 0.31277053, 0.43621187, 0.77679879,
              0.36245111, 0.95049735, 0.13783221, 0.75784811, 0.98567215,
              0.8855702 , 0.07437869, 0.2532336 , 0.47904539, 0.3827953 ,
              0.86654658, 0.01217927, 0.83779099, 0.36171018, 0.21592202,
              0.82602968, 0.57025353, 0.10200651, 0.65724429, 0.52162666])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.978208  , 0.09259218, 0.65326101, 0.24482484, 0.78088144,
              0.45723492, 0.31927837, 0.50160048, 0.52211638, 0.71520733,
              0.14890514, 0.86083204, 0.84577998, 0.35391745, 0.36347159,
              0.14890965, 0.58777004, 0.22542832, 0.81839878, 0.97105194,
              0.02173337, 0.73994509, 0.83576776, 0.92737457, 0.24689403,
              0.0407253 , 0.10650478, 0.17817157, 0.09182617, 0.5855374 ,
              0.50494524, 0.27287706, 0.62460578, 0.42898942, 0.70024038,
              0.81434649, 0.63934615, 0.16683827, 0.8028392 , 0.20800471,
              0.03886549, 0.2657108 , 0.81936335, 0.69189482, 0.76519558,
              0.27056654, 0.58078585, 0.25654256, 0.22272677, 0.24184256,
              0.52364732, 0.01643113, 0.36805299, 0.15259333, 0.15513974,
              0.85179401, 0.60847663, 0.66995412, 0.14204126, 0.55342286,
              0.25527214, 0.04681282, 0.47799525, 0.44477354, 0.9708653 ,
              0.51311298, 0.80088734, 0.74208434, 0.90834595, 0.11356056,
              0.97756024, 0.43405826, 0.08832978, 0.83950515, 0.96239117,
              0.31586734, 0.70004232, 0.89270922, 0.02231779, 0.6210642 ,
              0.8444692 , 0.85488392, 0.9294608 , 0.70855295, 0.33731485,
              0.99987212, 0.75277329, 0.8120134 , 0.6239852 , 0.1818498 ,
              0.47890484, 0.15483831, 0.77750958, 0.89944832, 0.92700409,
              0.52521303, 0.80045069, 0.64357057, 0.40927303, 0.60117539])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.84761619, 0.69211526, 0.88098935, 0.67269565, 0.88332071,
              0.1626778 , 0.46854199, 0.63302601, 0.40128932, 0.68926746,
              0.64796447, 0.256799  , 0.24709324, 0.54830823, 0.69485725,
              0.50147682, 0.97142904, 0.46032184, 0.50233032, 0.19575157,
              0.65331602, 0.6894264 , 0.68136598, 0.34721502, 0.05699252,
              0.3590184 , 0.25121338, 0.566759  , 0.73404291, 0.19583299,
              0.62625323, 0.50883489, 0.41452118, 0.73338563, 0.06662714,
              0.79957786, 0.18357544, 0.26283201, 0.84590678, 0.91084274,
              0.40503823, 0.24047612, 0.29066221, 0.40061208, 0.36644175,
              0.04786314, 0.34926464, 0.8479495 , 0.45721783, 0.31395337,
              0.48894606, 0.53454674, 0.6766208 , 0.25357514, 0.3617507 ,
              0.31761246, 0.34098058, 0.52226528, 0.8103816 , 0.84458955,
              0.25666128, 0.97374781, 0.94004309, 0.00685925, 0.03620568,
              0.80685094, 0.10073402, 0.29536368, 0.90287366, 0.05107171,
              0.07186558, 0.83715798, 0.21003241, 0.96453193, 0.63550669,
              0.74844496, 0.81717544, 0.5339345 , 0.7487803 , 0.92988724,
              0.74105053, 0.4921021 , 0.06413935, 0.06649431, 0.25754066,
              0.82389044, 0.02259677, 0.51555858, 0.73428301, 0.12540426,
              0.04548712, 0.09220996, 0.63307825, 0.07948887, 0.04554308,
              0.80403096, 0.75518779, 0.88033847, 0.259177  , 0.08544452])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.74619055, 0.33786827, 0.94699171, 0.91357618, 0.07843793,
              0.66861315, 0.03104412, 0.78979509, 0.64929929, 0.1561072 ,
              0.49496538, 0.61789477, 0.12497948, 0.74186962, 0.78017238,
              0.7871193 , 0.05036574, 0.02392483, 0.39140713, 0.30168046,
              0.10848234, 0.17713366, 0.9300219 , 0.82400923, 0.09038007,
              0.14683974, 0.77502943, 0.01592311, 0.00401389, 0.62215096,
              0.69224087, 0.90672277, 0.67823913, 0.53846808, 0.07227555,
              0.32678992, 0.7884056 , 0.34646747, 0.26126257, 0.9092006 ,
              0.10403147, 0.51721502, 0.75832009, 0.48683089, 0.96334659,
              0.5220697 , 0.75643489, 0.30574761, 0.98130196, 0.82893148,
              0.27107559, 0.0306753 , 0.72243376, 0.62003745, 0.04128943,
              0.52885998, 0.63215781, 0.62946605, 0.28593126, 0.25413808,
              0.51901088, 0.03692971, 0.06577539, 0.67325308, 0.71929748,
              0.04819842, 0.70807697, 0.32008239, 0.60022234, 0.51887977,
              0.54497939, 0.18762108, 0.90676717, 0.13716104, 0.85200689,
              0.7618069 , 0.80131347, 0.38623931, 0.03538727, 0.99728416,
              0.92484687, 0.5643478 , 0.90330165, 0.21801387, 0.30431255,
              0.34857346, 0.53577474, 0.55759138, 0.81068504, 0.50745423,
              0.26128099, 0.15167319, 0.35536313, 0.92471704, 0.51750872,
              0.30062478, 0.7889559 , 0.94434014, 0.02048096, 0.86088475])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.67355752, 0.64518274, 0.59760849, 0.65210336, 0.65197401,
              0.19768519, 0.52826834, 0.74975627, 0.80037206, 0.91636648,
              0.42571478, 0.38917101, 0.1592494 , 0.66247816, 0.73169696,
              0.54391048, 0.66765533, 0.28995019, 0.44653863, 0.70851588,
              0.01003174, 0.74240057, 0.8507382 , 0.16956603, 0.04875687,
              0.67231166, 0.06007515, 0.07624059, 0.87673576, 0.58863801,
              0.97222109, 0.32885202, 0.45036555, 0.44973153, 0.14636192,
              0.67031219, 0.1449498 , 0.90258533, 0.49435931, 0.73887772,
              0.41292394, 0.38640456, 0.13096166, 0.50035901, 0.71088892,
              0.94555409, 0.05448193, 0.15880761, 0.97411427, 0.59075378,
              0.07386647, 0.59355513, 0.97732019, 0.57118879, 0.92483782,
              0.61943505, 0.85653193, 0.23024863, 0.75472269, 0.9531149 ,
              0.57119655, 0.17171299, 0.10768584, 0.85875686, 0.27402218,
              0.93930032, 0.48260754, 0.89983763, 0.04996768, 0.75991814,
              0.00218595, 0.51173144, 0.60572487, 0.1225298 , 0.60948796,
              0.12667586, 0.93529571, 0.31277053, 0.43621187, 0.77679879,
              0.36245111, 0.95049735, 0.13783221, 0.75784811, 0.98567215,
              0.8855702 , 0.07437869, 0.2532336 , 0.47904539, 0.3827953 ,
              0.86654658, 0.01217927, 0.83779099, 0.36171018, 0.21592202,
              0.82602968, 0.57025353, 0.10200651, 0.65724429, 0.52162666])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.978208  , 0.09259218, 0.65326101, 0.24482484, 0.78088144,
              0.45723492, 0.31927837, 0.50160048, 0.52211638, 0.71520733,
              0.14890514, 0.86083204, 0.84577998, 0.35391745, 0.36347159,
              0.14890965, 0.58777004, 0.22542832, 0.81839878, 0.97105194,
              0.02173337, 0.73994509, 0.83576776, 0.92737457, 0.24689403,
              0.0407253 , 0.10650478, 0.17817157, 0.09182617, 0.5855374 ,
              0.50494524, 0.27287706, 0.62460578, 0.42898942, 0.70024038,
              0.81434649, 0.63934615, 0.16683827, 0.8028392 , 0.20800471,
              0.03886549, 0.2657108 , 0.81936335, 0.69189482, 0.76519558,
              0.27056654, 0.58078585, 0.25654256, 0.22272677, 0.24184256,
              0.52364732, 0.01643113, 0.36805299, 0.15259333, 0.15513974,
              0.85179401, 0.60847663, 0.66995412, 0.14204126, 0.55342286,
              0.25527214, 0.04681282, 0.47799525, 0.44477354, 0.9708653 ,
              0.51311298, 0.80088734, 0.74208434, 0.90834595, 0.11356056,
              0.97756024, 0.43405826, 0.08832978, 0.83950515, 0.96239117,
              0.31586734, 0.70004232, 0.89270922, 0.02231779, 0.6210642 ,
              0.8444692 , 0.85488392, 0.9294608 , 0.70855295, 0.33731485,
              0.99987212, 0.75277329, 0.8120134 , 0.6239852 , 0.1818498 ,
              0.47890484, 0.15483831, 0.77750958, 0.89944832, 0.92700409,
              0.52521303, 0.80045069, 0.64357057, 0.40927303, 0.60117539])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.17013771, 0.1413643 , 0.75848732, 0.13255345, 0.80649448,
              0.85640817, 0.12840944, 0.37129961, 0.59808696, 0.56909288,
              0.91059527, 0.341255  , 0.67982617, 0.0943052 , 0.0452726 ,
              0.42020909, 0.04082565, 0.61438003, 0.02111769, 0.99870845,
              0.24009599, 0.10233925, 0.43869707, 0.52963065, 0.96543324,
              0.93276231, 0.20725909, 0.37589613, 0.96955533, 0.35422974,
              0.42834095, 0.7681318 , 0.27376817, 0.22203319, 0.7730235 ,
              0.08861432, 0.74172124, 0.29532441, 0.92258257, 0.25769208,
              0.86040351, 0.72510323, 0.19049362, 0.78487271, 0.84392024,
              0.74266838, 0.88185026, 0.8434548 , 0.84146868, 0.08794238,
              0.2176919 , 0.23729782, 0.09940708, 0.10148909, 0.05190615,
              0.00677818, 0.20372975, 0.34107544, 0.6680666 , 0.88079236,
              0.3099001 , 0.69928588, 0.75646376, 0.51026577, 0.24898407,
              0.94557408, 0.80033481, 0.23069647, 0.11807231, 0.08079626,
              0.55856865, 0.48600844, 0.56605761, 0.18455565, 0.10365418,
              0.43423218, 0.05854056, 0.29894471, 0.6171452 , 0.49631317,
              0.21976259, 0.96967374, 0.88611094, 0.67720494, 0.70057386,
              0.73139703, 0.2991213 , 0.88106294, 0.15440293, 0.08697173,
              0.58943174, 0.24757313, 0.91115264, 0.57030433, 0.27994257,
              0.89354284, 0.20507731, 0.34557883, 0.19983132, 0.44793063])}]]


