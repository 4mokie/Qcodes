
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='e9b90448-dd13-49f7-b306-d87db97f64a9'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='9ee5372b-33f7-484e-9cd8-f17ef52b749f'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.733307695256401],
     [0.850090503628313],
     [0.198144760187894],
     [0.643041509089191],
     [0.782226672706609],
     [0.0394524965750765],
     [0.719243864922716],
     [0.535766302345655],
     [0.836490698661607],
     [0.681274872992659],
     [0.979771095677686],
     [0.574075775087433],
     [0.486892170039584],
     [0.513439329383706],
     [0.533815836679682],
     [0.111376594800746],
     [0.898567142713191],
     [0.194144930755761],
     [0.214354494707714],
     [0.604939329274393],
     [0.82178793673728],
     [0.747801844174308],
     [0.850526575471691],
     [0.680579409639738],
     [0.334656640924543],
     [0.622606503835272],
     [0.588503620147558],
     [0.394273856438109],
     [0.680920505317498],
     [0.0385997809511567],
     [0.31101137636144],
     [0.778381152998051],
     [0.502767243020693],
     [0.360749407651686],
     [0.339242697899057],
     [0.689222320860235],
     [0.925690203225704],
     [0.759068975077258],
     [0.282389178550348],
     [0.284401390931882],
     [0.251059369599672],
     [0.0214889467453241],
     [0.795845217737634],
     [0.00414763912637783],
     [0.882120152824573],
     [0.851945998491915],
     [0.858571534402831],
     [0.644550879161833],
     [0.566518547651355],
     [0.336773736844677],
     [0.93881399361206],
     [0.413970196050653],
     [0.646360206322549],
     [0.329686874732357],
     [0.632964763164901],
     [0.0744880292624219],
     [0.817716617084314],
     [0.34854897978563],
     [0.898851713414394],
     [0.563349251219792],
     [0.384862344384552],
     [0.01507651988418],
     [0.790430908199108],
     [0.28655087312657],
     [0.227666099681851],
     [0.0900320084511175],
     [0.684842132499159],
     [0.293586425693842],
     [0.982786495530884],
     [0.0711187241424193],
     [0.440117902721794],
     [0.0805864138557583],
     [0.661916668486781],
     [0.749118130164951],
     [0.651877429972465],
     [0.256903983670852],
     [0.151442538814128],
     [0.752986970597996],
     [0.898375957906413],
     [0.940117412137126],
     [0.994365332209679],
     [0.634414410157714],
     [0.0373619532592284],
     [0.829220369632879],
     [0.458405504477921],
     [0.0616449725066895],
     [0.446064718545722],
     [0.422262941599009],
     [0.317402444412473],
     [0.317727290601244],
     [0.785525083511453],
     [0.58649047429767],
     [0.501347681485616],
     [0.773604772927043],
     [0.544539887014674],
     [0.545980589601691],
     [0.634258788415527],
     [0.0655657496903682],
     [0.365272141615882],
     [0.0728010343384732]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.36027642])],
     [array([0.66803232])],
     [array([0.75697869])],
     [array([0.96801335])],
     [array([0.54445358])],
     [array([0.46691832])],
     [array([0.90105564])],
     [array([0.21129778])],
     [array([0.96712438])],
     [array([0.74054865])],
     [array([0.38299605])],
     [array([0.94824275])],
     [array([0.97612469])],
     [array([0.81293679])],
     [array([0.60848774])],
     [array([0.36713377])],
     [array([0.39224984])],
     [array([0.00969452])],
     [array([0.64503721])],
     [array([0.44627013])],
     [array([0.95414852])],
     [array([0.0258674])],
     [array([0.29882295])],
     [array([0.74134696])],
     [array([0.5702565])],
     [array([0.06556731])],
     [array([0.47951805])],
     [array([0.74985953])],
     [array([0.8533766])],
     [array([0.98977222])],
     [array([0.04123243])],
     [array([0.83629489])],
     [array([0.46060256])],
     [array([0.75721556])],
     [array([0.96926321])],
     [array([0.54278199])],
     [array([0.49540077])],
     [array([0.67249209])],
     [array([0.70953751])],
     [array([0.31955948])],
     [array([0.41241843])],
     [array([0.91979293])],
     [array([0.79239835])],
     [array([0.14162336])],
     [array([0.95988285])],
     [array([0.39012021])],
     [array([0.53283243])],
     [array([0.92945625])],
     [array([0.82042826])],
     [array([0.71212887])],
     [array([0.58809912])],
     [array([0.61467276])],
     [array([0.38588082])],
     [array([0.48176801])],
     [array([0.52969801])],
     [array([0.41171581])],
     [array([0.07779901])],
     [array([0.15565048])],
     [array([0.60313339])],
     [array([0.29910381])],
     [array([0.84270312])],
     [array([0.3290746])],
     [array([0.18524961])],
     [array([0.41277716])],
     [array([0.20136972])],
     [array([0.64773685])],
     [array([0.32315358])],
     [array([0.08368871])],
     [array([0.71118551])],
     [array([0.22016379])],
     [array([0.11050538])],
     [array([0.779804])],
     [array([0.07227119])],
     [array([0.89159413])],
     [array([0.08147568])],
     [array([0.57720968])],
     [array([0.33539796])],
     [array([0.46205715])],
     [array([0.1553722])],
     [array([0.87589868])],
     [array([0.24850102])],
     [array([0.84752304])],
     [array([0.79400887])],
     [array([0.11215192])],
     [array([0.40141806])],
     [array([0.70949666])],
     [array([0.91786755])],
     [array([0.54364007])],
     [array([0.7423571])],
     [array([0.45767592])],
     [array([0.83839027])],
     [array([0.4384558])],
     [array([0.57702095])],
     [array([0.55109517])],
     [array([0.77701085])],
     [array([0.86815311])],
     [array([0.07520387])],
     [array([0.33165291])],
     [array([0.0495426])],
     [array([0.60956448])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.36027642, 0.66803232, 0.75697869, 0.96801335, 0.54445358,
           0.46691832, 0.90105564, 0.21129778, 0.96712438, 0.74054865,
           0.38299605, 0.94824275, 0.97612469, 0.81293679, 0.60848774,
           0.36713377, 0.39224984, 0.00969452, 0.64503721, 0.44627013,
           0.95414852, 0.0258674 , 0.29882295, 0.74134696, 0.5702565 ,
           0.06556731, 0.47951805, 0.74985953, 0.8533766 , 0.98977222,
           0.04123243, 0.83629489, 0.46060256, 0.75721556, 0.96926321,
           0.54278199, 0.49540077, 0.67249209, 0.70953751, 0.31955948,
           0.41241843, 0.91979293, 0.79239835, 0.14162336, 0.95988285,
           0.39012021, 0.53283243, 0.92945625, 0.82042826, 0.71212887,
           0.58809912, 0.61467276, 0.38588082, 0.48176801, 0.52969801,
           0.41171581, 0.07779901, 0.15565048, 0.60313339, 0.29910381,
           0.84270312, 0.3290746 , 0.18524961, 0.41277716, 0.20136972,
           0.64773685, 0.32315358, 0.08368871, 0.71118551, 0.22016379,
           0.11050538, 0.779804  , 0.07227119, 0.89159413, 0.08147568,
           0.57720968, 0.33539796, 0.46205715, 0.1553722 , 0.87589868,
           0.24850102, 0.84752304, 0.79400887, 0.11215192, 0.40141806,
           0.70949666, 0.91786755, 0.54364007, 0.7423571 , 0.45767592,
           0.83839027, 0.4384558 , 0.57702095, 0.55109517, 0.77701085,
           0.86815311, 0.07520387, 0.33165291, 0.0495426 , 0.60956448])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.7333077 , 0.8500905 , 0.19814476, 0.64304151, 0.78222667,
              0.0394525 , 0.71924386, 0.5357663 , 0.8364907 , 0.68127487,
              0.9797711 , 0.57407578, 0.48689217, 0.51343933, 0.53381584,
              0.11137659, 0.89856714, 0.19414493, 0.21435449, 0.60493933,
              0.82178794, 0.74780184, 0.85052658, 0.68057941, 0.33465664,
              0.6226065 , 0.58850362, 0.39427386, 0.68092051, 0.03859978,
              0.31101138, 0.77838115, 0.50276724, 0.36074941, 0.3392427 ,
              0.68922232, 0.9256902 , 0.75906898, 0.28238918, 0.28440139,
              0.25105937, 0.02148895, 0.79584522, 0.00414764, 0.88212015,
              0.851946  , 0.85857153, 0.64455088, 0.56651855, 0.33677374,
              0.93881399, 0.4139702 , 0.64636021, 0.32968687, 0.63296476,
              0.07448803, 0.81771662, 0.34854898, 0.89885171, 0.56334925,
              0.38486234, 0.01507652, 0.79043091, 0.28655087, 0.2276661 ,
              0.09003201, 0.68484213, 0.29358643, 0.9827865 , 0.07111872,
              0.4401179 , 0.08058641, 0.66191667, 0.74911813, 0.65187743,
              0.25690398, 0.15144254, 0.75298697, 0.89837596, 0.94011741,
              0.99436533, 0.63441441, 0.03736195, 0.82922037, 0.4584055 ,
              0.06164497, 0.44606472, 0.42226294, 0.31740244, 0.31772729,
              0.78552508, 0.58649047, 0.50134768, 0.77360477, 0.54453989,
              0.54598059, 0.63425879, 0.06556575, 0.36527214, 0.07280103])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.1473541 , 0.95820875, 0.55699027, 0.8826245 , 0.38330259,
              0.51767432, 0.84704856, 0.38904104, 0.41915412, 0.12419406,
              0.50892903, 0.18701583, 0.2369486 , 0.83927554, 0.52734962,
              0.98225045, 0.10488582, 0.11107001, 0.40814255, 0.34303969,
              0.18204761, 0.61909362, 0.21716089, 0.89838307, 0.96027892,
              0.22066495, 0.59908654, 0.56882395, 0.49627804, 0.86331646,
              0.29016919, 0.95709061, 0.3711977 , 0.16388396, 0.3787159 ,
              0.15929629, 0.58461468, 0.10633655, 0.47123908, 0.77083591,
              0.14079925, 0.96616218, 0.83327386, 0.38008393, 0.93400314,
              0.03000375, 0.04486801, 0.67007904, 0.18669226, 0.33923572,
              0.10190022, 0.85770846, 0.49759253, 0.16858064, 0.62027607,
              0.72445871, 0.88519058, 0.53064877, 0.84173521, 0.96995871,
              0.22293276, 0.29548414, 0.72142349, 0.64444548, 0.69674797,
              0.28928088, 0.63488346, 0.50595316, 0.01519983, 0.47981182,
              0.14441841, 0.23632172, 0.2854464 , 0.0844537 , 0.56870694,
              0.97410686, 0.73266939, 0.94797994, 0.49916685, 0.51787747,
              0.31879482, 0.62145848, 0.43901608, 0.83413945, 0.62977067,
              0.36541476, 0.19213464, 0.62975335, 0.02690355, 0.54668529,
              0.63641621, 0.15692966, 0.80283218, 0.94705514, 0.08722589,
              0.53290746, 0.00657728, 0.05217634, 0.09373986, 0.60510456])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.71169488, 0.65497623, 0.26095084, 0.70549214, 0.71140668,
              0.37906294, 0.03469145, 0.55602142, 0.38652857, 0.44939623,
              0.52722108, 0.25843379, 0.65485685, 0.67768335, 0.37214411,
              0.17505221, 0.23986081, 0.94970777, 0.61888843, 0.38545444,
              0.11929214, 0.47591748, 0.59886782, 0.16563379, 0.32441545,
              0.33363445, 0.77013776, 0.2326303 , 0.47613631, 0.94587538,
              0.36554409, 0.45775499, 0.2793037 , 0.15832517, 0.59363759,
              0.07531514, 0.12861472, 0.39664817, 0.42334703, 0.57595795,
              0.93182585, 0.11164466, 0.11829369, 0.64484574, 0.2093897 ,
              0.44973048, 0.65444213, 0.21509716, 0.11457353, 0.48083763,
              0.69856859, 0.71456467, 0.27996787, 0.44452312, 0.76978699,
              0.47222376, 0.79878832, 0.92873455, 0.9648014 , 0.41477065,
              0.23823697, 0.55023673, 0.84886673, 0.52579578, 0.24508586,
              0.43673649, 0.35673293, 0.83756226, 0.96109153, 0.88863046,
              0.8095823 , 0.23275778, 0.33547128, 0.96330599, 0.36855798,
              0.20904582, 0.38423945, 0.28338191, 0.19527168, 0.839546  ,
              0.26353508, 0.10956665, 0.79491537, 0.9603283 , 0.87101482,
              0.27799683, 0.52746216, 0.42327764, 0.48615966, 0.5405298 ,
              0.10412753, 0.05706435, 0.39249433, 0.15620848, 0.39340268,
              0.5964128 , 0.73716763, 0.45483518, 0.98422832, 0.92708138])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.93828544, 0.59882287, 0.0455994 , 0.03025572, 0.51150975,
              0.05738192, 0.92830379, 0.54664417, 0.98189513, 0.07779865,
              0.39985851, 0.14177801, 0.57417836, 0.8139353 , 0.94357218,
              0.87665777, 0.97857217, 0.21842108, 0.45761261, 0.61398863,
              0.43544557, 0.63967373, 0.01853492, 0.53907325, 0.87039781,
              0.305998  , 0.55101328, 0.91289474, 0.90543226, 0.01357064,
              0.6248675 , 0.66358971, 0.50809774, 0.06803088, 0.22487766,
              0.86208327, 0.36455756, 0.43471658, 0.73374981, 0.00474626,
              0.59166242, 0.87515477, 0.45551406, 0.958286  , 0.34589268,
              0.52293572, 0.17050664, 0.40010145, 0.77874441, 0.89563294,
              0.63318943, 0.28358435, 0.08259626, 0.99462203, 0.72971071,
              0.169205  , 0.38203897, 0.41764837, 0.61633063, 0.90635507,
              0.81773037, 0.02581654, 0.34593972, 0.88704944, 0.5741783 ,
              0.68167132, 0.94018644, 0.43666851, 0.87173057, 0.59849412,
              0.6410785 , 0.97373877, 0.81906951, 0.72539581, 0.50693836,
              0.34464305, 0.97425928, 0.53466439, 0.83613184, 0.39745276,
              0.09292754, 0.90351747, 0.45879856, 0.41728109, 0.24880915,
              0.36971655, 0.65096133, 0.44305784, 0.10198935, 0.25070233,
              0.33025708, 0.31098   , 0.96120067, 0.88774308, 0.62935238,
              0.23109508, 0.62641315, 0.6466836 , 0.18390023, 0.26147924])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.7333077 , 0.8500905 , 0.19814476, 0.64304151, 0.78222667,
              0.0394525 , 0.71924386, 0.5357663 , 0.8364907 , 0.68127487,
              0.9797711 , 0.57407578, 0.48689217, 0.51343933, 0.53381584,
              0.11137659, 0.89856714, 0.19414493, 0.21435449, 0.60493933,
              0.82178794, 0.74780184, 0.85052658, 0.68057941, 0.33465664,
              0.6226065 , 0.58850362, 0.39427386, 0.68092051, 0.03859978,
              0.31101138, 0.77838115, 0.50276724, 0.36074941, 0.3392427 ,
              0.68922232, 0.9256902 , 0.75906898, 0.28238918, 0.28440139,
              0.25105937, 0.02148895, 0.79584522, 0.00414764, 0.88212015,
              0.851946  , 0.85857153, 0.64455088, 0.56651855, 0.33677374,
              0.93881399, 0.4139702 , 0.64636021, 0.32968687, 0.63296476,
              0.07448803, 0.81771662, 0.34854898, 0.89885171, 0.56334925,
              0.38486234, 0.01507652, 0.79043091, 0.28655087, 0.2276661 ,
              0.09003201, 0.68484213, 0.29358643, 0.9827865 , 0.07111872,
              0.4401179 , 0.08058641, 0.66191667, 0.74911813, 0.65187743,
              0.25690398, 0.15144254, 0.75298697, 0.89837596, 0.94011741,
              0.99436533, 0.63441441, 0.03736195, 0.82922037, 0.4584055 ,
              0.06164497, 0.44606472, 0.42226294, 0.31740244, 0.31772729,
              0.78552508, 0.58649047, 0.50134768, 0.77360477, 0.54453989,
              0.54598059, 0.63425879, 0.06556575, 0.36527214, 0.07280103])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.1473541 , 0.95820875, 0.55699027, 0.8826245 , 0.38330259,
              0.51767432, 0.84704856, 0.38904104, 0.41915412, 0.12419406,
              0.50892903, 0.18701583, 0.2369486 , 0.83927554, 0.52734962,
              0.98225045, 0.10488582, 0.11107001, 0.40814255, 0.34303969,
              0.18204761, 0.61909362, 0.21716089, 0.89838307, 0.96027892,
              0.22066495, 0.59908654, 0.56882395, 0.49627804, 0.86331646,
              0.29016919, 0.95709061, 0.3711977 , 0.16388396, 0.3787159 ,
              0.15929629, 0.58461468, 0.10633655, 0.47123908, 0.77083591,
              0.14079925, 0.96616218, 0.83327386, 0.38008393, 0.93400314,
              0.03000375, 0.04486801, 0.67007904, 0.18669226, 0.33923572,
              0.10190022, 0.85770846, 0.49759253, 0.16858064, 0.62027607,
              0.72445871, 0.88519058, 0.53064877, 0.84173521, 0.96995871,
              0.22293276, 0.29548414, 0.72142349, 0.64444548, 0.69674797,
              0.28928088, 0.63488346, 0.50595316, 0.01519983, 0.47981182,
              0.14441841, 0.23632172, 0.2854464 , 0.0844537 , 0.56870694,
              0.97410686, 0.73266939, 0.94797994, 0.49916685, 0.51787747,
              0.31879482, 0.62145848, 0.43901608, 0.83413945, 0.62977067,
              0.36541476, 0.19213464, 0.62975335, 0.02690355, 0.54668529,
              0.63641621, 0.15692966, 0.80283218, 0.94705514, 0.08722589,
              0.53290746, 0.00657728, 0.05217634, 0.09373986, 0.60510456])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.71169488, 0.65497623, 0.26095084, 0.70549214, 0.71140668,
              0.37906294, 0.03469145, 0.55602142, 0.38652857, 0.44939623,
              0.52722108, 0.25843379, 0.65485685, 0.67768335, 0.37214411,
              0.17505221, 0.23986081, 0.94970777, 0.61888843, 0.38545444,
              0.11929214, 0.47591748, 0.59886782, 0.16563379, 0.32441545,
              0.33363445, 0.77013776, 0.2326303 , 0.47613631, 0.94587538,
              0.36554409, 0.45775499, 0.2793037 , 0.15832517, 0.59363759,
              0.07531514, 0.12861472, 0.39664817, 0.42334703, 0.57595795,
              0.93182585, 0.11164466, 0.11829369, 0.64484574, 0.2093897 ,
              0.44973048, 0.65444213, 0.21509716, 0.11457353, 0.48083763,
              0.69856859, 0.71456467, 0.27996787, 0.44452312, 0.76978699,
              0.47222376, 0.79878832, 0.92873455, 0.9648014 , 0.41477065,
              0.23823697, 0.55023673, 0.84886673, 0.52579578, 0.24508586,
              0.43673649, 0.35673293, 0.83756226, 0.96109153, 0.88863046,
              0.8095823 , 0.23275778, 0.33547128, 0.96330599, 0.36855798,
              0.20904582, 0.38423945, 0.28338191, 0.19527168, 0.839546  ,
              0.26353508, 0.10956665, 0.79491537, 0.9603283 , 0.87101482,
              0.27799683, 0.52746216, 0.42327764, 0.48615966, 0.5405298 ,
              0.10412753, 0.05706435, 0.39249433, 0.15620848, 0.39340268,
              0.5964128 , 0.73716763, 0.45483518, 0.98422832, 0.92708138])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.82860863, 0.74693952, 0.29266892, 0.97624099, 0.78685435,
              0.81854022, 0.97296027, 0.97047703, 0.4508761 , 0.94948333,
              0.41477214, 0.42775397, 0.96135328, 0.45341182, 0.17297963,
              0.58847201, 0.50701513, 0.09202868, 0.53285148, 0.50759244,
              0.63120724, 0.27085752, 0.72337245, 0.98554646, 0.11289445,
              0.11084724, 0.99148919, 0.70443674, 0.65801235, 0.285637  ,
              0.9636598 , 0.48420697, 0.00669087, 0.59481934, 0.17841862,
              0.1191835 , 0.86834613, 0.94811819, 0.4504249 , 0.15732985,
              0.43758044, 0.00424199, 0.68744231, 0.11422119, 0.22269886,
              0.23669701, 0.22980445, 0.58335641, 0.10888325, 0.50222186,
              0.95478071, 0.11045865, 0.70861987, 0.54124287, 0.17796697,
              0.51268813, 0.04672373, 0.17644644, 0.02583803, 0.58973226,
              0.42334079, 0.49415982, 0.18343014, 0.63623355, 0.45083143,
              0.69537366, 0.52631895, 0.06196421, 0.89501587, 0.78240676,
              0.31030075, 0.24683881, 0.02364516, 0.44672042, 0.84948921,
              0.59169549, 0.40829404, 0.58166011, 0.20931461, 0.65859734,
              0.00199744, 0.74082766, 0.50431273, 0.27426594, 0.62020542,
              0.43773715, 0.13213806, 0.75783164, 0.74973599, 0.75488539,
              0.25792685, 0.58527104, 0.92671928, 0.27844328, 0.47180705,
              0.88732267, 0.12941692, 0.58491736, 0.31511652, 0.15154777])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.36027642, 0.66803232, 0.75697869, 0.96801335, 0.54445358,
              0.46691832, 0.90105564, 0.21129778, 0.96712438, 0.74054865,
              0.38299605, 0.94824275, 0.97612469, 0.81293679, 0.60848774,
              0.36713377, 0.39224984, 0.00969452, 0.64503721, 0.44627013,
              0.95414852, 0.0258674 , 0.29882295, 0.74134696, 0.5702565 ,
              0.06556731, 0.47951805, 0.74985953, 0.8533766 , 0.98977222,
              0.04123243, 0.83629489, 0.46060256, 0.75721556, 0.96926321,
              0.54278199, 0.49540077, 0.67249209, 0.70953751, 0.31955948,
              0.41241843, 0.91979293, 0.79239835, 0.14162336, 0.95988285,
              0.39012021, 0.53283243, 0.92945625, 0.82042826, 0.71212887,
              0.58809912, 0.61467276, 0.38588082, 0.48176801, 0.52969801,
              0.41171581, 0.07779901, 0.15565048, 0.60313339, 0.29910381,
              0.84270312, 0.3290746 , 0.18524961, 0.41277716, 0.20136972,
              0.64773685, 0.32315358, 0.08368871, 0.71118551, 0.22016379,
              0.11050538, 0.779804  , 0.07227119, 0.89159413, 0.08147568,
              0.57720968, 0.33539796, 0.46205715, 0.1553722 , 0.87589868,
              0.24850102, 0.84752304, 0.79400887, 0.11215192, 0.40141806,
              0.70949666, 0.91786755, 0.54364007, 0.7423571 , 0.45767592,
              0.83839027, 0.4384558 , 0.57702095, 0.55109517, 0.77701085,
              0.86815311, 0.07520387, 0.33165291, 0.0495426 , 0.60956448])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.11757895, 0.1464238 , 0.12802482, 0.95845612, 0.55077265,
              0.67306454, 0.62871597, 0.39829867, 0.34476607, 0.13363486,
              0.75821519, 0.96292388, 0.89377108, 0.57143142, 0.38969993,
              0.31212607, 0.88101656, 0.50578194, 0.59658839, 0.3934737 ,
              0.99436105, 0.94247065, 0.0327496 , 0.68936293, 0.48673753,
              0.7241601 , 0.13739216, 0.82318307, 0.57409354, 0.82644245,
              0.79006545, 0.87533011, 0.54217234, 0.84111497, 0.96532861,
              0.10068545, 0.97284905, 0.84544098, 0.66108639, 0.50709678,
              0.18758658, 0.88996477, 0.45836249, 0.36852811, 0.76765896,
              0.18362082, 0.21336686, 0.72567541, 0.74230832, 0.73496703,
              0.98476539, 0.48799646, 0.7877365 , 0.67555322, 0.68650398,
              0.74076242, 0.08106477, 0.08397383, 0.4005268 , 0.96126794,
              0.74227541, 0.32485399, 0.61554512, 0.08820951, 0.71026218,
              0.47962355, 0.5848666 , 0.98706766, 0.1686332 , 0.27618399,
              0.0676866 , 0.28179319, 0.42760085, 0.02370277, 0.79202336,
              0.21426931, 0.69010945, 0.73656651, 0.85441228, 0.66088233,
              0.95710718, 0.59430687, 0.58009743, 0.30344821, 0.08411301,
              0.7908002 , 0.74711775, 0.36518649, 0.10602466, 0.02987818,
              0.32687189, 0.99852498, 0.72145232, 0.10843411, 0.58587384,
              0.81803489, 0.15849246, 0.38373789, 0.98692775, 0.95175444])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.79981606, 0.92898207, 0.61840833, 0.37490776, 0.61505517,
              0.32890992, 0.77225815, 0.83535963, 0.43344719, 0.46596514,
              0.53726787, 0.86243847, 0.60279097, 0.99280881, 0.0784831 ,
              0.28296821, 0.15632087, 0.37619892, 0.63163713, 0.89779086,
              0.94391715, 0.23910292, 0.2798606 , 0.03385796, 0.72728911,
              0.56068475, 0.08485481, 0.19550822, 0.51560089, 0.98298964,
              0.74418086, 0.69842586, 0.54602622, 0.75709276, 0.69112634,
              0.7858863 , 0.12078126, 0.89261272, 0.96946046, 0.56198853,
              0.38956913, 0.04123712, 0.30302345, 0.15377543, 0.50848835,
              0.8406498 , 0.62792291, 0.3886072 , 0.76064344, 0.65277693,
              0.67913854, 0.82415169, 0.49248072, 0.11702089, 0.01661403,
              0.86387856, 0.01312007, 0.4447846 , 0.45210068, 0.90250377,
              0.67912125, 0.73333347, 0.0516619 , 0.99761478, 0.03653651,
              0.55811832, 0.28473214, 0.99820403, 0.2660777 , 0.84417305,
              0.18887752, 0.66831973, 0.41487205, 0.72105977, 0.66031658,
              0.47790315, 0.72963187, 0.57455337, 0.1375909 , 0.32443653,
              0.67225618, 0.69158059, 0.97244022, 0.27265165, 0.74446298,
              0.84311925, 0.47085948, 0.78825527, 0.25766622, 0.10973279,
              0.90243914, 0.1298517 , 0.6905279 , 0.00724584, 0.79869722,
              0.16302763, 0.15413657, 0.17527285, 0.07790591, 0.246761  ])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.4848438 , 0.30603241, 0.6682011 , 0.14315074, 0.68057477,
              0.45609955, 0.69662644, 0.39734229, 0.02257265, 0.51403569,
              0.00240274, 0.37365208, 0.32130672, 0.22946116, 0.36588274,
              0.97496276, 0.34698084, 0.5143124 , 0.92417037, 0.3094317 ,
              0.69516299, 0.58159138, 0.65042347, 0.47285486, 0.05457964,
              0.52675054, 0.54982164, 0.89646479, 0.94554463, 0.46337124,
              0.18336965, 0.33545112, 0.77581867, 0.89185041, 0.09227661,
              0.54325919, 0.92609155, 0.19814619, 0.23783918, 0.73051609,
              0.47313563, 0.18372506, 0.94132471, 0.13123083, 0.98652722,
              0.50181512, 0.76743975, 0.42481197, 0.92551762, 0.14962044,
              0.14303729, 0.70132071, 0.1960225 , 0.02326802, 0.58397467,
              0.75369027, 0.34145103, 0.64555595, 0.95336417, 0.32360273,
              0.02073566, 0.19542133, 0.83088305, 0.6437857 , 0.54739125,
              0.074051  , 0.59995985, 0.89109907, 0.52447112, 0.22828032,
              0.85499663, 0.31591322, 0.67887828, 0.58343347, 0.66789216,
              0.55809456, 0.06369719, 0.49424952, 0.67131412, 0.9569391 ,
              0.2832248 , 0.50580749, 0.70480748, 0.75252169, 0.17617375,
              0.86701979, 0.8841481 , 0.83345863, 0.62529633, 0.86177852,
              0.34805216, 0.35568445, 0.26182704, 0.27173825, 0.1668133 ,
              0.75256079, 0.80982133, 0.33361714, 0.8807079 , 0.37481099])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.36027642, 0.66803232, 0.75697869, 0.96801335, 0.54445358,
              0.46691832, 0.90105564, 0.21129778, 0.96712438, 0.74054865,
              0.38299605, 0.94824275, 0.97612469, 0.81293679, 0.60848774,
              0.36713377, 0.39224984, 0.00969452, 0.64503721, 0.44627013,
              0.95414852, 0.0258674 , 0.29882295, 0.74134696, 0.5702565 ,
              0.06556731, 0.47951805, 0.74985953, 0.8533766 , 0.98977222,
              0.04123243, 0.83629489, 0.46060256, 0.75721556, 0.96926321,
              0.54278199, 0.49540077, 0.67249209, 0.70953751, 0.31955948,
              0.41241843, 0.91979293, 0.79239835, 0.14162336, 0.95988285,
              0.39012021, 0.53283243, 0.92945625, 0.82042826, 0.71212887,
              0.58809912, 0.61467276, 0.38588082, 0.48176801, 0.52969801,
              0.41171581, 0.07779901, 0.15565048, 0.60313339, 0.29910381,
              0.84270312, 0.3290746 , 0.18524961, 0.41277716, 0.20136972,
              0.64773685, 0.32315358, 0.08368871, 0.71118551, 0.22016379,
              0.11050538, 0.779804  , 0.07227119, 0.89159413, 0.08147568,
              0.57720968, 0.33539796, 0.46205715, 0.1553722 , 0.87589868,
              0.24850102, 0.84752304, 0.79400887, 0.11215192, 0.40141806,
              0.70949666, 0.91786755, 0.54364007, 0.7423571 , 0.45767592,
              0.83839027, 0.4384558 , 0.57702095, 0.55109517, 0.77701085,
              0.86815311, 0.07520387, 0.33165291, 0.0495426 , 0.60956448])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.11757895, 0.1464238 , 0.12802482, 0.95845612, 0.55077265,
              0.67306454, 0.62871597, 0.39829867, 0.34476607, 0.13363486,
              0.75821519, 0.96292388, 0.89377108, 0.57143142, 0.38969993,
              0.31212607, 0.88101656, 0.50578194, 0.59658839, 0.3934737 ,
              0.99436105, 0.94247065, 0.0327496 , 0.68936293, 0.48673753,
              0.7241601 , 0.13739216, 0.82318307, 0.57409354, 0.82644245,
              0.79006545, 0.87533011, 0.54217234, 0.84111497, 0.96532861,
              0.10068545, 0.97284905, 0.84544098, 0.66108639, 0.50709678,
              0.18758658, 0.88996477, 0.45836249, 0.36852811, 0.76765896,
              0.18362082, 0.21336686, 0.72567541, 0.74230832, 0.73496703,
              0.98476539, 0.48799646, 0.7877365 , 0.67555322, 0.68650398,
              0.74076242, 0.08106477, 0.08397383, 0.4005268 , 0.96126794,
              0.74227541, 0.32485399, 0.61554512, 0.08820951, 0.71026218,
              0.47962355, 0.5848666 , 0.98706766, 0.1686332 , 0.27618399,
              0.0676866 , 0.28179319, 0.42760085, 0.02370277, 0.79202336,
              0.21426931, 0.69010945, 0.73656651, 0.85441228, 0.66088233,
              0.95710718, 0.59430687, 0.58009743, 0.30344821, 0.08411301,
              0.7908002 , 0.74711775, 0.36518649, 0.10602466, 0.02987818,
              0.32687189, 0.99852498, 0.72145232, 0.10843411, 0.58587384,
              0.81803489, 0.15849246, 0.38373789, 0.98692775, 0.95175444])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.79981606, 0.92898207, 0.61840833, 0.37490776, 0.61505517,
              0.32890992, 0.77225815, 0.83535963, 0.43344719, 0.46596514,
              0.53726787, 0.86243847, 0.60279097, 0.99280881, 0.0784831 ,
              0.28296821, 0.15632087, 0.37619892, 0.63163713, 0.89779086,
              0.94391715, 0.23910292, 0.2798606 , 0.03385796, 0.72728911,
              0.56068475, 0.08485481, 0.19550822, 0.51560089, 0.98298964,
              0.74418086, 0.69842586, 0.54602622, 0.75709276, 0.69112634,
              0.7858863 , 0.12078126, 0.89261272, 0.96946046, 0.56198853,
              0.38956913, 0.04123712, 0.30302345, 0.15377543, 0.50848835,
              0.8406498 , 0.62792291, 0.3886072 , 0.76064344, 0.65277693,
              0.67913854, 0.82415169, 0.49248072, 0.11702089, 0.01661403,
              0.86387856, 0.01312007, 0.4447846 , 0.45210068, 0.90250377,
              0.67912125, 0.73333347, 0.0516619 , 0.99761478, 0.03653651,
              0.55811832, 0.28473214, 0.99820403, 0.2660777 , 0.84417305,
              0.18887752, 0.66831973, 0.41487205, 0.72105977, 0.66031658,
              0.47790315, 0.72963187, 0.57455337, 0.1375909 , 0.32443653,
              0.67225618, 0.69158059, 0.97244022, 0.27265165, 0.74446298,
              0.84311925, 0.47085948, 0.78825527, 0.25766622, 0.10973279,
              0.90243914, 0.1298517 , 0.6905279 , 0.00724584, 0.79869722,
              0.16302763, 0.15413657, 0.17527285, 0.07790591, 0.246761  ])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.01914727, 0.81977058, 0.87792593, 0.41366845, 0.57325579,
              0.21947994, 0.9929554 , 0.86486091, 0.09471137, 0.33820634,
              0.74910463, 0.44711926, 0.72006711, 0.5810712 , 0.98409044,
              0.27397205, 0.36538848, 0.12943959, 0.22806345, 0.95298674,
              0.64667915, 0.04593907, 0.77931211, 0.14388232, 0.43458904,
              0.1585657 , 0.24611095, 0.35754817, 0.25606912, 0.52643757,
              0.85034379, 0.27913597, 0.03624815, 0.71585156, 0.93835784,
              0.8829532 , 0.19712383, 0.30374727, 0.04935562, 0.70765073,
              0.86058379, 0.51925669, 0.84794581, 0.89810036, 0.13524216,
              0.47235072, 0.05921663, 0.24618029, 0.18661291, 0.94677027,
              0.6601817 , 0.70143877, 0.58032077, 0.38204912, 0.00540568,
              0.53796141, 0.38960049, 0.39002176, 0.45074304, 0.70175834,
              0.3709838 , 0.49425952, 0.45164567, 0.94715125, 0.40994102,
              0.26258026, 0.83162649, 0.5877773 , 0.48866349, 0.36630867,
              0.66702831, 0.7933944 , 0.40614821, 0.220368  , 0.29103202,
              0.71926169, 0.0332211 , 0.79095633, 0.01844617, 0.94236321,
              0.59999278, 0.47424573, 0.02490705, 0.72108894, 0.0770279 ,
              0.57320526, 0.96793665, 0.35644892, 0.47637629, 0.89119511,
              0.35690764, 0.83926961, 0.35513484, 0.58605441, 0.0971056 ,
              0.17398838, 0.49762671, 0.55025059, 0.43807794, 0.73200957])}]]


