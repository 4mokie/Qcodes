
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='ca99f439-13dc-485e-a09b-bbb16963c4f6'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='7c84df61-05c4-4ae5-9bdf-29a376df9486'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.243909442842646],
     [0.710839705221481],
     [0.802295465786603],
     [0.76931196410238],
     [0.00983392221444201],
     [0.430954565590367],
     [0.13328442096925],
     [0.482239660706065],
     [0.576884325699377],
     [0.8512609222158],
     [0.528545403837365],
     [0.45084166891015],
     [0.642649406741488],
     [0.554626906320209],
     [0.11170873764384],
     [0.216016584781847],
     [0.502959312569324],
     [0.527498385399634],
     [0.5364147064979],
     [0.560193891122373],
     [0.220186071465068],
     [0.0780346059550117],
     [0.622560011064917],
     [0.081118130444723],
     [0.688089948473674],
     [0.713601075443723],
     [0.305653647795652],
     [0.589700272190028],
     [0.336190002108124],
     [0.836652842059606],
     [0.504212742947283],
     [0.0345069309346581],
     [0.110937624881883],
     [0.319590307824528],
     [0.785132380789709],
     [0.0145025474503633],
     [0.563292338844741],
     [0.568010343939956],
     [0.0274802534479032],
     [0.121831642313036],
     [0.858699614230401],
     [0.270136386033068],
     [0.121729594564956],
     [0.353436416007891],
     [0.777701243432628],
     [0.734764226819641],
     [0.618632352481554],
     [0.906873021136292],
     [0.107113832692999],
     [0.422793415992412],
     [0.143650645393471],
     [0.788875664171589],
     [0.84701168935],
     [0.905165036520598],
     [0.478325212520681],
     [0.763919897542807],
     [0.268589950167067],
     [0.215814714985891],
     [0.9025071505632],
     [0.335067425197205],
     [0.241666406863043],
     [0.236616510332375],
     [0.945880365452006],
     [0.98557302037659],
     [0.877588382783128],
     [0.625761064557003],
     [0.676737621053662],
     [0.944031373115625],
     [0.445983278091496],
     [0.229091626211386],
     [0.167397489325625],
     [0.0277826338336006],
     [0.0705668524940842],
     [0.670046198428203],
     [0.735447399826263],
     [0.581145490909398],
     [0.688448772094578],
     [0.422722426393572],
     [0.730845273046786],
     [0.461325582137118],
     [0.437662494710268],
     [0.118980758158706],
     [0.36448494190185],
     [0.952856799090966],
     [0.613026311639989],
     [0.762913896222156],
     [0.588120900429075],
     [0.0948470421962266],
     [0.813865902075367],
     [0.118440684743862],
     [0.0556870676273775],
     [0.494978110152073],
     [0.630738132778268],
     [0.955842498454786],
     [0.971932695481544],
     [0.51483464870773],
     [0.15542872735637],
     [0.326623678265128],
     [0.380341197647806],
     [0.557202732526096]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.01644593])],
     [array([ 0.54524756])],
     [array([ 0.82370136])],
     [array([ 0.66733299])],
     [array([ 0.01647662])],
     [array([ 0.98280245])],
     [array([ 0.86394508])],
     [array([ 0.31390771])],
     [array([ 0.80710489])],
     [array([ 0.15039274])],
     [array([ 0.39994209])],
     [array([ 0.45625022])],
     [array([ 0.2628249])],
     [array([ 0.94570808])],
     [array([ 0.42172405])],
     [array([ 0.47982121])],
     [array([ 0.17256771])],
     [array([ 0.76784795])],
     [array([ 0.76739532])],
     [array([ 0.96562234])],
     [array([ 0.29737471])],
     [array([ 0.82939188])],
     [array([ 0.31387984])],
     [array([ 0.29155302])],
     [array([ 0.58753608])],
     [array([ 0.31424629])],
     [array([ 0.19641345])],
     [array([ 0.37489902])],
     [array([ 0.75300692])],
     [array([ 0.69697339])],
     [array([ 0.1720131])],
     [array([ 0.54368742])],
     [array([ 0.71546713])],
     [array([ 0.84748073])],
     [array([ 0.47532098])],
     [array([ 0.14804787])],
     [array([ 0.40046479])],
     [array([ 0.90371366])],
     [array([ 0.68465214])],
     [array([ 0.12110204])],
     [array([ 0.48577246])],
     [array([ 0.03786526])],
     [array([ 0.51230791])],
     [array([ 0.66269277])],
     [array([ 0.00568885])],
     [array([ 0.84153399])],
     [array([ 0.42010391])],
     [array([ 0.88622451])],
     [array([ 0.82100545])],
     [array([ 0.55688499])],
     [array([ 0.54576812])],
     [array([ 0.32385699])],
     [array([ 0.02539406])],
     [array([ 0.06957395])],
     [array([ 0.97080721])],
     [array([ 0.31865111])],
     [array([ 0.69587783])],
     [array([ 0.64654282])],
     [array([ 0.81364437])],
     [array([ 0.22819942])],
     [array([ 0.22332276])],
     [array([ 0.49036636])],
     [array([ 0.627639])],
     [array([ 0.4457802])],
     [array([ 0.44255392])],
     [array([ 0.66665842])],
     [array([ 0.86103411])],
     [array([ 0.16546449])],
     [array([ 0.24445915])],
     [array([ 0.19335279])],
     [array([ 0.79576006])],
     [array([ 0.90115147])],
     [array([ 0.74036133])],
     [array([ 0.44967152])],
     [array([ 0.79496424])],
     [array([ 0.99913442])],
     [array([ 0.76470058])],
     [array([ 0.5214317])],
     [array([ 0.76831474])],
     [array([ 0.85907643])],
     [array([ 0.21346956])],
     [array([ 0.8598764])],
     [array([ 0.35048189])],
     [array([ 0.56017642])],
     [array([ 0.06570741])],
     [array([ 0.28675671])],
     [array([ 0.80954492])],
     [array([ 0.44743044])],
     [array([ 0.88516272])],
     [array([ 0.79064334])],
     [array([ 0.24045539])],
     [array([ 0.12392622])],
     [array([ 0.56954777])],
     [array([ 0.18686454])],
     [array([ 0.30891483])],
     [array([ 0.91156031])],
     [array([ 0.26835775])],
     [array([ 0.50180371])],
     [array([ 0.43616981])],
     [array([ 0.43448135])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.01644593,  0.54524756,  0.82370136,  0.66733299,  0.01647662,
            0.98280245,  0.86394508,  0.31390771,  0.80710489,  0.15039274,
            0.39994209,  0.45625022,  0.2628249 ,  0.94570808,  0.42172405,
            0.47982121,  0.17256771,  0.76784795,  0.76739532,  0.96562234,
            0.29737471,  0.82939188,  0.31387984,  0.29155302,  0.58753608,
            0.31424629,  0.19641345,  0.37489902,  0.75300692,  0.69697339,
            0.1720131 ,  0.54368742,  0.71546713,  0.84748073,  0.47532098,
            0.14804787,  0.40046479,  0.90371366,  0.68465214,  0.12110204,
            0.48577246,  0.03786526,  0.51230791,  0.66269277,  0.00568885,
            0.84153399,  0.42010391,  0.88622451,  0.82100545,  0.55688499,
            0.54576812,  0.32385699,  0.02539406,  0.06957395,  0.97080721,
            0.31865111,  0.69587783,  0.64654282,  0.81364437,  0.22819942,
            0.22332276,  0.49036636,  0.627639  ,  0.4457802 ,  0.44255392,
            0.66665842,  0.86103411,  0.16546449,  0.24445915,  0.19335279,
            0.79576006,  0.90115147,  0.74036133,  0.44967152,  0.79496424,
            0.99913442,  0.76470058,  0.5214317 ,  0.76831474,  0.85907643,
            0.21346956,  0.8598764 ,  0.35048189,  0.56017642,  0.06570741,
            0.28675671,  0.80954492,  0.44743044,  0.88516272,  0.79064334,
            0.24045539,  0.12392622,  0.56954777,  0.18686454,  0.30891483,
            0.91156031,  0.26835775,  0.50180371,  0.43616981,  0.43448135])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.24390944,  0.71083971,  0.80229547,  0.76931196,  0.00983392,
               0.43095457,  0.13328442,  0.48223966,  0.57688433,  0.85126092,
               0.5285454 ,  0.45084167,  0.64264941,  0.55462691,  0.11170874,
               0.21601658,  0.50295931,  0.52749839,  0.53641471,  0.56019389,
               0.22018607,  0.07803461,  0.62256001,  0.08111813,  0.68808995,
               0.71360108,  0.30565365,  0.58970027,  0.33619   ,  0.83665284,
               0.50421274,  0.03450693,  0.11093762,  0.31959031,  0.78513238,
               0.01450255,  0.56329234,  0.56801034,  0.02748025,  0.12183164,
               0.85869961,  0.27013639,  0.12172959,  0.35343642,  0.77770124,
               0.73476423,  0.61863235,  0.90687302,  0.10711383,  0.42279342,
               0.14365065,  0.78887566,  0.84701169,  0.90516504,  0.47832521,
               0.7639199 ,  0.26858995,  0.21581471,  0.90250715,  0.33506743,
               0.24166641,  0.23661651,  0.94588037,  0.98557302,  0.87758838,
               0.62576106,  0.67673762,  0.94403137,  0.44598328,  0.22909163,
               0.16739749,  0.02778263,  0.07056685,  0.6700462 ,  0.7354474 ,
               0.58114549,  0.68844877,  0.42272243,  0.73084527,  0.46132558,
               0.43766249,  0.11898076,  0.36448494,  0.9528568 ,  0.61302631,
               0.7629139 ,  0.5881209 ,  0.09484704,  0.8138659 ,  0.11844068,
               0.05568707,  0.49497811,  0.63073813,  0.9558425 ,  0.9719327 ,
               0.51483465,  0.15542873,  0.32662368,  0.3803412 ,  0.55720273])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.44046642,  0.28988912,  0.8204782 ,  0.11061845,  0.00328122,
               0.16946125,  0.95685733,  0.87876807,  0.66135192,  0.09585783,
               0.31088839,  0.21231174,  0.80028871,  0.40064817,  0.7327013 ,
               0.88387025,  0.1619935 ,  0.31638286,  0.42601398,  0.23627457,
               0.14882587,  0.67055078,  0.0357231 ,  0.89299205,  0.02094464,
               0.04457592,  0.94478023,  0.71912168,  0.55277453,  0.89243934,
               0.24787462,  0.09590453,  0.25439913,  0.46085112,  0.28153128,
               0.17795857,  0.10063555,  0.80181679,  0.54505206,  0.02145648,
               0.96765136,  0.65680129,  0.02322671,  0.40328349,  0.03881799,
               0.85751291,  0.50360878,  0.24166916,  0.76315586,  0.57659913,
               0.56990022,  0.00576867,  0.20577513,  0.02449448,  0.8909613 ,
               0.98429047,  0.573723  ,  0.29479684,  0.08004198,  0.21072607,
               0.89805934,  0.32635475,  0.12632267,  0.9328966 ,  0.11394793,
               0.87777933,  0.37730686,  0.40537405,  0.39934593,  0.82382579,
               0.19063585,  0.28696413,  0.24695892,  0.52520836,  0.5364524 ,
               0.30333975,  0.90674072,  0.19867257,  0.31278041,  0.7258288 ,
               0.69796634,  0.58315871,  0.5501919 ,  0.3970757 ,  0.11791703,
               0.53437092,  0.45027235,  0.13985102,  0.99809468,  0.69316966,
               0.23333472,  0.89796551,  0.33791031,  0.89477724,  0.87195626,
               0.38951664,  0.19368415,  0.3855795 ,  0.81991472,  0.36785918])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.71496347,  0.38077909,  0.76565006,  0.75576476,  0.48254542,
               0.75310151,  0.99562279,  0.33374991,  0.1741966 ,  0.97800572,
               0.35372541,  0.3931356 ,  0.9483772 ,  0.5279819 ,  0.59491134,
               0.10052984,  0.86472521,  0.12513611,  0.58539846,  0.07073153,
               0.19453311,  0.0854614 ,  0.17625699,  0.42721193,  0.61226449,
               0.33303854,  0.13651293,  0.91778383,  0.80321236,  0.0678639 ,
               0.05461228,  0.79132588,  0.2579625 ,  0.08295351,  0.22672175,
               0.0857113 ,  0.71731545,  0.57168664,  0.49395464,  0.57779244,
               0.48073554,  0.56916943,  0.96982381,  0.54719548,  0.30362413,
               0.83654337,  0.8667008 ,  0.90147218,  0.66081433,  0.48191081,
               0.4470011 ,  0.3495079 ,  0.32073895,  0.14804529,  0.60265115,
               0.98650878,  0.57014031,  0.2060543 ,  0.40675536,  0.80254996,
               0.59104375,  0.88168647,  0.63922554,  0.27004247,  0.92961165,
               0.46732715,  0.14560699,  0.32489178,  0.03872521,  0.04698877,
               0.75919533,  0.36297245,  0.9781225 ,  0.44719584,  0.67205473,
               0.48248035,  0.18817313,  0.64375949,  0.40693831,  0.98612665,
               0.19091393,  0.55659353,  0.75215178,  0.71663709,  0.52915366,
               0.64416507,  0.11719195,  0.37049813,  0.78265455,  0.71258843,
               0.49875168,  0.58848764,  0.37137123,  0.43788134,  0.79025257,
               0.77747921,  0.80985998,  0.01885465,  0.31038826,  0.34999279])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.47329691,  0.16883596,  0.99702883,  0.08837181,  0.46573474,
               0.29665002,  0.79054433,  0.66196849,  0.17500414,  0.37880172,
               0.86664666,  0.05428445,  0.61477419,  0.09501033,  0.62522663,
               0.48583207,  0.17259906,  0.21482037,  0.44206954,  0.35504713,
               0.43013648,  0.79866821,  0.63921695,  0.72781241,  0.86440739,
               0.18419113,  0.05710524,  0.58176338,  0.60975694,  0.27279636,
               0.35993128,  0.09446795,  0.80155004,  0.48830008,  0.31080026,
               0.79423244,  0.92770179,  0.03797868,  0.14617348,  0.51008636,
               0.16848917,  0.0118083 ,  0.5954782 ,  0.03046513,  0.02260597,
               0.36477399,  0.99810507,  0.34679255,  0.27743095,  0.56235791,
               0.07613181,  0.50171043,  0.20050846,  0.51329041,  0.22665923,
               0.1950322 ,  0.68052616,  0.20593703,  0.25016796,  0.38129353,
               0.05314725,  0.75125988,  0.82579009,  0.11384726,  0.72339907,
               0.64639284,  0.41436574,  0.22553922,  0.28428956,  0.60129127,
               0.81034803,  0.03058912,  0.05944654,  0.4932316 ,  0.39440951,
               0.20161638,  0.19921067,  0.16569608,  0.78405298,  0.72440672,
               0.35802476,  0.83160318,  0.99049284,  0.97267969,  0.55184519,
               0.59520887,  0.95029356,  0.80580136,  0.01766325,  0.27790237,
               0.03071787,  0.68005651,  0.61638611,  0.69281281,  0.2726605 ,
               0.03750943,  0.68876637,  0.32416005,  0.45827149,  0.21073256])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.24390944,  0.71083971,  0.80229547,  0.76931196,  0.00983392,
               0.43095457,  0.13328442,  0.48223966,  0.57688433,  0.85126092,
               0.5285454 ,  0.45084167,  0.64264941,  0.55462691,  0.11170874,
               0.21601658,  0.50295931,  0.52749839,  0.53641471,  0.56019389,
               0.22018607,  0.07803461,  0.62256001,  0.08111813,  0.68808995,
               0.71360108,  0.30565365,  0.58970027,  0.33619   ,  0.83665284,
               0.50421274,  0.03450693,  0.11093762,  0.31959031,  0.78513238,
               0.01450255,  0.56329234,  0.56801034,  0.02748025,  0.12183164,
               0.85869961,  0.27013639,  0.12172959,  0.35343642,  0.77770124,
               0.73476423,  0.61863235,  0.90687302,  0.10711383,  0.42279342,
               0.14365065,  0.78887566,  0.84701169,  0.90516504,  0.47832521,
               0.7639199 ,  0.26858995,  0.21581471,  0.90250715,  0.33506743,
               0.24166641,  0.23661651,  0.94588037,  0.98557302,  0.87758838,
               0.62576106,  0.67673762,  0.94403137,  0.44598328,  0.22909163,
               0.16739749,  0.02778263,  0.07056685,  0.6700462 ,  0.7354474 ,
               0.58114549,  0.68844877,  0.42272243,  0.73084527,  0.46132558,
               0.43766249,  0.11898076,  0.36448494,  0.9528568 ,  0.61302631,
               0.7629139 ,  0.5881209 ,  0.09484704,  0.8138659 ,  0.11844068,
               0.05568707,  0.49497811,  0.63073813,  0.9558425 ,  0.9719327 ,
               0.51483465,  0.15542873,  0.32662368,  0.3803412 ,  0.55720273])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.44046642,  0.28988912,  0.8204782 ,  0.11061845,  0.00328122,
               0.16946125,  0.95685733,  0.87876807,  0.66135192,  0.09585783,
               0.31088839,  0.21231174,  0.80028871,  0.40064817,  0.7327013 ,
               0.88387025,  0.1619935 ,  0.31638286,  0.42601398,  0.23627457,
               0.14882587,  0.67055078,  0.0357231 ,  0.89299205,  0.02094464,
               0.04457592,  0.94478023,  0.71912168,  0.55277453,  0.89243934,
               0.24787462,  0.09590453,  0.25439913,  0.46085112,  0.28153128,
               0.17795857,  0.10063555,  0.80181679,  0.54505206,  0.02145648,
               0.96765136,  0.65680129,  0.02322671,  0.40328349,  0.03881799,
               0.85751291,  0.50360878,  0.24166916,  0.76315586,  0.57659913,
               0.56990022,  0.00576867,  0.20577513,  0.02449448,  0.8909613 ,
               0.98429047,  0.573723  ,  0.29479684,  0.08004198,  0.21072607,
               0.89805934,  0.32635475,  0.12632267,  0.9328966 ,  0.11394793,
               0.87777933,  0.37730686,  0.40537405,  0.39934593,  0.82382579,
               0.19063585,  0.28696413,  0.24695892,  0.52520836,  0.5364524 ,
               0.30333975,  0.90674072,  0.19867257,  0.31278041,  0.7258288 ,
               0.69796634,  0.58315871,  0.5501919 ,  0.3970757 ,  0.11791703,
               0.53437092,  0.45027235,  0.13985102,  0.99809468,  0.69316966,
               0.23333472,  0.89796551,  0.33791031,  0.89477724,  0.87195626,
               0.38951664,  0.19368415,  0.3855795 ,  0.81991472,  0.36785918])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.71496347,  0.38077909,  0.76565006,  0.75576476,  0.48254542,
               0.75310151,  0.99562279,  0.33374991,  0.1741966 ,  0.97800572,
               0.35372541,  0.3931356 ,  0.9483772 ,  0.5279819 ,  0.59491134,
               0.10052984,  0.86472521,  0.12513611,  0.58539846,  0.07073153,
               0.19453311,  0.0854614 ,  0.17625699,  0.42721193,  0.61226449,
               0.33303854,  0.13651293,  0.91778383,  0.80321236,  0.0678639 ,
               0.05461228,  0.79132588,  0.2579625 ,  0.08295351,  0.22672175,
               0.0857113 ,  0.71731545,  0.57168664,  0.49395464,  0.57779244,
               0.48073554,  0.56916943,  0.96982381,  0.54719548,  0.30362413,
               0.83654337,  0.8667008 ,  0.90147218,  0.66081433,  0.48191081,
               0.4470011 ,  0.3495079 ,  0.32073895,  0.14804529,  0.60265115,
               0.98650878,  0.57014031,  0.2060543 ,  0.40675536,  0.80254996,
               0.59104375,  0.88168647,  0.63922554,  0.27004247,  0.92961165,
               0.46732715,  0.14560699,  0.32489178,  0.03872521,  0.04698877,
               0.75919533,  0.36297245,  0.9781225 ,  0.44719584,  0.67205473,
               0.48248035,  0.18817313,  0.64375949,  0.40693831,  0.98612665,
               0.19091393,  0.55659353,  0.75215178,  0.71663709,  0.52915366,
               0.64416507,  0.11719195,  0.37049813,  0.78265455,  0.71258843,
               0.49875168,  0.58848764,  0.37137123,  0.43788134,  0.79025257,
               0.77747921,  0.80985998,  0.01885465,  0.31038826,  0.34999279])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.05626989,  0.06194571,  0.21943043,  0.50690235,  0.43885529,
               0.16847508,  0.45447426,  0.18874003,  0.45346167,  0.57370309,
               0.53237464,  0.21193499,  0.56071404,  0.09451293,  0.56615763,
               0.19214091,  0.16617772,  0.43463668,  0.65219266,  0.12982397,
               0.3877802 ,  0.44709033,  0.56821414,  0.86748444,  0.62930653,
               0.29399997,  0.26839687,  0.18422233,  0.0193824 ,  0.02234937,
               0.88888665,  0.06959803,  0.77062805,  0.86504156,  0.59784957,
               0.03631187,  0.95128044,  0.01363231,  0.75849295,  0.97979453,
               0.7195284 ,  0.6261687 ,  0.14987294,  0.34171147,  0.84094846,
               0.14314915,  0.80677612,  0.22016812,  0.54627834,  0.37267528,
               0.41711866,  0.22654013,  0.3456692 ,  0.34960208,  0.22740785,
               0.26456368,  0.44973401,  0.70418929,  0.89895337,  0.6501204 ,
               0.32052411,  0.87660627,  0.66504084,  0.50632601,  0.95982237,
               0.84906954,  0.93284723,  0.50380138,  0.11565237,  0.35064058,
               0.8531657 ,  0.98362035,  0.90771416,  0.58314988,  0.68535226,
               0.65392818,  0.83330578,  0.86503647,  0.91660003,  0.84565371,
               0.13379219,  0.22093202,  0.95903628,  0.83073243,  0.23472551,
               0.00566523,  0.27575349,  0.88490287,  0.24618203,  0.10837502,
               0.4407676 ,  0.25638892,  0.17817426,  0.01525153,  0.36487791,
               0.07369121,  0.17348284,  0.84352703,  0.18545857,  0.32837087])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.01644593,  0.54524756,  0.82370136,  0.66733299,  0.01647662,
               0.98280245,  0.86394508,  0.31390771,  0.80710489,  0.15039274,
               0.39994209,  0.45625022,  0.2628249 ,  0.94570808,  0.42172405,
               0.47982121,  0.17256771,  0.76784795,  0.76739532,  0.96562234,
               0.29737471,  0.82939188,  0.31387984,  0.29155302,  0.58753608,
               0.31424629,  0.19641345,  0.37489902,  0.75300692,  0.69697339,
               0.1720131 ,  0.54368742,  0.71546713,  0.84748073,  0.47532098,
               0.14804787,  0.40046479,  0.90371366,  0.68465214,  0.12110204,
               0.48577246,  0.03786526,  0.51230791,  0.66269277,  0.00568885,
               0.84153399,  0.42010391,  0.88622451,  0.82100545,  0.55688499,
               0.54576812,  0.32385699,  0.02539406,  0.06957395,  0.97080721,
               0.31865111,  0.69587783,  0.64654282,  0.81364437,  0.22819942,
               0.22332276,  0.49036636,  0.627639  ,  0.4457802 ,  0.44255392,
               0.66665842,  0.86103411,  0.16546449,  0.24445915,  0.19335279,
               0.79576006,  0.90115147,  0.74036133,  0.44967152,  0.79496424,
               0.99913442,  0.76470058,  0.5214317 ,  0.76831474,  0.85907643,
               0.21346956,  0.8598764 ,  0.35048189,  0.56017642,  0.06570741,
               0.28675671,  0.80954492,  0.44743044,  0.88516272,  0.79064334,
               0.24045539,  0.12392622,  0.56954777,  0.18686454,  0.30891483,
               0.91156031,  0.26835775,  0.50180371,  0.43616981,  0.43448135])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([  5.64367018e-01,   6.25197339e-01,   5.09869497e-01,
                2.94181402e-01,   2.90088272e-01,   2.34907265e-01,
                7.30760191e-01,   9.78848237e-01,   9.83753231e-02,
                6.92913901e-02,   6.13593338e-02,   7.81641488e-01,
                1.73665401e-01,   9.32251825e-02,   2.05394920e-01,
                9.22482038e-02,   7.22107841e-01,   8.84448171e-01,
                9.75830369e-01,   7.12367124e-01,   4.46751933e-01,
                1.40456874e-01,   8.77161052e-01,   8.54639785e-02,
                3.24724068e-01,   2.71340564e-01,   6.51733136e-01,
                1.13690650e-01,   2.58383292e-01,   6.72023260e-01,
                3.21947259e-01,   7.28555786e-01,   5.54615089e-01,
                6.03083706e-01,   8.83833386e-01,   7.39495291e-02,
                9.29373392e-01,   6.06436014e-01,   6.00517709e-01,
                6.07574784e-01,   8.72422042e-01,   4.44967962e-01,
                7.66238523e-01,   9.42511011e-01,   3.37519923e-01,
                5.99375443e-01,   2.33014234e-01,   8.60420210e-01,
                3.99585414e-01,   2.13679818e-01,   9.34832566e-01,
                4.86928456e-02,   4.74415600e-01,   4.13854264e-01,
                1.44361257e-01,   1.41552117e-01,   6.57176444e-01,
                9.61742135e-01,   3.43689711e-01,   7.01769790e-01,
                8.77051754e-01,   8.38941324e-01,   5.47443708e-02,
                7.31072052e-02,   8.44920681e-01,   2.18877853e-01,
                9.49138745e-01,   1.58365744e-01,   6.06736874e-01,
                3.07199629e-01,   6.17721399e-01,   4.40033812e-01,
                5.24461288e-01,   4.20807734e-01,   1.26817496e-01,
                3.71090887e-01,   1.72478099e-01,   4.95306529e-02,
                4.87852757e-01,   9.83067548e-01,   2.19893024e-01,
                2.35001413e-01,   2.80268223e-01,   1.38154805e-01,
                7.95930123e-01,   6.91893085e-04,   4.76618444e-01,
                3.13059676e-01,   3.33113609e-01,   9.29532628e-01,
                2.68263458e-01,   1.58774912e-01,   4.84851550e-01,
                1.47008000e-01,   2.02759030e-01,   7.98358695e-02,
                4.76364889e-01,   4.49988747e-01,   3.86653243e-01,
                4.55920817e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.99951749,  0.67791645,  0.11827257,  0.23227616,  0.63709348,
               0.08288433,  0.07328907,  0.5758123 ,  0.3323518 ,  0.4100049 ,
               0.9738417 ,  0.75425911,  0.25618747,  0.339518  ,  0.74910603,
               0.55661437,  0.59450498,  0.51113161,  0.62426539,  0.19888072,
               0.58586516,  0.53967533,  0.55627405,  0.14339711,  0.80508962,
               0.45031798,  0.86600228,  0.76621943,  0.67066175,  0.478952  ,
               0.82203729,  0.73892218,  0.25540872,  0.24699764,  0.733822  ,
               0.93616554,  0.07356537,  0.7020301 ,  0.49089468,  0.0955019 ,
               0.58584571,  0.5858648 ,  0.91199838,  0.85391149,  0.09248243,
               0.92415361,  0.41017193,  0.55430351,  0.26772214,  0.5482672 ,
               0.71056379,  0.23001564,  0.89472855,  0.03495458,  0.45999312,
               0.54883045,  0.6315838 ,  0.58275853,  0.83035189,  0.92222751,
               0.52110311,  0.74215807,  0.26311581,  0.79893046,  0.56187408,
               0.66887446,  0.54341419,  0.88638721,  0.85077433,  0.40998694,
               0.76188804,  0.16157606,  0.93333722,  0.63986885,  0.40044158,
               0.5074957 ,  0.24169541,  0.58711844,  0.46737518,  0.58462306,
               0.79774114,  0.04560007,  0.74547846,  0.09240466,  0.51000865,
               0.20469214,  0.95894536,  0.18379497,  0.52914463,  0.22976932,
               0.29621946,  0.17326676,  0.94321454,  0.9949742 ,  0.97544703,
               0.80304272,  0.76735853,  0.47274563,  0.0417834 ,  0.05010851])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.17786953,  0.27942878,  0.16869937,  0.71692009,  0.89324187,
               0.56153155,  0.387563  ,  0.56543549,  0.03468343,  0.1002776 ,
               0.56936753,  0.252087  ,  0.8118971 ,  0.87108863,  0.51500799,
               0.177624  ,  0.36566593,  0.92232105,  0.33807305,  0.98091022,
               0.9336224 ,  0.37792077,  0.72117811,  0.59821651,  0.26955235,
               0.41811707,  0.48136521,  0.80690858,  0.89179071,  0.31859281,
               0.01028554,  0.27828011,  0.51337883,  0.06926889,  0.33326836,
               0.27960234,  0.37594273,  0.56497793,  0.46776684,  0.22874901,
               0.72809625,  0.54953995,  0.89092187,  0.91918973,  0.19433669,
               0.84357532,  0.29381185,  0.93601791,  0.16986094,  0.80747904,
               0.35617281,  0.26614486,  0.89063587,  0.18428897,  0.96133388,
               0.30353774,  0.17604107,  0.0807782 ,  0.59773223,  0.66518978,
               0.81109797,  0.07820498,  0.93260323,  0.88786335,  0.03969791,
               0.48896727,  0.68789223,  0.33453324,  0.2386511 ,  0.97711736,
               0.69623994,  0.64119102,  0.46401967,  0.94528597,  0.93540786,
               0.12748423,  0.2252724 ,  0.60316338,  0.72501469,  0.98513249,
               0.29831769,  0.95960716,  0.00767468,  0.72410479,  0.96501022,
               0.86057496,  0.18886011,  0.9724008 ,  0.79270703,  0.89398069,
               0.62539466,  0.17477166,  0.01781773,  0.26004137,  0.25848033,
               0.0791264 ,  0.77743103,  0.41230051,  0.77976513,  0.96464613])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.01644593,  0.54524756,  0.82370136,  0.66733299,  0.01647662,
               0.98280245,  0.86394508,  0.31390771,  0.80710489,  0.15039274,
               0.39994209,  0.45625022,  0.2628249 ,  0.94570808,  0.42172405,
               0.47982121,  0.17256771,  0.76784795,  0.76739532,  0.96562234,
               0.29737471,  0.82939188,  0.31387984,  0.29155302,  0.58753608,
               0.31424629,  0.19641345,  0.37489902,  0.75300692,  0.69697339,
               0.1720131 ,  0.54368742,  0.71546713,  0.84748073,  0.47532098,
               0.14804787,  0.40046479,  0.90371366,  0.68465214,  0.12110204,
               0.48577246,  0.03786526,  0.51230791,  0.66269277,  0.00568885,
               0.84153399,  0.42010391,  0.88622451,  0.82100545,  0.55688499,
               0.54576812,  0.32385699,  0.02539406,  0.06957395,  0.97080721,
               0.31865111,  0.69587783,  0.64654282,  0.81364437,  0.22819942,
               0.22332276,  0.49036636,  0.627639  ,  0.4457802 ,  0.44255392,
               0.66665842,  0.86103411,  0.16546449,  0.24445915,  0.19335279,
               0.79576006,  0.90115147,  0.74036133,  0.44967152,  0.79496424,
               0.99913442,  0.76470058,  0.5214317 ,  0.76831474,  0.85907643,
               0.21346956,  0.8598764 ,  0.35048189,  0.56017642,  0.06570741,
               0.28675671,  0.80954492,  0.44743044,  0.88516272,  0.79064334,
               0.24045539,  0.12392622,  0.56954777,  0.18686454,  0.30891483,
               0.91156031,  0.26835775,  0.50180371,  0.43616981,  0.43448135])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([  5.64367018e-01,   6.25197339e-01,   5.09869497e-01,
                2.94181402e-01,   2.90088272e-01,   2.34907265e-01,
                7.30760191e-01,   9.78848237e-01,   9.83753231e-02,
                6.92913901e-02,   6.13593338e-02,   7.81641488e-01,
                1.73665401e-01,   9.32251825e-02,   2.05394920e-01,
                9.22482038e-02,   7.22107841e-01,   8.84448171e-01,
                9.75830369e-01,   7.12367124e-01,   4.46751933e-01,
                1.40456874e-01,   8.77161052e-01,   8.54639785e-02,
                3.24724068e-01,   2.71340564e-01,   6.51733136e-01,
                1.13690650e-01,   2.58383292e-01,   6.72023260e-01,
                3.21947259e-01,   7.28555786e-01,   5.54615089e-01,
                6.03083706e-01,   8.83833386e-01,   7.39495291e-02,
                9.29373392e-01,   6.06436014e-01,   6.00517709e-01,
                6.07574784e-01,   8.72422042e-01,   4.44967962e-01,
                7.66238523e-01,   9.42511011e-01,   3.37519923e-01,
                5.99375443e-01,   2.33014234e-01,   8.60420210e-01,
                3.99585414e-01,   2.13679818e-01,   9.34832566e-01,
                4.86928456e-02,   4.74415600e-01,   4.13854264e-01,
                1.44361257e-01,   1.41552117e-01,   6.57176444e-01,
                9.61742135e-01,   3.43689711e-01,   7.01769790e-01,
                8.77051754e-01,   8.38941324e-01,   5.47443708e-02,
                7.31072052e-02,   8.44920681e-01,   2.18877853e-01,
                9.49138745e-01,   1.58365744e-01,   6.06736874e-01,
                3.07199629e-01,   6.17721399e-01,   4.40033812e-01,
                5.24461288e-01,   4.20807734e-01,   1.26817496e-01,
                3.71090887e-01,   1.72478099e-01,   4.95306529e-02,
                4.87852757e-01,   9.83067548e-01,   2.19893024e-01,
                2.35001413e-01,   2.80268223e-01,   1.38154805e-01,
                7.95930123e-01,   6.91893085e-04,   4.76618444e-01,
                3.13059676e-01,   3.33113609e-01,   9.29532628e-01,
                2.68263458e-01,   1.58774912e-01,   4.84851550e-01,
                1.47008000e-01,   2.02759030e-01,   7.98358695e-02,
                4.76364889e-01,   4.49988747e-01,   3.86653243e-01,
                4.55920817e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.99951749,  0.67791645,  0.11827257,  0.23227616,  0.63709348,
               0.08288433,  0.07328907,  0.5758123 ,  0.3323518 ,  0.4100049 ,
               0.9738417 ,  0.75425911,  0.25618747,  0.339518  ,  0.74910603,
               0.55661437,  0.59450498,  0.51113161,  0.62426539,  0.19888072,
               0.58586516,  0.53967533,  0.55627405,  0.14339711,  0.80508962,
               0.45031798,  0.86600228,  0.76621943,  0.67066175,  0.478952  ,
               0.82203729,  0.73892218,  0.25540872,  0.24699764,  0.733822  ,
               0.93616554,  0.07356537,  0.7020301 ,  0.49089468,  0.0955019 ,
               0.58584571,  0.5858648 ,  0.91199838,  0.85391149,  0.09248243,
               0.92415361,  0.41017193,  0.55430351,  0.26772214,  0.5482672 ,
               0.71056379,  0.23001564,  0.89472855,  0.03495458,  0.45999312,
               0.54883045,  0.6315838 ,  0.58275853,  0.83035189,  0.92222751,
               0.52110311,  0.74215807,  0.26311581,  0.79893046,  0.56187408,
               0.66887446,  0.54341419,  0.88638721,  0.85077433,  0.40998694,
               0.76188804,  0.16157606,  0.93333722,  0.63986885,  0.40044158,
               0.5074957 ,  0.24169541,  0.58711844,  0.46737518,  0.58462306,
               0.79774114,  0.04560007,  0.74547846,  0.09240466,  0.51000865,
               0.20469214,  0.95894536,  0.18379497,  0.52914463,  0.22976932,
               0.29621946,  0.17326676,  0.94321454,  0.9949742 ,  0.97544703,
               0.80304272,  0.76735853,  0.47274563,  0.0417834 ,  0.05010851])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([  5.38296065e-01,   5.41973326e-01,   2.57199139e-01,
                2.72830420e-02,   6.34035260e-01,   4.29172489e-01,
                7.39068835e-02,   8.95258646e-01,   1.73461205e-01,
                3.12825321e-01,   8.77066340e-01,   6.74342626e-01,
                8.71394210e-01,   5.69516346e-01,   5.61420606e-01,
                5.52909442e-01,   7.38967783e-01,   7.61807283e-02,
                8.22622950e-01,   5.44240193e-01,   8.29811379e-02,
                6.31634779e-01,   8.15783467e-02,   4.70802351e-01,
                1.10089847e-02,   6.62751165e-01,   8.59631299e-01,
                7.50657639e-01,   1.87979142e-01,   7.38608312e-03,
                3.63926070e-01,   2.05218523e-01,   2.38871129e-01,
                5.98825223e-02,   2.84963530e-01,   2.40501070e-01,
                5.73448278e-01,   4.56510302e-01,   6.32927200e-01,
                9.68474037e-01,   6.04067774e-01,   9.92167902e-01,
                7.35326694e-01,   9.34764239e-01,   8.00790106e-01,
                3.89802335e-01,   5.63951868e-01,   2.09853100e-03,
                3.48527454e-01,   2.62629393e-01,   8.10872528e-01,
                1.54577198e-02,   1.02829356e-02,   1.27634501e-01,
                3.97735166e-01,   8.67194162e-01,   1.27344735e-01,
                1.96163791e-02,   3.59592907e-02,   1.89563586e-01,
                9.30555016e-01,   1.79107295e-01,   7.01125499e-01,
                3.84714259e-01,   4.06416247e-01,   9.34364723e-01,
                2.61089769e-01,   5.97429132e-01,   3.86251340e-02,
                1.90818635e-04,   3.31191826e-01,   5.17044434e-01,
                7.44452719e-01,   7.87925812e-02,   7.41097482e-01,
                7.79176335e-01,   9.03982650e-01,   3.53011483e-01,
                9.15070622e-01,   4.44174703e-01,   8.73083249e-01,
                4.63140062e-01,   5.02217971e-01,   4.78061032e-02,
                4.59801315e-01,   3.43074667e-01,   4.56710572e-01,
                9.25456780e-01,   8.19881897e-01,   4.12822087e-01,
                7.09271983e-01,   4.91148214e-01,   5.33656848e-01,
                9.16390193e-01,   1.02629609e-01,   8.65566397e-01,
                1.70873909e-01,   4.51246006e-01,   3.27848745e-01,
                4.95891023e-01])}]]


