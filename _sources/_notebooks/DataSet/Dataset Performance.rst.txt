
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='7a6ae5d8-63a6-4c1a-9bde-09dcde9a2cc8'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='6f700600-245d-4375-902c-ef368e5e51a7'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.059366513753172],
     [0.771908923715787],
     [0.813080231073906],
     [0.286489297240443],
     [0.768548153180683],
     [0.79147266429983],
     [0.371710906411814],
     [0.57623387065625],
     [0.47910233812949],
     [0.945997094345329],
     [0.207028682732487],
     [0.520604929692306],
     [0.595892568957921],
     [0.90024306807526],
     [0.390094990075376],
     [0.747085573927726],
     [0.757599262491475],
     [0.480460998027841],
     [0.865521454680124],
     [0.0183224761741381],
     [0.179844713963976],
     [0.648965470606869],
     [0.854068696134393],
     [0.0630745705153418],
     [0.124928547795144],
     [0.912895843832498],
     [0.725097083333551],
     [0.974273596105882],
     [0.887940419414594],
     [0.502041778261703],
     [0.217048915330627],
     [0.119161149869151],
     [0.526203082071048],
     [0.942674316221324],
     [0.942240368022686],
     [0.359195698622213],
     [0.112801766342125],
     [0.751002466284065],
     [0.471226746900022],
     [0.0516819947022756],
     [0.702608526821862],
     [0.919196867063682],
     [0.630775232732826],
     [0.595315892375236],
     [0.0857051911043684],
     [0.0115519903354419],
     [0.0737712155873419],
     [0.811108726883184],
     [0.464672036593734],
     [0.899930869645776],
     [0.457437062548949],
     [0.392799409428121],
     [0.936725757550222],
     [0.0649128293522454],
     [0.0966137634159985],
     [0.707413081624159],
     [0.447087909110862],
     [0.128453140217255],
     [0.99528312253506],
     [0.225027490427578],
     [0.179105103961867],
     [0.141711397621659],
     [0.342493154630703],
     [0.40699671117563],
     [0.500805863036035],
     [0.443099915015235],
     [0.569839806383227],
     [0.565668148765515],
     [0.970265460460063],
     [0.0101388962562908],
     [0.995427286864745],
     [0.867218783495981],
     [0.928459079102467],
     [0.90036646916094],
     [0.079188188402382],
     [0.553886094386487],
     [0.487837393503797],
     [0.373992395903818],
     [0.397813236091998],
     [0.706390394148318],
     [0.509597867830425],
     [0.720735934218249],
     [0.786307688091551],
     [0.87770892368819],
     [0.297707301133913],
     [0.479079802771963],
     [0.0764498285193143],
     [0.900465033783396],
     [0.090549841773974],
     [0.393797907347164],
     [0.861261398565552],
     [0.445842076300784],
     [0.537491326521342],
     [0.752055760872982],
     [0.811010676109966],
     [0.966897193797415],
     [0.032268654556426],
     [0.278607051533696],
     [0.464161723838379],
     [0.374641533719224]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.21952793])],
     [array([0.06447074])],
     [array([0.51627226])],
     [array([0.65530473])],
     [array([0.76858032])],
     [array([0.02743943])],
     [array([0.34118575])],
     [array([0.00696007])],
     [array([0.90538778])],
     [array([0.87899062])],
     [array([0.48644527])],
     [array([0.8495552])],
     [array([0.08499478])],
     [array([0.37239306])],
     [array([0.56874796])],
     [array([0.01062958])],
     [array([0.2893019])],
     [array([0.84936252])],
     [array([0.01601872])],
     [array([0.12222626])],
     [array([0.75828293])],
     [array([0.62202031])],
     [array([0.60661807])],
     [array([0.39742598])],
     [array([0.31381877])],
     [array([0.7987416])],
     [array([0.78747203])],
     [array([0.11898719])],
     [array([0.83929225])],
     [array([0.41644666])],
     [array([0.43569999])],
     [array([0.20585972])],
     [array([0.62932343])],
     [array([0.06625317])],
     [array([0.6819636])],
     [array([0.93253809])],
     [array([0.99757376])],
     [array([0.27168157])],
     [array([0.24496203])],
     [array([0.35846192])],
     [array([0.71069309])],
     [array([0.53810534])],
     [array([0.30894636])],
     [array([0.30164082])],
     [array([0.61647483])],
     [array([0.4792469])],
     [array([0.45360983])],
     [array([0.49552967])],
     [array([0.44575279])],
     [array([0.82402518])],
     [array([0.43111003])],
     [array([0.02598695])],
     [array([0.9258203])],
     [array([0.95326654])],
     [array([0.19414555])],
     [array([0.52418544])],
     [array([0.02477383])],
     [array([0.97829922])],
     [array([0.38005579])],
     [array([0.56900013])],
     [array([0.91597213])],
     [array([0.77556532])],
     [array([0.95063776])],
     [array([0.54746762])],
     [array([0.92172332])],
     [array([0.5276871])],
     [array([0.64516742])],
     [array([0.388388])],
     [array([0.13645556])],
     [array([0.55007624])],
     [array([0.6539527])],
     [array([0.60566594])],
     [array([0.49261144])],
     [array([0.71642211])],
     [array([0.65513562])],
     [array([0.88449153])],
     [array([0.67945345])],
     [array([0.68278779])],
     [array([0.36968158])],
     [array([0.17441517])],
     [array([0.1233086])],
     [array([0.64503464])],
     [array([0.92810549])],
     [array([0.65833896])],
     [array([0.37390315])],
     [array([0.24347701])],
     [array([0.22970734])],
     [array([0.23438721])],
     [array([0.9512085])],
     [array([0.063415])],
     [array([0.68462709])],
     [array([0.54629641])],
     [array([0.69739345])],
     [array([0.63617434])],
     [array([0.39616823])],
     [array([0.53909353])],
     [array([0.42961602])],
     [array([0.66179827])],
     [array([0.08342257])],
     [array([0.80794566])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.21952793, 0.06447074, 0.51627226, 0.65530473, 0.76858032,
           0.02743943, 0.34118575, 0.00696007, 0.90538778, 0.87899062,
           0.48644527, 0.8495552 , 0.08499478, 0.37239306, 0.56874796,
           0.01062958, 0.2893019 , 0.84936252, 0.01601872, 0.12222626,
           0.75828293, 0.62202031, 0.60661807, 0.39742598, 0.31381877,
           0.7987416 , 0.78747203, 0.11898719, 0.83929225, 0.41644666,
           0.43569999, 0.20585972, 0.62932343, 0.06625317, 0.6819636 ,
           0.93253809, 0.99757376, 0.27168157, 0.24496203, 0.35846192,
           0.71069309, 0.53810534, 0.30894636, 0.30164082, 0.61647483,
           0.4792469 , 0.45360983, 0.49552967, 0.44575279, 0.82402518,
           0.43111003, 0.02598695, 0.9258203 , 0.95326654, 0.19414555,
           0.52418544, 0.02477383, 0.97829922, 0.38005579, 0.56900013,
           0.91597213, 0.77556532, 0.95063776, 0.54746762, 0.92172332,
           0.5276871 , 0.64516742, 0.388388  , 0.13645556, 0.55007624,
           0.6539527 , 0.60566594, 0.49261144, 0.71642211, 0.65513562,
           0.88449153, 0.67945345, 0.68278779, 0.36968158, 0.17441517,
           0.1233086 , 0.64503464, 0.92810549, 0.65833896, 0.37390315,
           0.24347701, 0.22970734, 0.23438721, 0.9512085 , 0.063415  ,
           0.68462709, 0.54629641, 0.69739345, 0.63617434, 0.39616823,
           0.53909353, 0.42961602, 0.66179827, 0.08342257, 0.80794566])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.05936651, 0.77190892, 0.81308023, 0.2864893 , 0.76854815,
              0.79147266, 0.37171091, 0.57623387, 0.47910234, 0.94599709,
              0.20702868, 0.52060493, 0.59589257, 0.90024307, 0.39009499,
              0.74708557, 0.75759926, 0.480461  , 0.86552145, 0.01832248,
              0.17984471, 0.64896547, 0.8540687 , 0.06307457, 0.12492855,
              0.91289584, 0.72509708, 0.9742736 , 0.88794042, 0.50204178,
              0.21704892, 0.11916115, 0.52620308, 0.94267432, 0.94224037,
              0.3591957 , 0.11280177, 0.75100247, 0.47122675, 0.05168199,
              0.70260853, 0.91919687, 0.63077523, 0.59531589, 0.08570519,
              0.01155199, 0.07377122, 0.81110873, 0.46467204, 0.89993087,
              0.45743706, 0.39279941, 0.93672576, 0.06491283, 0.09661376,
              0.70741308, 0.44708791, 0.12845314, 0.99528312, 0.22502749,
              0.1791051 , 0.1417114 , 0.34249315, 0.40699671, 0.50080586,
              0.44309992, 0.56983981, 0.56566815, 0.97026546, 0.0101389 ,
              0.99542729, 0.86721878, 0.92845908, 0.90036647, 0.07918819,
              0.55388609, 0.48783739, 0.3739924 , 0.39781324, 0.70639039,
              0.50959787, 0.72073593, 0.78630769, 0.87770892, 0.2977073 ,
              0.4790798 , 0.07644983, 0.90046503, 0.09054984, 0.39379791,
              0.8612614 , 0.44584208, 0.53749133, 0.75205576, 0.81101068,
              0.96689719, 0.03226865, 0.27860705, 0.46416172, 0.37464153])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.49371869, 0.93729367, 0.99690518, 0.61468564, 0.07378665,
              0.60079658, 0.04208583, 0.68006605, 0.0175685 , 0.77765251,
              0.90685899, 0.67952234, 0.43971741, 0.5864829 , 0.4051484 ,
              0.95343461, 0.42129189, 0.74340336, 0.96636988, 0.84728195,
              0.81561634, 0.26805598, 0.53834465, 0.21157087, 0.9485851 ,
              0.00843779, 0.0044714 , 0.81301394, 0.3175529 , 0.0195142 ,
              0.19822784, 0.56676385, 0.30363262, 0.9301578 , 0.88459367,
              0.65411949, 0.78266523, 0.12122535, 0.98404844, 0.96030394,
              0.84274303, 0.41173368, 0.53578093, 0.83733568, 0.45755598,
              0.29231989, 0.75758741, 0.45841431, 0.83482038, 0.76970564,
              0.52241773, 0.73577259, 0.98359533, 0.97161743, 0.15702219,
              0.46051722, 0.11491   , 0.37381586, 0.49255804, 0.9163992 ,
              0.07685183, 0.93931651, 0.9730942 , 0.81826261, 0.84196798,
              0.08845162, 0.89701778, 0.68062723, 0.72721812, 0.89545734,
              0.97990743, 0.60393381, 0.51665817, 0.02063094, 0.73484778,
              0.45816963, 0.6424888 , 0.27958002, 0.96556884, 0.28221047,
              0.53285969, 0.16344644, 0.40876626, 0.41205184, 0.90444712,
              0.29098315, 0.43467883, 0.96305804, 0.13000881, 0.088096  ,
              0.132448  , 0.65480274, 0.97264153, 0.83283405, 0.11892162,
              0.54419571, 0.60145475, 0.46370753, 0.08012147, 0.73140305])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.34144223, 0.21857668, 0.06219923, 0.96971026, 0.61512043,
              0.86463207, 0.89428426, 0.32465805, 0.83881101, 0.70325255,
              0.26974251, 0.16348982, 0.00642784, 0.18390846, 0.47721249,
              0.10380364, 0.96371097, 0.55056393, 0.84042491, 0.46719761,
              0.44141719, 0.56525857, 0.93676592, 0.1569284 , 0.56578723,
              0.41114572, 0.38693808, 0.0477935 , 0.2644201 , 0.07737976,
              0.23558713, 0.82634254, 0.33324617, 0.96688009, 0.79227567,
              0.96583438, 0.56476677, 0.74499652, 0.55966171, 0.08649703,
              0.26398556, 0.31147623, 0.37333137, 0.49976944, 0.87982118,
              0.07867611, 0.36522903, 0.86901284, 0.45751697, 0.49128833,
              0.27125002, 0.7632513 , 0.53549323, 0.618112  , 0.29692523,
              0.20632317, 0.08049293, 0.55878895, 0.81245232, 0.09707376,
              0.44836174, 0.22571187, 0.05897824, 0.67466723, 0.7386523 ,
              0.53839516, 0.51198477, 0.107257  , 0.59964434, 0.09289088,
              0.88580299, 0.27977521, 0.66386243, 0.86797454, 0.43728012,
              0.00772304, 0.2152809 , 0.21715704, 0.72145947, 0.90705586,
              0.31504711, 0.67434584, 0.25612745, 0.12028056, 0.57509843,
              0.65086294, 0.11858429, 0.43551244, 0.0871875 , 0.39010486,
              0.54733476, 0.35717957, 0.91233902, 0.98964309, 0.01075291,
              0.86384   , 0.48640977, 0.29645328, 0.17361029, 0.8391898 ])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([5.72309808e-01, 4.11432660e-01, 2.73254409e-01, 1.78813376e-01,
              1.86097271e-01, 8.33813876e-02, 3.85265204e-01, 8.02788559e-01,
              3.05743185e-01, 7.49025660e-01, 1.97712633e-01, 5.44367806e-02,
              6.87880309e-01, 2.87903662e-01, 9.36836129e-01, 2.43604888e-01,
              2.41316159e-01, 6.79631774e-01, 1.72475646e-01, 8.82405032e-01,
              5.51454935e-01, 8.42676039e-01, 7.77999595e-01, 3.99133550e-01,
              2.38726120e-01, 9.44715119e-01, 3.03962764e-01, 3.02825313e-01,
              1.31528913e-01, 2.48712767e-01, 2.96910635e-01, 5.25026285e-01,
              7.85120204e-01, 4.34857386e-01, 5.36287421e-02, 7.21759686e-01,
              2.15913323e-01, 6.96228281e-01, 7.64379762e-01, 2.92739719e-01,
              8.70073766e-01, 2.51432195e-01, 4.31567171e-04, 4.79034118e-01,
              3.06081697e-01, 6.02898276e-01, 8.02344737e-01, 4.37713681e-01,
              2.72730276e-01, 4.58383975e-01, 3.65644550e-01, 3.80875678e-01,
              5.07005991e-01, 7.48290824e-01, 5.04900108e-01, 9.27747484e-01,
              3.23410455e-01, 7.28571784e-01, 8.60398841e-01, 4.70771203e-01,
              9.44852619e-01, 7.94376560e-01, 7.26794927e-01, 4.93688061e-01,
              1.94554524e-01, 4.89223955e-02, 6.30321600e-01, 7.96760203e-01,
              4.99158193e-01, 2.96889979e-01, 6.85575793e-01, 6.46757314e-01,
              4.51888972e-01, 2.98391450e-01, 3.56755033e-01, 2.61987094e-01,
              1.63108732e-02, 4.12173502e-01, 7.44860968e-01, 6.46669554e-01,
              6.99664273e-01, 8.79406227e-01, 3.53299410e-01, 4.05023045e-01,
              3.98268729e-01, 7.92254179e-01, 4.35727306e-01, 8.00496533e-01,
              6.79785978e-01, 1.26146302e-01, 5.84002330e-01, 7.33750237e-01,
              2.47595370e-02, 7.77863505e-02, 3.85896712e-01, 1.42795850e-01,
              6.12855890e-02, 8.92153706e-01, 4.79614127e-01, 5.56455843e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.05936651, 0.77190892, 0.81308023, 0.2864893 , 0.76854815,
              0.79147266, 0.37171091, 0.57623387, 0.47910234, 0.94599709,
              0.20702868, 0.52060493, 0.59589257, 0.90024307, 0.39009499,
              0.74708557, 0.75759926, 0.480461  , 0.86552145, 0.01832248,
              0.17984471, 0.64896547, 0.8540687 , 0.06307457, 0.12492855,
              0.91289584, 0.72509708, 0.9742736 , 0.88794042, 0.50204178,
              0.21704892, 0.11916115, 0.52620308, 0.94267432, 0.94224037,
              0.3591957 , 0.11280177, 0.75100247, 0.47122675, 0.05168199,
              0.70260853, 0.91919687, 0.63077523, 0.59531589, 0.08570519,
              0.01155199, 0.07377122, 0.81110873, 0.46467204, 0.89993087,
              0.45743706, 0.39279941, 0.93672576, 0.06491283, 0.09661376,
              0.70741308, 0.44708791, 0.12845314, 0.99528312, 0.22502749,
              0.1791051 , 0.1417114 , 0.34249315, 0.40699671, 0.50080586,
              0.44309992, 0.56983981, 0.56566815, 0.97026546, 0.0101389 ,
              0.99542729, 0.86721878, 0.92845908, 0.90036647, 0.07918819,
              0.55388609, 0.48783739, 0.3739924 , 0.39781324, 0.70639039,
              0.50959787, 0.72073593, 0.78630769, 0.87770892, 0.2977073 ,
              0.4790798 , 0.07644983, 0.90046503, 0.09054984, 0.39379791,
              0.8612614 , 0.44584208, 0.53749133, 0.75205576, 0.81101068,
              0.96689719, 0.03226865, 0.27860705, 0.46416172, 0.37464153])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.49371869, 0.93729367, 0.99690518, 0.61468564, 0.07378665,
              0.60079658, 0.04208583, 0.68006605, 0.0175685 , 0.77765251,
              0.90685899, 0.67952234, 0.43971741, 0.5864829 , 0.4051484 ,
              0.95343461, 0.42129189, 0.74340336, 0.96636988, 0.84728195,
              0.81561634, 0.26805598, 0.53834465, 0.21157087, 0.9485851 ,
              0.00843779, 0.0044714 , 0.81301394, 0.3175529 , 0.0195142 ,
              0.19822784, 0.56676385, 0.30363262, 0.9301578 , 0.88459367,
              0.65411949, 0.78266523, 0.12122535, 0.98404844, 0.96030394,
              0.84274303, 0.41173368, 0.53578093, 0.83733568, 0.45755598,
              0.29231989, 0.75758741, 0.45841431, 0.83482038, 0.76970564,
              0.52241773, 0.73577259, 0.98359533, 0.97161743, 0.15702219,
              0.46051722, 0.11491   , 0.37381586, 0.49255804, 0.9163992 ,
              0.07685183, 0.93931651, 0.9730942 , 0.81826261, 0.84196798,
              0.08845162, 0.89701778, 0.68062723, 0.72721812, 0.89545734,
              0.97990743, 0.60393381, 0.51665817, 0.02063094, 0.73484778,
              0.45816963, 0.6424888 , 0.27958002, 0.96556884, 0.28221047,
              0.53285969, 0.16344644, 0.40876626, 0.41205184, 0.90444712,
              0.29098315, 0.43467883, 0.96305804, 0.13000881, 0.088096  ,
              0.132448  , 0.65480274, 0.97264153, 0.83283405, 0.11892162,
              0.54419571, 0.60145475, 0.46370753, 0.08012147, 0.73140305])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.34144223, 0.21857668, 0.06219923, 0.96971026, 0.61512043,
              0.86463207, 0.89428426, 0.32465805, 0.83881101, 0.70325255,
              0.26974251, 0.16348982, 0.00642784, 0.18390846, 0.47721249,
              0.10380364, 0.96371097, 0.55056393, 0.84042491, 0.46719761,
              0.44141719, 0.56525857, 0.93676592, 0.1569284 , 0.56578723,
              0.41114572, 0.38693808, 0.0477935 , 0.2644201 , 0.07737976,
              0.23558713, 0.82634254, 0.33324617, 0.96688009, 0.79227567,
              0.96583438, 0.56476677, 0.74499652, 0.55966171, 0.08649703,
              0.26398556, 0.31147623, 0.37333137, 0.49976944, 0.87982118,
              0.07867611, 0.36522903, 0.86901284, 0.45751697, 0.49128833,
              0.27125002, 0.7632513 , 0.53549323, 0.618112  , 0.29692523,
              0.20632317, 0.08049293, 0.55878895, 0.81245232, 0.09707376,
              0.44836174, 0.22571187, 0.05897824, 0.67466723, 0.7386523 ,
              0.53839516, 0.51198477, 0.107257  , 0.59964434, 0.09289088,
              0.88580299, 0.27977521, 0.66386243, 0.86797454, 0.43728012,
              0.00772304, 0.2152809 , 0.21715704, 0.72145947, 0.90705586,
              0.31504711, 0.67434584, 0.25612745, 0.12028056, 0.57509843,
              0.65086294, 0.11858429, 0.43551244, 0.0871875 , 0.39010486,
              0.54733476, 0.35717957, 0.91233902, 0.98964309, 0.01075291,
              0.86384   , 0.48640977, 0.29645328, 0.17361029, 0.8391898 ])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.22993108, 0.67763589, 0.73686139, 0.8587946 , 0.59797126,
              0.73945573, 0.54221754, 0.45503524, 0.86747527, 0.8591012 ,
              0.00349664, 0.46596031, 0.59469167, 0.65606587, 0.45159961,
              0.46844629, 0.78692918, 0.47895718, 0.23955884, 0.55862872,
              0.76224096, 0.48107995, 0.31866366, 0.45475287, 0.42450824,
              0.32430057, 0.16204995, 0.00770379, 0.22285069, 0.23765483,
              0.21480125, 0.14299968, 0.688962  , 0.77703932, 0.44072341,
              0.91780854, 0.45181438, 0.22707585, 0.58136375, 0.66419155,
              0.00657903, 0.0911433 , 0.3694093 , 0.624221  , 0.64924419,
              0.54441795, 0.81490209, 0.23855816, 0.70206535, 0.69990803,
              0.35871709, 0.97577777, 0.32033374, 0.02432127, 0.54826168,
              0.65859407, 0.8968586 , 0.89879392, 0.56689405, 0.22127034,
              0.37059936, 0.42326789, 0.83180657, 0.2000618 , 0.76135086,
              0.88315774, 0.07867452, 0.22424151, 0.1600008 , 0.200107  ,
              0.57569947, 0.57952617, 0.51609767, 0.78778534, 0.83645047,
              0.2756824 , 0.24766536, 0.69389655, 0.31064973, 0.86510054,
              0.72861776, 0.92776864, 0.844369  , 0.05785089, 0.85329585,
              0.72467161, 0.36596512, 0.30938083, 0.86457892, 0.06229727,
              0.88465076, 0.82987385, 0.87646279, 0.28392458, 0.65384763,
              0.31576655, 0.9920777 , 0.7488374 , 0.69648692, 0.23049003])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.21952793, 0.06447074, 0.51627226, 0.65530473, 0.76858032,
              0.02743943, 0.34118575, 0.00696007, 0.90538778, 0.87899062,
              0.48644527, 0.8495552 , 0.08499478, 0.37239306, 0.56874796,
              0.01062958, 0.2893019 , 0.84936252, 0.01601872, 0.12222626,
              0.75828293, 0.62202031, 0.60661807, 0.39742598, 0.31381877,
              0.7987416 , 0.78747203, 0.11898719, 0.83929225, 0.41644666,
              0.43569999, 0.20585972, 0.62932343, 0.06625317, 0.6819636 ,
              0.93253809, 0.99757376, 0.27168157, 0.24496203, 0.35846192,
              0.71069309, 0.53810534, 0.30894636, 0.30164082, 0.61647483,
              0.4792469 , 0.45360983, 0.49552967, 0.44575279, 0.82402518,
              0.43111003, 0.02598695, 0.9258203 , 0.95326654, 0.19414555,
              0.52418544, 0.02477383, 0.97829922, 0.38005579, 0.56900013,
              0.91597213, 0.77556532, 0.95063776, 0.54746762, 0.92172332,
              0.5276871 , 0.64516742, 0.388388  , 0.13645556, 0.55007624,
              0.6539527 , 0.60566594, 0.49261144, 0.71642211, 0.65513562,
              0.88449153, 0.67945345, 0.68278779, 0.36968158, 0.17441517,
              0.1233086 , 0.64503464, 0.92810549, 0.65833896, 0.37390315,
              0.24347701, 0.22970734, 0.23438721, 0.9512085 , 0.063415  ,
              0.68462709, 0.54629641, 0.69739345, 0.63617434, 0.39616823,
              0.53909353, 0.42961602, 0.66179827, 0.08342257, 0.80794566])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.40837597, 0.03592698, 0.70449428, 0.63088319, 0.11480325,
              0.93613572, 0.53577968, 0.33806403, 0.73362744, 0.59793535,
              0.10399912, 0.62287773, 0.7873558 , 0.22372546, 0.0230278 ,
              0.56559739, 0.32964325, 0.79186661, 0.54874842, 0.98455449,
              0.46651411, 0.58095554, 0.92010829, 0.77112418, 0.65563614,
              0.35488728, 0.92670609, 0.57553328, 0.76033377, 0.20070007,
              0.65041106, 0.93346251, 0.16429194, 0.49214634, 0.36036903,
              0.12305774, 0.13258252, 0.77946776, 0.72374432, 0.83210612,
              0.53137128, 0.96839528, 0.95016649, 0.92056286, 0.81473537,
              0.62686559, 0.64469718, 0.62831502, 0.44302331, 0.70489181,
              0.58864505, 0.77991488, 0.15598257, 0.57814458, 0.19447429,
              0.34227909, 0.03228536, 0.57887716, 0.95693367, 0.25044267,
              0.7026184 , 0.44148238, 0.3721906 , 0.91314464, 0.55944735,
              0.77887256, 0.37553725, 0.25036822, 0.45120495, 0.42974441,
              0.05971262, 0.56780687, 0.85857241, 0.77418262, 0.96256429,
              0.34729493, 0.96649775, 0.34677005, 0.61136579, 0.93888582,
              0.4535091 , 0.67446411, 0.42116366, 0.01704914, 0.56467124,
              0.98902374, 0.66737209, 0.57447161, 0.75961948, 0.5302556 ,
              0.52629749, 0.66730929, 0.13228177, 0.85310603, 0.57908464,
              0.94052464, 0.87138792, 0.6691621 , 0.67051323, 0.86619448])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.76258809, 0.9991409 , 0.88317839, 0.30069705, 0.77627768,
              0.17298576, 0.20022274, 0.72119215, 0.41687682, 0.18585822,
              0.88735889, 0.92563489, 0.3307447 , 0.73087212, 0.67152159,
              0.99078699, 0.65476299, 0.02809885, 0.39785323, 0.87954138,
              0.65764458, 0.67099447, 0.96755967, 0.95188905, 0.45500091,
              0.26623667, 0.7440124 , 0.27122009, 0.47082941, 0.91787862,
              0.3646014 , 0.09730239, 0.74906403, 0.42564725, 0.97196705,
              0.73628096, 0.03148894, 0.04617316, 0.90923002, 0.29744737,
              0.22268245, 0.2615488 , 0.82638633, 0.41192886, 0.15936323,
              0.69106692, 0.76104868, 0.84765301, 0.59395189, 0.60081955,
              0.07524554, 0.85527507, 0.05894863, 0.2227996 , 0.58054952,
              0.64801792, 0.93322827, 0.72080114, 0.61663529, 0.45580772,
              0.64520738, 0.72988209, 0.74151931, 0.99916759, 0.07686573,
              0.17113866, 0.35682757, 0.07988919, 0.8910054 , 0.94787563,
              0.49888241, 0.04589815, 0.12162753, 0.59345901, 0.32998112,
              0.22813621, 0.52884518, 0.76345866, 0.6884257 , 0.44396936,
              0.28972756, 0.6712767 , 0.50173293, 0.82244566, 0.01863418,
              0.71157147, 0.85632775, 0.8346273 , 0.83087444, 0.06647524,
              0.15297388, 0.43313311, 0.9525012 , 0.93816182, 0.43700022,
              0.8074051 , 0.33160247, 0.56717591, 0.977833  , 0.17534503])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.77380096, 0.18261942, 0.99258683, 0.08882377, 0.61818522,
              0.19214291, 0.37987872, 0.4419741 , 0.79317691, 0.45855185,
              0.5024181 , 0.80365292, 0.06163505, 0.89416982, 0.65892872,
              0.89720265, 0.18113132, 0.7537001 , 0.69596401, 0.05980356,
              0.18054023, 0.60937382, 0.69958277, 0.77278117, 0.15761952,
              0.71989612, 0.93743997, 0.90116658, 0.93948944, 0.88585206,
              0.72994876, 0.79948325, 0.14188141, 0.36693421, 0.21806372,
              0.42715134, 0.18999161, 0.33775533, 0.96951007, 0.8540693 ,
              0.64714718, 0.33969245, 0.65968808, 0.22062115, 0.9452207 ,
              0.70806555, 0.33358544, 0.65027031, 0.06251849, 0.95222317,
              0.73570606, 0.2589204 , 0.92188608, 0.06293282, 0.13368023,
              0.3084065 , 0.52689208, 0.05187717, 0.82432636, 0.78082334,
              0.57493742, 0.56952555, 0.82410605, 0.76906296, 0.94651432,
              0.18845944, 0.19550162, 0.74854424, 0.44780308, 0.66861815,
              0.22503286, 0.7631939 , 0.16150253, 0.79939025, 0.34369102,
              0.8649351 , 0.04017777, 0.57987498, 0.12153879, 0.73777774,
              0.64361633, 0.66775998, 0.0819816 , 0.46294691, 0.31921984,
              0.43964394, 0.77401171, 0.61518044, 0.59787712, 0.61063134,
              0.87313483, 0.37808303, 0.0256187 , 0.06957104, 0.23321383,
              0.4327902 , 0.20737353, 0.50038935, 0.16395259, 0.07045504])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.21952793, 0.06447074, 0.51627226, 0.65530473, 0.76858032,
              0.02743943, 0.34118575, 0.00696007, 0.90538778, 0.87899062,
              0.48644527, 0.8495552 , 0.08499478, 0.37239306, 0.56874796,
              0.01062958, 0.2893019 , 0.84936252, 0.01601872, 0.12222626,
              0.75828293, 0.62202031, 0.60661807, 0.39742598, 0.31381877,
              0.7987416 , 0.78747203, 0.11898719, 0.83929225, 0.41644666,
              0.43569999, 0.20585972, 0.62932343, 0.06625317, 0.6819636 ,
              0.93253809, 0.99757376, 0.27168157, 0.24496203, 0.35846192,
              0.71069309, 0.53810534, 0.30894636, 0.30164082, 0.61647483,
              0.4792469 , 0.45360983, 0.49552967, 0.44575279, 0.82402518,
              0.43111003, 0.02598695, 0.9258203 , 0.95326654, 0.19414555,
              0.52418544, 0.02477383, 0.97829922, 0.38005579, 0.56900013,
              0.91597213, 0.77556532, 0.95063776, 0.54746762, 0.92172332,
              0.5276871 , 0.64516742, 0.388388  , 0.13645556, 0.55007624,
              0.6539527 , 0.60566594, 0.49261144, 0.71642211, 0.65513562,
              0.88449153, 0.67945345, 0.68278779, 0.36968158, 0.17441517,
              0.1233086 , 0.64503464, 0.92810549, 0.65833896, 0.37390315,
              0.24347701, 0.22970734, 0.23438721, 0.9512085 , 0.063415  ,
              0.68462709, 0.54629641, 0.69739345, 0.63617434, 0.39616823,
              0.53909353, 0.42961602, 0.66179827, 0.08342257, 0.80794566])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.40837597, 0.03592698, 0.70449428, 0.63088319, 0.11480325,
              0.93613572, 0.53577968, 0.33806403, 0.73362744, 0.59793535,
              0.10399912, 0.62287773, 0.7873558 , 0.22372546, 0.0230278 ,
              0.56559739, 0.32964325, 0.79186661, 0.54874842, 0.98455449,
              0.46651411, 0.58095554, 0.92010829, 0.77112418, 0.65563614,
              0.35488728, 0.92670609, 0.57553328, 0.76033377, 0.20070007,
              0.65041106, 0.93346251, 0.16429194, 0.49214634, 0.36036903,
              0.12305774, 0.13258252, 0.77946776, 0.72374432, 0.83210612,
              0.53137128, 0.96839528, 0.95016649, 0.92056286, 0.81473537,
              0.62686559, 0.64469718, 0.62831502, 0.44302331, 0.70489181,
              0.58864505, 0.77991488, 0.15598257, 0.57814458, 0.19447429,
              0.34227909, 0.03228536, 0.57887716, 0.95693367, 0.25044267,
              0.7026184 , 0.44148238, 0.3721906 , 0.91314464, 0.55944735,
              0.77887256, 0.37553725, 0.25036822, 0.45120495, 0.42974441,
              0.05971262, 0.56780687, 0.85857241, 0.77418262, 0.96256429,
              0.34729493, 0.96649775, 0.34677005, 0.61136579, 0.93888582,
              0.4535091 , 0.67446411, 0.42116366, 0.01704914, 0.56467124,
              0.98902374, 0.66737209, 0.57447161, 0.75961948, 0.5302556 ,
              0.52629749, 0.66730929, 0.13228177, 0.85310603, 0.57908464,
              0.94052464, 0.87138792, 0.6691621 , 0.67051323, 0.86619448])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.76258809, 0.9991409 , 0.88317839, 0.30069705, 0.77627768,
              0.17298576, 0.20022274, 0.72119215, 0.41687682, 0.18585822,
              0.88735889, 0.92563489, 0.3307447 , 0.73087212, 0.67152159,
              0.99078699, 0.65476299, 0.02809885, 0.39785323, 0.87954138,
              0.65764458, 0.67099447, 0.96755967, 0.95188905, 0.45500091,
              0.26623667, 0.7440124 , 0.27122009, 0.47082941, 0.91787862,
              0.3646014 , 0.09730239, 0.74906403, 0.42564725, 0.97196705,
              0.73628096, 0.03148894, 0.04617316, 0.90923002, 0.29744737,
              0.22268245, 0.2615488 , 0.82638633, 0.41192886, 0.15936323,
              0.69106692, 0.76104868, 0.84765301, 0.59395189, 0.60081955,
              0.07524554, 0.85527507, 0.05894863, 0.2227996 , 0.58054952,
              0.64801792, 0.93322827, 0.72080114, 0.61663529, 0.45580772,
              0.64520738, 0.72988209, 0.74151931, 0.99916759, 0.07686573,
              0.17113866, 0.35682757, 0.07988919, 0.8910054 , 0.94787563,
              0.49888241, 0.04589815, 0.12162753, 0.59345901, 0.32998112,
              0.22813621, 0.52884518, 0.76345866, 0.6884257 , 0.44396936,
              0.28972756, 0.6712767 , 0.50173293, 0.82244566, 0.01863418,
              0.71157147, 0.85632775, 0.8346273 , 0.83087444, 0.06647524,
              0.15297388, 0.43313311, 0.9525012 , 0.93816182, 0.43700022,
              0.8074051 , 0.33160247, 0.56717591, 0.977833  , 0.17534503])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.69789373, 0.03716047, 0.8900515 , 0.18204414, 0.50987248,
              0.51465883, 0.27947755, 0.95635101, 0.14772274, 0.32609201,
              0.94667793, 0.6486964 , 0.96297454, 0.26113813, 0.87389934,
              0.1777833 , 0.09552974, 0.99378385, 0.91785155, 0.03078121,
              0.3065465 , 0.84379207, 0.46425283, 0.15367858, 0.71434103,
              0.92830392, 0.54228543, 0.76654647, 0.84019745, 0.97661688,
              0.7248059 , 0.81281421, 0.15304457, 0.01344252, 0.01380259,
              0.48443406, 0.28148719, 0.75341231, 0.12727265, 0.21371397,
              0.9316278 , 0.64703008, 0.09942686, 0.36467703, 0.36192372,
              0.5019108 , 0.4777296 , 0.65348871, 0.07070377, 0.83924485,
              0.70925405, 0.53365391, 0.61195051, 0.19541604, 0.96526504,
              0.11421768, 0.93584535, 0.77279952, 0.12071517, 0.33903461,
              0.54981675, 0.16757237, 0.80122374, 0.14273646, 0.36558411,
              0.84161224, 0.98688422, 0.90559077, 0.80486347, 0.55181641,
              0.17277922, 0.56630704, 0.35736546, 0.23056111, 0.76435539,
              0.12643318, 0.34149412, 0.9291385 , 0.61773894, 0.75042358,
              0.06546996, 0.99759464, 0.61248765, 0.74011407, 0.1109155 ,
              0.34182553, 0.09142211, 0.91636915, 0.73614158, 0.21073011,
              0.83871697, 0.11207583, 0.91069008, 0.07333711, 0.36571869,
              0.91338979, 0.93006358, 0.55841431, 0.7839578 , 0.0713717 ])}]]


