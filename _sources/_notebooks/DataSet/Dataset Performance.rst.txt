
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='5be78685-8827-443f-a634-10b09315e7e4'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='afe273e7-df0b-4694-81f9-650f0b875328'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.120961159448329],
     [0.385578449711907],
     [0.256272841803839],
     [0.754500576579859],
     [0.42700209535722],
     [0.580104057697729],
     [0.249977939018289],
     [0.103040216599321],
     [0.90232567774747],
     [0.743559100404453],
     [0.452906828215764],
     [0.0275490917311063],
     [0.242586105324977],
     [0.875706372379663],
     [0.402185445643569],
     [0.84430112927372],
     [0.372243192927652],
     [0.48609577273889],
     [0.0610143151419821],
     [0.376109077224767],
     [0.481166978937477],
     [0.650250167581788],
     [0.656553995371186],
     [0.728041650563699],
     [0.0757155902017778],
     [0.844291322360283],
     [0.22318295143977],
     [0.681932404474619],
     [0.915588871491557],
     [0.115189004048248],
     [0.530657195616631],
     [0.857242616241982],
     [0.795665454294147],
     [0.519793513006884],
     [0.89320208579034],
     [0.428177053037139],
     [0.0155985881474545],
     [0.517687092082223],
     [0.435506691543639],
     [0.922907909077295],
     [0.926463150515081],
     [0.121530026912638],
     [0.38170335293111],
     [0.741505985151612],
     [0.415332530231296],
     [0.571465121512488],
     [0.104107778238514],
     [0.0733673970354702],
     [0.390680134403846],
     [0.674837437719705],
     [0.617778672650787],
     [0.897216875311839],
     [0.0487720442661134],
     [0.779440745041052],
     [0.707708866796478],
     [0.295882985868072],
     [0.522689371377456],
     [0.523866259425363],
     [0.609068710034246],
     [0.0367287722086335],
     [0.314318176587169],
     [0.605988731046317],
     [0.205924894162906],
     [0.261928060766919],
     [0.575849943100099],
     [0.0100588590734196],
     [0.108851221749132],
     [0.109858005689588],
     [0.968695424521993],
     [0.103666126184678],
     [0.742202119468194],
     [0.745580811694853],
     [0.741607796843852],
     [0.0741137519466835],
     [0.3956064362531],
     [0.701007815033223],
     [0.938242470545449],
     [0.750057299759257],
     [0.0948196902178685],
     [0.527858665720603],
     [0.299890142792087],
     [0.33515806196713],
     [0.245810220458689],
     [0.601900203603919],
     [0.271256564730815],
     [0.107323780087881],
     [0.726521019006145],
     [0.643293761514751],
     [0.888910926581412],
     [0.594994610572714],
     [0.58952197241272],
     [0.795214237659812],
     [0.463712826428175],
     [0.511627561701421],
     [0.0548122122040736],
     [0.309366973834505],
     [0.882039151348399],
     [0.177530276028261],
     [0.968150348663734],
     [0.378355893008476]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.9286818])],
     [array([ 0.60971144])],
     [array([ 0.95308944])],
     [array([ 0.4227865])],
     [array([ 0.90203192])],
     [array([ 0.34172331])],
     [array([ 0.44181296])],
     [array([ 0.66002942])],
     [array([ 0.46699348])],
     [array([ 0.52299261])],
     [array([ 0.28631779])],
     [array([ 0.90875017])],
     [array([ 0.09071053])],
     [array([ 0.56335972])],
     [array([ 0.99344043])],
     [array([ 0.18923415])],
     [array([ 0.13145381])],
     [array([ 0.90688105])],
     [array([ 0.17011335])],
     [array([ 0.97006087])],
     [array([ 0.99207662])],
     [array([ 0.04002415])],
     [array([ 0.89270176])],
     [array([ 0.96231645])],
     [array([ 0.7742056])],
     [array([ 0.19473233])],
     [array([ 0.86364802])],
     [array([ 0.99997525])],
     [array([ 0.15714552])],
     [array([ 0.49124897])],
     [array([ 0.79524182])],
     [array([ 0.46109062])],
     [array([ 0.42490468])],
     [array([ 0.02014234])],
     [array([ 0.81712729])],
     [array([ 0.51181518])],
     [array([ 0.8244547])],
     [array([ 0.23807878])],
     [array([ 0.20734637])],
     [array([ 0.14872139])],
     [array([ 0.94795852])],
     [array([ 0.77891813])],
     [array([ 0.73461943])],
     [array([ 0.28382176])],
     [array([ 0.45340789])],
     [array([ 0.55356407])],
     [array([ 0.73319041])],
     [array([ 0.26778639])],
     [array([ 0.595519])],
     [array([ 0.20769663])],
     [array([ 0.90980319])],
     [array([ 0.02506531])],
     [array([ 0.60154438])],
     [array([ 0.40813506])],
     [array([ 0.60843716])],
     [array([ 0.6353122])],
     [array([ 0.69227113])],
     [array([ 0.16746874])],
     [array([ 0.40226579])],
     [array([ 0.42053318])],
     [array([ 0.19289419])],
     [array([ 0.01259355])],
     [array([ 0.45956073])],
     [array([ 0.79587842])],
     [array([ 0.21735124])],
     [array([ 0.2945282])],
     [array([ 0.11008411])],
     [array([ 0.18883553])],
     [array([ 0.80175834])],
     [array([ 0.42530978])],
     [array([ 0.99516827])],
     [array([ 0.83760467])],
     [array([ 0.99411159])],
     [array([ 0.30213111])],
     [array([ 0.22581357])],
     [array([ 0.39507028])],
     [array([ 0.06341934])],
     [array([ 0.5183103])],
     [array([ 0.82361271])],
     [array([ 0.11334565])],
     [array([ 0.52278113])],
     [array([ 0.82907843])],
     [array([ 0.33740994])],
     [array([ 0.63063565])],
     [array([ 0.33841689])],
     [array([ 0.52982664])],
     [array([ 0.33928257])],
     [array([ 0.096539])],
     [array([ 0.6954644])],
     [array([ 0.8692186])],
     [array([ 0.51718721])],
     [array([ 0.62480367])],
     [array([ 0.42702757])],
     [array([ 0.02404861])],
     [array([ 0.53502004])],
     [array([ 0.94738153])],
     [array([ 0.66947571])],
     [array([ 0.34158266])],
     [array([ 0.70371017])],
     [array([ 0.97437982])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.9286818 ,  0.60971144,  0.95308944,  0.4227865 ,  0.90203192,
            0.34172331,  0.44181296,  0.66002942,  0.46699348,  0.52299261,
            0.28631779,  0.90875017,  0.09071053,  0.56335972,  0.99344043,
            0.18923415,  0.13145381,  0.90688105,  0.17011335,  0.97006087,
            0.99207662,  0.04002415,  0.89270176,  0.96231645,  0.7742056 ,
            0.19473233,  0.86364802,  0.99997525,  0.15714552,  0.49124897,
            0.79524182,  0.46109062,  0.42490468,  0.02014234,  0.81712729,
            0.51181518,  0.8244547 ,  0.23807878,  0.20734637,  0.14872139,
            0.94795852,  0.77891813,  0.73461943,  0.28382176,  0.45340789,
            0.55356407,  0.73319041,  0.26778639,  0.595519  ,  0.20769663,
            0.90980319,  0.02506531,  0.60154438,  0.40813506,  0.60843716,
            0.6353122 ,  0.69227113,  0.16746874,  0.40226579,  0.42053318,
            0.19289419,  0.01259355,  0.45956073,  0.79587842,  0.21735124,
            0.2945282 ,  0.11008411,  0.18883553,  0.80175834,  0.42530978,
            0.99516827,  0.83760467,  0.99411159,  0.30213111,  0.22581357,
            0.39507028,  0.06341934,  0.5183103 ,  0.82361271,  0.11334565,
            0.52278113,  0.82907843,  0.33740994,  0.63063565,  0.33841689,
            0.52982664,  0.33928257,  0.096539  ,  0.6954644 ,  0.8692186 ,
            0.51718721,  0.62480367,  0.42702757,  0.02404861,  0.53502004,
            0.94738153,  0.66947571,  0.34158266,  0.70371017,  0.97437982])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.12096116,  0.38557845,  0.25627284,  0.75450058,  0.4270021 ,
               0.58010406,  0.24997794,  0.10304022,  0.90232568,  0.7435591 ,
               0.45290683,  0.02754909,  0.24258611,  0.87570637,  0.40218545,
               0.84430113,  0.37224319,  0.48609577,  0.06101432,  0.37610908,
               0.48116698,  0.65025017,  0.656554  ,  0.72804165,  0.07571559,
               0.84429132,  0.22318295,  0.6819324 ,  0.91558887,  0.115189  ,
               0.5306572 ,  0.85724262,  0.79566545,  0.51979351,  0.89320209,
               0.42817705,  0.01559859,  0.51768709,  0.43550669,  0.92290791,
               0.92646315,  0.12153003,  0.38170335,  0.74150599,  0.41533253,
               0.57146512,  0.10410778,  0.0733674 ,  0.39068013,  0.67483744,
               0.61777867,  0.89721688,  0.04877204,  0.77944075,  0.70770887,
               0.29588299,  0.52268937,  0.52386626,  0.60906871,  0.03672877,
               0.31431818,  0.60598873,  0.20592489,  0.26192806,  0.57584994,
               0.01005886,  0.10885122,  0.10985801,  0.96869542,  0.10366613,
               0.74220212,  0.74558081,  0.7416078 ,  0.07411375,  0.39560644,
               0.70100782,  0.93824247,  0.7500573 ,  0.09481969,  0.52785867,
               0.29989014,  0.33515806,  0.24581022,  0.6019002 ,  0.27125656,
               0.10732378,  0.72652102,  0.64329376,  0.88891093,  0.59499461,
               0.58952197,  0.79521424,  0.46371283,  0.51162756,  0.05481221,
               0.30936697,  0.88203915,  0.17753028,  0.96815035,  0.37835589])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.54820182,  0.89682503,  0.34139777,  0.28294964,  0.61161944,
               0.72459284,  0.16510597,  0.28635828,  0.13717715,  0.66288514,
               0.82762458,  0.10456333,  0.74560898,  0.29631753,  0.71855051,
               0.5173633 ,  0.57122433,  0.86268171,  0.6454769 ,  0.57128559,
               0.50910599,  0.49830842,  0.07023319,  0.18461121,  0.94733354,
               0.35891832,  0.78092777,  0.61057429,  0.40077052,  0.20770299,
               0.71554763,  0.38087606,  0.45550683,  0.6553482 ,  0.41555702,
               0.12354018,  0.26548617,  0.26622147,  0.52964921,  0.62756235,
               0.89675504,  0.47558071,  0.81612264,  0.05853621,  0.55307112,
               0.02830175,  0.92868977,  0.41808117,  0.14704017,  0.64021433,
               0.41820803,  0.44533242,  0.74918128,  0.88271282,  0.45768094,
               0.31007045,  0.19007378,  0.75105698,  0.50710338,  0.508001  ,
               0.36003369,  0.49521346,  0.06466539,  0.24612435,  0.92973615,
               0.46771669,  0.75047595,  0.69122205,  0.97504655,  0.3586111 ,
               0.42335596,  0.69286312,  0.27034963,  0.91087663,  0.24949637,
               0.07172061,  0.83536885,  0.64756899,  0.00176604,  0.0538453 ,
               0.47035978,  0.30490741,  0.70339686,  0.02238671,  0.21637927,
               0.45152903,  0.14330168,  0.2324366 ,  0.20514767,  0.2247341 ,
               0.22054507,  0.99704944,  0.42934672,  0.3708027 ,  0.56213974,
               0.75185592,  0.44087589,  0.85803418,  0.43320358,  0.21240504])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.65420315,  0.07383619,  0.7412232 ,  0.70222022,  0.68536322,
               0.77011159,  0.35635255,  0.98432902,  0.52808423,  0.50429009,
               0.70841633,  0.51297931,  0.11946806,  0.42750842,  0.90107817,
               0.5610924 ,  0.44764284,  0.26702379,  0.15183121,  0.06877637,
               0.5550802 ,  0.96363595,  0.95151814,  0.97273974,  0.93202612,
               0.12870732,  0.40959044,  0.15917293,  0.49885569,  0.44632597,
               0.69608649,  0.04775382,  0.63226037,  0.18378116,  0.91720757,
               0.70683448,  0.79220534,  0.57756326,  0.34674304,  0.66899709,
               0.99864719,  0.21818559,  0.73972409,  0.71479084,  0.2677635 ,
               0.33239134,  0.07388314,  0.99321444,  0.19248399,  0.42947535,
               0.02841735,  0.23613832,  0.77275712,  0.12628088,  0.04060986,
               0.3852749 ,  0.98229697,  0.66332787,  0.97602961,  0.60050843,
               0.47135981,  0.82015796,  0.36429533,  0.23345411,  0.87990666,
               0.15116959,  0.45521522,  0.91081827,  0.68787395,  0.6347728 ,
               0.92552727,  0.75039777,  0.11470602,  0.30708255,  0.35831766,
               0.3934563 ,  0.7663003 ,  0.23171758,  0.97537689,  0.8349098 ,
               0.43185979,  0.71392237,  0.14172093,  0.74218616,  0.41315107,
               0.04409344,  0.63083316,  0.65510015,  0.73764119,  0.5399262 ,
               0.40182575,  0.51415149,  0.15351951,  0.27761008,  0.86838838,
               0.14387548,  0.74086705,  0.07944727,  0.47114472,  0.34664115])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.46113156,  0.30323643,  0.12172523,  0.06759805,  0.31900921,
               0.56149752,  0.10484066,  0.49015574,  0.73028826,  0.67328362,
               0.0391778 ,  0.19801073,  0.27019894,  0.91928471,  0.43679243,
               0.49336667,  0.35943809,  0.57963921,  0.60948523,  0.00903408,
               0.55463834,  0.52210066,  0.07452818,  0.53666834,  0.32088621,
               0.62798183,  0.14795465,  0.8183362 ,  0.9799659 ,  0.86991973,
               0.21456492,  0.02540925,  0.60073976,  0.63208906,  0.29437074,
               0.53830755,  0.91621317,  0.89253598,  0.72898218,  0.38075853,
               0.23771361,  0.10410851,  0.08532514,  0.24151891,  0.56293983,
               0.81382967,  0.33586117,  0.27381677,  0.05089245,  0.24606268,
               0.39846287,  0.34801471,  0.09068665,  0.01715764,  0.21959835,
               0.4154028 ,  0.52233223,  0.54325264,  0.32597706,  0.4824175 ,
               0.68015901,  0.82938292,  0.1120458 ,  0.39297789,  0.6421056 ,
               0.21550438,  0.5724809 ,  0.8760666 ,  0.54697476,  0.673641  ,
               0.79168784,  0.84689883,  0.23649778,  0.87780318,  0.25559443,
               0.18626226,  0.87040064,  0.67031627,  0.70904813,  0.36713854,
               0.14802294,  0.08540157,  0.2307056 ,  0.63492846,  0.33351572,
               0.63788234,  0.52560872,  0.22976993,  0.04539387,  0.84426336,
               0.57782771,  0.1077711 ,  0.7521063 ,  0.60039073,  0.0530843 ,
               0.22185095,  0.14167808,  0.9391467 ,  0.64979044,  0.24258193])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.12096116,  0.38557845,  0.25627284,  0.75450058,  0.4270021 ,
               0.58010406,  0.24997794,  0.10304022,  0.90232568,  0.7435591 ,
               0.45290683,  0.02754909,  0.24258611,  0.87570637,  0.40218545,
               0.84430113,  0.37224319,  0.48609577,  0.06101432,  0.37610908,
               0.48116698,  0.65025017,  0.656554  ,  0.72804165,  0.07571559,
               0.84429132,  0.22318295,  0.6819324 ,  0.91558887,  0.115189  ,
               0.5306572 ,  0.85724262,  0.79566545,  0.51979351,  0.89320209,
               0.42817705,  0.01559859,  0.51768709,  0.43550669,  0.92290791,
               0.92646315,  0.12153003,  0.38170335,  0.74150599,  0.41533253,
               0.57146512,  0.10410778,  0.0733674 ,  0.39068013,  0.67483744,
               0.61777867,  0.89721688,  0.04877204,  0.77944075,  0.70770887,
               0.29588299,  0.52268937,  0.52386626,  0.60906871,  0.03672877,
               0.31431818,  0.60598873,  0.20592489,  0.26192806,  0.57584994,
               0.01005886,  0.10885122,  0.10985801,  0.96869542,  0.10366613,
               0.74220212,  0.74558081,  0.7416078 ,  0.07411375,  0.39560644,
               0.70100782,  0.93824247,  0.7500573 ,  0.09481969,  0.52785867,
               0.29989014,  0.33515806,  0.24581022,  0.6019002 ,  0.27125656,
               0.10732378,  0.72652102,  0.64329376,  0.88891093,  0.59499461,
               0.58952197,  0.79521424,  0.46371283,  0.51162756,  0.05481221,
               0.30936697,  0.88203915,  0.17753028,  0.96815035,  0.37835589])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.54820182,  0.89682503,  0.34139777,  0.28294964,  0.61161944,
               0.72459284,  0.16510597,  0.28635828,  0.13717715,  0.66288514,
               0.82762458,  0.10456333,  0.74560898,  0.29631753,  0.71855051,
               0.5173633 ,  0.57122433,  0.86268171,  0.6454769 ,  0.57128559,
               0.50910599,  0.49830842,  0.07023319,  0.18461121,  0.94733354,
               0.35891832,  0.78092777,  0.61057429,  0.40077052,  0.20770299,
               0.71554763,  0.38087606,  0.45550683,  0.6553482 ,  0.41555702,
               0.12354018,  0.26548617,  0.26622147,  0.52964921,  0.62756235,
               0.89675504,  0.47558071,  0.81612264,  0.05853621,  0.55307112,
               0.02830175,  0.92868977,  0.41808117,  0.14704017,  0.64021433,
               0.41820803,  0.44533242,  0.74918128,  0.88271282,  0.45768094,
               0.31007045,  0.19007378,  0.75105698,  0.50710338,  0.508001  ,
               0.36003369,  0.49521346,  0.06466539,  0.24612435,  0.92973615,
               0.46771669,  0.75047595,  0.69122205,  0.97504655,  0.3586111 ,
               0.42335596,  0.69286312,  0.27034963,  0.91087663,  0.24949637,
               0.07172061,  0.83536885,  0.64756899,  0.00176604,  0.0538453 ,
               0.47035978,  0.30490741,  0.70339686,  0.02238671,  0.21637927,
               0.45152903,  0.14330168,  0.2324366 ,  0.20514767,  0.2247341 ,
               0.22054507,  0.99704944,  0.42934672,  0.3708027 ,  0.56213974,
               0.75185592,  0.44087589,  0.85803418,  0.43320358,  0.21240504])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.65420315,  0.07383619,  0.7412232 ,  0.70222022,  0.68536322,
               0.77011159,  0.35635255,  0.98432902,  0.52808423,  0.50429009,
               0.70841633,  0.51297931,  0.11946806,  0.42750842,  0.90107817,
               0.5610924 ,  0.44764284,  0.26702379,  0.15183121,  0.06877637,
               0.5550802 ,  0.96363595,  0.95151814,  0.97273974,  0.93202612,
               0.12870732,  0.40959044,  0.15917293,  0.49885569,  0.44632597,
               0.69608649,  0.04775382,  0.63226037,  0.18378116,  0.91720757,
               0.70683448,  0.79220534,  0.57756326,  0.34674304,  0.66899709,
               0.99864719,  0.21818559,  0.73972409,  0.71479084,  0.2677635 ,
               0.33239134,  0.07388314,  0.99321444,  0.19248399,  0.42947535,
               0.02841735,  0.23613832,  0.77275712,  0.12628088,  0.04060986,
               0.3852749 ,  0.98229697,  0.66332787,  0.97602961,  0.60050843,
               0.47135981,  0.82015796,  0.36429533,  0.23345411,  0.87990666,
               0.15116959,  0.45521522,  0.91081827,  0.68787395,  0.6347728 ,
               0.92552727,  0.75039777,  0.11470602,  0.30708255,  0.35831766,
               0.3934563 ,  0.7663003 ,  0.23171758,  0.97537689,  0.8349098 ,
               0.43185979,  0.71392237,  0.14172093,  0.74218616,  0.41315107,
               0.04409344,  0.63083316,  0.65510015,  0.73764119,  0.5399262 ,
               0.40182575,  0.51415149,  0.15351951,  0.27761008,  0.86838838,
               0.14387548,  0.74086705,  0.07944727,  0.47114472,  0.34664115])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.66664491,  0.87097566,  0.7978289 ,  0.26910944,  0.13542604,
               0.08626121,  0.06042639,  0.15204668,  0.64974012,  0.68131101,
               0.3974035 ,  0.22079807,  0.0446059 ,  0.60056587,  0.77539995,
               0.19415311,  0.68426547,  0.32728699,  0.99391083,  0.1464538 ,
               0.80931227,  0.06001585,  0.51319385,  0.85208062,  0.79151646,
               0.91755029,  0.93209241,  0.64660899,  0.86101573,  0.05250604,
               0.20705836,  0.92968392,  0.62869277,  0.18715984,  0.37567241,
               0.53888804,  0.8122462 ,  0.80263389,  0.03065059,  0.31710086,
               0.20953429,  0.273113  ,  0.30017926,  0.79183307,  0.01939373,
               0.44031597,  0.74493046,  0.52006656,  0.84258219,  0.07717501,
               0.98362163,  0.92219792,  0.21652858,  0.5914268 ,  0.47200245,
               0.45853075,  0.12159879,  0.3528628 ,  0.70286002,  0.50210263,
               0.14754208,  0.3977828 ,  0.70560247,  0.12230352,  0.52907233,
               0.23082445,  0.30621795,  0.26304498,  0.80982093,  0.69108578,
               0.604684  ,  0.88313061,  0.60916249,  0.93333206,  0.83239597,
               0.07512633,  0.12855798,  0.59023864,  0.71416295,  0.84330872,
               0.59096517,  0.59914204,  0.78293236,  0.41245713,  0.48719567,
               0.83345913,  0.80570233,  0.32879678,  0.14414642,  0.18824329,
               0.62130574,  0.64726892,  0.39179243,  0.97045396,  0.20485228,
               0.09743337,  0.73842253,  0.75973948,  0.9876445 ,  0.59467409])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.9286818 ,  0.60971144,  0.95308944,  0.4227865 ,  0.90203192,
               0.34172331,  0.44181296,  0.66002942,  0.46699348,  0.52299261,
               0.28631779,  0.90875017,  0.09071053,  0.56335972,  0.99344043,
               0.18923415,  0.13145381,  0.90688105,  0.17011335,  0.97006087,
               0.99207662,  0.04002415,  0.89270176,  0.96231645,  0.7742056 ,
               0.19473233,  0.86364802,  0.99997525,  0.15714552,  0.49124897,
               0.79524182,  0.46109062,  0.42490468,  0.02014234,  0.81712729,
               0.51181518,  0.8244547 ,  0.23807878,  0.20734637,  0.14872139,
               0.94795852,  0.77891813,  0.73461943,  0.28382176,  0.45340789,
               0.55356407,  0.73319041,  0.26778639,  0.595519  ,  0.20769663,
               0.90980319,  0.02506531,  0.60154438,  0.40813506,  0.60843716,
               0.6353122 ,  0.69227113,  0.16746874,  0.40226579,  0.42053318,
               0.19289419,  0.01259355,  0.45956073,  0.79587842,  0.21735124,
               0.2945282 ,  0.11008411,  0.18883553,  0.80175834,  0.42530978,
               0.99516827,  0.83760467,  0.99411159,  0.30213111,  0.22581357,
               0.39507028,  0.06341934,  0.5183103 ,  0.82361271,  0.11334565,
               0.52278113,  0.82907843,  0.33740994,  0.63063565,  0.33841689,
               0.52982664,  0.33928257,  0.096539  ,  0.6954644 ,  0.8692186 ,
               0.51718721,  0.62480367,  0.42702757,  0.02404861,  0.53502004,
               0.94738153,  0.66947571,  0.34158266,  0.70371017,  0.97437982])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.51328907,  0.00979346,  0.1057942 ,  0.81204412,  0.86285107,
               0.1208515 ,  0.77738261,  0.38312162,  0.3626054 ,  0.8023126 ,
               0.0280532 ,  0.29614278,  0.92567816,  0.56912852,  0.31431239,
               0.17896803,  0.43391297,  0.29418177,  0.56094483,  0.76745927,
               0.87549168,  0.71685431,  0.81809844,  0.99355386,  0.37617422,
               0.10323034,  0.51875111,  0.49087389,  0.79267947,  0.86320148,
               0.38195461,  0.555809  ,  0.16193571,  0.55724937,  0.73451974,
               0.56534105,  0.30549917,  0.56671961,  0.28014019,  0.72147839,
               0.81462548,  0.87520221,  0.99662562,  0.35368726,  0.84139012,
               0.41533448,  0.55663798,  0.64143396,  0.39838678,  0.47688832,
               0.03751761,  0.14525755,  0.49230383,  0.85938019,  0.12412018,
               0.62508412,  0.30999348,  0.85069747,  0.62990721,  0.56762053,
               0.80759454,  0.81026465,  0.81147331,  0.9441372 ,  0.18500767,
               0.83842093,  0.21941522,  0.68255498,  0.2291557 ,  0.1797997 ,
               0.21981644,  0.10719272,  0.58908844,  0.64166496,  0.26350653,
               0.48537857,  0.94543628,  0.60854982,  0.6181127 ,  0.33306454,
               0.75709108,  0.52966562,  0.78999872,  0.78995433,  0.07564051,
               0.24895509,  0.20978841,  0.93076872,  0.63706179,  0.30492492,
               0.73252394,  0.26334386,  0.92030871,  0.08520778,  0.43228124,
               0.1730372 ,  0.42450619,  0.26432234,  0.81229295,  0.72621253])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.83920894,  0.72235162,  0.14062841,  0.22998213,  0.86254122,
               0.28573778,  0.68520268,  0.51920638,  0.84665908,  0.3362546 ,
               0.71320058,  0.26034816,  0.36479826,  0.68663749,  0.40830064,
               0.55128482,  0.99913333,  0.52987893,  0.74561778,  0.17309267,
               0.5271338 ,  0.65034578,  0.53428956,  0.48385949,  0.80798862,
               0.84611451,  0.03506051,  0.28726717,  0.80122253,  0.82248602,
               0.59005662,  0.76772022,  0.72957738,  0.02863455,  0.65118503,
               0.55194843,  0.72565662,  0.27712159,  0.16120911,  0.85112758,
               0.84485683,  0.53969347,  0.2497682 ,  0.15159111,  0.03784354,
               0.83399003,  0.12182881,  0.22582951,  0.70900612,  0.41551776,
               0.5289139 ,  0.15656806,  0.07068353,  0.48029329,  0.96828518,
               0.16293999,  0.19248255,  0.60782163,  0.63087808,  0.96870611,
               0.32268327,  0.04127869,  0.369254  ,  0.62213536,  0.64617923,
               0.31481224,  0.87989437,  0.80321453,  0.82837172,  0.68427896,
               0.7963825 ,  0.22327146,  0.10104536,  0.23625485,  0.74969802,
               0.69527911,  0.13755949,  0.77542402,  0.0674656 ,  0.37938138,
               0.96575173,  0.22644481,  0.88632307,  0.77698421,  0.77580028,
               0.27965607,  0.92192824,  0.11726379,  0.80224872,  0.66815416,
               0.08103436,  0.56196692,  0.63350253,  0.3302083 ,  0.99466386,
               0.83103479,  0.28962384,  0.24591031,  0.02241351,  0.03016736])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.68131194,  0.76163841,  0.33202367,  0.36533385,  0.7077443 ,
               0.96934472,  0.59728929,  0.49624663,  0.55109955,  0.77286425,
               0.05769228,  0.729709  ,  0.29489053,  0.49108902,  0.61769846,
               0.32889467,  0.14754142,  0.58664167,  0.81589114,  0.61813027,
               0.39376756,  0.77792403,  0.07522709,  0.38469715,  0.09522251,
               0.83997498,  0.87461481,  0.49416542,  0.49244972,  0.71161487,
               0.94532687,  0.33214695,  0.01331788,  0.10418898,  0.49800247,
               0.91832118,  0.49760477,  0.61129053,  0.16843483,  0.15371414,
               0.6335894 ,  0.77852917,  0.63454193,  0.87394264,  0.03911592,
               0.19165655,  0.75332442,  0.50760823,  0.02809779,  0.29905634,
               0.53186189,  0.29790792,  0.00991458,  0.44932818,  0.83045247,
               0.48378598,  0.09947921,  0.52297141,  0.88634252,  0.85447959,
               0.28553943,  0.03994677,  0.88099358,  0.21716068,  0.02269662,
               0.70513272,  0.39343837,  0.41407793,  0.9801919 ,  0.59349711,
               0.84731048,  0.63303515,  0.33219537,  0.98903824,  0.2991877 ,
               0.94523588,  0.77766   ,  0.5724398 ,  0.37696609,  0.32655642,
               0.84369678,  0.14075468,  0.76159557,  0.36826457,  0.10448711,
               0.47408504,  0.58480575,  0.29644582,  0.7810127 ,  0.45577486,
               0.55948003,  0.10383782,  0.13043048,  0.97223542,  0.19755415,
               0.22822304,  0.39099667,  0.69655985,  0.43390165,  0.53748269])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.9286818 ,  0.60971144,  0.95308944,  0.4227865 ,  0.90203192,
               0.34172331,  0.44181296,  0.66002942,  0.46699348,  0.52299261,
               0.28631779,  0.90875017,  0.09071053,  0.56335972,  0.99344043,
               0.18923415,  0.13145381,  0.90688105,  0.17011335,  0.97006087,
               0.99207662,  0.04002415,  0.89270176,  0.96231645,  0.7742056 ,
               0.19473233,  0.86364802,  0.99997525,  0.15714552,  0.49124897,
               0.79524182,  0.46109062,  0.42490468,  0.02014234,  0.81712729,
               0.51181518,  0.8244547 ,  0.23807878,  0.20734637,  0.14872139,
               0.94795852,  0.77891813,  0.73461943,  0.28382176,  0.45340789,
               0.55356407,  0.73319041,  0.26778639,  0.595519  ,  0.20769663,
               0.90980319,  0.02506531,  0.60154438,  0.40813506,  0.60843716,
               0.6353122 ,  0.69227113,  0.16746874,  0.40226579,  0.42053318,
               0.19289419,  0.01259355,  0.45956073,  0.79587842,  0.21735124,
               0.2945282 ,  0.11008411,  0.18883553,  0.80175834,  0.42530978,
               0.99516827,  0.83760467,  0.99411159,  0.30213111,  0.22581357,
               0.39507028,  0.06341934,  0.5183103 ,  0.82361271,  0.11334565,
               0.52278113,  0.82907843,  0.33740994,  0.63063565,  0.33841689,
               0.52982664,  0.33928257,  0.096539  ,  0.6954644 ,  0.8692186 ,
               0.51718721,  0.62480367,  0.42702757,  0.02404861,  0.53502004,
               0.94738153,  0.66947571,  0.34158266,  0.70371017,  0.97437982])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.51328907,  0.00979346,  0.1057942 ,  0.81204412,  0.86285107,
               0.1208515 ,  0.77738261,  0.38312162,  0.3626054 ,  0.8023126 ,
               0.0280532 ,  0.29614278,  0.92567816,  0.56912852,  0.31431239,
               0.17896803,  0.43391297,  0.29418177,  0.56094483,  0.76745927,
               0.87549168,  0.71685431,  0.81809844,  0.99355386,  0.37617422,
               0.10323034,  0.51875111,  0.49087389,  0.79267947,  0.86320148,
               0.38195461,  0.555809  ,  0.16193571,  0.55724937,  0.73451974,
               0.56534105,  0.30549917,  0.56671961,  0.28014019,  0.72147839,
               0.81462548,  0.87520221,  0.99662562,  0.35368726,  0.84139012,
               0.41533448,  0.55663798,  0.64143396,  0.39838678,  0.47688832,
               0.03751761,  0.14525755,  0.49230383,  0.85938019,  0.12412018,
               0.62508412,  0.30999348,  0.85069747,  0.62990721,  0.56762053,
               0.80759454,  0.81026465,  0.81147331,  0.9441372 ,  0.18500767,
               0.83842093,  0.21941522,  0.68255498,  0.2291557 ,  0.1797997 ,
               0.21981644,  0.10719272,  0.58908844,  0.64166496,  0.26350653,
               0.48537857,  0.94543628,  0.60854982,  0.6181127 ,  0.33306454,
               0.75709108,  0.52966562,  0.78999872,  0.78995433,  0.07564051,
               0.24895509,  0.20978841,  0.93076872,  0.63706179,  0.30492492,
               0.73252394,  0.26334386,  0.92030871,  0.08520778,  0.43228124,
               0.1730372 ,  0.42450619,  0.26432234,  0.81229295,  0.72621253])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.83920894,  0.72235162,  0.14062841,  0.22998213,  0.86254122,
               0.28573778,  0.68520268,  0.51920638,  0.84665908,  0.3362546 ,
               0.71320058,  0.26034816,  0.36479826,  0.68663749,  0.40830064,
               0.55128482,  0.99913333,  0.52987893,  0.74561778,  0.17309267,
               0.5271338 ,  0.65034578,  0.53428956,  0.48385949,  0.80798862,
               0.84611451,  0.03506051,  0.28726717,  0.80122253,  0.82248602,
               0.59005662,  0.76772022,  0.72957738,  0.02863455,  0.65118503,
               0.55194843,  0.72565662,  0.27712159,  0.16120911,  0.85112758,
               0.84485683,  0.53969347,  0.2497682 ,  0.15159111,  0.03784354,
               0.83399003,  0.12182881,  0.22582951,  0.70900612,  0.41551776,
               0.5289139 ,  0.15656806,  0.07068353,  0.48029329,  0.96828518,
               0.16293999,  0.19248255,  0.60782163,  0.63087808,  0.96870611,
               0.32268327,  0.04127869,  0.369254  ,  0.62213536,  0.64617923,
               0.31481224,  0.87989437,  0.80321453,  0.82837172,  0.68427896,
               0.7963825 ,  0.22327146,  0.10104536,  0.23625485,  0.74969802,
               0.69527911,  0.13755949,  0.77542402,  0.0674656 ,  0.37938138,
               0.96575173,  0.22644481,  0.88632307,  0.77698421,  0.77580028,
               0.27965607,  0.92192824,  0.11726379,  0.80224872,  0.66815416,
               0.08103436,  0.56196692,  0.63350253,  0.3302083 ,  0.99466386,
               0.83103479,  0.28962384,  0.24591031,  0.02241351,  0.03016736])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.32439735,  0.62879707,  0.0263615 ,  0.63721213,  0.9447088 ,
               0.06343612,  0.79061063,  0.07087305,  0.78828024,  0.52532484,
               0.77351853,  0.16711262,  0.32956722,  0.14718033,  0.60182078,
               0.60137935,  0.10359661,  0.30071229,  0.15171398,  0.19083452,
               0.37407233,  0.05703192,  0.07340497,  0.21771184,  0.3861948 ,
               0.86815626,  0.86028264,  0.04490083,  0.44650811,  0.41796081,
               0.00639655,  0.3452619 ,  0.15857108,  0.73097214,  0.6737148 ,
               0.51165505,  0.10680172,  0.45278559,  0.09301184,  0.59026897,
               0.00625966,  0.75577663,  0.54039667,  0.63051898,  0.50659133,
               0.60041319,  0.40415285,  0.07025966,  0.06036802,  0.50382633,
               0.67050359,  0.17941504,  0.24853877,  0.86830438,  0.94696002,
               0.24012222,  0.97240833,  0.23327393,  0.48957008,  0.97333295,
               0.09062978,  0.70926184,  0.13636141,  0.09667368,  0.71311245,
               0.12862288,  0.92687394,  0.00227143,  0.11456946,  0.41153847,
               0.84396548,  0.25759817,  0.40711776,  0.80871494,  0.91472285,
               0.53054011,  0.33527737,  0.85913902,  0.27983006,  0.34475751,
               0.53408172,  0.41750001,  0.3556948 ,  0.42246754,  0.81374594,
               0.83759867,  0.50081907,  0.13904221,  0.64444854,  0.11475761,
               0.29783574,  0.02276394,  0.59036533,  0.85734613,  0.03179318,
               0.88260188,  0.50257208,  0.30791959,  0.61526925,  0.44289751])}]]


