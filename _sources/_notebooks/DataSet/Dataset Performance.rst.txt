
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='9c4746db-aa3e-4c2a-b101-fc0a0c3e8d2d'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='ae097729-fab9-4955-a064-b11a58926050'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.389708798314193],
     [0.69722133678392],
     [0.257654959567172],
     [0.0779788359655025],
     [0.877803465143598],
     [0.455863665325265],
     [0.825223014847367],
     [0.415048248017402],
     [0.00379723812890009],
     [0.829843945003162],
     [0.858048593715335],
     [0.875165568760928],
     [0.319004661714008],
     [0.0154429953042832],
     [0.0139410934579123],
     [0.407832509835325],
     [0.973597544824273],
     [0.871971966953144],
     [0.288637015624256],
     [0.494985241305505],
     [0.928666152675879],
     [0.0650628844974249],
     [0.994942996354653],
     [0.554696273790919],
     [0.45486302843198],
     [0.734291714622814],
     [0.0519795738933566],
     [0.953094263636547],
     [0.688130212376524],
     [0.298747201579208],
     [0.812316096623614],
     [0.215692417303459],
     [0.729603432231774],
     [0.113888046790129],
     [0.782835958028391],
     [0.848754091048288],
     [0.83832638356547],
     [0.644383280502617],
     [0.884309131611806],
     [0.964959941707342],
     [0.824231510842136],
     [0.308347886928652],
     [0.646956414144823],
     [0.293444929342597],
     [0.290129699973966],
     [0.662414923632255],
     [0.567778438807816],
     [0.339430457892628],
     [0.248412498930353],
     [0.353430695938805],
     [0.377591102487079],
     [0.534937975786462],
     [0.275653669833867],
     [0.0779923277188485],
     [0.909040586336299],
     [0.652111357928683],
     [0.607358121080385],
     [0.413759384430847],
     [0.639228151810482],
     [0.188071343894525],
     [0.033647504838244],
     [0.973487729783499],
     [0.448599372378935],
     [0.813853665973313],
     [0.160344716421011],
     [0.657350405082855],
     [0.553021454561986],
     [0.245440045823954],
     [0.251382901139079],
     [0.384523729607444],
     [0.266566656190563],
     [0.700931467983435],
     [0.686149121311426],
     [0.988208272551178],
     [0.908632794074042],
     [0.746105337811663],
     [0.0438159349329483],
     [0.0138514561372013],
     [0.886083601201048],
     [0.954286254977303],
     [0.457709905701264],
     [0.414357998708914],
     [0.613964236497073],
     [0.330935142238273],
     [0.106355741030233],
     [0.842258366441476],
     [0.218122427927114],
     [0.0434955660587177],
     [0.154861851839615],
     [0.765101724130287],
     [0.433926362332943],
     [0.380766685752111],
     [0.846123369905718],
     [0.0951974474029074],
     [0.891518634509919],
     [0.792647686999501],
     [0.448781253858519],
     [0.206720788999016],
     [0.042470182803702],
     [0.290960923026429]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.60017573])],
     [array([ 0.33170723])],
     [array([ 0.90023118])],
     [array([ 0.57967622])],
     [array([ 0.3117908])],
     [array([ 0.92284223])],
     [array([ 0.31151858])],
     [array([ 0.4363039])],
     [array([ 0.62179749])],
     [array([ 0.16672312])],
     [array([ 0.30166828])],
     [array([ 0.10996137])],
     [array([ 0.30614334])],
     [array([ 0.35026444])],
     [array([ 0.87636422])],
     [array([ 0.69954916])],
     [array([ 0.17991015])],
     [array([ 0.88819985])],
     [array([ 0.38064006])],
     [array([ 0.59920952])],
     [array([ 0.08563625])],
     [array([ 0.39450614])],
     [array([ 0.63279754])],
     [array([ 0.78205064])],
     [array([ 0.28127388])],
     [array([ 0.52050381])],
     [array([ 0.31903773])],
     [array([ 0.75569857])],
     [array([ 0.79383465])],
     [array([ 0.43077974])],
     [array([ 0.75212375])],
     [array([ 0.29520727])],
     [array([ 0.82519537])],
     [array([ 0.86394183])],
     [array([ 0.83029921])],
     [array([ 0.23700809])],
     [array([ 0.07587835])],
     [array([ 0.71029325])],
     [array([ 0.4376671])],
     [array([ 0.21924396])],
     [array([ 0.18746009])],
     [array([ 0.04605314])],
     [array([ 0.43030642])],
     [array([ 0.25613236])],
     [array([ 0.86230929])],
     [array([ 0.47054001])],
     [array([ 0.9163907])],
     [array([ 0.37943555])],
     [array([ 0.72044448])],
     [array([ 0.17698236])],
     [array([ 0.77084508])],
     [array([ 0.69944794])],
     [array([ 0.717249])],
     [array([ 0.97674801])],
     [array([ 0.30168389])],
     [array([ 0.91164649])],
     [array([ 0.14932101])],
     [array([ 0.71692837])],
     [array([ 0.77172715])],
     [array([ 0.82002978])],
     [array([ 0.35564636])],
     [array([ 0.7587247])],
     [array([ 0.01183107])],
     [array([ 0.08352296])],
     [array([ 0.92760937])],
     [array([ 0.87242514])],
     [array([ 0.62619227])],
     [array([ 0.10201111])],
     [array([ 0.95813067])],
     [array([ 0.30803213])],
     [array([ 0.33402417])],
     [array([ 0.22113601])],
     [array([ 0.63410512])],
     [array([ 0.82709734])],
     [array([ 0.12124312])],
     [array([ 0.82914215])],
     [array([ 0.3519256])],
     [array([ 0.88658084])],
     [array([ 0.90050182])],
     [array([ 0.00034827])],
     [array([ 0.8512701])],
     [array([ 0.82315212])],
     [array([ 0.71917975])],
     [array([ 0.98234967])],
     [array([ 0.67055653])],
     [array([ 0.32773086])],
     [array([ 0.66008973])],
     [array([ 0.58449619])],
     [array([ 0.4288632])],
     [array([ 0.59376921])],
     [array([ 0.5633456])],
     [array([ 0.34150527])],
     [array([ 0.54889654])],
     [array([ 0.60489965])],
     [array([ 0.87031828])],
     [array([ 0.99400416])],
     [array([ 0.8172374])],
     [array([ 0.9857207])],
     [array([ 0.35400225])],
     [array([ 0.83843291])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([  6.00175730e-01,   3.31707226e-01,   9.00231181e-01,
             5.79676223e-01,   3.11790805e-01,   9.22842227e-01,
             3.11518576e-01,   4.36303900e-01,   6.21797493e-01,
             1.66723116e-01,   3.01668281e-01,   1.09961372e-01,
             3.06143339e-01,   3.50264444e-01,   8.76364215e-01,
             6.99549160e-01,   1.79910146e-01,   8.88199848e-01,
             3.80640059e-01,   5.99209522e-01,   8.56362466e-02,
             3.94506142e-01,   6.32797542e-01,   7.82050637e-01,
             2.81273883e-01,   5.20503811e-01,   3.19037733e-01,
             7.55698572e-01,   7.93834645e-01,   4.30779742e-01,
             7.52123750e-01,   2.95207266e-01,   8.25195373e-01,
             8.63941827e-01,   8.30299209e-01,   2.37008095e-01,
             7.58783468e-02,   7.10293250e-01,   4.37667098e-01,
             2.19243961e-01,   1.87460086e-01,   4.60531365e-02,
             4.30306416e-01,   2.56132364e-01,   8.62309286e-01,
             4.70540011e-01,   9.16390703e-01,   3.79435545e-01,
             7.20444482e-01,   1.76982364e-01,   7.70845080e-01,
             6.99447937e-01,   7.17249003e-01,   9.76748013e-01,
             3.01683888e-01,   9.11646494e-01,   1.49321007e-01,
             7.16928369e-01,   7.71727145e-01,   8.20029783e-01,
             3.55646359e-01,   7.58724705e-01,   1.18310672e-02,
             8.35229634e-02,   9.27609369e-01,   8.72425143e-01,
             6.26192272e-01,   1.02011107e-01,   9.58130665e-01,
             3.08032128e-01,   3.34024175e-01,   2.21136006e-01,
             6.34105116e-01,   8.27097343e-01,   1.21243122e-01,
             8.29142150e-01,   3.51925599e-01,   8.86580836e-01,
             9.00501824e-01,   3.48271711e-04,   8.51270098e-01,
             8.23152121e-01,   7.19179751e-01,   9.82349668e-01,
             6.70556534e-01,   3.27730862e-01,   6.60089735e-01,
             5.84496187e-01,   4.28863197e-01,   5.93769209e-01,
             5.63345601e-01,   3.41505275e-01,   5.48896541e-01,
             6.04899652e-01,   8.70318275e-01,   9.94004156e-01,
             8.17237398e-01,   9.85720700e-01,   3.54002252e-01,
             8.38432908e-01])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.3897088 ,  0.69722134,  0.25765496,  0.07797884,  0.87780347,
               0.45586367,  0.82522301,  0.41504825,  0.00379724,  0.82984395,
               0.85804859,  0.87516557,  0.31900466,  0.015443  ,  0.01394109,
               0.40783251,  0.97359754,  0.87197197,  0.28863702,  0.49498524,
               0.92866615,  0.06506288,  0.994943  ,  0.55469627,  0.45486303,
               0.73429171,  0.05197957,  0.95309426,  0.68813021,  0.2987472 ,
               0.8123161 ,  0.21569242,  0.72960343,  0.11388805,  0.78283596,
               0.84875409,  0.83832638,  0.64438328,  0.88430913,  0.96495994,
               0.82423151,  0.30834789,  0.64695641,  0.29344493,  0.2901297 ,
               0.66241492,  0.56777844,  0.33943046,  0.2484125 ,  0.3534307 ,
               0.3775911 ,  0.53493798,  0.27565367,  0.07799233,  0.90904059,
               0.65211136,  0.60735812,  0.41375938,  0.63922815,  0.18807134,
               0.0336475 ,  0.97348773,  0.44859937,  0.81385367,  0.16034472,
               0.65735041,  0.55302145,  0.24544005,  0.2513829 ,  0.38452373,
               0.26656666,  0.70093147,  0.68614912,  0.98820827,  0.90863279,
               0.74610534,  0.04381593,  0.01385146,  0.8860836 ,  0.95428625,
               0.45770991,  0.414358  ,  0.61396424,  0.33093514,  0.10635574,
               0.84225837,  0.21812243,  0.04349557,  0.15486185,  0.76510172,
               0.43392636,  0.38076669,  0.84612337,  0.09519745,  0.89151863,
               0.79264769,  0.44878125,  0.20672079,  0.04247018,  0.29096092])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.39879383,  0.44327765,  0.56215271,  0.17902483,  0.63409893,
               0.56780065,  0.34479865,  0.4384152 ,  0.66911555,  0.87805465,
               0.67407821,  0.31071664,  0.18992668,  0.89860883,  0.76939485,
               0.26617464,  0.86718674,  0.7561529 ,  0.24860973,  0.34314143,
               0.88245695,  0.81691467,  0.49533023,  0.34015073,  0.56872449,
               0.48253282,  0.29421663,  0.75627119,  0.59706654,  0.15377909,
               0.0045683 ,  0.64631573,  0.71090046,  0.02610792,  0.71156935,
               0.34914483,  0.79635464,  0.82334149,  0.90174609,  0.52863731,
               0.82853801,  0.84432616,  0.54887125,  0.60218475,  0.49923865,
               0.72646867,  0.45163086,  0.85344776,  0.88004086,  0.44278912,
               0.16999441,  0.53006712,  0.8759876 ,  0.48910028,  0.77310432,
               0.39228443,  0.58773096,  0.5096221 ,  0.68308694,  0.32761263,
               0.41808196,  0.33470734,  0.48436911,  0.86310005,  0.94404771,
               0.5832362 ,  0.19899566,  0.21720918,  0.82983796,  0.46971909,
               0.40403579,  0.46614676,  0.99383821,  0.66756148,  0.11717791,
               0.25736499,  0.07190398,  0.52044681,  0.75371404,  0.66000953,
               0.21343932,  0.55404748,  0.14010298,  0.93526231,  0.42982409,
               0.0157905 ,  0.73168818,  0.84834982,  0.32698678,  0.14069649,
               0.49478786,  0.12441145,  0.58614773,  0.36560671,  0.67472215,
               0.61985387,  0.54248184,  0.78108834,  0.07588263,  0.76543675])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.47504469,  0.78873867,  0.11149171,  0.39833338,  0.36324873,
               0.51153277,  0.3849911 ,  0.0205843 ,  0.57820247,  0.43282409,
               0.48497065,  0.93698733,  0.26537297,  0.27109279,  0.63285516,
               0.33809459,  0.66758564,  0.30864801,  0.8501599 ,  0.10056482,
               0.56713229,  0.95535707,  0.06070141,  0.33649704,  0.5464295 ,
               0.84726752,  0.30645818,  0.97911438,  0.21634612,  0.64491912,
               0.60520329,  0.01904281,  0.22524887,  0.14259561,  0.73196576,
               0.5096606 ,  0.5828991 ,  0.63801817,  0.94729392,  0.19110093,
               0.07539402,  0.41906028,  0.10912604,  0.16277162,  0.69975417,
               0.71140939,  0.92435597,  0.45833171,  0.75493061,  0.93933116,
               0.81481526,  0.05097384,  0.92899553,  0.65948984,  0.5712586 ,
               0.99010017,  0.92096793,  0.53887326,  0.84080716,  0.74708367,
               0.42693956,  0.31627861,  0.90754473,  0.09756215,  0.10284026,
               0.14055621,  0.26963479,  0.38939531,  0.24004486,  0.31519096,
               0.17058379,  0.15827959,  0.18675788,  0.5650504 ,  0.02343935,
               0.50912032,  0.95321734,  0.14803817,  0.796268  ,  0.78729518,
               0.8705887 ,  0.83965726,  0.94535394,  0.00337966,  0.83593649,
               0.99179914,  0.89988606,  0.24738   ,  0.71823483,  0.24285126,
               0.289993  ,  0.87393052,  0.48647303,  0.32180957,  0.13976902,
               0.23864843,  0.00801474,  0.15822094,  0.06309724,  0.42810355])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.72680125,  0.72065685,  0.13683237,  0.13354186,  0.64578756,
               0.79955713,  0.01488723,  0.89153881,  0.42445559,  0.9498927 ,
               0.76570992,  0.77943649,  0.68551679,  0.89536634,  0.20585561,
               0.51613824,  0.39942443,  0.17705469,  0.4278725 ,  0.28318935,
               0.65100309,  0.90705166,  0.09840737,  0.39768088,  0.64482499,
               0.86795815,  0.66407992,  0.50635738,  0.6898034 ,  0.08451078,
               0.94379466,  0.27965896,  0.22696508,  0.82211345,  0.3358433 ,
               0.77367995,  0.97307161,  0.81111066,  0.83631636,  0.09598447,
               0.88387494,  0.71925727,  0.98607134,  0.13594824,  0.7792273 ,
               0.79344437,  0.14069974,  0.66514828,  0.25357979,  0.21066224,
               0.78040942,  0.83732239,  0.51843879,  0.72413796,  0.06811748,
               0.03413779,  0.53254921,  0.11808237,  0.86353444,  0.8862126 ,
               0.84622117,  0.38657342,  0.19760095,  0.16267928,  0.25706456,
               0.00876201,  0.26907885,  0.59451198,  0.85648171,  0.80898041,
               0.77141751,  0.74420362,  0.44780817,  0.20989623,  0.73807731,
               0.6343305 ,  0.56377965,  0.4627263 ,  0.93509327,  0.94588573,
               0.60880106,  0.4073943 ,  0.59274209,  0.34477833,  0.01681768,
               0.0907071 ,  0.14649502,  0.55766717,  0.19374014,  0.63479519,
               0.88811033,  0.5892465 ,  0.90092185,  0.44012716,  0.20575165,
               0.14721456,  0.17103888,  0.39012133,  0.89236433,  0.27057923])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.3897088 ,  0.69722134,  0.25765496,  0.07797884,  0.87780347,
               0.45586367,  0.82522301,  0.41504825,  0.00379724,  0.82984395,
               0.85804859,  0.87516557,  0.31900466,  0.015443  ,  0.01394109,
               0.40783251,  0.97359754,  0.87197197,  0.28863702,  0.49498524,
               0.92866615,  0.06506288,  0.994943  ,  0.55469627,  0.45486303,
               0.73429171,  0.05197957,  0.95309426,  0.68813021,  0.2987472 ,
               0.8123161 ,  0.21569242,  0.72960343,  0.11388805,  0.78283596,
               0.84875409,  0.83832638,  0.64438328,  0.88430913,  0.96495994,
               0.82423151,  0.30834789,  0.64695641,  0.29344493,  0.2901297 ,
               0.66241492,  0.56777844,  0.33943046,  0.2484125 ,  0.3534307 ,
               0.3775911 ,  0.53493798,  0.27565367,  0.07799233,  0.90904059,
               0.65211136,  0.60735812,  0.41375938,  0.63922815,  0.18807134,
               0.0336475 ,  0.97348773,  0.44859937,  0.81385367,  0.16034472,
               0.65735041,  0.55302145,  0.24544005,  0.2513829 ,  0.38452373,
               0.26656666,  0.70093147,  0.68614912,  0.98820827,  0.90863279,
               0.74610534,  0.04381593,  0.01385146,  0.8860836 ,  0.95428625,
               0.45770991,  0.414358  ,  0.61396424,  0.33093514,  0.10635574,
               0.84225837,  0.21812243,  0.04349557,  0.15486185,  0.76510172,
               0.43392636,  0.38076669,  0.84612337,  0.09519745,  0.89151863,
               0.79264769,  0.44878125,  0.20672079,  0.04247018,  0.29096092])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.39879383,  0.44327765,  0.56215271,  0.17902483,  0.63409893,
               0.56780065,  0.34479865,  0.4384152 ,  0.66911555,  0.87805465,
               0.67407821,  0.31071664,  0.18992668,  0.89860883,  0.76939485,
               0.26617464,  0.86718674,  0.7561529 ,  0.24860973,  0.34314143,
               0.88245695,  0.81691467,  0.49533023,  0.34015073,  0.56872449,
               0.48253282,  0.29421663,  0.75627119,  0.59706654,  0.15377909,
               0.0045683 ,  0.64631573,  0.71090046,  0.02610792,  0.71156935,
               0.34914483,  0.79635464,  0.82334149,  0.90174609,  0.52863731,
               0.82853801,  0.84432616,  0.54887125,  0.60218475,  0.49923865,
               0.72646867,  0.45163086,  0.85344776,  0.88004086,  0.44278912,
               0.16999441,  0.53006712,  0.8759876 ,  0.48910028,  0.77310432,
               0.39228443,  0.58773096,  0.5096221 ,  0.68308694,  0.32761263,
               0.41808196,  0.33470734,  0.48436911,  0.86310005,  0.94404771,
               0.5832362 ,  0.19899566,  0.21720918,  0.82983796,  0.46971909,
               0.40403579,  0.46614676,  0.99383821,  0.66756148,  0.11717791,
               0.25736499,  0.07190398,  0.52044681,  0.75371404,  0.66000953,
               0.21343932,  0.55404748,  0.14010298,  0.93526231,  0.42982409,
               0.0157905 ,  0.73168818,  0.84834982,  0.32698678,  0.14069649,
               0.49478786,  0.12441145,  0.58614773,  0.36560671,  0.67472215,
               0.61985387,  0.54248184,  0.78108834,  0.07588263,  0.76543675])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.47504469,  0.78873867,  0.11149171,  0.39833338,  0.36324873,
               0.51153277,  0.3849911 ,  0.0205843 ,  0.57820247,  0.43282409,
               0.48497065,  0.93698733,  0.26537297,  0.27109279,  0.63285516,
               0.33809459,  0.66758564,  0.30864801,  0.8501599 ,  0.10056482,
               0.56713229,  0.95535707,  0.06070141,  0.33649704,  0.5464295 ,
               0.84726752,  0.30645818,  0.97911438,  0.21634612,  0.64491912,
               0.60520329,  0.01904281,  0.22524887,  0.14259561,  0.73196576,
               0.5096606 ,  0.5828991 ,  0.63801817,  0.94729392,  0.19110093,
               0.07539402,  0.41906028,  0.10912604,  0.16277162,  0.69975417,
               0.71140939,  0.92435597,  0.45833171,  0.75493061,  0.93933116,
               0.81481526,  0.05097384,  0.92899553,  0.65948984,  0.5712586 ,
               0.99010017,  0.92096793,  0.53887326,  0.84080716,  0.74708367,
               0.42693956,  0.31627861,  0.90754473,  0.09756215,  0.10284026,
               0.14055621,  0.26963479,  0.38939531,  0.24004486,  0.31519096,
               0.17058379,  0.15827959,  0.18675788,  0.5650504 ,  0.02343935,
               0.50912032,  0.95321734,  0.14803817,  0.796268  ,  0.78729518,
               0.8705887 ,  0.83965726,  0.94535394,  0.00337966,  0.83593649,
               0.99179914,  0.89988606,  0.24738   ,  0.71823483,  0.24285126,
               0.289993  ,  0.87393052,  0.48647303,  0.32180957,  0.13976902,
               0.23864843,  0.00801474,  0.15822094,  0.06309724,  0.42810355])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.42060641,  0.82659695,  0.58149428,  0.03205613,  0.13220757,
               0.61219696,  0.472194  ,  0.36213604,  0.22460987,  0.76383961,
               0.05099043,  0.76042295,  0.71094282,  0.54833238,  0.48305693,
               0.8435971 ,  0.71420565,  0.94880004,  0.03003752,  0.39024564,
               0.74798608,  0.8183996 ,  0.65956671,  0.89966094,  0.4094972 ,
               0.2447014 ,  0.08733967,  0.45183977,  0.21101284,  0.69096604,
               0.7188112 ,  0.02440761,  0.92799974,  0.08375772,  0.30038691,
               0.1269983 ,  0.75690566,  0.79860341,  0.65505318,  0.87570071,
               0.70771617,  0.31167148,  0.87480112,  0.07583735,  0.54810562,
               0.53695854,  0.13511487,  0.11911326,  0.22298364,  0.30126074,
               0.31398863,  0.17692072,  0.51814011,  0.95852892,  0.39583802,
               0.63701241,  0.58224026,  0.0942447 ,  0.20202953,  0.3039316 ,
               0.30969396,  0.95743618,  0.43035868,  0.59592551,  0.94673523,
               0.03506963,  0.21736681,  0.0218183 ,  0.08138028,  0.79467896,
               0.84349726,  0.99010305,  0.79945685,  0.90598363,  0.79903334,
               0.25351927,  0.24577997,  0.91212515,  0.50192348,  0.08177163,
               0.33421023,  0.83188967,  0.01422429,  0.3064482 ,  0.68049202,
               0.63981278,  0.31073496,  0.88558821,  0.86194474,  0.20153982,
               0.50672537,  0.72972057,  0.32972581,  0.3594905 ,  0.77914125,
               0.18709767,  0.58310751,  0.32702637,  0.36796752,  0.91766837])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  6.00175730e-01,   3.31707226e-01,   9.00231181e-01,
                5.79676223e-01,   3.11790805e-01,   9.22842227e-01,
                3.11518576e-01,   4.36303900e-01,   6.21797493e-01,
                1.66723116e-01,   3.01668281e-01,   1.09961372e-01,
                3.06143339e-01,   3.50264444e-01,   8.76364215e-01,
                6.99549160e-01,   1.79910146e-01,   8.88199848e-01,
                3.80640059e-01,   5.99209522e-01,   8.56362466e-02,
                3.94506142e-01,   6.32797542e-01,   7.82050637e-01,
                2.81273883e-01,   5.20503811e-01,   3.19037733e-01,
                7.55698572e-01,   7.93834645e-01,   4.30779742e-01,
                7.52123750e-01,   2.95207266e-01,   8.25195373e-01,
                8.63941827e-01,   8.30299209e-01,   2.37008095e-01,
                7.58783468e-02,   7.10293250e-01,   4.37667098e-01,
                2.19243961e-01,   1.87460086e-01,   4.60531365e-02,
                4.30306416e-01,   2.56132364e-01,   8.62309286e-01,
                4.70540011e-01,   9.16390703e-01,   3.79435545e-01,
                7.20444482e-01,   1.76982364e-01,   7.70845080e-01,
                6.99447937e-01,   7.17249003e-01,   9.76748013e-01,
                3.01683888e-01,   9.11646494e-01,   1.49321007e-01,
                7.16928369e-01,   7.71727145e-01,   8.20029783e-01,
                3.55646359e-01,   7.58724705e-01,   1.18310672e-02,
                8.35229634e-02,   9.27609369e-01,   8.72425143e-01,
                6.26192272e-01,   1.02011107e-01,   9.58130665e-01,
                3.08032128e-01,   3.34024175e-01,   2.21136006e-01,
                6.34105116e-01,   8.27097343e-01,   1.21243122e-01,
                8.29142150e-01,   3.51925599e-01,   8.86580836e-01,
                9.00501824e-01,   3.48271711e-04,   8.51270098e-01,
                8.23152121e-01,   7.19179751e-01,   9.82349668e-01,
                6.70556534e-01,   3.27730862e-01,   6.60089735e-01,
                5.84496187e-01,   4.28863197e-01,   5.93769209e-01,
                5.63345601e-01,   3.41505275e-01,   5.48896541e-01,
                6.04899652e-01,   8.70318275e-01,   9.94004156e-01,
                8.17237398e-01,   9.85720700e-01,   3.54002252e-01,
                8.38432908e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.53160591,  0.00516029,  0.37820442,  0.21779602,  0.77344502,
               0.62238869,  0.47594005,  0.105987  ,  0.59897826,  0.81927863,
               0.80237963,  0.09830096,  0.34835817,  0.05278993,  0.17737648,
               0.17360893,  0.54366003,  0.14513079,  0.13815613,  0.57504405,
               0.9168051 ,  0.63544944,  0.04061466,  0.82057177,  0.8888696 ,
               0.59058358,  0.74039607,  0.08222702,  0.49417265,  0.59264943,
               0.12711551,  0.77894857,  0.97827322,  0.57378602,  0.74737143,
               0.70728324,  0.36630159,  0.2820444 ,  0.09770291,  0.5118232 ,
               0.31679581,  0.05114466,  0.16263787,  0.35095768,  0.7080603 ,
               0.301074  ,  0.67356734,  0.59864683,  0.47553956,  0.93264379,
               0.18962636,  0.2577783 ,  0.58306597,  0.52675899,  0.18945135,
               0.41134518,  0.24953126,  0.65920795,  0.9203181 ,  0.70370153,
               0.79790564,  0.85172727,  0.47021259,  0.05728316,  0.54186318,
               0.60107664,  0.03830637,  0.84733996,  0.05667348,  0.58334146,
               0.19337962,  0.34993811,  0.31751565,  0.41363909,  0.56066085,
               0.68322131,  0.14939838,  0.86905785,  0.88246131,  0.69635204,
               0.70775673,  0.0364785 ,  0.4312282 ,  0.55740976,  0.29657695,
               0.55604867,  0.69954834,  0.28516216,  0.37316595,  0.27149761,
               0.77185413,  0.70436933,  0.74432041,  0.52836069,  0.07223253,
               0.00173848,  0.53471642,  0.81245408,  0.46455832,  0.64210604])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.59485005,  0.5945556 ,  0.28693148,  0.3102492 ,  0.94927945,
               0.12385938,  0.48991436,  0.56066213,  0.41197294,  0.398793  ,
               0.02829265,  0.16092627,  0.51690516,  0.87988149,  0.15173475,
               0.03700449,  0.72641763,  0.41688233,  0.31683694,  0.77186205,
               0.7721134 ,  0.61797166,  0.23134912,  0.39081292,  0.08839705,
               0.28922681,  0.65851683,  0.46818934,  0.55425522,  0.26058131,
               0.06586353,  0.16240228,  0.77425459,  0.27469683,  0.10266369,
               0.47198087,  0.03878783,  0.50954906,  0.3602523 ,  0.29960339,
               0.62586259,  0.16750465,  0.51400238,  0.92224235,  0.58721653,
               0.36910888,  0.45126687,  0.97014253,  0.36008509,  0.71513501,
               0.1283176 ,  0.64767779,  0.9316908 ,  0.47931296,  0.24498142,
               0.31972321,  0.79155584,  0.70198449,  0.16230275,  0.85610952,
               0.88297739,  0.18025439,  0.96398982,  0.62907656,  0.43820375,
               0.17302923,  0.24858315,  0.55880218,  0.96012026,  0.35806849,
               0.84625617,  0.65618435,  0.01055954,  0.41962911,  0.56393259,
               0.11650068,  0.23497156,  0.31198265,  0.2963523 ,  0.60419477,
               0.19531383,  0.75456264,  0.33036303,  0.16077648,  0.6356642 ,
               0.53297139,  0.94873414,  0.43290292,  0.59026706,  0.17364102,
               0.41006897,  0.33718759,  0.20231053,  0.33640872,  0.80910176,
               0.16134196,  0.62012254,  0.01645739,  0.99596205,  0.07234773])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.92924951,  0.85044102,  0.88367288,  0.42442438,  0.97716877,
               0.24799939,  0.0502523 ,  0.60433898,  0.5988133 ,  0.45402032,
               0.90988406,  0.91896664,  0.35023301,  0.73494919,  0.90272616,
               0.49388656,  0.89840924,  0.67295169,  0.06432476,  0.40150339,
               0.97366521,  0.94992645,  0.86436513,  0.75916707,  0.63454149,
               0.19314781,  0.47851217,  0.21221549,  0.44408989,  0.86755849,
               0.53596889,  0.81459156,  0.76402835,  0.49086064,  0.36161685,
               0.05937697,  0.02107868,  0.97973759,  0.86950565,  0.16605555,
               0.8000849 ,  0.42602236,  0.30915567,  0.4702995 ,  0.17953249,
               0.69784054,  0.52554569,  0.50126286,  0.0820053 ,  0.65273413,
               0.40348137,  0.7233425 ,  0.39898228,  0.97800247,  0.15218733,
               0.79328918,  0.86181494,  0.60907383,  0.75291726,  0.06721831,
               0.32834798,  0.64908708,  0.80138225,  0.59400519,  0.63227746,
               0.2229755 ,  0.1218034 ,  0.87778129,  0.59975507,  0.74869019,
               0.94019824,  0.98975259,  0.74512181,  0.52083149,  0.87449982,
               0.94092491,  0.84047628,  0.53544674,  0.81006768,  0.45485992,
               0.13162778,  0.94599665,  0.32839767,  0.32530734,  0.25928386,
               0.70952506,  0.58441533,  0.18613836,  0.8171539 ,  0.96030628,
               0.34504831,  0.55020019,  0.27417675,  0.37118453,  0.73537446,
               0.33630034,  0.65496764,  0.5096172 ,  0.26468678,  0.46347923])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  6.00175730e-01,   3.31707226e-01,   9.00231181e-01,
                5.79676223e-01,   3.11790805e-01,   9.22842227e-01,
                3.11518576e-01,   4.36303900e-01,   6.21797493e-01,
                1.66723116e-01,   3.01668281e-01,   1.09961372e-01,
                3.06143339e-01,   3.50264444e-01,   8.76364215e-01,
                6.99549160e-01,   1.79910146e-01,   8.88199848e-01,
                3.80640059e-01,   5.99209522e-01,   8.56362466e-02,
                3.94506142e-01,   6.32797542e-01,   7.82050637e-01,
                2.81273883e-01,   5.20503811e-01,   3.19037733e-01,
                7.55698572e-01,   7.93834645e-01,   4.30779742e-01,
                7.52123750e-01,   2.95207266e-01,   8.25195373e-01,
                8.63941827e-01,   8.30299209e-01,   2.37008095e-01,
                7.58783468e-02,   7.10293250e-01,   4.37667098e-01,
                2.19243961e-01,   1.87460086e-01,   4.60531365e-02,
                4.30306416e-01,   2.56132364e-01,   8.62309286e-01,
                4.70540011e-01,   9.16390703e-01,   3.79435545e-01,
                7.20444482e-01,   1.76982364e-01,   7.70845080e-01,
                6.99447937e-01,   7.17249003e-01,   9.76748013e-01,
                3.01683888e-01,   9.11646494e-01,   1.49321007e-01,
                7.16928369e-01,   7.71727145e-01,   8.20029783e-01,
                3.55646359e-01,   7.58724705e-01,   1.18310672e-02,
                8.35229634e-02,   9.27609369e-01,   8.72425143e-01,
                6.26192272e-01,   1.02011107e-01,   9.58130665e-01,
                3.08032128e-01,   3.34024175e-01,   2.21136006e-01,
                6.34105116e-01,   8.27097343e-01,   1.21243122e-01,
                8.29142150e-01,   3.51925599e-01,   8.86580836e-01,
                9.00501824e-01,   3.48271711e-04,   8.51270098e-01,
                8.23152121e-01,   7.19179751e-01,   9.82349668e-01,
                6.70556534e-01,   3.27730862e-01,   6.60089735e-01,
                5.84496187e-01,   4.28863197e-01,   5.93769209e-01,
                5.63345601e-01,   3.41505275e-01,   5.48896541e-01,
                6.04899652e-01,   8.70318275e-01,   9.94004156e-01,
                8.17237398e-01,   9.85720700e-01,   3.54002252e-01,
                8.38432908e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.53160591,  0.00516029,  0.37820442,  0.21779602,  0.77344502,
               0.62238869,  0.47594005,  0.105987  ,  0.59897826,  0.81927863,
               0.80237963,  0.09830096,  0.34835817,  0.05278993,  0.17737648,
               0.17360893,  0.54366003,  0.14513079,  0.13815613,  0.57504405,
               0.9168051 ,  0.63544944,  0.04061466,  0.82057177,  0.8888696 ,
               0.59058358,  0.74039607,  0.08222702,  0.49417265,  0.59264943,
               0.12711551,  0.77894857,  0.97827322,  0.57378602,  0.74737143,
               0.70728324,  0.36630159,  0.2820444 ,  0.09770291,  0.5118232 ,
               0.31679581,  0.05114466,  0.16263787,  0.35095768,  0.7080603 ,
               0.301074  ,  0.67356734,  0.59864683,  0.47553956,  0.93264379,
               0.18962636,  0.2577783 ,  0.58306597,  0.52675899,  0.18945135,
               0.41134518,  0.24953126,  0.65920795,  0.9203181 ,  0.70370153,
               0.79790564,  0.85172727,  0.47021259,  0.05728316,  0.54186318,
               0.60107664,  0.03830637,  0.84733996,  0.05667348,  0.58334146,
               0.19337962,  0.34993811,  0.31751565,  0.41363909,  0.56066085,
               0.68322131,  0.14939838,  0.86905785,  0.88246131,  0.69635204,
               0.70775673,  0.0364785 ,  0.4312282 ,  0.55740976,  0.29657695,
               0.55604867,  0.69954834,  0.28516216,  0.37316595,  0.27149761,
               0.77185413,  0.70436933,  0.74432041,  0.52836069,  0.07223253,
               0.00173848,  0.53471642,  0.81245408,  0.46455832,  0.64210604])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.59485005,  0.5945556 ,  0.28693148,  0.3102492 ,  0.94927945,
               0.12385938,  0.48991436,  0.56066213,  0.41197294,  0.398793  ,
               0.02829265,  0.16092627,  0.51690516,  0.87988149,  0.15173475,
               0.03700449,  0.72641763,  0.41688233,  0.31683694,  0.77186205,
               0.7721134 ,  0.61797166,  0.23134912,  0.39081292,  0.08839705,
               0.28922681,  0.65851683,  0.46818934,  0.55425522,  0.26058131,
               0.06586353,  0.16240228,  0.77425459,  0.27469683,  0.10266369,
               0.47198087,  0.03878783,  0.50954906,  0.3602523 ,  0.29960339,
               0.62586259,  0.16750465,  0.51400238,  0.92224235,  0.58721653,
               0.36910888,  0.45126687,  0.97014253,  0.36008509,  0.71513501,
               0.1283176 ,  0.64767779,  0.9316908 ,  0.47931296,  0.24498142,
               0.31972321,  0.79155584,  0.70198449,  0.16230275,  0.85610952,
               0.88297739,  0.18025439,  0.96398982,  0.62907656,  0.43820375,
               0.17302923,  0.24858315,  0.55880218,  0.96012026,  0.35806849,
               0.84625617,  0.65618435,  0.01055954,  0.41962911,  0.56393259,
               0.11650068,  0.23497156,  0.31198265,  0.2963523 ,  0.60419477,
               0.19531383,  0.75456264,  0.33036303,  0.16077648,  0.6356642 ,
               0.53297139,  0.94873414,  0.43290292,  0.59026706,  0.17364102,
               0.41006897,  0.33718759,  0.20231053,  0.33640872,  0.80910176,
               0.16134196,  0.62012254,  0.01645739,  0.99596205,  0.07234773])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.40140364,  0.62936275,  0.16169728,  0.68395049,  0.53036972,
               0.13539526,  0.49736796,  0.35581413,  0.58919921,  0.1260353 ,
               0.28007112,  0.82441006,  0.70919688,  0.40383612,  0.53431256,
               0.93700948,  0.14064278,  0.79310235,  0.25698391,  0.48581635,
               0.45959839,  0.96901511,  0.91044542,  0.2732195 ,  0.54239918,
               0.18285566,  0.24375801,  0.74174584,  0.47265186,  0.99520054,
               0.023729  ,  0.87108302,  0.45879892,  0.10624438,  0.4381858 ,
               0.70720346,  0.84314964,  0.52885894,  0.79198279,  0.59041344,
               0.85594265,  0.71554761,  0.67127097,  0.14417485,  0.5643682 ,
               0.94515694,  0.29886359,  0.36179761,  0.33190653,  0.35793417,
               0.01235282,  0.49867941,  0.90626693,  0.72034323,  0.83627275,
               0.79712939,  0.57166241,  0.41173738,  0.65354774,  0.33874088,
               0.85670782,  0.46202526,  0.96710756,  0.21528264,  0.59178345,
               0.27984983,  0.48672698,  0.38782556,  0.92842855,  0.07941963,
               0.64328749,  0.23564177,  0.73379442,  0.28082598,  0.17523365,
               0.07690622,  0.65211725,  0.67607064,  0.37833501,  0.6506296 ,
               0.79236803,  0.02095219,  0.31082186,  0.3631242 ,  0.56492096,
               0.85171198,  0.86457628,  0.25090512,  0.87732846,  0.36331181,
               0.1690594 ,  0.60256707,  0.10429219,  0.84990764,  0.40898624,
               0.86618815,  0.16751199,  0.52005055,  0.49007438,  0.73530728])}]]


