
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='6548ef07-b45b-4001-9a6a-e9707c7a82f4'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='5077fbd5-43b1-423c-bcd7-fe0fee25ed48'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.283729017344625],
     [0.956272033318302],
     [0.129834959776216],
     [0.49955378582021],
     [0.6195787150829],
     [0.685947833141563],
     [0.0802056141496523],
     [0.97654493283528],
     [0.0918513305441626],
     [0.0972955431562101],
     [0.83828678595558],
     [0.94639265694425],
     [0.56000579015014],
     [0.780482793621014],
     [0.379738221199476],
     [0.42637901821428],
     [0.184327169198537],
     [0.475551283941812],
     [0.666111942439477],
     [0.366876617025024],
     [0.960271759603277],
     [0.117773232768024],
     [0.853958126657486],
     [0.540978880398052],
     [0.00659110691544396],
     [0.567404160493303],
     [0.516056075196849],
     [0.994848989374731],
     [0.0566054605275603],
     [0.425775246462385],
     [0.0856806379853312],
     [0.365433155130715],
     [0.880102976480628],
     [0.638289114500037],
     [0.285566633363831],
     [0.331235211688788],
     [0.891880311648203],
     [0.716905841219442],
     [0.768575948308479],
     [0.524407100269238],
     [0.482963833719633],
     [0.244520369932917],
     [0.665455342205146],
     [0.253608845580343],
     [0.173703905460515],
     [0.930605472088992],
     [0.767626812444723],
     [0.346389611746179],
     [0.802265793568521],
     [0.162732254789778],
     [0.0340442887319028],
     [0.912833770828491],
     [0.753305433744947],
     [0.80622567981565],
     [0.0615107152561002],
     [0.684551071009675],
     [0.835971273077003],
     [0.0724397284728115],
     [0.703129193389725],
     [0.584939169753031],
     [0.850734118607343],
     [0.877133192001361],
     [0.462637781151514],
     [0.513226113164602],
     [0.634356248641318],
     [0.990687653734212],
     [0.617597441334981],
     [0.321126402396355],
     [0.530377008345874],
     [0.548076438099512],
     [0.748350999442443],
     [0.997217479475661],
     [0.704446081201645],
     [0.0145343379340248],
     [0.988459148014044],
     [0.500981519536837],
     [0.303307195458951],
     [0.140265438114029],
     [0.258730526829203],
     [0.37916700312761],
     [0.354598374606865],
     [0.343541726696712],
     [0.945574419947979],
     [0.479826425611901],
     [0.404423613543569],
     [0.426665409104556],
     [0.995041098382647],
     [0.286924266241719],
     [0.287979626623549],
     [0.96802867174241],
     [0.865614796622893],
     [0.476293235041152],
     [0.412543530455607],
     [0.898846761081581],
     [0.33280339343666],
     [0.45324384939616],
     [0.335771136555356],
     [0.103271394552463],
     [0.301666492166631],
     [0.263573540671387]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.15542798])],
     [array([ 0.67294609])],
     [array([ 0.91257854])],
     [array([ 0.88079721])],
     [array([ 0.01863362])],
     [array([ 0.60778042])],
     [array([ 0.59294251])],
     [array([ 0.30033201])],
     [array([ 0.20817376])],
     [array([ 0.73825813])],
     [array([ 0.6618235])],
     [array([ 0.49986954])],
     [array([ 0.93805152])],
     [array([ 0.67862698])],
     [array([ 0.38483209])],
     [array([ 0.50557647])],
     [array([ 0.03696088])],
     [array([ 0.3520886])],
     [array([ 0.48589264])],
     [array([ 0.23090435])],
     [array([ 0.68514018])],
     [array([ 0.41074309])],
     [array([ 0.68253336])],
     [array([ 0.36703591])],
     [array([ 0.34340831])],
     [array([ 0.95482123])],
     [array([ 0.03385095])],
     [array([ 0.78350106])],
     [array([ 0.74118394])],
     [array([ 0.06245312])],
     [array([ 0.49231729])],
     [array([ 0.52841926])],
     [array([ 0.59572007])],
     [array([ 0.8313839])],
     [array([ 0.57157018])],
     [array([ 0.98164483])],
     [array([ 0.14177892])],
     [array([ 0.78489996])],
     [array([ 0.72484964])],
     [array([ 0.60436884])],
     [array([ 0.44344935])],
     [array([ 0.69524929])],
     [array([ 0.9441334])],
     [array([ 0.8720864])],
     [array([ 0.33770349])],
     [array([ 0.24463362])],
     [array([ 0.34643609])],
     [array([ 0.35228317])],
     [array([ 0.81626448])],
     [array([ 0.31012792])],
     [array([ 0.64747112])],
     [array([ 0.51214246])],
     [array([ 0.46899614])],
     [array([ 0.24656524])],
     [array([ 0.00785048])],
     [array([ 0.13733439])],
     [array([ 0.26294926])],
     [array([ 0.59424149])],
     [array([ 0.78621486])],
     [array([ 0.89292848])],
     [array([ 0.97835386])],
     [array([ 0.13777598])],
     [array([ 0.80904164])],
     [array([ 0.93791187])],
     [array([ 0.3377454])],
     [array([ 0.42487603])],
     [array([ 0.65904018])],
     [array([ 0.97141875])],
     [array([ 0.07568066])],
     [array([ 0.03305079])],
     [array([ 0.56266126])],
     [array([ 0.47350583])],
     [array([ 0.7788839])],
     [array([ 0.46366339])],
     [array([ 0.31617672])],
     [array([ 0.77351852])],
     [array([ 0.43757054])],
     [array([ 0.09006076])],
     [array([ 0.30667296])],
     [array([ 0.75401458])],
     [array([ 0.71756249])],
     [array([ 0.30187319])],
     [array([ 0.20173806])],
     [array([ 0.72625284])],
     [array([ 0.00338502])],
     [array([ 0.43670697])],
     [array([ 0.18100647])],
     [array([ 0.31944128])],
     [array([ 0.70316769])],
     [array([ 0.71075152])],
     [array([ 0.81585278])],
     [array([ 0.24754214])],
     [array([ 0.53882635])],
     [array([ 0.18037204])],
     [array([ 0.41374302])],
     [array([ 0.26776736])],
     [array([ 0.41384478])],
     [array([ 0.0587246])],
     [array([ 0.79240749])],
     [array([ 0.78069527])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.15542798,  0.67294609,  0.91257854,  0.88079721,  0.01863362,
            0.60778042,  0.59294251,  0.30033201,  0.20817376,  0.73825813,
            0.6618235 ,  0.49986954,  0.93805152,  0.67862698,  0.38483209,
            0.50557647,  0.03696088,  0.3520886 ,  0.48589264,  0.23090435,
            0.68514018,  0.41074309,  0.68253336,  0.36703591,  0.34340831,
            0.95482123,  0.03385095,  0.78350106,  0.74118394,  0.06245312,
            0.49231729,  0.52841926,  0.59572007,  0.8313839 ,  0.57157018,
            0.98164483,  0.14177892,  0.78489996,  0.72484964,  0.60436884,
            0.44344935,  0.69524929,  0.9441334 ,  0.8720864 ,  0.33770349,
            0.24463362,  0.34643609,  0.35228317,  0.81626448,  0.31012792,
            0.64747112,  0.51214246,  0.46899614,  0.24656524,  0.00785048,
            0.13733439,  0.26294926,  0.59424149,  0.78621486,  0.89292848,
            0.97835386,  0.13777598,  0.80904164,  0.93791187,  0.3377454 ,
            0.42487603,  0.65904018,  0.97141875,  0.07568066,  0.03305079,
            0.56266126,  0.47350583,  0.7788839 ,  0.46366339,  0.31617672,
            0.77351852,  0.43757054,  0.09006076,  0.30667296,  0.75401458,
            0.71756249,  0.30187319,  0.20173806,  0.72625284,  0.00338502,
            0.43670697,  0.18100647,  0.31944128,  0.70316769,  0.71075152,
            0.81585278,  0.24754214,  0.53882635,  0.18037204,  0.41374302,
            0.26776736,  0.41384478,  0.0587246 ,  0.79240749,  0.78069527])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.28372902,  0.95627203,  0.12983496,  0.49955379,  0.61957872,
               0.68594783,  0.08020561,  0.97654493,  0.09185133,  0.09729554,
               0.83828679,  0.94639266,  0.56000579,  0.78048279,  0.37973822,
               0.42637902,  0.18432717,  0.47555128,  0.66611194,  0.36687662,
               0.96027176,  0.11777323,  0.85395813,  0.54097888,  0.00659111,
               0.56740416,  0.51605608,  0.99484899,  0.05660546,  0.42577525,
               0.08568064,  0.36543316,  0.88010298,  0.63828911,  0.28556663,
               0.33123521,  0.89188031,  0.71690584,  0.76857595,  0.5244071 ,
               0.48296383,  0.24452037,  0.66545534,  0.25360885,  0.17370391,
               0.93060547,  0.76762681,  0.34638961,  0.80226579,  0.16273225,
               0.03404429,  0.91283377,  0.75330543,  0.80622568,  0.06151072,
               0.68455107,  0.83597127,  0.07243973,  0.70312919,  0.58493917,
               0.85073412,  0.87713319,  0.46263778,  0.51322611,  0.63435625,
               0.99068765,  0.61759744,  0.3211264 ,  0.53037701,  0.54807644,
               0.748351  ,  0.99721748,  0.70444608,  0.01453434,  0.98845915,
               0.50098152,  0.3033072 ,  0.14026544,  0.25873053,  0.379167  ,
               0.35459837,  0.34354173,  0.94557442,  0.47982643,  0.40442361,
               0.42666541,  0.9950411 ,  0.28692427,  0.28797963,  0.96802867,
               0.8656148 ,  0.47629324,  0.41254353,  0.89884676,  0.33280339,
               0.45324385,  0.33577114,  0.10327139,  0.30166649,  0.26357354])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.95878898,  0.10795234,  0.12202868,  0.41740299,  0.40541331,
               0.66433042,  0.37473719,  0.30856769,  0.62503169,  0.96958127,
               0.08563861,  0.83344991,  0.21737777,  0.99087318,  0.26895726,
               0.85929889,  0.31549337,  0.45584208,  0.07980675,  0.68009814,
               0.07414827,  0.09581464,  0.49444549,  0.00233539,  0.93395922,
               0.40902219,  0.055156  ,  0.63691689,  0.74993718,  0.94165565,
               0.90634381,  0.28417084,  0.27900684,  0.44241062,  0.72587319,
               0.30454691,  0.90793768,  0.73820395,  0.29919951,  0.39754892,
               0.26583339,  0.28969295,  0.92894893,  0.2091399 ,  0.57287555,
               0.29569943,  0.82336414,  0.79708656,  0.21645575,  0.71605756,
               0.25568218,  0.42296349,  0.40710251,  0.48866092,  0.3199669 ,
               0.88078177,  0.21522141,  0.5350543 ,  0.29281557,  0.52934   ,
               0.83725081,  0.8824136 ,  0.36700766,  0.92431526,  0.39170237,
               0.41687716,  0.58365656,  0.7658773 ,  0.71965466,  0.23288561,
               0.04400504,  0.40221455,  0.73026435,  0.73007038,  0.59180702,
               0.09752914,  0.82098786,  0.17743951,  0.91647308,  0.83834722,
               0.1126842 ,  0.57920993,  0.64246144,  0.61947811,  0.50725542,
               0.40025192,  0.29102492,  0.80185293,  0.71107466,  0.73995061,
               0.84865715,  0.7091911 ,  0.53131816,  0.49984705,  0.18078782,
               0.39713318,  0.82352845,  0.63705111,  0.1355017 ,  0.19389112])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.03366755,  0.32576275,  0.95606081,  0.63493966,  0.77545101,
               0.16219439,  0.6734324 ,  0.70436011,  0.72433493,  0.53899712,
               0.0879861 ,  0.70267681,  0.77592199,  0.3637602 ,  0.56938087,
               0.2041614 ,  0.72050354,  0.13853323,  0.21446952,  0.50050774,
               0.54133697,  0.12790437,  0.88818279,  0.47995353,  0.68306056,
               0.48156183,  0.69238666,  0.69152085,  0.23504605,  0.0149493 ,
               0.99086055,  0.57192303,  0.93918151,  0.71001435,  0.38880707,
               0.59412532,  0.95771137,  0.12989188,  0.00345934,  0.70538255,
               0.8350807 ,  0.96604514,  0.56963029,  0.34598713,  0.73062751,
               0.1555409 ,  0.42295156,  0.44679477,  0.41152789,  0.43596965,
               0.51174848,  0.4980762 ,  0.05797136,  0.01008432,  0.27384906,
               0.84241776,  0.43097206,  0.83151458,  0.59896785,  0.60737749,
               0.45252041,  0.9945815 ,  0.32198518,  0.81071484,  0.56177727,
               0.31003189,  0.10093077,  0.18952496,  0.64684726,  0.27914005,
               0.63443296,  0.52529003,  0.65804976,  0.6431885 ,  0.93731194,
               0.39412023,  0.63778056,  0.39155403,  0.71251336,  0.01029551,
               0.96160644,  0.01997542,  0.9869418 ,  0.65732996,  0.93901404,
               0.82895365,  0.22271107,  0.01029588,  0.41227297,  0.21567003,
               0.2838731 ,  0.48071454,  0.0260024 ,  0.25434614,  0.26349602,
               0.03713746,  0.12951785,  0.69991758,  0.80221637,  0.00182295])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.59570789,  0.99663634,  0.46407807,  0.09963869,  0.04413098,
               0.97251412,  0.44570014,  0.11766428,  0.32752821,  0.97457587,
               0.17916452,  0.43675398,  0.38916569,  0.68840321,  0.73890799,
               0.51510037,  0.27987789,  0.97773154,  0.11146863,  0.90765094,
               0.8458527 ,  0.883693  ,  0.60621667,  0.79326201,  0.06963225,
               0.58184516,  0.8225271 ,  0.53516879,  0.92350132,  0.83555363,
               0.28008345,  0.60222531,  0.86035062,  0.44336667,  0.27227755,
               0.78988871,  0.80478974,  0.50368279,  0.67314867,  0.10833347,
               0.88043141,  0.60664835,  0.23369412,  0.82364224,  0.35671222,
               0.40925707,  0.35562759,  0.50722938,  0.55723686,  0.37540775,
               0.62003594,  0.06720804,  0.55651212,  0.85164696,  0.23144827,
               0.49611226,  0.31002594,  0.5231891 ,  0.13298811,  0.67441941,
               0.73585804,  0.77086545,  0.35365295,  0.10379956,  0.1373677 ,
               0.84695954,  0.51621366,  0.91823772,  0.16210652,  0.0577863 ,
               0.66020613,  0.8817826 ,  0.66008128,  0.32381136,  0.0624211 ,
               0.72052629,  0.33651991,  0.67191337,  0.66736862,  0.36403806,
               0.35765268,  0.58576001,  0.70399769,  0.67906919,  0.95865812,
               0.74035462,  0.77889469,  0.93593677,  0.92978   ,  0.54599033,
               0.12729862,  0.20243445,  0.42530195,  0.79296183,  0.67404095,
               0.5265418 ,  0.92317315,  0.22654194,  0.17544889,  0.07114163])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.28372902,  0.95627203,  0.12983496,  0.49955379,  0.61957872,
               0.68594783,  0.08020561,  0.97654493,  0.09185133,  0.09729554,
               0.83828679,  0.94639266,  0.56000579,  0.78048279,  0.37973822,
               0.42637902,  0.18432717,  0.47555128,  0.66611194,  0.36687662,
               0.96027176,  0.11777323,  0.85395813,  0.54097888,  0.00659111,
               0.56740416,  0.51605608,  0.99484899,  0.05660546,  0.42577525,
               0.08568064,  0.36543316,  0.88010298,  0.63828911,  0.28556663,
               0.33123521,  0.89188031,  0.71690584,  0.76857595,  0.5244071 ,
               0.48296383,  0.24452037,  0.66545534,  0.25360885,  0.17370391,
               0.93060547,  0.76762681,  0.34638961,  0.80226579,  0.16273225,
               0.03404429,  0.91283377,  0.75330543,  0.80622568,  0.06151072,
               0.68455107,  0.83597127,  0.07243973,  0.70312919,  0.58493917,
               0.85073412,  0.87713319,  0.46263778,  0.51322611,  0.63435625,
               0.99068765,  0.61759744,  0.3211264 ,  0.53037701,  0.54807644,
               0.748351  ,  0.99721748,  0.70444608,  0.01453434,  0.98845915,
               0.50098152,  0.3033072 ,  0.14026544,  0.25873053,  0.379167  ,
               0.35459837,  0.34354173,  0.94557442,  0.47982643,  0.40442361,
               0.42666541,  0.9950411 ,  0.28692427,  0.28797963,  0.96802867,
               0.8656148 ,  0.47629324,  0.41254353,  0.89884676,  0.33280339,
               0.45324385,  0.33577114,  0.10327139,  0.30166649,  0.26357354])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.95878898,  0.10795234,  0.12202868,  0.41740299,  0.40541331,
               0.66433042,  0.37473719,  0.30856769,  0.62503169,  0.96958127,
               0.08563861,  0.83344991,  0.21737777,  0.99087318,  0.26895726,
               0.85929889,  0.31549337,  0.45584208,  0.07980675,  0.68009814,
               0.07414827,  0.09581464,  0.49444549,  0.00233539,  0.93395922,
               0.40902219,  0.055156  ,  0.63691689,  0.74993718,  0.94165565,
               0.90634381,  0.28417084,  0.27900684,  0.44241062,  0.72587319,
               0.30454691,  0.90793768,  0.73820395,  0.29919951,  0.39754892,
               0.26583339,  0.28969295,  0.92894893,  0.2091399 ,  0.57287555,
               0.29569943,  0.82336414,  0.79708656,  0.21645575,  0.71605756,
               0.25568218,  0.42296349,  0.40710251,  0.48866092,  0.3199669 ,
               0.88078177,  0.21522141,  0.5350543 ,  0.29281557,  0.52934   ,
               0.83725081,  0.8824136 ,  0.36700766,  0.92431526,  0.39170237,
               0.41687716,  0.58365656,  0.7658773 ,  0.71965466,  0.23288561,
               0.04400504,  0.40221455,  0.73026435,  0.73007038,  0.59180702,
               0.09752914,  0.82098786,  0.17743951,  0.91647308,  0.83834722,
               0.1126842 ,  0.57920993,  0.64246144,  0.61947811,  0.50725542,
               0.40025192,  0.29102492,  0.80185293,  0.71107466,  0.73995061,
               0.84865715,  0.7091911 ,  0.53131816,  0.49984705,  0.18078782,
               0.39713318,  0.82352845,  0.63705111,  0.1355017 ,  0.19389112])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.03366755,  0.32576275,  0.95606081,  0.63493966,  0.77545101,
               0.16219439,  0.6734324 ,  0.70436011,  0.72433493,  0.53899712,
               0.0879861 ,  0.70267681,  0.77592199,  0.3637602 ,  0.56938087,
               0.2041614 ,  0.72050354,  0.13853323,  0.21446952,  0.50050774,
               0.54133697,  0.12790437,  0.88818279,  0.47995353,  0.68306056,
               0.48156183,  0.69238666,  0.69152085,  0.23504605,  0.0149493 ,
               0.99086055,  0.57192303,  0.93918151,  0.71001435,  0.38880707,
               0.59412532,  0.95771137,  0.12989188,  0.00345934,  0.70538255,
               0.8350807 ,  0.96604514,  0.56963029,  0.34598713,  0.73062751,
               0.1555409 ,  0.42295156,  0.44679477,  0.41152789,  0.43596965,
               0.51174848,  0.4980762 ,  0.05797136,  0.01008432,  0.27384906,
               0.84241776,  0.43097206,  0.83151458,  0.59896785,  0.60737749,
               0.45252041,  0.9945815 ,  0.32198518,  0.81071484,  0.56177727,
               0.31003189,  0.10093077,  0.18952496,  0.64684726,  0.27914005,
               0.63443296,  0.52529003,  0.65804976,  0.6431885 ,  0.93731194,
               0.39412023,  0.63778056,  0.39155403,  0.71251336,  0.01029551,
               0.96160644,  0.01997542,  0.9869418 ,  0.65732996,  0.93901404,
               0.82895365,  0.22271107,  0.01029588,  0.41227297,  0.21567003,
               0.2838731 ,  0.48071454,  0.0260024 ,  0.25434614,  0.26349602,
               0.03713746,  0.12951785,  0.69991758,  0.80221637,  0.00182295])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.57133468,  0.09386678,  0.03278917,  0.43060807,  0.28276841,
               0.51919305,  0.48445274,  0.93171207,  0.32593021,  0.96679874,
               0.26883746,  0.61721634,  0.72565152,  0.67282966,  0.66328273,
               0.92893217,  0.05769165,  0.01481476,  0.49623314,  0.55042648,
               0.74698512,  0.68025526,  0.64735517,  0.6403853 ,  0.83380413,
               0.19703433,  0.03013482,  0.53226542,  0.56324341,  0.59469789,
               0.75866106,  0.15268003,  0.75739706,  0.0579127 ,  0.52722616,
               0.21749731,  0.14501739,  0.00728969,  0.22702714,  0.58135255,
               0.44822231,  0.57209647,  0.37596666,  0.47224147,  0.04545546,
               0.63638114,  0.41729109,  0.8621637 ,  0.11324557,  0.15731083,
               0.3764051 ,  0.47391343,  0.01235518,  0.92388111,  0.39405472,
               0.38375741,  0.54045649,  0.83319549,  0.94177261,  0.06486795,
               0.51882728,  0.68816053,  0.44717233,  0.48627599,  0.52805451,
               0.83503429,  0.51480213,  0.51803875,  0.22643829,  0.85482548,
               0.11851309,  0.81282756,  0.17271522,  0.50337423,  0.13524616,
               0.88659331,  0.32811521,  0.67430584,  0.95846791,  0.57487678,
               0.00430093,  0.71628135,  0.11121471,  0.92706871,  0.25086317,
               0.38259797,  0.93477544,  0.41780675,  0.78794943,  0.91763088,
               0.3388161 ,  0.9834821 ,  0.95176744,  0.77447845,  0.49035988,
               0.28921207,  0.97393483,  0.38315777,  0.34988499,  0.42358298])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.15542798,  0.67294609,  0.91257854,  0.88079721,  0.01863362,
               0.60778042,  0.59294251,  0.30033201,  0.20817376,  0.73825813,
               0.6618235 ,  0.49986954,  0.93805152,  0.67862698,  0.38483209,
               0.50557647,  0.03696088,  0.3520886 ,  0.48589264,  0.23090435,
               0.68514018,  0.41074309,  0.68253336,  0.36703591,  0.34340831,
               0.95482123,  0.03385095,  0.78350106,  0.74118394,  0.06245312,
               0.49231729,  0.52841926,  0.59572007,  0.8313839 ,  0.57157018,
               0.98164483,  0.14177892,  0.78489996,  0.72484964,  0.60436884,
               0.44344935,  0.69524929,  0.9441334 ,  0.8720864 ,  0.33770349,
               0.24463362,  0.34643609,  0.35228317,  0.81626448,  0.31012792,
               0.64747112,  0.51214246,  0.46899614,  0.24656524,  0.00785048,
               0.13733439,  0.26294926,  0.59424149,  0.78621486,  0.89292848,
               0.97835386,  0.13777598,  0.80904164,  0.93791187,  0.3377454 ,
               0.42487603,  0.65904018,  0.97141875,  0.07568066,  0.03305079,
               0.56266126,  0.47350583,  0.7788839 ,  0.46366339,  0.31617672,
               0.77351852,  0.43757054,  0.09006076,  0.30667296,  0.75401458,
               0.71756249,  0.30187319,  0.20173806,  0.72625284,  0.00338502,
               0.43670697,  0.18100647,  0.31944128,  0.70316769,  0.71075152,
               0.81585278,  0.24754214,  0.53882635,  0.18037204,  0.41374302,
               0.26776736,  0.41384478,  0.0587246 ,  0.79240749,  0.78069527])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([  9.53745285e-01,   9.35757579e-01,   2.78013190e-01,
                8.38648414e-01,   4.11180514e-01,   9.51305539e-01,
                7.71844422e-01,   7.37435893e-01,   6.74922272e-01,
                7.90574093e-01,   9.30315243e-01,   7.48656359e-01,
                7.58144238e-01,   8.27203837e-01,   5.42302948e-02,
                3.64920503e-01,   6.16811329e-01,   1.13388931e-01,
                5.32020545e-01,   4.85755071e-01,   9.91573293e-01,
                5.16303669e-04,   2.31263370e-01,   4.05619199e-01,
                9.06925312e-01,   3.51008413e-01,   1.52502234e-01,
                8.87448063e-01,   2.61032769e-02,   3.92202336e-01,
                9.12095885e-01,   8.49003650e-01,   2.24252553e-01,
                3.46019767e-03,   5.85212703e-01,   2.75581781e-01,
                1.92958779e-01,   8.21035561e-01,   6.58207750e-01,
                9.30236028e-01,   2.32571038e-01,   4.15063800e-01,
                9.69958115e-01,   3.15276763e-01,   3.94792752e-01,
                9.20001213e-01,   9.47914411e-01,   7.07610754e-01,
                8.38259542e-01,   3.66889674e-01,   8.82673889e-01,
                5.34890642e-01,   9.62359191e-01,   9.94890670e-01,
                8.76082204e-02,   8.23989122e-01,   8.45609529e-01,
                4.64307339e-02,   9.73388964e-01,   7.15829024e-01,
                3.83484134e-01,   9.05156087e-01,   4.40149817e-01,
                1.20760966e-01,   3.47010629e-01,   9.19798291e-01,
                3.20748917e-01,   8.97855672e-01,   3.61418516e-01,
                6.63046505e-01,   1.25621627e-01,   2.83586190e-01,
                2.93584935e-01,   3.81854382e-01,   4.94335905e-01,
                4.92893648e-01,   5.79907604e-01,   4.81020992e-01,
                9.34747070e-01,   8.44339151e-01,   5.49276063e-01,
                3.38267795e-01,   5.53837963e-01,   4.61109613e-01,
                8.78919254e-01,   5.64592259e-01,   3.33756044e-01,
                4.32803298e-01,   7.88323416e-02,   4.53722981e-01,
                4.12158655e-01,   9.04131714e-01,   7.68390394e-01,
                5.97354740e-01,   4.94970758e-01,   3.36702734e-01,
                3.97360094e-01,   8.88889320e-01,   1.83311441e-02,
                6.28919666e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.03007727,  0.77328707,  0.93454113,  0.26929138,  0.94214987,
               0.46900109,  0.36718518,  0.78651948,  0.06909837,  0.00576936,
               0.23359928,  0.00480772,  0.33795088,  0.70736052,  0.90396849,
               0.27390004,  0.25059475,  0.24180046,  0.43832532,  0.63654748,
               0.37720776,  0.9684282 ,  0.3750951 ,  0.83744671,  0.88705396,
               0.87530333,  0.67980965,  0.1212454 ,  0.32761997,  0.87615688,
               0.70034722,  0.80580521,  0.90518299,  0.20417488,  0.53398466,
               0.07235312,  0.31021863,  0.48205846,  0.01524381,  0.2038102 ,
               0.37072095,  0.17295328,  0.10696968,  0.6513628 ,  0.26011242,
               0.12417442,  0.81559222,  0.14103457,  0.60446075,  0.45576331,
               0.00964699,  0.57440144,  0.43893809,  0.61413005,  0.58554426,
               0.63515711,  0.19226281,  0.41100914,  0.6674255 ,  0.79294186,
               0.64843011,  0.650293  ,  0.09533721,  0.08999868,  0.16825047,
               0.08558679,  0.86975343,  0.28538434,  0.0209652 ,  0.88545264,
               0.00670918,  0.74201548,  0.37563394,  0.8104417 ,  0.63159401,
               0.58322353,  0.53818438,  0.59426742,  0.65234803,  0.59893537,
               0.80808906,  0.33306304,  0.03678149,  0.64848648,  0.54587052,
               0.76773665,  0.99789454,  0.80018029,  0.10438197,  0.91214243,
               0.49621162,  0.37105612,  0.6094678 ,  0.07922984,  0.13474576,
               0.36269972,  0.87265867,  0.66129417,  0.2706485 ,  0.81680435])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.46617985,  0.83062662,  0.87999986,  0.06249295,  0.90215051,
               0.08080606,  0.19574101,  0.67141251,  0.98855148,  0.78520132,
               0.16071711,  0.77490879,  0.61177101,  0.19116134,  0.98901545,
               0.46704753,  0.23001252,  0.5119974 ,  0.13743622,  0.81586426,
               0.5523064 ,  0.97218954,  0.9433289 ,  0.03868256,  0.12309749,
               0.66381331,  0.87272642,  0.46360795,  0.14358672,  0.03893459,
               0.91561306,  0.58122646,  0.28372803,  0.04826527,  0.8391617 ,
               0.4576887 ,  0.07817219,  0.20252554,  0.6831968 ,  0.46096145,
               0.84441312,  0.88352963,  0.8025676 ,  0.08680839,  0.9543493 ,
               0.86026737,  0.08435194,  0.16530154,  0.84068823,  0.25333597,
               0.89272349,  0.6761818 ,  0.38562847,  0.61274115,  0.57903692,
               0.42101405,  0.53394927,  0.62899033,  0.86174112,  0.65773442,
               0.9266712 ,  0.03079525,  0.91232658,  0.91248852,  0.97288331,
               0.02781613,  0.90893444,  0.88402578,  0.87299645,  0.97105949,
               0.02306716,  0.85239654,  0.47882077,  0.32792811,  0.93054396,
               0.84319328,  0.87448352,  0.31106786,  0.74830941,  0.01973702,
               0.77499997,  0.25001733,  0.80770852,  0.40825308,  0.70507076,
               0.46597958,  0.23094271,  0.38411311,  0.10528549,  0.1190154 ,
               0.74234157,  0.13682842,  0.22397807,  0.44271443,  0.04715535,
               0.06251745,  0.43946563,  0.60599664,  0.95302709,  0.18908161])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.15542798,  0.67294609,  0.91257854,  0.88079721,  0.01863362,
               0.60778042,  0.59294251,  0.30033201,  0.20817376,  0.73825813,
               0.6618235 ,  0.49986954,  0.93805152,  0.67862698,  0.38483209,
               0.50557647,  0.03696088,  0.3520886 ,  0.48589264,  0.23090435,
               0.68514018,  0.41074309,  0.68253336,  0.36703591,  0.34340831,
               0.95482123,  0.03385095,  0.78350106,  0.74118394,  0.06245312,
               0.49231729,  0.52841926,  0.59572007,  0.8313839 ,  0.57157018,
               0.98164483,  0.14177892,  0.78489996,  0.72484964,  0.60436884,
               0.44344935,  0.69524929,  0.9441334 ,  0.8720864 ,  0.33770349,
               0.24463362,  0.34643609,  0.35228317,  0.81626448,  0.31012792,
               0.64747112,  0.51214246,  0.46899614,  0.24656524,  0.00785048,
               0.13733439,  0.26294926,  0.59424149,  0.78621486,  0.89292848,
               0.97835386,  0.13777598,  0.80904164,  0.93791187,  0.3377454 ,
               0.42487603,  0.65904018,  0.97141875,  0.07568066,  0.03305079,
               0.56266126,  0.47350583,  0.7788839 ,  0.46366339,  0.31617672,
               0.77351852,  0.43757054,  0.09006076,  0.30667296,  0.75401458,
               0.71756249,  0.30187319,  0.20173806,  0.72625284,  0.00338502,
               0.43670697,  0.18100647,  0.31944128,  0.70316769,  0.71075152,
               0.81585278,  0.24754214,  0.53882635,  0.18037204,  0.41374302,
               0.26776736,  0.41384478,  0.0587246 ,  0.79240749,  0.78069527])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([  9.53745285e-01,   9.35757579e-01,   2.78013190e-01,
                8.38648414e-01,   4.11180514e-01,   9.51305539e-01,
                7.71844422e-01,   7.37435893e-01,   6.74922272e-01,
                7.90574093e-01,   9.30315243e-01,   7.48656359e-01,
                7.58144238e-01,   8.27203837e-01,   5.42302948e-02,
                3.64920503e-01,   6.16811329e-01,   1.13388931e-01,
                5.32020545e-01,   4.85755071e-01,   9.91573293e-01,
                5.16303669e-04,   2.31263370e-01,   4.05619199e-01,
                9.06925312e-01,   3.51008413e-01,   1.52502234e-01,
                8.87448063e-01,   2.61032769e-02,   3.92202336e-01,
                9.12095885e-01,   8.49003650e-01,   2.24252553e-01,
                3.46019767e-03,   5.85212703e-01,   2.75581781e-01,
                1.92958779e-01,   8.21035561e-01,   6.58207750e-01,
                9.30236028e-01,   2.32571038e-01,   4.15063800e-01,
                9.69958115e-01,   3.15276763e-01,   3.94792752e-01,
                9.20001213e-01,   9.47914411e-01,   7.07610754e-01,
                8.38259542e-01,   3.66889674e-01,   8.82673889e-01,
                5.34890642e-01,   9.62359191e-01,   9.94890670e-01,
                8.76082204e-02,   8.23989122e-01,   8.45609529e-01,
                4.64307339e-02,   9.73388964e-01,   7.15829024e-01,
                3.83484134e-01,   9.05156087e-01,   4.40149817e-01,
                1.20760966e-01,   3.47010629e-01,   9.19798291e-01,
                3.20748917e-01,   8.97855672e-01,   3.61418516e-01,
                6.63046505e-01,   1.25621627e-01,   2.83586190e-01,
                2.93584935e-01,   3.81854382e-01,   4.94335905e-01,
                4.92893648e-01,   5.79907604e-01,   4.81020992e-01,
                9.34747070e-01,   8.44339151e-01,   5.49276063e-01,
                3.38267795e-01,   5.53837963e-01,   4.61109613e-01,
                8.78919254e-01,   5.64592259e-01,   3.33756044e-01,
                4.32803298e-01,   7.88323416e-02,   4.53722981e-01,
                4.12158655e-01,   9.04131714e-01,   7.68390394e-01,
                5.97354740e-01,   4.94970758e-01,   3.36702734e-01,
                3.97360094e-01,   8.88889320e-01,   1.83311441e-02,
                6.28919666e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.03007727,  0.77328707,  0.93454113,  0.26929138,  0.94214987,
               0.46900109,  0.36718518,  0.78651948,  0.06909837,  0.00576936,
               0.23359928,  0.00480772,  0.33795088,  0.70736052,  0.90396849,
               0.27390004,  0.25059475,  0.24180046,  0.43832532,  0.63654748,
               0.37720776,  0.9684282 ,  0.3750951 ,  0.83744671,  0.88705396,
               0.87530333,  0.67980965,  0.1212454 ,  0.32761997,  0.87615688,
               0.70034722,  0.80580521,  0.90518299,  0.20417488,  0.53398466,
               0.07235312,  0.31021863,  0.48205846,  0.01524381,  0.2038102 ,
               0.37072095,  0.17295328,  0.10696968,  0.6513628 ,  0.26011242,
               0.12417442,  0.81559222,  0.14103457,  0.60446075,  0.45576331,
               0.00964699,  0.57440144,  0.43893809,  0.61413005,  0.58554426,
               0.63515711,  0.19226281,  0.41100914,  0.6674255 ,  0.79294186,
               0.64843011,  0.650293  ,  0.09533721,  0.08999868,  0.16825047,
               0.08558679,  0.86975343,  0.28538434,  0.0209652 ,  0.88545264,
               0.00670918,  0.74201548,  0.37563394,  0.8104417 ,  0.63159401,
               0.58322353,  0.53818438,  0.59426742,  0.65234803,  0.59893537,
               0.80808906,  0.33306304,  0.03678149,  0.64848648,  0.54587052,
               0.76773665,  0.99789454,  0.80018029,  0.10438197,  0.91214243,
               0.49621162,  0.37105612,  0.6094678 ,  0.07922984,  0.13474576,
               0.36269972,  0.87265867,  0.66129417,  0.2706485 ,  0.81680435])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.80569438,  0.86753699,  0.93846811,  0.96133479,  0.13712275,
               0.54346184,  0.37541518,  0.22042838,  0.59549205,  0.4549469 ,
               0.17234233,  0.25774142,  0.95740691,  0.73266965,  0.04471597,
               0.5352697 ,  0.61716623,  0.61116909,  0.93821607,  0.80437521,
               0.55580856,  0.95971452,  0.22039371,  0.37913294,  0.76503545,
               0.10248614,  0.34302619,  0.38109101,  0.86110044,  0.30973728,
               0.73309147,  0.74536063,  0.59058675,  0.30557911,  0.82889229,
               0.40031171,  0.02625298,  0.38602792,  0.87832581,  0.21168825,
               0.98207002,  0.21313544,  0.75756522,  0.02963407,  0.95841244,
               0.8472559 ,  0.80397204,  0.55076356,  0.0360145 ,  0.57930453,
               0.30564139,  0.55433805,  0.29257683,  0.56101662,  0.72437654,
               0.47179656,  0.07983698,  0.91376072,  0.47830721,  0.0059759 ,
               0.44943065,  0.1483619 ,  0.02078099,  0.94287255,  0.7127332 ,
               0.28968694,  0.98929217,  0.22274752,  0.42235932,  0.18378044,
               0.42437658,  0.32399098,  0.24343224,  0.10731932,  0.1649589 ,
               0.58636307,  0.06739481,  0.40547317,  0.75699204,  0.41816226,
               0.56021856,  0.07994036,  0.20555185,  0.54685215,  0.54625086,
               0.17232326,  0.88768174,  0.25210829,  0.13583637,  0.86360225,
               0.28571032,  0.67165508,  0.0675088 ,  0.68022912,  0.62508994,
               0.41286653,  0.92636674,  0.58990427,  0.47938435,  0.01732538])}]]


