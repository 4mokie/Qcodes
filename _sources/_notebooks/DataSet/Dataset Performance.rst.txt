
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='306389c9-065e-44d1-9481-26031fd8edf7'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='b4f26645-b292-4a53-8c30-1880c983ab88'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.91196738479432],
     [0.0568258429440809],
     [0.170246745709278],
     [0.889515183954221],
     [0.109382874023945],
     [0.629467285777578],
     [0.340012230110264],
     [0.728612032743054],
     [0.0544871951946941],
     [0.285807138581261],
     [0.353960861261747],
     [0.110219011437296],
     [0.335788936673585],
     [0.0972875631489493],
     [0.891151883230408],
     [0.699150100721082],
     [0.751436357925585],
     [0.240544785056688],
     [0.545220277200517],
     [0.466649463205675],
     [0.586523751584162],
     [0.404969644337836],
     [0.0108770916579918],
     [0.446542043524111],
     [0.530755538061352],
     [0.513672803915334],
     [0.949701675115785],
     [0.544640261890215],
     [0.974294857323689],
     [0.260947653330975],
     [0.889050099888678],
     [0.0651356568509324],
     [0.89257347754689],
     [0.620928986636659],
     [0.743827376913909],
     [0.843346830192266],
     [0.0922776672683894],
     [0.233641757101187],
     [0.285064980502676],
     [0.354749264906535],
     [0.982739963235303],
     [0.791972973283983],
     [0.739338474088885],
     [0.423004030149351],
     [0.528731252156127],
     [0.614744608660152],
     [0.419754782521213],
     [0.23977237787062],
     [0.667500232991187],
     [0.321904237277347],
     [0.820731029641946],
     [0.364825484387191],
     [0.761104412662714],
     [0.926496746492883],
     [0.893512679746775],
     [0.0906288781924308],
     [0.745908315300035],
     [0.693446010495919],
     [0.398169440867028],
     [0.931131591924801],
     [0.459461615887983],
     [0.373273130595797],
     [0.434939764178468],
     [0.269118115644795],
     [0.382451316827852],
     [0.337339632627445],
     [0.153619651046772],
     [0.439752521122989],
     [0.0238923417141688],
     [0.0107144801418478],
     [0.510745244590093],
     [0.923644984315103],
     [0.0516897881610541],
     [0.476444181538785],
     [0.969687172209455],
     [0.15023846803512],
     [0.0802208972173151],
     [0.769457636737177],
     [0.205188198286798],
     [0.481173943193789],
     [0.0599459019851851],
     [0.408930778921778],
     [0.450636854243743],
     [0.621274695771005],
     [0.621307770571683],
     [0.573359084538448],
     [0.127148566205505],
     [0.625493559765679],
     [0.10830253792042],
     [0.345600904647552],
     [0.782111022073176],
     [0.109251816693429],
     [0.861736225601774],
     [0.637164676766129],
     [0.382219531058919],
     [0.964231768292908],
     [0.783421688561705],
     [0.0716068819318237],
     [0.604070685474171],
     [0.184747415981952]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.4758177])],
     [array([ 0.32327186])],
     [array([ 0.32963994])],
     [array([ 0.85711149])],
     [array([ 0.80536014])],
     [array([ 0.45669405])],
     [array([ 0.00198159])],
     [array([ 0.53352622])],
     [array([ 0.10300176])],
     [array([ 0.24236583])],
     [array([ 0.17169884])],
     [array([ 0.2166982])],
     [array([ 0.52510796])],
     [array([ 0.95592311])],
     [array([ 0.67215458])],
     [array([ 0.65309235])],
     [array([ 0.22797911])],
     [array([ 0.07236937])],
     [array([ 0.22211212])],
     [array([ 0.4364757])],
     [array([ 0.13211344])],
     [array([ 0.41247386])],
     [array([ 0.79461193])],
     [array([ 0.81386373])],
     [array([ 0.13195813])],
     [array([ 0.15856682])],
     [array([ 0.87005662])],
     [array([ 0.88714823])],
     [array([ 0.50652804])],
     [array([ 0.13868593])],
     [array([ 0.71184525])],
     [array([ 0.13999608])],
     [array([ 0.44504724])],
     [array([ 0.56528197])],
     [array([ 0.41805843])],
     [array([ 0.0887212])],
     [array([ 0.34247846])],
     [array([ 0.07594228])],
     [array([ 0.29495115])],
     [array([ 0.90606513])],
     [array([ 0.14709874])],
     [array([ 0.45762018])],
     [array([ 0.34367297])],
     [array([ 0.43800889])],
     [array([ 0.08522199])],
     [array([ 0.77395892])],
     [array([ 0.15942618])],
     [array([ 0.32778525])],
     [array([ 0.55737415])],
     [array([ 0.80383856])],
     [array([ 0.94327539])],
     [array([ 0.14848239])],
     [array([ 0.51688728])],
     [array([ 0.02777219])],
     [array([ 0.79516175])],
     [array([ 0.46368302])],
     [array([ 0.42693187])],
     [array([ 0.28025295])],
     [array([ 0.63550622])],
     [array([ 0.27242749])],
     [array([ 0.02038611])],
     [array([ 0.59832463])],
     [array([ 0.01397921])],
     [array([ 0.69881707])],
     [array([ 0.2866823])],
     [array([ 0.9373207])],
     [array([ 0.1419296])],
     [array([ 0.50066912])],
     [array([ 0.05610542])],
     [array([ 0.11809841])],
     [array([ 0.28097987])],
     [array([ 0.92618508])],
     [array([ 0.2128166])],
     [array([ 0.83717096])],
     [array([ 0.19864322])],
     [array([ 0.73265949])],
     [array([ 0.27892066])],
     [array([ 0.00797727])],
     [array([ 0.55950647])],
     [array([ 0.31069108])],
     [array([ 0.41604409])],
     [array([ 0.70226108])],
     [array([ 0.95110042])],
     [array([ 0.03521424])],
     [array([ 0.52282573])],
     [array([ 0.28475883])],
     [array([ 0.28967011])],
     [array([ 0.86310569])],
     [array([ 0.76201153])],
     [array([ 0.2805864])],
     [array([ 0.05050235])],
     [array([ 0.49169176])],
     [array([ 0.75954966])],
     [array([ 0.26555687])],
     [array([ 0.09634835])],
     [array([ 0.64043752])],
     [array([ 0.54869786])],
     [array([ 0.76419614])],
     [array([ 0.35776869])],
     [array([ 0.143689])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.4758177 ,  0.32327186,  0.32963994,  0.85711149,  0.80536014,
            0.45669405,  0.00198159,  0.53352622,  0.10300176,  0.24236583,
            0.17169884,  0.2166982 ,  0.52510796,  0.95592311,  0.67215458,
            0.65309235,  0.22797911,  0.07236937,  0.22211212,  0.4364757 ,
            0.13211344,  0.41247386,  0.79461193,  0.81386373,  0.13195813,
            0.15856682,  0.87005662,  0.88714823,  0.50652804,  0.13868593,
            0.71184525,  0.13999608,  0.44504724,  0.56528197,  0.41805843,
            0.0887212 ,  0.34247846,  0.07594228,  0.29495115,  0.90606513,
            0.14709874,  0.45762018,  0.34367297,  0.43800889,  0.08522199,
            0.77395892,  0.15942618,  0.32778525,  0.55737415,  0.80383856,
            0.94327539,  0.14848239,  0.51688728,  0.02777219,  0.79516175,
            0.46368302,  0.42693187,  0.28025295,  0.63550622,  0.27242749,
            0.02038611,  0.59832463,  0.01397921,  0.69881707,  0.2866823 ,
            0.9373207 ,  0.1419296 ,  0.50066912,  0.05610542,  0.11809841,
            0.28097987,  0.92618508,  0.2128166 ,  0.83717096,  0.19864322,
            0.73265949,  0.27892066,  0.00797727,  0.55950647,  0.31069108,
            0.41604409,  0.70226108,  0.95110042,  0.03521424,  0.52282573,
            0.28475883,  0.28967011,  0.86310569,  0.76201153,  0.2805864 ,
            0.05050235,  0.49169176,  0.75954966,  0.26555687,  0.09634835,
            0.64043752,  0.54869786,  0.76419614,  0.35776869,  0.143689  ])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.91196738,  0.05682584,  0.17024675,  0.88951518,  0.10938287,
               0.62946729,  0.34001223,  0.72861203,  0.0544872 ,  0.28580714,
               0.35396086,  0.11021901,  0.33578894,  0.09728756,  0.89115188,
               0.6991501 ,  0.75143636,  0.24054479,  0.54522028,  0.46664946,
               0.58652375,  0.40496964,  0.01087709,  0.44654204,  0.53075554,
               0.5136728 ,  0.94970168,  0.54464026,  0.97429486,  0.26094765,
               0.8890501 ,  0.06513566,  0.89257348,  0.62092899,  0.74382738,
               0.84334683,  0.09227767,  0.23364176,  0.28506498,  0.35474926,
               0.98273996,  0.79197297,  0.73933847,  0.42300403,  0.52873125,
               0.61474461,  0.41975478,  0.23977238,  0.66750023,  0.32190424,
               0.82073103,  0.36482548,  0.76110441,  0.92649675,  0.89351268,
               0.09062888,  0.74590832,  0.69344601,  0.39816944,  0.93113159,
               0.45946162,  0.37327313,  0.43493976,  0.26911812,  0.38245132,
               0.33733963,  0.15361965,  0.43975252,  0.02389234,  0.01071448,
               0.51074524,  0.92364498,  0.05168979,  0.47644418,  0.96968717,
               0.15023847,  0.0802209 ,  0.76945764,  0.2051882 ,  0.48117394,
               0.0599459 ,  0.40893078,  0.45063685,  0.6212747 ,  0.62130777,
               0.57335908,  0.12714857,  0.62549356,  0.10830254,  0.3456009 ,
               0.78211102,  0.10925182,  0.86173623,  0.63716468,  0.38221953,
               0.96423177,  0.78342169,  0.07160688,  0.60407069,  0.18474742])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.60706532,  0.82505632,  0.34291671,  0.46066745,  0.41750052,
               0.24383713,  0.05319802,  0.42099382,  0.34025178,  0.14929666,
               0.54465958,  0.97838107,  0.63800047,  0.35420121,  0.95413095,
               0.93304634,  0.1773628 ,  0.9789856 ,  0.43800404,  0.03923369,
               0.48363431,  0.47402914,  0.7295488 ,  0.83881552,  0.32951546,
               0.01890319,  0.6569446 ,  0.08575276,  0.54432573,  0.08207397,
               0.49503007,  0.86249766,  0.91872672,  0.24456899,  0.58683663,
               0.05690934,  0.69023298,  0.30213861,  0.71148046,  0.23223549,
               0.69824488,  0.05966491,  0.25646868,  0.70468175,  0.77417259,
               0.51797643,  0.66494415,  0.94416816,  0.87288657,  0.54196143,
               0.08920361,  0.87190661,  0.22052317,  0.03937562,  0.09684683,
               0.13589519,  0.19444138,  0.58464793,  0.4156014 ,  0.66959369,
               0.54196101,  0.55521682,  0.98524007,  0.4318768 ,  0.74719158,
               0.67979958,  0.76333906,  0.77548348,  0.78730884,  0.22063524,
               0.80066703,  0.57108662,  0.79799523,  0.02659691,  0.44222117,
               0.01094724,  0.23751058,  0.82133145,  0.76930527,  0.51158619,
               0.64318123,  0.46211836,  0.96322107,  0.64008478,  0.07967211,
               0.08895606,  0.67696664,  0.01932887,  0.01044022,  0.37639481,
               0.94776952,  0.92729379,  0.15096447,  0.30983711,  0.84754862,
               0.64483404,  0.69192426,  0.54699956,  0.05770898,  0.53928981])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.68161145,  0.40183097,  0.69543964,  0.34374732,  0.83144641,
               0.4863014 ,  0.7020711 ,  0.33995604,  0.55226819,  0.16191882,
               0.90635231,  0.34146798,  0.4335424 ,  0.30558503,  0.8403402 ,
               0.66065168,  0.91060445,  0.51741266,  0.50292271,  0.85099236,
               0.44253231,  0.84697256,  0.19198009,  0.91207827,  0.99355281,
               0.70703216,  0.74110563,  0.06504074,  0.16938485,  0.05082943,
               0.88261056,  0.34191626,  0.34894822,  0.19258967,  0.11388904,
               0.57091662,  0.73345376,  0.06096972,  0.88723073,  0.43452975,
               0.94085947,  0.4056515 ,  0.78438072,  0.06869243,  0.08413639,
               0.26068764,  0.81309193,  0.56032337,  0.44990098,  0.52231557,
               0.1209361 ,  0.01859162,  0.61566907,  0.66518663,  0.90762194,
               0.33324716,  0.85683938,  0.76688454,  0.96358658,  0.00583127,
               0.80687667,  0.00482058,  0.20906657,  0.8411971 ,  0.14026445,
               0.82876198,  0.29156747,  0.61151659,  0.07040724,  0.36146017,
               0.33534775,  0.91648428,  0.32895458,  0.80507616,  0.03861405,
               0.15904487,  0.85452948,  0.01172035,  0.39687023,  0.94806022,
               0.14628216,  0.38756209,  0.50371148,  0.78384477,  0.43869962,
               0.38904638,  0.86441625,  0.26939157,  0.26026971,  0.56637564,
               0.51800546,  0.09599343,  0.14497567,  0.48843387,  0.79195575,
               0.99784518,  0.44745379,  0.60769308,  0.87295252,  0.17866225])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.56806339,  0.23556918,  0.03354573,  0.09708779,  0.48214512,
               0.910559  ,  0.24696056,  0.19115187,  0.25803413,  0.97308364,
               0.32860859,  0.06226276,  0.48054564,  0.46956933,  0.09297986,
               0.96856388,  0.58872129,  0.4117373 ,  0.80620944,  0.68805488,
               0.68514743,  0.58252836,  0.30565925,  0.4302325 ,  0.13384798,
               0.82128083,  0.58308641,  0.83111092,  0.54039694,  0.11440732,
               0.17968649,  0.27550845,  0.72042395,  0.60556347,  0.85377167,
               0.48910011,  0.2896064 ,  0.30078876,  0.69161537,  0.45473603,
               0.66114091,  0.94607879,  0.47853871,  0.65816882,  0.2411998 ,
               0.13759975,  0.61050357,  0.20848876,  0.47805634,  0.78089651,
               0.17977519,  0.48551934,  0.17350633,  0.88532522,  0.70490305,
               0.01336747,  0.2209978 ,  0.07499538,  0.60594724,  0.46656468,
               0.28045551,  0.39609403,  0.98028691,  0.61207117,  0.57886154,
               0.44978346,  0.93375944,  0.09898693,  0.9276245 ,  0.90469667,
               0.9745165 ,  0.28957619,  0.99624848,  0.58587774,  0.40928087,
               0.96644212,  0.55228598,  0.70216938,  0.81634557,  0.07013451,
               0.30422576,  0.17280385,  0.66099164,  0.68254677,  0.30594733,
               0.55321573,  0.89518266,  0.2370334 ,  0.43847766,  0.25980887,
               0.40705779,  0.99657414,  0.04660519,  0.79052771,  0.15876919,
               0.88469233,  0.54646745,  0.62298267,  0.2723605 ,  0.65575055])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.91196738,  0.05682584,  0.17024675,  0.88951518,  0.10938287,
               0.62946729,  0.34001223,  0.72861203,  0.0544872 ,  0.28580714,
               0.35396086,  0.11021901,  0.33578894,  0.09728756,  0.89115188,
               0.6991501 ,  0.75143636,  0.24054479,  0.54522028,  0.46664946,
               0.58652375,  0.40496964,  0.01087709,  0.44654204,  0.53075554,
               0.5136728 ,  0.94970168,  0.54464026,  0.97429486,  0.26094765,
               0.8890501 ,  0.06513566,  0.89257348,  0.62092899,  0.74382738,
               0.84334683,  0.09227767,  0.23364176,  0.28506498,  0.35474926,
               0.98273996,  0.79197297,  0.73933847,  0.42300403,  0.52873125,
               0.61474461,  0.41975478,  0.23977238,  0.66750023,  0.32190424,
               0.82073103,  0.36482548,  0.76110441,  0.92649675,  0.89351268,
               0.09062888,  0.74590832,  0.69344601,  0.39816944,  0.93113159,
               0.45946162,  0.37327313,  0.43493976,  0.26911812,  0.38245132,
               0.33733963,  0.15361965,  0.43975252,  0.02389234,  0.01071448,
               0.51074524,  0.92364498,  0.05168979,  0.47644418,  0.96968717,
               0.15023847,  0.0802209 ,  0.76945764,  0.2051882 ,  0.48117394,
               0.0599459 ,  0.40893078,  0.45063685,  0.6212747 ,  0.62130777,
               0.57335908,  0.12714857,  0.62549356,  0.10830254,  0.3456009 ,
               0.78211102,  0.10925182,  0.86173623,  0.63716468,  0.38221953,
               0.96423177,  0.78342169,  0.07160688,  0.60407069,  0.18474742])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.60706532,  0.82505632,  0.34291671,  0.46066745,  0.41750052,
               0.24383713,  0.05319802,  0.42099382,  0.34025178,  0.14929666,
               0.54465958,  0.97838107,  0.63800047,  0.35420121,  0.95413095,
               0.93304634,  0.1773628 ,  0.9789856 ,  0.43800404,  0.03923369,
               0.48363431,  0.47402914,  0.7295488 ,  0.83881552,  0.32951546,
               0.01890319,  0.6569446 ,  0.08575276,  0.54432573,  0.08207397,
               0.49503007,  0.86249766,  0.91872672,  0.24456899,  0.58683663,
               0.05690934,  0.69023298,  0.30213861,  0.71148046,  0.23223549,
               0.69824488,  0.05966491,  0.25646868,  0.70468175,  0.77417259,
               0.51797643,  0.66494415,  0.94416816,  0.87288657,  0.54196143,
               0.08920361,  0.87190661,  0.22052317,  0.03937562,  0.09684683,
               0.13589519,  0.19444138,  0.58464793,  0.4156014 ,  0.66959369,
               0.54196101,  0.55521682,  0.98524007,  0.4318768 ,  0.74719158,
               0.67979958,  0.76333906,  0.77548348,  0.78730884,  0.22063524,
               0.80066703,  0.57108662,  0.79799523,  0.02659691,  0.44222117,
               0.01094724,  0.23751058,  0.82133145,  0.76930527,  0.51158619,
               0.64318123,  0.46211836,  0.96322107,  0.64008478,  0.07967211,
               0.08895606,  0.67696664,  0.01932887,  0.01044022,  0.37639481,
               0.94776952,  0.92729379,  0.15096447,  0.30983711,  0.84754862,
               0.64483404,  0.69192426,  0.54699956,  0.05770898,  0.53928981])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.68161145,  0.40183097,  0.69543964,  0.34374732,  0.83144641,
               0.4863014 ,  0.7020711 ,  0.33995604,  0.55226819,  0.16191882,
               0.90635231,  0.34146798,  0.4335424 ,  0.30558503,  0.8403402 ,
               0.66065168,  0.91060445,  0.51741266,  0.50292271,  0.85099236,
               0.44253231,  0.84697256,  0.19198009,  0.91207827,  0.99355281,
               0.70703216,  0.74110563,  0.06504074,  0.16938485,  0.05082943,
               0.88261056,  0.34191626,  0.34894822,  0.19258967,  0.11388904,
               0.57091662,  0.73345376,  0.06096972,  0.88723073,  0.43452975,
               0.94085947,  0.4056515 ,  0.78438072,  0.06869243,  0.08413639,
               0.26068764,  0.81309193,  0.56032337,  0.44990098,  0.52231557,
               0.1209361 ,  0.01859162,  0.61566907,  0.66518663,  0.90762194,
               0.33324716,  0.85683938,  0.76688454,  0.96358658,  0.00583127,
               0.80687667,  0.00482058,  0.20906657,  0.8411971 ,  0.14026445,
               0.82876198,  0.29156747,  0.61151659,  0.07040724,  0.36146017,
               0.33534775,  0.91648428,  0.32895458,  0.80507616,  0.03861405,
               0.15904487,  0.85452948,  0.01172035,  0.39687023,  0.94806022,
               0.14628216,  0.38756209,  0.50371148,  0.78384477,  0.43869962,
               0.38904638,  0.86441625,  0.26939157,  0.26026971,  0.56637564,
               0.51800546,  0.09599343,  0.14497567,  0.48843387,  0.79195575,
               0.99784518,  0.44745379,  0.60769308,  0.87295252,  0.17866225])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.83047123,  0.73566331,  0.90344506,  0.38630896,  0.91874415,
               0.87105214,  0.12963674,  0.91189156,  0.1314257 ,  0.78219901,
               0.21805739,  0.30269594,  0.26548743,  0.38633215,  0.77967472,
               0.18589551,  0.75788462,  0.48160111,  0.96772097,  0.97612043,
               0.05861059,  0.44024984,  0.68755955,  0.40891351,  0.99716973,
               0.61987461,  0.59253873,  0.23634   ,  0.70840602,  0.75361203,
               0.6657762 ,  0.98846357,  0.51140112,  0.28989206,  0.3198536 ,
               0.78807636,  0.57250425,  0.02901874,  0.94004832,  0.38810801,
               0.97201479,  0.40256658,  0.17982763,  0.82507646,  0.79237663,
               0.86155274,  0.55157379,  0.42724286,  0.06200299,  0.54037296,
               0.65518093,  0.02942587,  0.29823667,  0.83813902,  0.57769705,
               0.03963219,  0.6253974 ,  0.55114762,  0.0746679 ,  0.25066702,
               0.66717124,  0.09470337,  0.80049601,  0.51541331,  0.26601221,
               0.187919  ,  0.50396758,  0.49371597,  0.11610556,  0.64729764,
               0.60644094,  0.39889952,  0.28746712,  0.9298439 ,  0.25429578,
               0.56532987,  0.51784692,  0.19617925,  0.41263124,  0.9357992 ,
               0.91067998,  0.63313442,  0.56015968,  0.01863809,  0.94057928,
               0.59444337,  0.99921095,  0.55237048,  0.28195825,  0.80574865,
               0.8181087 ,  0.84103884,  0.8760243 ,  0.69792025,  0.1283869 ,
               0.16220471,  0.85187082,  0.86633456,  0.49232681,  0.34398745])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.4758177 ,  0.32327186,  0.32963994,  0.85711149,  0.80536014,
               0.45669405,  0.00198159,  0.53352622,  0.10300176,  0.24236583,
               0.17169884,  0.2166982 ,  0.52510796,  0.95592311,  0.67215458,
               0.65309235,  0.22797911,  0.07236937,  0.22211212,  0.4364757 ,
               0.13211344,  0.41247386,  0.79461193,  0.81386373,  0.13195813,
               0.15856682,  0.87005662,  0.88714823,  0.50652804,  0.13868593,
               0.71184525,  0.13999608,  0.44504724,  0.56528197,  0.41805843,
               0.0887212 ,  0.34247846,  0.07594228,  0.29495115,  0.90606513,
               0.14709874,  0.45762018,  0.34367297,  0.43800889,  0.08522199,
               0.77395892,  0.15942618,  0.32778525,  0.55737415,  0.80383856,
               0.94327539,  0.14848239,  0.51688728,  0.02777219,  0.79516175,
               0.46368302,  0.42693187,  0.28025295,  0.63550622,  0.27242749,
               0.02038611,  0.59832463,  0.01397921,  0.69881707,  0.2866823 ,
               0.9373207 ,  0.1419296 ,  0.50066912,  0.05610542,  0.11809841,
               0.28097987,  0.92618508,  0.2128166 ,  0.83717096,  0.19864322,
               0.73265949,  0.27892066,  0.00797727,  0.55950647,  0.31069108,
               0.41604409,  0.70226108,  0.95110042,  0.03521424,  0.52282573,
               0.28475883,  0.28967011,  0.86310569,  0.76201153,  0.2805864 ,
               0.05050235,  0.49169176,  0.75954966,  0.26555687,  0.09634835,
               0.64043752,  0.54869786,  0.76419614,  0.35776869,  0.143689  ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([  9.25501269e-01,   5.48534147e-01,   2.03802137e-01,
                6.39548471e-01,   2.68933257e-01,   5.87157026e-01,
                6.50030353e-01,   7.58248152e-01,   4.83751767e-01,
                3.51545751e-01,   8.59580705e-01,   1.50438054e-01,
                1.78999110e-01,   3.11935624e-01,   3.01702866e-01,
                9.33996234e-01,   6.05572758e-01,   7.06200558e-02,
                6.68539706e-01,   9.22412989e-02,   8.66141322e-01,
                3.00736465e-01,   7.13765308e-01,   3.26319848e-01,
                3.13042025e-01,   4.67968038e-01,   8.21515044e-01,
                4.33165473e-01,   8.20166275e-01,   5.95732451e-01,
                4.89795343e-01,   8.49821523e-02,   5.43296826e-01,
                2.70430589e-01,   9.17354671e-01,   7.87771393e-01,
                9.22157289e-01,   8.87463929e-01,   2.97479680e-01,
                8.27156479e-01,   8.59228902e-01,   4.85919168e-01,
                4.96237419e-01,   2.98031835e-01,   9.72427940e-01,
                1.72317251e-01,   4.08211866e-01,   4.13687882e-01,
                9.11905499e-01,   2.99401128e-01,   3.24788544e-02,
                3.01697636e-01,   7.25196337e-01,   1.13599925e-01,
                1.25077608e-01,   2.94005324e-02,   9.76096573e-01,
                2.54288414e-01,   9.36521886e-01,   3.38498270e-01,
                6.19376404e-04,   5.48933916e-01,   2.99394121e-01,
                7.05534779e-01,   7.13976963e-01,   6.04226671e-01,
                2.42254673e-01,   3.15726513e-01,   7.51181697e-01,
                7.91114067e-01,   2.64224146e-01,   5.07126680e-01,
                6.31581046e-01,   5.63772064e-01,   3.24291271e-01,
                6.14724096e-01,   6.85849519e-01,   6.07136415e-01,
                6.57213337e-01,   8.52372410e-01,   8.78892402e-01,
                4.45171277e-02,   2.24751994e-01,   5.62856888e-01,
                9.72739548e-01,   8.97742759e-01,   4.12571110e-01,
                8.24799178e-01,   2.16679483e-01,   4.48252512e-01,
                8.64066789e-01,   1.92448205e-01,   1.04257289e-01,
                2.98753890e-01,   6.02683181e-01,   4.97186243e-01,
                3.19771204e-02,   8.67160935e-01,   7.26178728e-01,
                7.77203457e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.41935905,  0.16407259,  0.91467845,  0.94157388,  0.555152  ,
               0.78267025,  0.92399468,  0.83920268,  0.62516071,  0.03341539,
               0.50874676,  0.48777737,  0.57690712,  0.98383354,  0.65229474,
               0.72133005,  0.61789954,  0.37213627,  0.47711845,  0.10733427,
               0.13205189,  0.14451551,  0.35163901,  0.49306046,  0.03520176,
               0.38791546,  0.11661513,  0.96632437,  0.48218089,  0.67261495,
               0.76724527,  0.73360131,  0.84643026,  0.21141399,  0.29290426,
               0.41408752,  0.26037555,  0.70413699,  0.40393048,  0.74379974,
               0.80369637,  0.84393582,  0.29484367,  0.50120594,  0.72212471,
               0.20740815,  0.68078666,  0.48847461,  0.10784774,  0.96787978,
               0.8645722 ,  0.25391718,  0.22168715,  0.89487421,  0.26900899,
               0.95101946,  0.60377675,  0.65143123,  0.55965399,  0.0288931 ,
               0.46608162,  0.22164368,  0.69046186,  0.57752972,  0.15975243,
               0.70654507,  0.3453187 ,  0.54927307,  0.44673059,  0.86647637,
               0.56130256,  0.82485493,  0.83462973,  0.86612497,  0.94065813,
               0.27799069,  0.93974618,  0.42525586,  0.643846  ,  0.69472065,
               0.1173089 ,  0.59025995,  0.16713257,  0.82853818,  0.68824485,
               0.17631391,  0.96997829,  0.74951323,  0.40041901,  0.82302759,
               0.18477251,  0.47927424,  0.32217997,  0.31447153,  0.47503131,
               0.89293466,  0.69088752,  0.72129723,  0.24750218,  0.38655427])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([  8.85755154e-01,   2.47148380e-01,   9.17029893e-01,
                3.59186607e-01,   7.76995585e-01,   9.77551077e-01,
                3.79291209e-01,   8.58659142e-01,   3.46226666e-01,
                9.92578883e-01,   2.02912832e-01,   1.76297262e-01,
                7.49354172e-01,   5.73090941e-01,   1.61330762e-01,
                3.36629800e-01,   2.48219828e-04,   2.03875800e-01,
                4.71135952e-01,   7.47173022e-01,   7.35284859e-01,
                8.87929767e-01,   4.19243792e-01,   4.34464170e-01,
                1.03993700e-01,   1.46040169e-01,   2.63483289e-01,
                2.92787271e-01,   1.47926454e-01,   1.24638243e-01,
                6.59167646e-01,   5.41826384e-01,   8.01944301e-01,
                7.55526101e-01,   7.90081137e-01,   1.49658189e-01,
                3.31990688e-01,   4.63015966e-01,   5.79508843e-01,
                5.31980107e-01,   1.21138705e-01,   8.56462972e-01,
                8.68297769e-01,   6.75134866e-01,   9.58495899e-01,
                2.15969545e-01,   1.01413744e-02,   8.76745357e-01,
                3.97526892e-02,   2.73195159e-01,   3.04842974e-01,
                8.78522418e-01,   6.18099260e-01,   6.74844517e-02,
                7.16737810e-01,   8.30811956e-01,   4.42202821e-01,
                8.40822765e-02,   3.10484249e-02,   5.64094172e-01,
                2.04138713e-01,   9.54314658e-01,   9.51123720e-01,
                5.66469722e-02,   8.09519743e-01,   1.12655250e-01,
                5.39602427e-01,   8.63593155e-01,   8.05159314e-01,
                3.04472576e-01,   1.51646373e-01,   9.91560068e-02,
                3.03499512e-01,   6.72556315e-01,   2.56672068e-01,
                6.92334169e-01,   7.63679718e-02,   9.14182785e-01,
                9.15971406e-01,   1.71732063e-01,   2.21998362e-01,
                2.37496182e-01,   6.03299483e-01,   9.07660785e-01,
                3.69753307e-01,   4.61118867e-01,   4.16911344e-01,
                1.30753339e-01,   7.47377233e-02,   9.11524058e-01,
                8.98825635e-01,   1.18667041e-02,   4.53446147e-01,
                6.36333023e-01,   9.17630907e-02,   5.52780173e-01,
                9.76856967e-01,   9.58029601e-01,   8.34760539e-01,
                3.32471704e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.4758177 ,  0.32327186,  0.32963994,  0.85711149,  0.80536014,
               0.45669405,  0.00198159,  0.53352622,  0.10300176,  0.24236583,
               0.17169884,  0.2166982 ,  0.52510796,  0.95592311,  0.67215458,
               0.65309235,  0.22797911,  0.07236937,  0.22211212,  0.4364757 ,
               0.13211344,  0.41247386,  0.79461193,  0.81386373,  0.13195813,
               0.15856682,  0.87005662,  0.88714823,  0.50652804,  0.13868593,
               0.71184525,  0.13999608,  0.44504724,  0.56528197,  0.41805843,
               0.0887212 ,  0.34247846,  0.07594228,  0.29495115,  0.90606513,
               0.14709874,  0.45762018,  0.34367297,  0.43800889,  0.08522199,
               0.77395892,  0.15942618,  0.32778525,  0.55737415,  0.80383856,
               0.94327539,  0.14848239,  0.51688728,  0.02777219,  0.79516175,
               0.46368302,  0.42693187,  0.28025295,  0.63550622,  0.27242749,
               0.02038611,  0.59832463,  0.01397921,  0.69881707,  0.2866823 ,
               0.9373207 ,  0.1419296 ,  0.50066912,  0.05610542,  0.11809841,
               0.28097987,  0.92618508,  0.2128166 ,  0.83717096,  0.19864322,
               0.73265949,  0.27892066,  0.00797727,  0.55950647,  0.31069108,
               0.41604409,  0.70226108,  0.95110042,  0.03521424,  0.52282573,
               0.28475883,  0.28967011,  0.86310569,  0.76201153,  0.2805864 ,
               0.05050235,  0.49169176,  0.75954966,  0.26555687,  0.09634835,
               0.64043752,  0.54869786,  0.76419614,  0.35776869,  0.143689  ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([  9.25501269e-01,   5.48534147e-01,   2.03802137e-01,
                6.39548471e-01,   2.68933257e-01,   5.87157026e-01,
                6.50030353e-01,   7.58248152e-01,   4.83751767e-01,
                3.51545751e-01,   8.59580705e-01,   1.50438054e-01,
                1.78999110e-01,   3.11935624e-01,   3.01702866e-01,
                9.33996234e-01,   6.05572758e-01,   7.06200558e-02,
                6.68539706e-01,   9.22412989e-02,   8.66141322e-01,
                3.00736465e-01,   7.13765308e-01,   3.26319848e-01,
                3.13042025e-01,   4.67968038e-01,   8.21515044e-01,
                4.33165473e-01,   8.20166275e-01,   5.95732451e-01,
                4.89795343e-01,   8.49821523e-02,   5.43296826e-01,
                2.70430589e-01,   9.17354671e-01,   7.87771393e-01,
                9.22157289e-01,   8.87463929e-01,   2.97479680e-01,
                8.27156479e-01,   8.59228902e-01,   4.85919168e-01,
                4.96237419e-01,   2.98031835e-01,   9.72427940e-01,
                1.72317251e-01,   4.08211866e-01,   4.13687882e-01,
                9.11905499e-01,   2.99401128e-01,   3.24788544e-02,
                3.01697636e-01,   7.25196337e-01,   1.13599925e-01,
                1.25077608e-01,   2.94005324e-02,   9.76096573e-01,
                2.54288414e-01,   9.36521886e-01,   3.38498270e-01,
                6.19376404e-04,   5.48933916e-01,   2.99394121e-01,
                7.05534779e-01,   7.13976963e-01,   6.04226671e-01,
                2.42254673e-01,   3.15726513e-01,   7.51181697e-01,
                7.91114067e-01,   2.64224146e-01,   5.07126680e-01,
                6.31581046e-01,   5.63772064e-01,   3.24291271e-01,
                6.14724096e-01,   6.85849519e-01,   6.07136415e-01,
                6.57213337e-01,   8.52372410e-01,   8.78892402e-01,
                4.45171277e-02,   2.24751994e-01,   5.62856888e-01,
                9.72739548e-01,   8.97742759e-01,   4.12571110e-01,
                8.24799178e-01,   2.16679483e-01,   4.48252512e-01,
                8.64066789e-01,   1.92448205e-01,   1.04257289e-01,
                2.98753890e-01,   6.02683181e-01,   4.97186243e-01,
                3.19771204e-02,   8.67160935e-01,   7.26178728e-01,
                7.77203457e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.41935905,  0.16407259,  0.91467845,  0.94157388,  0.555152  ,
               0.78267025,  0.92399468,  0.83920268,  0.62516071,  0.03341539,
               0.50874676,  0.48777737,  0.57690712,  0.98383354,  0.65229474,
               0.72133005,  0.61789954,  0.37213627,  0.47711845,  0.10733427,
               0.13205189,  0.14451551,  0.35163901,  0.49306046,  0.03520176,
               0.38791546,  0.11661513,  0.96632437,  0.48218089,  0.67261495,
               0.76724527,  0.73360131,  0.84643026,  0.21141399,  0.29290426,
               0.41408752,  0.26037555,  0.70413699,  0.40393048,  0.74379974,
               0.80369637,  0.84393582,  0.29484367,  0.50120594,  0.72212471,
               0.20740815,  0.68078666,  0.48847461,  0.10784774,  0.96787978,
               0.8645722 ,  0.25391718,  0.22168715,  0.89487421,  0.26900899,
               0.95101946,  0.60377675,  0.65143123,  0.55965399,  0.0288931 ,
               0.46608162,  0.22164368,  0.69046186,  0.57752972,  0.15975243,
               0.70654507,  0.3453187 ,  0.54927307,  0.44673059,  0.86647637,
               0.56130256,  0.82485493,  0.83462973,  0.86612497,  0.94065813,
               0.27799069,  0.93974618,  0.42525586,  0.643846  ,  0.69472065,
               0.1173089 ,  0.59025995,  0.16713257,  0.82853818,  0.68824485,
               0.17631391,  0.96997829,  0.74951323,  0.40041901,  0.82302759,
               0.18477251,  0.47927424,  0.32217997,  0.31447153,  0.47503131,
               0.89293466,  0.69088752,  0.72129723,  0.24750218,  0.38655427])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.17339592,  0.85419068,  0.90369464,  0.61113105,  0.94066542,
               0.76133682,  0.26685659,  0.01516177,  0.41983699,  0.15462066,
               0.02431005,  0.04827034,  0.58108502,  0.71593174,  0.34816244,
               0.03322549,  0.30492872,  0.9684342 ,  0.16915068,  0.07926278,
               0.42850357,  0.30271564,  0.32942532,  0.46795741,  0.38905727,
               0.20644382,  0.30921276,  0.6467038 ,  0.36697653,  0.16907624,
               0.07844328,  0.07232836,  0.00878341,  0.43471192,  0.67792304,
               0.91548654,  0.61782521,  0.14099985,  0.344612  ,  0.80384202,
               0.77872675,  0.17973558,  0.63652511,  0.056053  ,  0.2824456 ,
               0.12873035,  0.52559526,  0.55911077,  0.52701391,  0.36132683,
               0.86683201,  0.74472074,  0.53053432,  0.58693649,  0.2804982 ,
               0.96038068,  0.45583896,  0.64721601,  0.38341927,  0.50281771,
               0.2656661 ,  0.18362806,  0.06951717,  0.28754221,  0.29892112,
               0.46920258,  0.0577211 ,  0.05885732,  0.1515228 ,  0.77667281,
               0.05527636,  0.60065262,  0.8244024 ,  0.65660816,  0.43861803,
               0.31997011,  0.21555703,  0.81875275,  0.09674966,  0.39300303,
               0.64800118,  0.04234306,  0.88278155,  0.56863145,  0.24377038,
               0.84741823,  0.56192484,  0.22422039,  0.63462337,  0.17049855,
               0.88076202,  0.91468166,  0.33866047,  0.24228682,  0.98728577,
               0.64618628,  0.04082358,  0.13416623,  0.26665515,  0.19432249])}]]


