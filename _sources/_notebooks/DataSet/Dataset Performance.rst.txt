
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='9c1a6bf7-9586-4575-bd47-f881b8e94322'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='4614a0dc-bb1e-43ba-b880-b21a2d59a3db'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.0307480898400483],
     [0.273857279576298],
     [0.078720080213084],
     [0.434820328243384],
     [0.399657978507376],
     [0.0924184890845785],
     [0.20225847132129],
     [0.605710036310514],
     [0.574136552977712],
     [0.902664605859584],
     [0.177145640459884],
     [0.927637556529356],
     [0.062750572357382],
     [0.430019371798862],
     [0.425198343173681],
     [0.0701481814115933],
     [0.14121526262023],
     [0.419841006881013],
     [0.752930962275357],
     [0.451188826393186],
     [0.630428996442526],
     [0.188995918460319],
     [0.914725524664682],
     [0.447814136521882],
     [0.206920682007582],
     [0.844151994961705],
     [0.205958302492724],
     [0.337328509023092],
     [0.458165072109739],
     [0.0445540808064557],
     [0.208019617103088],
     [0.726180912955778],
     [0.646508608249789],
     [0.868698465056923],
     [0.968179785895363],
     [0.438011398712801],
     [0.00410813949137456],
     [0.971850368043269],
     [0.461521732734629],
     [0.939990643915697],
     [0.377984245227048],
     [0.409531110467517],
     [0.0753481999104217],
     [0.81950752638654],
     [0.492980818916268],
     [0.826517377679266],
     [0.113761986278058],
     [0.89839711361464],
     [0.510423381311685],
     [0.461971596024951],
     [0.469052465278256],
     [0.839183946049069],
     [0.219875671253388],
     [0.302308433133303],
     [0.719441420767315],
     [0.357288673533309],
     [0.851639528843733],
     [0.0275154398310685],
     [0.77758213235471],
     [0.600645537206473],
     [0.361699219933234],
     [0.791093719307135],
     [0.790196627504778],
     [0.410238618809891],
     [0.316910800916003],
     [0.228519085235489],
     [0.219065563899672],
     [0.180801988321524],
     [0.546475215800083],
     [0.426890552379613],
     [0.177928514034693],
     [0.6877855560843],
     [0.777999701243425],
     [0.329195260633868],
     [0.0113120923115453],
     [0.299052698064812],
     [0.258635191158976],
     [0.147686744071284],
     [0.175948954794178],
     [0.471325237269823],
     [0.533463055842894],
     [0.543661048371107],
     [0.633225821946267],
     [0.0709958920344772],
     [0.587799627074486],
     [0.276363514559251],
     [0.104273490161327],
     [0.813861828084376],
     [0.65035768938532],
     [0.331981796454516],
     [0.714310505904177],
     [0.257463834666869],
     [0.244131207661831],
     [0.800548379770736],
     [0.210328607917438],
     [0.0834587592784337],
     [0.621431343390337],
     [0.558293547759497],
     [0.515634984094204],
     [0.729646671992887]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.72673179])],
     [array([ 0.88249136])],
     [array([ 0.3623845])],
     [array([ 0.09037306])],
     [array([ 0.30601739])],
     [array([ 0.16752069])],
     [array([ 0.08572164])],
     [array([ 0.96452094])],
     [array([ 0.02096317])],
     [array([ 0.95573461])],
     [array([ 0.72995115])],
     [array([ 0.34197732])],
     [array([ 0.95794971])],
     [array([ 0.40752172])],
     [array([ 0.82713412])],
     [array([ 0.9222018])],
     [array([ 0.22584587])],
     [array([ 0.25890481])],
     [array([ 0.71998439])],
     [array([ 0.59596068])],
     [array([ 0.67507953])],
     [array([ 0.98056726])],
     [array([ 0.84401131])],
     [array([ 0.83732312])],
     [array([ 0.6177098])],
     [array([ 0.64130987])],
     [array([ 0.29902783])],
     [array([ 0.69789899])],
     [array([ 0.28271613])],
     [array([ 0.49067723])],
     [array([ 0.07601814])],
     [array([ 0.66056666])],
     [array([ 0.72777204])],
     [array([ 0.81776132])],
     [array([ 0.6646182])],
     [array([ 0.4412802])],
     [array([ 0.16631613])],
     [array([ 0.51240273])],
     [array([ 0.71449968])],
     [array([ 0.7445905])],
     [array([ 0.15287621])],
     [array([ 0.78015634])],
     [array([ 0.91730374])],
     [array([ 0.86935964])],
     [array([ 0.2332907])],
     [array([ 0.44827353])],
     [array([ 0.67541206])],
     [array([ 0.60854179])],
     [array([ 0.0283731])],
     [array([ 0.87121893])],
     [array([ 0.79209869])],
     [array([ 0.90182038])],
     [array([ 0.83927673])],
     [array([ 0.73259182])],
     [array([ 0.68431118])],
     [array([ 0.23126795])],
     [array([ 0.52989868])],
     [array([ 0.09505298])],
     [array([ 0.95094673])],
     [array([ 0.77367279])],
     [array([ 0.76480608])],
     [array([ 0.5832877])],
     [array([ 0.50747133])],
     [array([ 0.98712404])],
     [array([ 0.65276298])],
     [array([ 0.98595564])],
     [array([ 0.77678598])],
     [array([ 0.01902056])],
     [array([ 0.60767003])],
     [array([ 0.66702658])],
     [array([ 0.54855632])],
     [array([ 0.65871472])],
     [array([ 0.21146526])],
     [array([ 0.80734599])],
     [array([ 0.62625312])],
     [array([ 0.57715982])],
     [array([ 0.4813143])],
     [array([ 0.44061226])],
     [array([ 0.77758951])],
     [array([ 0.74414734])],
     [array([ 0.30254362])],
     [array([ 0.2959915])],
     [array([ 0.90777176])],
     [array([ 0.85374205])],
     [array([ 0.81754382])],
     [array([ 0.52510806])],
     [array([ 0.58064454])],
     [array([ 0.89757394])],
     [array([ 0.55613023])],
     [array([ 0.10399635])],
     [array([ 0.11119251])],
     [array([ 0.82843653])],
     [array([ 0.24082476])],
     [array([ 0.85571826])],
     [array([ 0.85078723])],
     [array([ 0.57407018])],
     [array([ 0.42721636])],
     [array([ 0.52864266])],
     [array([ 0.62952479])],
     [array([ 0.24581681])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.72673179,  0.88249136,  0.3623845 ,  0.09037306,  0.30601739,
            0.16752069,  0.08572164,  0.96452094,  0.02096317,  0.95573461,
            0.72995115,  0.34197732,  0.95794971,  0.40752172,  0.82713412,
            0.9222018 ,  0.22584587,  0.25890481,  0.71998439,  0.59596068,
            0.67507953,  0.98056726,  0.84401131,  0.83732312,  0.6177098 ,
            0.64130987,  0.29902783,  0.69789899,  0.28271613,  0.49067723,
            0.07601814,  0.66056666,  0.72777204,  0.81776132,  0.6646182 ,
            0.4412802 ,  0.16631613,  0.51240273,  0.71449968,  0.7445905 ,
            0.15287621,  0.78015634,  0.91730374,  0.86935964,  0.2332907 ,
            0.44827353,  0.67541206,  0.60854179,  0.0283731 ,  0.87121893,
            0.79209869,  0.90182038,  0.83927673,  0.73259182,  0.68431118,
            0.23126795,  0.52989868,  0.09505298,  0.95094673,  0.77367279,
            0.76480608,  0.5832877 ,  0.50747133,  0.98712404,  0.65276298,
            0.98595564,  0.77678598,  0.01902056,  0.60767003,  0.66702658,
            0.54855632,  0.65871472,  0.21146526,  0.80734599,  0.62625312,
            0.57715982,  0.4813143 ,  0.44061226,  0.77758951,  0.74414734,
            0.30254362,  0.2959915 ,  0.90777176,  0.85374205,  0.81754382,
            0.52510806,  0.58064454,  0.89757394,  0.55613023,  0.10399635,
            0.11119251,  0.82843653,  0.24082476,  0.85571826,  0.85078723,
            0.57407018,  0.42721636,  0.52864266,  0.62952479,  0.24581681])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.03074809,  0.27385728,  0.07872008,  0.43482033,  0.39965798,
               0.09241849,  0.20225847,  0.60571004,  0.57413655,  0.90266461,
               0.17714564,  0.92763756,  0.06275057,  0.43001937,  0.42519834,
               0.07014818,  0.14121526,  0.41984101,  0.75293096,  0.45118883,
               0.630429  ,  0.18899592,  0.91472552,  0.44781414,  0.20692068,
               0.84415199,  0.2059583 ,  0.33732851,  0.45816507,  0.04455408,
               0.20801962,  0.72618091,  0.64650861,  0.86869847,  0.96817979,
               0.4380114 ,  0.00410814,  0.97185037,  0.46152173,  0.93999064,
               0.37798425,  0.40953111,  0.0753482 ,  0.81950753,  0.49298082,
               0.82651738,  0.11376199,  0.89839711,  0.51042338,  0.4619716 ,
               0.46905247,  0.83918395,  0.21987567,  0.30230843,  0.71944142,
               0.35728867,  0.85163953,  0.02751544,  0.77758213,  0.60064554,
               0.36169922,  0.79109372,  0.79019663,  0.41023862,  0.3169108 ,
               0.22851909,  0.21906556,  0.18080199,  0.54647522,  0.42689055,
               0.17792851,  0.68778556,  0.7779997 ,  0.32919526,  0.01131209,
               0.2990527 ,  0.25863519,  0.14768674,  0.17594895,  0.47132524,
               0.53346306,  0.54366105,  0.63322582,  0.07099589,  0.58779963,
               0.27636351,  0.10427349,  0.81386183,  0.65035769,  0.3319818 ,
               0.71431051,  0.25746383,  0.24413121,  0.80054838,  0.21032861,
               0.08345876,  0.62143134,  0.55829355,  0.51563498,  0.72964667])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.08881555,  0.48973697,  0.06669148,  0.52182352,  0.3140878 ,
               0.87813754,  0.4356841 ,  0.59623526,  0.11332953,  0.6574796 ,
               0.5964429 ,  0.23384773,  0.23718363,  0.05507628,  0.975275  ,
               0.45061494,  0.40414253,  0.40614836,  0.51757171,  0.38048945,
               0.68296254,  0.18941278,  0.23921794,  0.87124463,  0.78497061,
               0.29973127,  0.13957561,  0.40168715,  0.3927542 ,  0.0403296 ,
               0.70785278,  0.40151403,  0.360156  ,  0.6126517 ,  0.12835005,
               0.68119112,  0.29661858,  0.3926509 ,  0.34335103,  0.68050705,
               0.81840493,  0.07528544,  0.89215716,  0.11874632,  0.20768708,
               0.47993641,  0.49047542,  0.67501949,  0.91119351,  0.51167432,
               0.94817467,  0.36914149,  0.72250571,  0.93314143,  0.85958961,
               0.14711959,  0.7200985 ,  0.91134025,  0.3019579 ,  0.22411948,
               0.69187145,  0.13339581,  0.50435487,  0.46802776,  0.23843212,
               0.25485676,  0.70606619,  0.19612774,  0.86032907,  0.05081599,
               0.38303017,  0.74522432,  0.58581657,  0.87006447,  0.06784226,
               0.59197078,  0.31624834,  0.13697944,  0.09052469,  0.19614963,
               0.95665031,  0.68062736,  0.79714886,  0.42386517,  0.33426653,
               0.95560598,  0.09591174,  0.57283688,  0.376883  ,  0.7658196 ,
               0.80022056,  0.89444127,  0.55275181,  0.86711727,  0.64392818,
               0.57021079,  0.18561327,  0.54621833,  0.63694877,  0.10220254])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.39081293,  0.82838045,  0.12762392,  0.31173728,  0.77785399,
               0.00861144,  0.62724586,  0.0108074 ,  0.58753069,  0.14939245,
               0.37964363,  0.49971269,  0.36974787,  0.64494809,  0.76058682,
               0.52988708,  0.47363996,  0.03410121,  0.68478614,  0.96475538,
               0.53215002,  0.20646149,  0.57986948,  0.84939627,  0.96929692,
               0.2174726 ,  0.36699972,  0.65648656,  0.27274992,  0.32655575,
               0.61772539,  0.0710982 ,  0.63951169,  0.59369928,  0.57826185,
               0.55424299,  0.34970938,  0.41092158,  0.23981543,  0.69857237,
               0.30657736,  0.34106148,  0.50265202,  0.88329048,  0.4742375 ,
               0.07840529,  0.44072769,  0.83426276,  0.79808679,  0.72548878,
               0.16280299,  0.74704313,  0.7409763 ,  0.89453595,  0.90766233,
               0.92991762,  0.11624253,  0.36158446,  0.89044792,  0.24213331,
               0.94135197,  0.60949622,  0.53643104,  0.60439307,  0.98113945,
               0.10114061,  0.02502842,  0.29259745,  0.62931267,  0.86357341,
               0.40187179,  0.40119613,  0.1125491 ,  0.73985977,  0.27409633,
               0.62957595,  0.77059454,  0.69906004,  0.65320466,  0.76440776,
               0.68890666,  0.52232751,  0.85047868,  0.07310167,  0.27907353,
               0.51387722,  0.29086387,  0.67026711,  0.78871983,  0.56425502,
               0.58885763,  0.44984919,  0.24667308,  0.38955679,  0.48219451,
               0.39263037,  0.6428567 ,  0.97672527,  0.75895695,  0.20375053])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.53494822,  0.49218917,  0.00520348,  0.89011556,  0.49791476,
               0.2266182 ,  0.89302748,  0.78673031,  0.81735215,  0.89762666,
               0.24374745,  0.76821402,  0.34912612,  0.1032615 ,  0.80637983,
               0.1437316 ,  0.75216969,  0.01885541,  0.24922503,  0.30650125,
               0.53876655,  0.08949777,  0.87786613,  0.46258632,  0.56692475,
               0.49922873,  0.35612274,  0.38795053,  0.73326014,  0.40596478,
               0.31615867,  0.39695342,  0.53081361,  0.29206887,  0.9576698 ,
               0.72771455,  0.40954759,  0.61413042,  0.21242436,  0.44845193,
               0.88099928,  0.85860978,  0.38450239,  0.57410253,  0.72783959,
               0.42198449,  0.49070109,  0.79446666,  0.59519904,  0.86927374,
               0.96042981,  0.62282507,  0.55735546,  0.87326475,  0.4553932 ,
               0.7054572 ,  0.74224087,  0.62923372,  0.84147352,  0.99545415,
               0.45300137,  0.49993928,  0.66608845,  0.0064269 ,  0.35284071,
               0.82232109,  0.02031448,  0.54724696,  0.13660577,  0.9570765 ,
               0.1842    ,  0.37621696,  0.46273112,  0.70162391,  0.41984462,
               0.1084996 ,  0.83579562,  0.10149494,  0.97301302,  0.00171297,
               0.61594472,  0.37402899,  0.84388178,  0.43154697,  0.117381  ,
               0.34480044,  0.33395347,  0.04059454,  0.35967132,  0.8578915 ,
               0.69902539,  0.66777004,  0.38456862,  0.19005021,  0.89261983,
               0.08848875,  0.72745612,  0.91044316,  0.30630318,  0.00590759])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.03074809,  0.27385728,  0.07872008,  0.43482033,  0.39965798,
               0.09241849,  0.20225847,  0.60571004,  0.57413655,  0.90266461,
               0.17714564,  0.92763756,  0.06275057,  0.43001937,  0.42519834,
               0.07014818,  0.14121526,  0.41984101,  0.75293096,  0.45118883,
               0.630429  ,  0.18899592,  0.91472552,  0.44781414,  0.20692068,
               0.84415199,  0.2059583 ,  0.33732851,  0.45816507,  0.04455408,
               0.20801962,  0.72618091,  0.64650861,  0.86869847,  0.96817979,
               0.4380114 ,  0.00410814,  0.97185037,  0.46152173,  0.93999064,
               0.37798425,  0.40953111,  0.0753482 ,  0.81950753,  0.49298082,
               0.82651738,  0.11376199,  0.89839711,  0.51042338,  0.4619716 ,
               0.46905247,  0.83918395,  0.21987567,  0.30230843,  0.71944142,
               0.35728867,  0.85163953,  0.02751544,  0.77758213,  0.60064554,
               0.36169922,  0.79109372,  0.79019663,  0.41023862,  0.3169108 ,
               0.22851909,  0.21906556,  0.18080199,  0.54647522,  0.42689055,
               0.17792851,  0.68778556,  0.7779997 ,  0.32919526,  0.01131209,
               0.2990527 ,  0.25863519,  0.14768674,  0.17594895,  0.47132524,
               0.53346306,  0.54366105,  0.63322582,  0.07099589,  0.58779963,
               0.27636351,  0.10427349,  0.81386183,  0.65035769,  0.3319818 ,
               0.71431051,  0.25746383,  0.24413121,  0.80054838,  0.21032861,
               0.08345876,  0.62143134,  0.55829355,  0.51563498,  0.72964667])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.08881555,  0.48973697,  0.06669148,  0.52182352,  0.3140878 ,
               0.87813754,  0.4356841 ,  0.59623526,  0.11332953,  0.6574796 ,
               0.5964429 ,  0.23384773,  0.23718363,  0.05507628,  0.975275  ,
               0.45061494,  0.40414253,  0.40614836,  0.51757171,  0.38048945,
               0.68296254,  0.18941278,  0.23921794,  0.87124463,  0.78497061,
               0.29973127,  0.13957561,  0.40168715,  0.3927542 ,  0.0403296 ,
               0.70785278,  0.40151403,  0.360156  ,  0.6126517 ,  0.12835005,
               0.68119112,  0.29661858,  0.3926509 ,  0.34335103,  0.68050705,
               0.81840493,  0.07528544,  0.89215716,  0.11874632,  0.20768708,
               0.47993641,  0.49047542,  0.67501949,  0.91119351,  0.51167432,
               0.94817467,  0.36914149,  0.72250571,  0.93314143,  0.85958961,
               0.14711959,  0.7200985 ,  0.91134025,  0.3019579 ,  0.22411948,
               0.69187145,  0.13339581,  0.50435487,  0.46802776,  0.23843212,
               0.25485676,  0.70606619,  0.19612774,  0.86032907,  0.05081599,
               0.38303017,  0.74522432,  0.58581657,  0.87006447,  0.06784226,
               0.59197078,  0.31624834,  0.13697944,  0.09052469,  0.19614963,
               0.95665031,  0.68062736,  0.79714886,  0.42386517,  0.33426653,
               0.95560598,  0.09591174,  0.57283688,  0.376883  ,  0.7658196 ,
               0.80022056,  0.89444127,  0.55275181,  0.86711727,  0.64392818,
               0.57021079,  0.18561327,  0.54621833,  0.63694877,  0.10220254])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.39081293,  0.82838045,  0.12762392,  0.31173728,  0.77785399,
               0.00861144,  0.62724586,  0.0108074 ,  0.58753069,  0.14939245,
               0.37964363,  0.49971269,  0.36974787,  0.64494809,  0.76058682,
               0.52988708,  0.47363996,  0.03410121,  0.68478614,  0.96475538,
               0.53215002,  0.20646149,  0.57986948,  0.84939627,  0.96929692,
               0.2174726 ,  0.36699972,  0.65648656,  0.27274992,  0.32655575,
               0.61772539,  0.0710982 ,  0.63951169,  0.59369928,  0.57826185,
               0.55424299,  0.34970938,  0.41092158,  0.23981543,  0.69857237,
               0.30657736,  0.34106148,  0.50265202,  0.88329048,  0.4742375 ,
               0.07840529,  0.44072769,  0.83426276,  0.79808679,  0.72548878,
               0.16280299,  0.74704313,  0.7409763 ,  0.89453595,  0.90766233,
               0.92991762,  0.11624253,  0.36158446,  0.89044792,  0.24213331,
               0.94135197,  0.60949622,  0.53643104,  0.60439307,  0.98113945,
               0.10114061,  0.02502842,  0.29259745,  0.62931267,  0.86357341,
               0.40187179,  0.40119613,  0.1125491 ,  0.73985977,  0.27409633,
               0.62957595,  0.77059454,  0.69906004,  0.65320466,  0.76440776,
               0.68890666,  0.52232751,  0.85047868,  0.07310167,  0.27907353,
               0.51387722,  0.29086387,  0.67026711,  0.78871983,  0.56425502,
               0.58885763,  0.44984919,  0.24667308,  0.38955679,  0.48219451,
               0.39263037,  0.6428567 ,  0.97672527,  0.75895695,  0.20375053])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.94077478,  0.81980771,  0.07537028,  0.39430699,  0.64673229,
               0.89032379,  0.94917194,  0.86253116,  0.46534231,  0.653896  ,
               0.48868107,  0.47815348,  0.02463758,  0.89707764,  0.08130552,
               0.99885717,  0.36805961,  0.49787697,  0.10898234,  0.11742011,
               0.58485313,  0.02517455,  0.11609291,  0.4414805 ,  0.46084096,
               0.69583362,  0.20915763,  0.61456151,  0.506766  ,  0.83658006,
               0.84260887,  0.0201609 ,  0.64413546,  0.69189857,  0.33367896,
               0.51552934,  0.40986888,  0.83205901,  0.47606413,  0.84214321,
               0.91984222,  0.70727304,  0.03067835,  0.66413077,  0.21770544,
               0.1749244 ,  0.95068223,  0.2381011 ,  0.7230783 ,  0.36080181,
               0.75636626,  0.40921096,  0.69399979,  0.12677201,  0.78209221,
               0.64483814,  0.5902024 ,  0.68685024,  0.664406  ,  0.30530176,
               0.49878884,  0.06628688,  0.56326982,  0.52510689,  0.81311738,
               0.99191814,  0.36924737,  0.62377989,  0.22690964,  0.02445776,
               0.1924997 ,  0.42234839,  0.10172538,  0.41226675,  0.05435873,
               0.18845732,  0.53401245,  0.16686285,  0.97267968,  0.51017007,
               0.44472797,  0.07416462,  0.67523406,  0.22812089,  0.79557705,
               0.91463599,  0.15754379,  0.19246839,  0.84916185,  0.99446918,
               0.0554099 ,  0.93062453,  0.34261824,  0.69749562,  0.09244892,
               0.86487236,  0.48129651,  0.87995874,  0.82674812,  0.83185702])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.72673179,  0.88249136,  0.3623845 ,  0.09037306,  0.30601739,
               0.16752069,  0.08572164,  0.96452094,  0.02096317,  0.95573461,
               0.72995115,  0.34197732,  0.95794971,  0.40752172,  0.82713412,
               0.9222018 ,  0.22584587,  0.25890481,  0.71998439,  0.59596068,
               0.67507953,  0.98056726,  0.84401131,  0.83732312,  0.6177098 ,
               0.64130987,  0.29902783,  0.69789899,  0.28271613,  0.49067723,
               0.07601814,  0.66056666,  0.72777204,  0.81776132,  0.6646182 ,
               0.4412802 ,  0.16631613,  0.51240273,  0.71449968,  0.7445905 ,
               0.15287621,  0.78015634,  0.91730374,  0.86935964,  0.2332907 ,
               0.44827353,  0.67541206,  0.60854179,  0.0283731 ,  0.87121893,
               0.79209869,  0.90182038,  0.83927673,  0.73259182,  0.68431118,
               0.23126795,  0.52989868,  0.09505298,  0.95094673,  0.77367279,
               0.76480608,  0.5832877 ,  0.50747133,  0.98712404,  0.65276298,
               0.98595564,  0.77678598,  0.01902056,  0.60767003,  0.66702658,
               0.54855632,  0.65871472,  0.21146526,  0.80734599,  0.62625312,
               0.57715982,  0.4813143 ,  0.44061226,  0.77758951,  0.74414734,
               0.30254362,  0.2959915 ,  0.90777176,  0.85374205,  0.81754382,
               0.52510806,  0.58064454,  0.89757394,  0.55613023,  0.10399635,
               0.11119251,  0.82843653,  0.24082476,  0.85571826,  0.85078723,
               0.57407018,  0.42721636,  0.52864266,  0.62952479,  0.24581681])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.89817376,  0.17770817,  0.98912921,  0.99558763,  0.59747024,
               0.99211819,  0.33191449,  0.99101692,  0.39397406,  0.38061982,
               0.76578257,  0.98749428,  0.34455393,  0.49656181,  0.68393858,
               0.9652674 ,  0.12253929,  0.40990279,  0.44748183,  0.61640593,
               0.52374146,  0.60368405,  0.69616723,  0.03428007,  0.90510062,
               0.88906122,  0.04033939,  0.76590147,  0.99091817,  0.3316407 ,
               0.63575502,  0.78077319,  0.69551014,  0.31053829,  0.26328862,
               0.59385482,  0.06108714,  0.58324417,  0.06834482,  0.03738895,
               0.97083189,  0.05338974,  0.33012781,  0.66705684,  0.14273461,
               0.40626911,  0.09318369,  0.69066658,  0.83859172,  0.41716365,
               0.73371635,  0.95418311,  0.49982448,  0.31044315,  0.86864815,
               0.35564579,  0.53258924,  0.92049056,  0.83009125,  0.7433699 ,
               0.76203921,  0.4228646 ,  0.33771868,  0.88449657,  0.87781966,
               0.02334245,  0.34441196,  0.43148619,  0.02819916,  0.48510078,
               0.65481664,  0.94320823,  0.14058013,  0.07327225,  0.85072496,
               0.37133053,  0.36002285,  0.65093543,  0.41528737,  0.23689242,
               0.5336073 ,  0.91993753,  0.96916023,  0.6597326 ,  0.62917279,
               0.03650768,  0.27221359,  0.30379165,  0.71890644,  0.09165503,
               0.74171603,  0.69135098,  0.4592638 ,  0.25680078,  0.54683989,
               0.55717583,  0.05492663,  0.73901976,  0.39156918,  0.5003028 ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.45862678,  0.78739423,  0.0861012 ,  0.80735309,  0.19537481,
               0.59064829,  0.04043962,  0.96282287,  0.7904111 ,  0.63775622,
               0.6740992 ,  0.35944981,  0.0705681 ,  0.54237121,  0.25123012,
               0.57525567,  0.62359603,  0.15698593,  0.56165694,  0.16961137,
               0.58828154,  0.59491057,  0.63923332,  0.28002799,  0.36015243,
               0.36136638,  0.76117971,  0.62825957,  0.36592953,  0.66393828,
               0.76130517,  0.16319381,  0.61302972,  0.19890248,  0.5986303 ,
               0.65106352,  0.10912176,  0.76917999,  0.93410202,  0.87888704,
               0.21556254,  0.81241642,  0.56002393,  0.58643262,  0.32311089,
               0.01202448,  0.95559417,  0.25476339,  0.60122962,  0.17942156,
               0.59614184,  0.917475  ,  0.18053466,  0.47678524,  0.50782039,
               0.20760243,  0.14324638,  0.96393091,  0.38943253,  0.94706944,
               0.86906824,  0.1792114 ,  0.41485434,  0.18884406,  0.62043395,
               0.84490923,  0.00650369,  0.01720633,  0.23042997,  0.64866804,
               0.09032788,  0.70186651,  0.67001032,  0.13722046,  0.13435572,
               0.33677279,  0.39927394,  0.4459435 ,  0.60984187,  0.89879424,
               0.63689456,  0.06942455,  0.27672876,  0.0848717 ,  0.54769089,
               0.65427648,  0.58980341,  0.31843246,  0.19763434,  0.40660307,
               0.42289452,  0.19028498,  0.06290447,  0.56909419,  0.29063408,
               0.93161405,  0.45858933,  0.39599343,  0.70318083,  0.26892827])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.28302438,  0.81330792,  0.04765268,  0.65666304,  0.99106471,
               0.95256232,  0.25118642,  0.06275468,  0.4961121 ,  0.1315344 ,
               0.94393077,  0.30226791,  0.31379637,  0.51137627,  0.53090603,
               0.64584977,  0.72385016,  0.31572989,  0.97058955,  0.3581024 ,
               0.79802037,  0.81676216,  0.78123869,  0.2570276 ,  0.25029161,
               0.72048433,  0.46248358,  0.65820969,  0.16600101,  0.47870334,
               0.71771043,  0.98551004,  0.35107325,  0.45069815,  0.13306758,
               0.12272689,  0.10451497,  0.12290188,  0.09727816,  0.3062066 ,
               0.53938961,  0.28735964,  0.58897369,  0.86192343,  0.26825762,
               0.20498043,  0.26561365,  0.41172874,  0.11822563,  0.46396461,
               0.83590463,  0.59493562,  0.22275819,  0.36093531,  0.62962853,
               0.25956763,  0.9498075 ,  0.38496303,  0.01688467,  0.77188786,
               0.86394562,  0.6409615 ,  0.44350672,  0.6277287 ,  0.59799554,
               0.12382184,  0.19234404,  0.16272645,  0.74453065,  0.06285426,
               0.0716172 ,  0.90021676,  0.96286448,  0.56807558,  0.18657851,
               0.01779558,  0.82417496,  0.13049026,  0.13223904,  0.47262086,
               0.23589971,  0.16214366,  0.59611967,  0.48595329,  0.60677205,
               0.91371832,  0.52911473,  0.19996436,  0.052778  ,  0.44995663,
               0.06945359,  0.66295004,  0.89811552,  0.94129681,  0.99839741,
               0.42384367,  0.889774  ,  0.08467855,  0.66940867,  0.12903539])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.72673179,  0.88249136,  0.3623845 ,  0.09037306,  0.30601739,
               0.16752069,  0.08572164,  0.96452094,  0.02096317,  0.95573461,
               0.72995115,  0.34197732,  0.95794971,  0.40752172,  0.82713412,
               0.9222018 ,  0.22584587,  0.25890481,  0.71998439,  0.59596068,
               0.67507953,  0.98056726,  0.84401131,  0.83732312,  0.6177098 ,
               0.64130987,  0.29902783,  0.69789899,  0.28271613,  0.49067723,
               0.07601814,  0.66056666,  0.72777204,  0.81776132,  0.6646182 ,
               0.4412802 ,  0.16631613,  0.51240273,  0.71449968,  0.7445905 ,
               0.15287621,  0.78015634,  0.91730374,  0.86935964,  0.2332907 ,
               0.44827353,  0.67541206,  0.60854179,  0.0283731 ,  0.87121893,
               0.79209869,  0.90182038,  0.83927673,  0.73259182,  0.68431118,
               0.23126795,  0.52989868,  0.09505298,  0.95094673,  0.77367279,
               0.76480608,  0.5832877 ,  0.50747133,  0.98712404,  0.65276298,
               0.98595564,  0.77678598,  0.01902056,  0.60767003,  0.66702658,
               0.54855632,  0.65871472,  0.21146526,  0.80734599,  0.62625312,
               0.57715982,  0.4813143 ,  0.44061226,  0.77758951,  0.74414734,
               0.30254362,  0.2959915 ,  0.90777176,  0.85374205,  0.81754382,
               0.52510806,  0.58064454,  0.89757394,  0.55613023,  0.10399635,
               0.11119251,  0.82843653,  0.24082476,  0.85571826,  0.85078723,
               0.57407018,  0.42721636,  0.52864266,  0.62952479,  0.24581681])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.89817376,  0.17770817,  0.98912921,  0.99558763,  0.59747024,
               0.99211819,  0.33191449,  0.99101692,  0.39397406,  0.38061982,
               0.76578257,  0.98749428,  0.34455393,  0.49656181,  0.68393858,
               0.9652674 ,  0.12253929,  0.40990279,  0.44748183,  0.61640593,
               0.52374146,  0.60368405,  0.69616723,  0.03428007,  0.90510062,
               0.88906122,  0.04033939,  0.76590147,  0.99091817,  0.3316407 ,
               0.63575502,  0.78077319,  0.69551014,  0.31053829,  0.26328862,
               0.59385482,  0.06108714,  0.58324417,  0.06834482,  0.03738895,
               0.97083189,  0.05338974,  0.33012781,  0.66705684,  0.14273461,
               0.40626911,  0.09318369,  0.69066658,  0.83859172,  0.41716365,
               0.73371635,  0.95418311,  0.49982448,  0.31044315,  0.86864815,
               0.35564579,  0.53258924,  0.92049056,  0.83009125,  0.7433699 ,
               0.76203921,  0.4228646 ,  0.33771868,  0.88449657,  0.87781966,
               0.02334245,  0.34441196,  0.43148619,  0.02819916,  0.48510078,
               0.65481664,  0.94320823,  0.14058013,  0.07327225,  0.85072496,
               0.37133053,  0.36002285,  0.65093543,  0.41528737,  0.23689242,
               0.5336073 ,  0.91993753,  0.96916023,  0.6597326 ,  0.62917279,
               0.03650768,  0.27221359,  0.30379165,  0.71890644,  0.09165503,
               0.74171603,  0.69135098,  0.4592638 ,  0.25680078,  0.54683989,
               0.55717583,  0.05492663,  0.73901976,  0.39156918,  0.5003028 ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.45862678,  0.78739423,  0.0861012 ,  0.80735309,  0.19537481,
               0.59064829,  0.04043962,  0.96282287,  0.7904111 ,  0.63775622,
               0.6740992 ,  0.35944981,  0.0705681 ,  0.54237121,  0.25123012,
               0.57525567,  0.62359603,  0.15698593,  0.56165694,  0.16961137,
               0.58828154,  0.59491057,  0.63923332,  0.28002799,  0.36015243,
               0.36136638,  0.76117971,  0.62825957,  0.36592953,  0.66393828,
               0.76130517,  0.16319381,  0.61302972,  0.19890248,  0.5986303 ,
               0.65106352,  0.10912176,  0.76917999,  0.93410202,  0.87888704,
               0.21556254,  0.81241642,  0.56002393,  0.58643262,  0.32311089,
               0.01202448,  0.95559417,  0.25476339,  0.60122962,  0.17942156,
               0.59614184,  0.917475  ,  0.18053466,  0.47678524,  0.50782039,
               0.20760243,  0.14324638,  0.96393091,  0.38943253,  0.94706944,
               0.86906824,  0.1792114 ,  0.41485434,  0.18884406,  0.62043395,
               0.84490923,  0.00650369,  0.01720633,  0.23042997,  0.64866804,
               0.09032788,  0.70186651,  0.67001032,  0.13722046,  0.13435572,
               0.33677279,  0.39927394,  0.4459435 ,  0.60984187,  0.89879424,
               0.63689456,  0.06942455,  0.27672876,  0.0848717 ,  0.54769089,
               0.65427648,  0.58980341,  0.31843246,  0.19763434,  0.40660307,
               0.42289452,  0.19028498,  0.06290447,  0.56909419,  0.29063408,
               0.93161405,  0.45858933,  0.39599343,  0.70318083,  0.26892827])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.60078452,  0.45107358,  0.96619409,  0.9225769 ,  0.51945506,
               0.73189893,  0.57556869,  0.07798128,  0.53930495,  0.47373881,
               0.65733208,  0.51211245,  0.99833016,  0.03500739,  0.86665282,
               0.69635209,  0.14691228,  0.04352763,  0.58064262,  0.0240221 ,
               0.82753723,  0.52092203,  0.80526555,  0.36913988,  0.24716504,
               0.27414725,  0.5121601 ,  0.13546906,  0.28120967,  0.6559919 ,
               0.85323856,  0.33402912,  0.89376269,  0.8022445 ,  0.69371805,
               0.94882212,  0.2847145 ,  0.43229279,  0.4484408 ,  0.67041825,
               0.66075398,  0.34051029,  0.54495707,  0.87781829,  0.40879118,
               0.13947017,  0.12272756,  0.90397873,  0.74075863,  0.09906166,
               0.35632057,  0.0175496 ,  0.75463364,  0.31400397,  0.51010558,
               0.50963821,  0.96371584,  0.57565875,  0.65795371,  0.84613989,
               0.17617483,  0.4789683 ,  0.79730148,  0.07295979,  0.8683803 ,
               0.51204653,  0.95184787,  0.25934919,  0.01649202,  0.40022137,
               0.71404387,  0.39949452,  0.47061999,  0.51500203,  0.29564001,
               0.77464949,  0.84549605,  0.53845285,  0.86307027,  0.33276838,
               0.71930839,  0.76189688,  0.36166862,  0.70282711,  0.3858538 ,
               0.5873359 ,  0.22947923,  0.83962324,  0.83881135,  0.78290297,
               0.38196168,  0.13900605,  0.09917914,  0.15607895,  0.11889695,
               0.3471978 ,  0.31447773,  0.59055885,  0.4564798 ,  0.41188253])}]]


