
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='b63dd0c4-f54f-4cd5-b3e0-330280c42fb1'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='186a7e84-7120-40fa-98e3-5eff1893c92e'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.509451660011975],
     [0.415111588113862],
     [0.263698322037391],
     [0.790776670756253],
     [0.46715252624987],
     [0.281553290731462],
     [0.789273608983861],
     [0.458047847898997],
     [0.67493650523735],
     [0.0227354219748382],
     [0.213197489194726],
     [0.129052334122376],
     [0.797390050213516],
     [0.20024779703788],
     [0.464543870385795],
     [0.703768584385284],
     [0.273567283582439],
     [0.538708252929853],
     [0.611087346137731],
     [0.253442699469909],
     [0.867480925097912],
     [0.689613712313754],
     [0.545752436457309],
     [0.392353712577619],
     [0.763428042877848],
     [0.707092486734189],
     [0.904683940875452],
     [0.149053732012444],
     [0.210465442786966],
     [0.439227295467273],
     [0.92427041629086],
     [0.576054427878599],
     [0.55778584283429],
     [0.910285451599348],
     [0.269258169206378],
     [0.32155565547499],
     [0.909005127059275],
     [0.929151977349691],
     [0.45490419450852],
     [0.872120860208033],
     [0.547357221490831],
     [0.646555689442508],
     [0.226990802347138],
     [0.990525389368671],
     [0.848266643128244],
     [0.588074797886055],
     [0.658238658115602],
     [0.578127087546842],
     [0.582636982411103],
     [0.987987131256035],
     [0.960663419354962],
     [0.606228504117429],
     [0.41252784033959],
     [0.86110566475464],
     [0.109956602106104],
     [0.316257633895496],
     [0.00384507876524531],
     [0.924878776870195],
     [0.221691919857556],
     [0.915032269442951],
     [0.238024070694045],
     [0.656244820962208],
     [0.978283148747423],
     [0.293530311740057],
     [0.637268147757392],
     [0.62836367552665],
     [0.593082094582913],
     [0.493476024363018],
     [0.551581674566468],
     [0.925197149644212],
     [0.92126972571097],
     [0.498495824682499],
     [0.552723129752625],
     [0.417738421288075],
     [0.0988103412513179],
     [0.058747355478261],
     [0.986520772364533],
     [0.556727154401251],
     [0.752931052518918],
     [0.592517084732823],
     [0.94719925651459],
     [0.220856787104138],
     [0.862847587042175],
     [0.179546151883911],
     [0.191068327450252],
     [0.974203180572208],
     [0.553877591082358],
     [0.954778690274494],
     [0.0893198223669514],
     [0.155938498781148],
     [0.84582556346377],
     [0.916493026193899],
     [0.814595153720877],
     [0.988492567955688],
     [0.215911697768159],
     [0.961652720002876],
     [0.845146821756397],
     [0.921459455612367],
     [0.898385741609248],
     [0.300605674621908]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.28067342])],
     [array([0.84060595])],
     [array([0.31691873])],
     [array([0.59975981])],
     [array([0.00339621])],
     [array([0.91032675])],
     [array([0.99179323])],
     [array([0.75421316])],
     [array([0.59960677])],
     [array([0.18368466])],
     [array([0.59981942])],
     [array([0.43913613])],
     [array([0.72771112])],
     [array([0.11713097])],
     [array([0.18445608])],
     [array([0.311741])],
     [array([0.69379225])],
     [array([0.2271336])],
     [array([0.9998506])],
     [array([0.00383929])],
     [array([0.56455138])],
     [array([0.72906764])],
     [array([0.81161704])],
     [array([0.03027423])],
     [array([0.82981144])],
     [array([0.68118067])],
     [array([0.58892802])],
     [array([0.65961414])],
     [array([0.70473219])],
     [array([0.97703934])],
     [array([0.92161038])],
     [array([0.34755912])],
     [array([0.77404628])],
     [array([0.86706312])],
     [array([0.70548319])],
     [array([0.66269299])],
     [array([0.58134828])],
     [array([0.3684034])],
     [array([0.12778726])],
     [array([0.86451802])],
     [array([0.78042312])],
     [array([0.4929411])],
     [array([0.72497372])],
     [array([0.51477241])],
     [array([0.66953838])],
     [array([0.51881136])],
     [array([0.95341843])],
     [array([0.07596499])],
     [array([0.71123429])],
     [array([0.90948228])],
     [array([0.65234079])],
     [array([0.75554888])],
     [array([0.06838314])],
     [array([0.18701865])],
     [array([0.00637929])],
     [array([0.29374311])],
     [array([0.51759682])],
     [array([0.15400636])],
     [array([0.93160931])],
     [array([0.42388519])],
     [array([0.99835225])],
     [array([0.32732438])],
     [array([0.16969553])],
     [array([0.4362771])],
     [array([0.5711679])],
     [array([0.61175692])],
     [array([0.53243472])],
     [array([0.01905946])],
     [array([0.60360897])],
     [array([0.54140167])],
     [array([0.95818233])],
     [array([0.9610175])],
     [array([0.88624357])],
     [array([0.8405535])],
     [array([0.57577491])],
     [array([0.0819807])],
     [array([0.84320285])],
     [array([0.29046363])],
     [array([0.87419177])],
     [array([0.36053724])],
     [array([0.20546222])],
     [array([0.25466703])],
     [array([0.75566846])],
     [array([0.71207021])],
     [array([0.31492122])],
     [array([0.69437961])],
     [array([0.74832563])],
     [array([0.12531991])],
     [array([0.00606965])],
     [array([0.99984603])],
     [array([0.85475376])],
     [array([0.35554529])],
     [array([0.27480437])],
     [array([0.9912053])],
     [array([0.80548069])],
     [array([0.18757755])],
     [array([0.15182718])],
     [array([0.9492979])],
     [array([0.7665972])],
     [array([0.52080728])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.28067342, 0.84060595, 0.31691873, 0.59975981, 0.00339621,
           0.91032675, 0.99179323, 0.75421316, 0.59960677, 0.18368466,
           0.59981942, 0.43913613, 0.72771112, 0.11713097, 0.18445608,
           0.311741  , 0.69379225, 0.2271336 , 0.9998506 , 0.00383929,
           0.56455138, 0.72906764, 0.81161704, 0.03027423, 0.82981144,
           0.68118067, 0.58892802, 0.65961414, 0.70473219, 0.97703934,
           0.92161038, 0.34755912, 0.77404628, 0.86706312, 0.70548319,
           0.66269299, 0.58134828, 0.3684034 , 0.12778726, 0.86451802,
           0.78042312, 0.4929411 , 0.72497372, 0.51477241, 0.66953838,
           0.51881136, 0.95341843, 0.07596499, 0.71123429, 0.90948228,
           0.65234079, 0.75554888, 0.06838314, 0.18701865, 0.00637929,
           0.29374311, 0.51759682, 0.15400636, 0.93160931, 0.42388519,
           0.99835225, 0.32732438, 0.16969553, 0.4362771 , 0.5711679 ,
           0.61175692, 0.53243472, 0.01905946, 0.60360897, 0.54140167,
           0.95818233, 0.9610175 , 0.88624357, 0.8405535 , 0.57577491,
           0.0819807 , 0.84320285, 0.29046363, 0.87419177, 0.36053724,
           0.20546222, 0.25466703, 0.75566846, 0.71207021, 0.31492122,
           0.69437961, 0.74832563, 0.12531991, 0.00606965, 0.99984603,
           0.85475376, 0.35554529, 0.27480437, 0.9912053 , 0.80548069,
           0.18757755, 0.15182718, 0.9492979 , 0.7665972 , 0.52080728])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.50945166, 0.41511159, 0.26369832, 0.79077667, 0.46715253,
              0.28155329, 0.78927361, 0.45804785, 0.67493651, 0.02273542,
              0.21319749, 0.12905233, 0.79739005, 0.2002478 , 0.46454387,
              0.70376858, 0.27356728, 0.53870825, 0.61108735, 0.2534427 ,
              0.86748093, 0.68961371, 0.54575244, 0.39235371, 0.76342804,
              0.70709249, 0.90468394, 0.14905373, 0.21046544, 0.4392273 ,
              0.92427042, 0.57605443, 0.55778584, 0.91028545, 0.26925817,
              0.32155566, 0.90900513, 0.92915198, 0.45490419, 0.87212086,
              0.54735722, 0.64655569, 0.2269908 , 0.99052539, 0.84826664,
              0.5880748 , 0.65823866, 0.57812709, 0.58263698, 0.98798713,
              0.96066342, 0.6062285 , 0.41252784, 0.86110566, 0.1099566 ,
              0.31625763, 0.00384508, 0.92487878, 0.22169192, 0.91503227,
              0.23802407, 0.65624482, 0.97828315, 0.29353031, 0.63726815,
              0.62836368, 0.59308209, 0.49347602, 0.55158167, 0.92519715,
              0.92126973, 0.49849582, 0.55272313, 0.41773842, 0.09881034,
              0.05874736, 0.98652077, 0.55672715, 0.75293105, 0.59251708,
              0.94719926, 0.22085679, 0.86284759, 0.17954615, 0.19106833,
              0.97420318, 0.55387759, 0.95477869, 0.08931982, 0.1559385 ,
              0.84582556, 0.91649303, 0.81459515, 0.98849257, 0.2159117 ,
              0.96165272, 0.84514682, 0.92145946, 0.89838574, 0.30060567])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.48670729, 0.5171388 , 0.55513879, 0.97800656, 0.67094536,
              0.21955356, 0.29703332, 0.94541356, 0.53474561, 0.97634618,
              0.22046112, 0.30230507, 0.18020931, 0.35712793, 0.58922501,
              0.84158771, 0.61765097, 0.73353718, 0.37013981, 0.42042784,
              0.06158632, 0.57208487, 0.71744985, 0.09264469, 0.18402   ,
              0.84633249, 0.7970566 , 0.17565972, 0.16252178, 0.06775073,
              0.92975989, 0.85264655, 0.62769087, 0.44773731, 0.73143605,
              0.09708512, 0.71872948, 0.28220721, 0.41179203, 0.56424129,
              0.60926037, 0.55034686, 0.41868988, 0.29734809, 0.75182051,
              0.37618682, 0.01351567, 0.1160329 , 0.81042161, 0.66142298,
              0.86557527, 0.10501268, 0.76961818, 0.49711876, 0.00645988,
              0.56035191, 0.94357523, 0.09993601, 0.6899502 , 0.81316261,
              0.0200404 , 0.49345254, 0.01992666, 0.83566937, 0.91171384,
              0.65589733, 0.36609071, 0.35378298, 0.39133874, 0.66701473,
              0.41100911, 0.32475956, 0.7503801 , 0.22182002, 0.85487721,
              0.19420498, 0.11461448, 0.53780592, 0.66433417, 0.2066232 ,
              0.04193019, 0.64710302, 0.74964585, 0.59358039, 0.08449123,
              0.59020462, 0.13182556, 0.97680593, 0.250623  , 0.90253194,
              0.45266828, 0.30104343, 0.64888271, 0.15531718, 0.77606609,
              0.13039699, 0.30246193, 0.8898364 , 0.56639641, 0.32682033])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.85303137, 0.60192283, 0.8622819 , 0.80765619, 0.12737031,
              0.07178899, 0.69421475, 0.0447223 , 0.18475193, 0.01164301,
              0.06869297, 0.63099776, 0.35596944, 0.52163403, 0.56470559,
              0.9845204 , 0.19125983, 0.38457576, 0.95814928, 0.91215046,
              0.8566091 , 0.65415789, 0.44804157, 0.59095156, 0.84595519,
              0.61522503, 0.18547951, 0.66603285, 0.65078674, 0.47722057,
              0.78479539, 0.45650259, 0.31778308, 0.66414188, 0.75413957,
              0.54743928, 0.73943203, 0.74188382, 0.47128186, 0.4265367 ,
              0.40392622, 0.57497449, 0.64113855, 0.54354661, 0.21896277,
              0.75263992, 0.40810093, 0.07177383, 0.96234403, 0.80377927,
              0.63016539, 0.56896752, 0.59703929, 0.16210016, 0.37851506,
              0.05749988, 0.03121838, 0.42920372, 0.82545793, 0.79197624,
              0.43875768, 0.06327415, 0.35491205, 0.81433102, 0.41543639,
              0.55534301, 0.92006753, 0.17217924, 0.58611016, 0.13036109,
              0.71928966, 0.83038976, 0.23001252, 0.05199973, 0.00922372,
              0.6063132 , 0.12279514, 0.17332625, 0.59080202, 0.65185942,
              0.8121016 , 0.08447129, 0.1357446 , 0.16693411, 0.66077597,
              0.59809429, 0.0794077 , 0.81293343, 0.49628516, 0.46636105,
              0.5395652 , 0.59800587, 0.45684443, 0.94264878, 0.63467743,
              0.5011851 , 0.07815807, 0.73943221, 0.62485294, 0.16644961])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.63783039, 0.6717469 , 0.88500598, 0.35275936, 0.32440918,
              0.41349545, 0.48943826, 0.97817691, 0.26332509, 0.29891029,
              0.13700497, 0.35701761, 0.10942217, 0.67672413, 0.48719782,
              0.54355401, 0.18258103, 0.90319696, 0.10506039, 0.41830335,
              0.06300951, 0.76971109, 0.430169  , 0.19012552, 0.26168219,
              0.14867693, 0.27170799, 0.51653381, 0.14746819, 0.03332987,
              0.73343253, 0.78559333, 0.69158777, 0.06490886, 0.55035544,
              0.57469885, 0.75246857, 0.27246096, 0.54270381, 0.40504207,
              0.33405753, 0.96280836, 0.04759376, 0.92432623, 0.01146196,
              0.45433484, 0.14608825, 0.42661431, 0.80045872, 0.14324109,
              0.10310886, 0.11378336, 0.31125323, 0.8381003 , 0.5147921 ,
              0.00397637, 0.36319732, 0.48958084, 0.34373267, 0.57065026,
              0.26410666, 0.70555185, 0.47691856, 0.54881983, 0.23548787,
              0.1303129 , 0.39681494, 0.26946695, 0.96726431, 0.384873  ,
              0.36393959, 0.33642566, 0.41630206, 0.10660912, 0.30004649,
              0.89326764, 0.18305145, 0.9542279 , 0.31567319, 0.94871553,
              0.85292825, 0.43760643, 0.3224884 , 0.16556118, 0.68024177,
              0.95487293, 0.81740268, 0.22757353, 0.0736423 , 0.15555114,
              0.08561049, 0.18872096, 0.39939587, 0.65490532, 0.84157479,
              0.22470395, 0.77237411, 0.94872691, 0.49299812, 0.24973086])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.50945166, 0.41511159, 0.26369832, 0.79077667, 0.46715253,
              0.28155329, 0.78927361, 0.45804785, 0.67493651, 0.02273542,
              0.21319749, 0.12905233, 0.79739005, 0.2002478 , 0.46454387,
              0.70376858, 0.27356728, 0.53870825, 0.61108735, 0.2534427 ,
              0.86748093, 0.68961371, 0.54575244, 0.39235371, 0.76342804,
              0.70709249, 0.90468394, 0.14905373, 0.21046544, 0.4392273 ,
              0.92427042, 0.57605443, 0.55778584, 0.91028545, 0.26925817,
              0.32155566, 0.90900513, 0.92915198, 0.45490419, 0.87212086,
              0.54735722, 0.64655569, 0.2269908 , 0.99052539, 0.84826664,
              0.5880748 , 0.65823866, 0.57812709, 0.58263698, 0.98798713,
              0.96066342, 0.6062285 , 0.41252784, 0.86110566, 0.1099566 ,
              0.31625763, 0.00384508, 0.92487878, 0.22169192, 0.91503227,
              0.23802407, 0.65624482, 0.97828315, 0.29353031, 0.63726815,
              0.62836368, 0.59308209, 0.49347602, 0.55158167, 0.92519715,
              0.92126973, 0.49849582, 0.55272313, 0.41773842, 0.09881034,
              0.05874736, 0.98652077, 0.55672715, 0.75293105, 0.59251708,
              0.94719926, 0.22085679, 0.86284759, 0.17954615, 0.19106833,
              0.97420318, 0.55387759, 0.95477869, 0.08931982, 0.1559385 ,
              0.84582556, 0.91649303, 0.81459515, 0.98849257, 0.2159117 ,
              0.96165272, 0.84514682, 0.92145946, 0.89838574, 0.30060567])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.48670729, 0.5171388 , 0.55513879, 0.97800656, 0.67094536,
              0.21955356, 0.29703332, 0.94541356, 0.53474561, 0.97634618,
              0.22046112, 0.30230507, 0.18020931, 0.35712793, 0.58922501,
              0.84158771, 0.61765097, 0.73353718, 0.37013981, 0.42042784,
              0.06158632, 0.57208487, 0.71744985, 0.09264469, 0.18402   ,
              0.84633249, 0.7970566 , 0.17565972, 0.16252178, 0.06775073,
              0.92975989, 0.85264655, 0.62769087, 0.44773731, 0.73143605,
              0.09708512, 0.71872948, 0.28220721, 0.41179203, 0.56424129,
              0.60926037, 0.55034686, 0.41868988, 0.29734809, 0.75182051,
              0.37618682, 0.01351567, 0.1160329 , 0.81042161, 0.66142298,
              0.86557527, 0.10501268, 0.76961818, 0.49711876, 0.00645988,
              0.56035191, 0.94357523, 0.09993601, 0.6899502 , 0.81316261,
              0.0200404 , 0.49345254, 0.01992666, 0.83566937, 0.91171384,
              0.65589733, 0.36609071, 0.35378298, 0.39133874, 0.66701473,
              0.41100911, 0.32475956, 0.7503801 , 0.22182002, 0.85487721,
              0.19420498, 0.11461448, 0.53780592, 0.66433417, 0.2066232 ,
              0.04193019, 0.64710302, 0.74964585, 0.59358039, 0.08449123,
              0.59020462, 0.13182556, 0.97680593, 0.250623  , 0.90253194,
              0.45266828, 0.30104343, 0.64888271, 0.15531718, 0.77606609,
              0.13039699, 0.30246193, 0.8898364 , 0.56639641, 0.32682033])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.85303137, 0.60192283, 0.8622819 , 0.80765619, 0.12737031,
              0.07178899, 0.69421475, 0.0447223 , 0.18475193, 0.01164301,
              0.06869297, 0.63099776, 0.35596944, 0.52163403, 0.56470559,
              0.9845204 , 0.19125983, 0.38457576, 0.95814928, 0.91215046,
              0.8566091 , 0.65415789, 0.44804157, 0.59095156, 0.84595519,
              0.61522503, 0.18547951, 0.66603285, 0.65078674, 0.47722057,
              0.78479539, 0.45650259, 0.31778308, 0.66414188, 0.75413957,
              0.54743928, 0.73943203, 0.74188382, 0.47128186, 0.4265367 ,
              0.40392622, 0.57497449, 0.64113855, 0.54354661, 0.21896277,
              0.75263992, 0.40810093, 0.07177383, 0.96234403, 0.80377927,
              0.63016539, 0.56896752, 0.59703929, 0.16210016, 0.37851506,
              0.05749988, 0.03121838, 0.42920372, 0.82545793, 0.79197624,
              0.43875768, 0.06327415, 0.35491205, 0.81433102, 0.41543639,
              0.55534301, 0.92006753, 0.17217924, 0.58611016, 0.13036109,
              0.71928966, 0.83038976, 0.23001252, 0.05199973, 0.00922372,
              0.6063132 , 0.12279514, 0.17332625, 0.59080202, 0.65185942,
              0.8121016 , 0.08447129, 0.1357446 , 0.16693411, 0.66077597,
              0.59809429, 0.0794077 , 0.81293343, 0.49628516, 0.46636105,
              0.5395652 , 0.59800587, 0.45684443, 0.94264878, 0.63467743,
              0.5011851 , 0.07815807, 0.73943221, 0.62485294, 0.16644961])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.73635967, 0.8555311 , 0.96361253, 0.35130137, 0.11440734,
              0.05740855, 0.89145225, 0.04286614, 0.09220371, 0.07266397,
              0.97858066, 0.50561376, 0.15097746, 0.22632166, 0.94196566,
              0.24293305, 0.00482022, 0.15703827, 0.64276313, 0.77898866,
              0.77457247, 0.91892782, 0.05994075, 0.89504992, 0.55076965,
              0.95782215, 0.08307455, 0.49725043, 0.67965597, 0.65906387,
              0.30483238, 0.06012979, 0.90083165, 0.38240845, 0.3694483 ,
              0.45273659, 0.13958811, 0.66332889, 0.53355007, 0.0371335 ,
              0.30136468, 0.97210576, 0.3776409 , 0.29471552, 0.68185858,
              0.2576826 , 0.99386816, 0.84831402, 0.21053797, 0.43173714,
              0.65960811, 0.91441165, 0.40949148, 0.64430985, 0.91156862,
              0.18431545, 0.44950108, 0.06100045, 0.4185939 , 0.54007141,
              0.45012592, 0.95466076, 0.20692848, 0.24298064, 0.68197351,
              0.46292855, 0.4268378 , 0.16331433, 0.25165482, 0.17897825,
              0.60432006, 0.8216244 , 0.97542936, 0.78982048, 0.60984429,
              0.70112209, 0.2699313 , 0.25595078, 0.05612059, 0.53574338,
              0.61591575, 0.15925881, 0.72497664, 0.25896434, 0.90093269,
              0.78164579, 0.66146948, 0.43837727, 0.82381115, 0.61303521,
              0.25647017, 0.46321518, 0.18585226, 0.09314835, 0.01917824,
              0.98997303, 0.42842798, 0.63271683, 0.1921323 , 0.87712696])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.28067342, 0.84060595, 0.31691873, 0.59975981, 0.00339621,
              0.91032675, 0.99179323, 0.75421316, 0.59960677, 0.18368466,
              0.59981942, 0.43913613, 0.72771112, 0.11713097, 0.18445608,
              0.311741  , 0.69379225, 0.2271336 , 0.9998506 , 0.00383929,
              0.56455138, 0.72906764, 0.81161704, 0.03027423, 0.82981144,
              0.68118067, 0.58892802, 0.65961414, 0.70473219, 0.97703934,
              0.92161038, 0.34755912, 0.77404628, 0.86706312, 0.70548319,
              0.66269299, 0.58134828, 0.3684034 , 0.12778726, 0.86451802,
              0.78042312, 0.4929411 , 0.72497372, 0.51477241, 0.66953838,
              0.51881136, 0.95341843, 0.07596499, 0.71123429, 0.90948228,
              0.65234079, 0.75554888, 0.06838314, 0.18701865, 0.00637929,
              0.29374311, 0.51759682, 0.15400636, 0.93160931, 0.42388519,
              0.99835225, 0.32732438, 0.16969553, 0.4362771 , 0.5711679 ,
              0.61175692, 0.53243472, 0.01905946, 0.60360897, 0.54140167,
              0.95818233, 0.9610175 , 0.88624357, 0.8405535 , 0.57577491,
              0.0819807 , 0.84320285, 0.29046363, 0.87419177, 0.36053724,
              0.20546222, 0.25466703, 0.75566846, 0.71207021, 0.31492122,
              0.69437961, 0.74832563, 0.12531991, 0.00606965, 0.99984603,
              0.85475376, 0.35554529, 0.27480437, 0.9912053 , 0.80548069,
              0.18757755, 0.15182718, 0.9492979 , 0.7665972 , 0.52080728])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.65466939, 0.50112575, 0.53052035, 0.94360938, 0.21487204,
              0.60669753, 0.92574634, 0.76224696, 0.99991082, 0.58476216,
              0.87208801, 0.38634328, 0.86071115, 0.20021664, 0.2378593 ,
              0.87958992, 0.47128375, 0.65935491, 0.86289763, 0.73291781,
              0.79101687, 0.34735485, 0.01647619, 0.92200261, 0.47911641,
              0.31101196, 0.34459644, 0.77803646, 0.20670162, 0.57784323,
              0.30045046, 0.33571156, 0.82658304, 0.13318559, 0.12860791,
              0.33710295, 0.0158613 , 0.92016481, 0.68018743, 0.79243115,
              0.4822392 , 0.7759542 , 0.62798689, 0.39235421, 0.46566272,
              0.36889687, 0.80939591, 0.08531678, 0.03753446, 0.54121605,
              0.38092063, 0.3460409 , 0.12927577, 0.19300404, 0.31946995,
              0.46146732, 0.56793871, 0.40889396, 0.47055079, 0.50567489,
              0.19662265, 0.57549592, 0.71776275, 0.33507088, 0.8690504 ,
              0.25494773, 0.07331254, 0.20302456, 0.36443195, 0.49248772,
              0.23572617, 0.92674612, 0.79148134, 0.38313552, 0.98335648,
              0.23225576, 0.00267724, 0.04772561, 0.59069835, 0.7018819 ,
              0.27230628, 0.62629002, 0.45022305, 0.74710456, 0.0209201 ,
              0.08391605, 0.34357947, 0.10722682, 0.35067072, 0.35731141,
              0.85751886, 0.74942501, 0.81965956, 0.32227727, 0.35010069,
              0.86567301, 0.51402151, 0.29991093, 0.10684703, 0.46603927])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.89593726, 0.93963219, 0.21129788, 0.29300342, 0.86808229,
              0.35454238, 0.66963843, 0.39822971, 0.17675672, 0.28561385,
              0.3001064 , 0.98053688, 0.14949193, 0.1409966 , 0.94466847,
              0.57028334, 0.73154172, 0.74062058, 0.79800394, 0.60031869,
              0.90934763, 0.52239565, 0.78969346, 0.49382505, 0.1627063 ,
              0.28896898, 0.1449138 , 0.84799674, 0.2430515 , 0.07373255,
              0.82212373, 0.82879515, 0.22974487, 0.31157828, 0.03508918,
              0.58080333, 0.27603974, 0.83688009, 0.1101754 , 0.67016074,
              0.80178358, 0.57442685, 0.60280917, 0.44497162, 0.58401773,
              0.60257471, 0.37602478, 0.29779201, 0.97099563, 0.7790742 ,
              0.26082447, 0.90561239, 0.97101082, 0.96975928, 0.39556853,
              0.64723355, 0.45087504, 0.20020484, 0.00960384, 0.56611146,
              0.06946404, 0.1067689 , 0.34646258, 0.96826608, 0.29022524,
              0.41207222, 0.06937008, 0.69498747, 0.05645513, 0.86721833,
              0.32792523, 0.19086511, 0.30511922, 0.66470257, 0.13407008,
              0.10150616, 0.14780478, 0.08430642, 0.32943934, 0.53269871,
              0.10544225, 0.88058521, 0.37013649, 0.86165818, 0.07676559,
              0.41323079, 0.59013598, 0.47328648, 0.30972407, 0.57051371,
              0.19353331, 0.06311203, 0.82090626, 0.12214054, 0.04067758,
              0.6798923 , 0.22603602, 0.26163369, 0.80932534, 0.44248472])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([2.45112961e-01, 5.20681735e-01, 5.65248156e-01, 3.19393972e-01,
              9.55354544e-01, 6.96444181e-02, 3.09276724e-01, 1.07730919e-01,
              1.29234396e-01, 2.25417664e-01, 1.05973164e-01, 5.47753143e-01,
              3.29570923e-01, 7.18815692e-01, 9.40993722e-01, 4.61732108e-01,
              6.39001041e-01, 8.38535667e-01, 2.91271556e-01, 4.41689715e-01,
              2.61522744e-01, 7.94095141e-01, 5.76647634e-01, 2.12830598e-01,
              9.02926115e-01, 3.40225314e-01, 5.19613859e-01, 2.68817583e-01,
              8.36051139e-01, 1.68343657e-01, 5.02788636e-01, 4.13869938e-01,
              8.08038094e-01, 5.68043430e-01, 8.70289517e-01, 1.13387652e-01,
              7.05764368e-01, 7.36112689e-01, 5.38611038e-01, 9.05679052e-01,
              6.61452193e-01, 5.82332478e-01, 3.81364858e-01, 1.32784528e-03,
              1.59068569e-01, 9.35040111e-01, 6.93386226e-01, 7.82980998e-01,
              5.27818644e-02, 4.83528200e-01, 5.87642278e-02, 6.94174014e-01,
              8.64334779e-01, 2.60029605e-01, 5.27959534e-01, 1.27263470e-01,
              3.63054498e-01, 6.22070828e-01, 5.55478187e-01, 7.59756424e-01,
              2.96929587e-01, 1.79110493e-01, 4.04799494e-01, 8.93483840e-01,
              3.68241291e-01, 4.65522892e-01, 7.48826027e-01, 6.11095324e-01,
              4.62192056e-01, 5.80379408e-01, 8.08247772e-01, 4.76546293e-01,
              8.30494787e-02, 6.79823029e-01, 4.76128737e-04, 7.79706776e-01,
              3.14993839e-01, 4.86465661e-01, 9.08375052e-01, 9.94394460e-03,
              6.30965744e-01, 4.63241711e-01, 7.79802187e-01, 6.85340224e-01,
              1.07261859e-02, 4.40325138e-01, 4.63271923e-01, 4.96362925e-01,
              4.54662677e-01, 5.62447621e-01, 7.40633041e-01, 8.82088521e-01,
              5.47111116e-01, 5.70591996e-01, 5.34137094e-01, 4.39225866e-01,
              3.33135682e-01, 8.77584663e-01, 5.58458948e-01, 6.26567675e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.28067342, 0.84060595, 0.31691873, 0.59975981, 0.00339621,
              0.91032675, 0.99179323, 0.75421316, 0.59960677, 0.18368466,
              0.59981942, 0.43913613, 0.72771112, 0.11713097, 0.18445608,
              0.311741  , 0.69379225, 0.2271336 , 0.9998506 , 0.00383929,
              0.56455138, 0.72906764, 0.81161704, 0.03027423, 0.82981144,
              0.68118067, 0.58892802, 0.65961414, 0.70473219, 0.97703934,
              0.92161038, 0.34755912, 0.77404628, 0.86706312, 0.70548319,
              0.66269299, 0.58134828, 0.3684034 , 0.12778726, 0.86451802,
              0.78042312, 0.4929411 , 0.72497372, 0.51477241, 0.66953838,
              0.51881136, 0.95341843, 0.07596499, 0.71123429, 0.90948228,
              0.65234079, 0.75554888, 0.06838314, 0.18701865, 0.00637929,
              0.29374311, 0.51759682, 0.15400636, 0.93160931, 0.42388519,
              0.99835225, 0.32732438, 0.16969553, 0.4362771 , 0.5711679 ,
              0.61175692, 0.53243472, 0.01905946, 0.60360897, 0.54140167,
              0.95818233, 0.9610175 , 0.88624357, 0.8405535 , 0.57577491,
              0.0819807 , 0.84320285, 0.29046363, 0.87419177, 0.36053724,
              0.20546222, 0.25466703, 0.75566846, 0.71207021, 0.31492122,
              0.69437961, 0.74832563, 0.12531991, 0.00606965, 0.99984603,
              0.85475376, 0.35554529, 0.27480437, 0.9912053 , 0.80548069,
              0.18757755, 0.15182718, 0.9492979 , 0.7665972 , 0.52080728])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.65466939, 0.50112575, 0.53052035, 0.94360938, 0.21487204,
              0.60669753, 0.92574634, 0.76224696, 0.99991082, 0.58476216,
              0.87208801, 0.38634328, 0.86071115, 0.20021664, 0.2378593 ,
              0.87958992, 0.47128375, 0.65935491, 0.86289763, 0.73291781,
              0.79101687, 0.34735485, 0.01647619, 0.92200261, 0.47911641,
              0.31101196, 0.34459644, 0.77803646, 0.20670162, 0.57784323,
              0.30045046, 0.33571156, 0.82658304, 0.13318559, 0.12860791,
              0.33710295, 0.0158613 , 0.92016481, 0.68018743, 0.79243115,
              0.4822392 , 0.7759542 , 0.62798689, 0.39235421, 0.46566272,
              0.36889687, 0.80939591, 0.08531678, 0.03753446, 0.54121605,
              0.38092063, 0.3460409 , 0.12927577, 0.19300404, 0.31946995,
              0.46146732, 0.56793871, 0.40889396, 0.47055079, 0.50567489,
              0.19662265, 0.57549592, 0.71776275, 0.33507088, 0.8690504 ,
              0.25494773, 0.07331254, 0.20302456, 0.36443195, 0.49248772,
              0.23572617, 0.92674612, 0.79148134, 0.38313552, 0.98335648,
              0.23225576, 0.00267724, 0.04772561, 0.59069835, 0.7018819 ,
              0.27230628, 0.62629002, 0.45022305, 0.74710456, 0.0209201 ,
              0.08391605, 0.34357947, 0.10722682, 0.35067072, 0.35731141,
              0.85751886, 0.74942501, 0.81965956, 0.32227727, 0.35010069,
              0.86567301, 0.51402151, 0.29991093, 0.10684703, 0.46603927])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.89593726, 0.93963219, 0.21129788, 0.29300342, 0.86808229,
              0.35454238, 0.66963843, 0.39822971, 0.17675672, 0.28561385,
              0.3001064 , 0.98053688, 0.14949193, 0.1409966 , 0.94466847,
              0.57028334, 0.73154172, 0.74062058, 0.79800394, 0.60031869,
              0.90934763, 0.52239565, 0.78969346, 0.49382505, 0.1627063 ,
              0.28896898, 0.1449138 , 0.84799674, 0.2430515 , 0.07373255,
              0.82212373, 0.82879515, 0.22974487, 0.31157828, 0.03508918,
              0.58080333, 0.27603974, 0.83688009, 0.1101754 , 0.67016074,
              0.80178358, 0.57442685, 0.60280917, 0.44497162, 0.58401773,
              0.60257471, 0.37602478, 0.29779201, 0.97099563, 0.7790742 ,
              0.26082447, 0.90561239, 0.97101082, 0.96975928, 0.39556853,
              0.64723355, 0.45087504, 0.20020484, 0.00960384, 0.56611146,
              0.06946404, 0.1067689 , 0.34646258, 0.96826608, 0.29022524,
              0.41207222, 0.06937008, 0.69498747, 0.05645513, 0.86721833,
              0.32792523, 0.19086511, 0.30511922, 0.66470257, 0.13407008,
              0.10150616, 0.14780478, 0.08430642, 0.32943934, 0.53269871,
              0.10544225, 0.88058521, 0.37013649, 0.86165818, 0.07676559,
              0.41323079, 0.59013598, 0.47328648, 0.30972407, 0.57051371,
              0.19353331, 0.06311203, 0.82090626, 0.12214054, 0.04067758,
              0.6798923 , 0.22603602, 0.26163369, 0.80932534, 0.44248472])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.81149619, 0.37861937, 0.61578331, 0.45793748, 0.41372235,
              0.14709187, 0.42348261, 0.0761555 , 0.01435947, 0.07998492,
              0.03034037, 0.60732457, 0.96899834, 0.19234635, 0.33526672,
              0.26841237, 0.17001272, 0.96921404, 0.51010114, 0.66631322,
              0.19279082, 0.78519874, 0.63186491, 0.9129499 , 0.3574951 ,
              0.148836  , 0.41131603, 0.89157741, 0.120131  , 0.89525974,
              0.1234409 , 0.25316549, 0.86149577, 0.02939126, 0.68178643,
              0.72759009, 0.02781454, 0.40740785, 0.47470188, 0.08715998,
              0.7540611 , 0.69620587, 0.28682741, 0.79443844, 0.64112557,
              0.57060069, 0.5581406 , 0.54450031, 0.89571914, 0.04101226,
              0.50471219, 0.13057716, 0.80160621, 0.08077924, 0.85373886,
              0.28950567, 0.29437751, 0.75778229, 0.46830431, 0.99580975,
              0.57787598, 0.95592115, 0.55080201, 0.21978925, 0.62031534,
              0.57561   , 0.02065056, 0.37528812, 0.04365571, 0.93200059,
              0.93348725, 0.43125154, 0.95181531, 0.63017497, 0.57089235,
              0.35369132, 0.47743167, 0.52715506, 0.53392702, 0.05212576,
              0.58680471, 0.04911512, 0.27935548, 0.49260988, 0.02035268,
              0.91247588, 0.42618544, 0.60474392, 0.99619675, 0.7418263 ,
              0.26004617, 0.00316321, 0.26497231, 0.34638761, 0.10983224,
              0.41893271, 0.81878022, 0.16898457, 0.25040921, 0.57111771])}]]


