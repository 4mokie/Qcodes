
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='a96ca60e-7760-4b16-9c59-d5e460b66446'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='b3312a53-0e88-498d-b69a-46544ea58e27'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.362451980837445],
     [0.551043515025744],
     [0.924072484301535],
     [0.939895554030211],
     [0.982227354099208],
     [0.621425491281124],
     [0.903256111581136],
     [0.919656526791728],
     [0.691297666931035],
     [0.6748558457602],
     [0.83699423554886],
     [0.753654676683646],
     [0.397370329364565],
     [0.922860837370178],
     [0.909564033732124],
     [0.861903578439433],
     [0.354431464439379],
     [0.92234887539962],
     [0.841164619860324],
     [0.483265046594217],
     [0.462464007775841],
     [0.913792727016434],
     [0.879831025925752],
     [0.967592573583383],
     [0.0452433742656903],
     [0.234347204208135],
     [0.661763171386015],
     [0.209716406694775],
     [0.0342340408917916],
     [0.0185247202110767],
     [0.0399606905365976],
     [0.00103262424661876],
     [0.320439825688312],
     [0.667967483174416],
     [0.703085908443096],
     [0.87638647405816],
     [0.487032645550274],
     [0.887886113740986],
     [0.209494029552145],
     [0.225501314128796],
     [0.646112043429566],
     [0.679112416858213],
     [0.371727988692475],
     [0.572210652984065],
     [0.341549999078351],
     [0.720628961607259],
     [0.534607424536299],
     [0.742035460449631],
     [0.2993080258758],
     [0.839691164964011],
     [0.102335427883325],
     [0.808264322442828],
     [0.380107005841168],
     [0.890200015188473],
     [0.756704778563074],
     [0.577628818803045],
     [0.248849732025597],
     [0.122159204510327],
     [0.372180958102198],
     [0.753022560638964],
     [0.0170294019557848],
     [0.046509918934698],
     [0.362364655382285],
     [0.317931341962438],
     [0.45044175469359],
     [0.270414575473476],
     [0.679002458753172],
     [0.237889624805587],
     [0.817266951187226],
     [0.214246953840371],
     [0.891795229058666],
     [0.771912161984773],
     [0.431168501491119],
     [0.0759135813203731],
     [0.204430510045128],
     [0.20645183918572],
     [0.590621998039772],
     [0.96327764021242],
     [0.958068279556951],
     [0.16586664250762],
     [0.509669886475481],
     [0.658369191020469],
     [0.652511774629153],
     [0.494916440467617],
     [0.497236210731142],
     [0.975797004707606],
     [0.145332032102202],
     [0.200384628105492],
     [0.749423831045652],
     [0.183563275602385],
     [0.860735159660923],
     [0.299058313727168],
     [0.861737493442118],
     [0.463612535670676],
     [0.488639715640828],
     [0.0683846567919099],
     [0.191109538689413],
     [0.714959878811645],
     [0.878706780272428],
     [0.271052894553697]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.1076052])],
     [array([0.85658919])],
     [array([0.65342534])],
     [array([0.29022155])],
     [array([0.71698609])],
     [array([0.47248907])],
     [array([0.13543893])],
     [array([0.82286572])],
     [array([0.47733039])],
     [array([0.49788583])],
     [array([0.33173323])],
     [array([0.85471586])],
     [array([0.86751847])],
     [array([0.74646026])],
     [array([0.7085018])],
     [array([0.88368004])],
     [array([0.27429031])],
     [array([0.47023961])],
     [array([0.72116265])],
     [array([0.05361746])],
     [array([0.11837051])],
     [array([0.99307567])],
     [array([0.72315677])],
     [array([0.01639568])],
     [array([0.6185048])],
     [array([0.08906907])],
     [array([0.16289667])],
     [array([0.78453725])],
     [array([0.53776452])],
     [array([0.23549381])],
     [array([0.13371694])],
     [array([0.05521276])],
     [array([0.33361807])],
     [array([0.75918323])],
     [array([0.27526261])],
     [array([0.55364661])],
     [array([0.72838644])],
     [array([0.31996319])],
     [array([0.58511642])],
     [array([0.23166077])],
     [array([0.16911546])],
     [array([0.14114119])],
     [array([0.2480603])],
     [array([0.49923343])],
     [array([0.13753497])],
     [array([0.77138797])],
     [array([0.69208474])],
     [array([0.71323097])],
     [array([0.98050697])],
     [array([0.71797785])],
     [array([0.60386633])],
     [array([0.82284999])],
     [array([0.57887621])],
     [array([0.0564746])],
     [array([0.46653157])],
     [array([0.81729608])],
     [array([0.02646248])],
     [array([0.05913068])],
     [array([0.14768235])],
     [array([0.92385974])],
     [array([0.83145397])],
     [array([0.93290139])],
     [array([0.60691833])],
     [array([0.23833326])],
     [array([0.83727426])],
     [array([0.9180282])],
     [array([0.90167775])],
     [array([0.55929723])],
     [array([0.05789703])],
     [array([0.66854764])],
     [array([0.2673382])],
     [array([0.59081838])],
     [array([0.71144431])],
     [array([0.26277192])],
     [array([0.18865077])],
     [array([0.26301345])],
     [array([0.5161259])],
     [array([0.60697184])],
     [array([0.4049708])],
     [array([0.47228862])],
     [array([0.46204508])],
     [array([0.2260368])],
     [array([0.82547653])],
     [array([0.18766654])],
     [array([0.76334971])],
     [array([0.52235751])],
     [array([0.60811078])],
     [array([0.56290154])],
     [array([0.38776306])],
     [array([0.72142816])],
     [array([0.50471301])],
     [array([0.23858438])],
     [array([0.13131079])],
     [array([0.82603099])],
     [array([0.12334095])],
     [array([0.00446234])],
     [array([0.0123536])],
     [array([0.91547182])],
     [array([0.68807074])],
     [array([0.40996202])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.1076052 , 0.85658919, 0.65342534, 0.29022155, 0.71698609,
           0.47248907, 0.13543893, 0.82286572, 0.47733039, 0.49788583,
           0.33173323, 0.85471586, 0.86751847, 0.74646026, 0.7085018 ,
           0.88368004, 0.27429031, 0.47023961, 0.72116265, 0.05361746,
           0.11837051, 0.99307567, 0.72315677, 0.01639568, 0.6185048 ,
           0.08906907, 0.16289667, 0.78453725, 0.53776452, 0.23549381,
           0.13371694, 0.05521276, 0.33361807, 0.75918323, 0.27526261,
           0.55364661, 0.72838644, 0.31996319, 0.58511642, 0.23166077,
           0.16911546, 0.14114119, 0.2480603 , 0.49923343, 0.13753497,
           0.77138797, 0.69208474, 0.71323097, 0.98050697, 0.71797785,
           0.60386633, 0.82284999, 0.57887621, 0.0564746 , 0.46653157,
           0.81729608, 0.02646248, 0.05913068, 0.14768235, 0.92385974,
           0.83145397, 0.93290139, 0.60691833, 0.23833326, 0.83727426,
           0.9180282 , 0.90167775, 0.55929723, 0.05789703, 0.66854764,
           0.2673382 , 0.59081838, 0.71144431, 0.26277192, 0.18865077,
           0.26301345, 0.5161259 , 0.60697184, 0.4049708 , 0.47228862,
           0.46204508, 0.2260368 , 0.82547653, 0.18766654, 0.76334971,
           0.52235751, 0.60811078, 0.56290154, 0.38776306, 0.72142816,
           0.50471301, 0.23858438, 0.13131079, 0.82603099, 0.12334095,
           0.00446234, 0.0123536 , 0.91547182, 0.68807074, 0.40996202])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.36245198, 0.55104352, 0.92407248, 0.93989555, 0.98222735,
              0.62142549, 0.90325611, 0.91965653, 0.69129767, 0.67485585,
              0.83699424, 0.75365468, 0.39737033, 0.92286084, 0.90956403,
              0.86190358, 0.35443146, 0.92234888, 0.84116462, 0.48326505,
              0.46246401, 0.91379273, 0.87983103, 0.96759257, 0.04524337,
              0.2343472 , 0.66176317, 0.20971641, 0.03423404, 0.01852472,
              0.03996069, 0.00103262, 0.32043983, 0.66796748, 0.70308591,
              0.87638647, 0.48703265, 0.88788611, 0.20949403, 0.22550131,
              0.64611204, 0.67911242, 0.37172799, 0.57221065, 0.34155   ,
              0.72062896, 0.53460742, 0.74203546, 0.29930803, 0.83969116,
              0.10233543, 0.80826432, 0.38010701, 0.89020002, 0.75670478,
              0.57762882, 0.24884973, 0.1221592 , 0.37218096, 0.75302256,
              0.0170294 , 0.04650992, 0.36236466, 0.31793134, 0.45044175,
              0.27041458, 0.67900246, 0.23788962, 0.81726695, 0.21424695,
              0.89179523, 0.77191216, 0.4311685 , 0.07591358, 0.20443051,
              0.20645184, 0.590622  , 0.96327764, 0.95806828, 0.16586664,
              0.50966989, 0.65836919, 0.65251177, 0.49491644, 0.49723621,
              0.975797  , 0.14533203, 0.20038463, 0.74942383, 0.18356328,
              0.86073516, 0.29905831, 0.86173749, 0.46361254, 0.48863972,
              0.06838466, 0.19110954, 0.71495988, 0.87870678, 0.27105289])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.58467024, 0.51415417, 0.76217922, 0.71835127, 0.35812681,
              0.3723324 , 0.8495849 , 0.9999108 , 0.22195523, 0.77805139,
              0.73305663, 0.44714322, 0.58217209, 0.1160778 , 0.73016601,
              0.60251572, 0.93111697, 0.12148259, 0.29865376, 0.9991711 ,
              0.31553656, 0.87047225, 0.65688413, 0.63155157, 0.04018537,
              0.38784931, 0.00640661, 0.34388376, 0.37402964, 0.18786802,
              0.4141227 , 0.15533309, 0.4845888 , 0.95274438, 0.24982678,
              0.01882537, 0.11024215, 0.96972851, 0.03468671, 0.44182118,
              0.52525706, 0.72744525, 0.114379  , 0.46411463, 0.02100514,
              0.96002541, 0.25509709, 0.43612622, 0.70741354, 0.45172032,
              0.47448394, 0.08338208, 0.64082227, 0.48720691, 0.51685474,
              0.20376166, 0.69904892, 0.43835612, 0.44855823, 0.60736113,
              0.55548068, 0.13896436, 0.2598223 , 0.16751306, 0.56686264,
              0.47094007, 0.01972606, 0.08412805, 0.00628991, 0.11624226,
              0.37184728, 0.27395614, 0.61588802, 0.03348207, 0.42030669,
              0.28595573, 0.94981671, 0.92621925, 0.61006885, 0.30080707,
              0.34852297, 0.42443427, 0.63168495, 0.84815217, 0.67745549,
              0.26416065, 0.80788573, 0.67413154, 0.86637276, 0.72189135,
              0.27232562, 0.59960686, 0.21607558, 0.31279011, 0.52519197,
              0.82884144, 0.57267563, 0.49752589, 0.27051359, 0.87099855])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.12111968, 0.62705209, 0.51213788, 0.39697476, 0.27768938,
              0.2684684 , 0.63507626, 0.65825516, 0.10264972, 0.35584702,
              0.37719856, 0.07857174, 0.20011204, 0.33146122, 0.25760388,
              0.08641785, 0.7189801 , 0.09131016, 0.34487517, 0.52894615,
              0.75276094, 0.3849159 , 0.68454068, 0.21466202, 0.91306045,
              0.97203573, 0.9463735 , 0.6884471 , 0.56237715, 0.04872179,
              0.04946464, 0.84009564, 0.36972153, 0.02548877, 0.27911201,
              0.42233873, 0.82944545, 0.44377066, 0.1726011 , 0.34722833,
              0.85445555, 0.45245338, 0.48881145, 0.80493447, 0.32874889,
              0.09056467, 0.41963966, 0.08346349, 0.75635405, 0.7813313 ,
              0.50718459, 0.13750269, 0.35975179, 0.24422451, 0.68628024,
              0.62575903, 0.69060255, 0.79052608, 0.25539507, 0.27158163,
              0.79281234, 0.23807304, 0.1635748 , 0.00911129, 0.01888101,
              0.0858663 , 0.44816739, 0.0573441 , 0.71005565, 0.4989736 ,
              0.92549914, 0.4852624 , 0.6615101 , 0.90994745, 0.35561895,
              0.91597513, 0.08771588, 0.02092777, 0.1394096 , 0.5331433 ,
              0.06650467, 0.39895636, 0.2067024 , 0.54591404, 0.36552015,
              0.89095313, 0.49631237, 0.00403533, 0.53728693, 0.13106021,
              0.53611943, 0.96087058, 0.45701328, 0.57418438, 0.48408433,
              0.04526137, 0.42567641, 0.66108759, 0.3268794 , 0.0266314 ])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.43678394, 0.70639009, 0.96443642, 0.61224014, 0.78501838,
              0.51161495, 0.93666234, 0.87766752, 0.19476455, 0.79272422,
              0.91372876, 0.41990018, 0.06481243, 0.31632715, 0.10395568,
              0.25838235, 0.64369778, 0.96670961, 0.18126747, 0.63359699,
              0.16267717, 0.05821359, 0.99760407, 0.95725359, 0.59544342,
              0.84436526, 0.71164107, 0.09061405, 0.81440645, 0.13520689,
              0.62218908, 0.47477934, 0.90957001, 0.99500757, 0.37547568,
              0.10860081, 0.106356  , 0.53888565, 0.51641936, 0.76727363,
              0.60595585, 0.76518952, 0.41501331, 0.95025556, 0.58460776,
              0.60953539, 0.76587146, 0.84177972, 0.26406654, 0.59375405,
              0.31106991, 0.51192758, 0.63425288, 0.73488659, 0.6427389 ,
              0.04041347, 0.68285724, 0.63704059, 0.41533438, 0.4492349 ,
              0.08337256, 0.95988865, 0.87438803, 0.07311393, 0.81912726,
              0.15039627, 0.18398985, 0.75224059, 0.48183289, 0.17646308,
              0.24133796, 0.96827063, 0.1698243 , 0.05354375, 0.78189724,
              0.08932536, 0.10976966, 0.67703877, 0.93535709, 0.07151942,
              0.44507232, 0.85819085, 0.77153684, 0.54169184, 0.56274991,
              0.37657036, 0.51166679, 0.92348565, 0.17139354, 0.26745501,
              0.38821625, 0.95791288, 0.05252006, 0.03131109, 0.48741797,
              0.16569524, 0.79369127, 0.38165996, 0.06490217, 0.22963919])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.36245198, 0.55104352, 0.92407248, 0.93989555, 0.98222735,
              0.62142549, 0.90325611, 0.91965653, 0.69129767, 0.67485585,
              0.83699424, 0.75365468, 0.39737033, 0.92286084, 0.90956403,
              0.86190358, 0.35443146, 0.92234888, 0.84116462, 0.48326505,
              0.46246401, 0.91379273, 0.87983103, 0.96759257, 0.04524337,
              0.2343472 , 0.66176317, 0.20971641, 0.03423404, 0.01852472,
              0.03996069, 0.00103262, 0.32043983, 0.66796748, 0.70308591,
              0.87638647, 0.48703265, 0.88788611, 0.20949403, 0.22550131,
              0.64611204, 0.67911242, 0.37172799, 0.57221065, 0.34155   ,
              0.72062896, 0.53460742, 0.74203546, 0.29930803, 0.83969116,
              0.10233543, 0.80826432, 0.38010701, 0.89020002, 0.75670478,
              0.57762882, 0.24884973, 0.1221592 , 0.37218096, 0.75302256,
              0.0170294 , 0.04650992, 0.36236466, 0.31793134, 0.45044175,
              0.27041458, 0.67900246, 0.23788962, 0.81726695, 0.21424695,
              0.89179523, 0.77191216, 0.4311685 , 0.07591358, 0.20443051,
              0.20645184, 0.590622  , 0.96327764, 0.95806828, 0.16586664,
              0.50966989, 0.65836919, 0.65251177, 0.49491644, 0.49723621,
              0.975797  , 0.14533203, 0.20038463, 0.74942383, 0.18356328,
              0.86073516, 0.29905831, 0.86173749, 0.46361254, 0.48863972,
              0.06838466, 0.19110954, 0.71495988, 0.87870678, 0.27105289])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.58467024, 0.51415417, 0.76217922, 0.71835127, 0.35812681,
              0.3723324 , 0.8495849 , 0.9999108 , 0.22195523, 0.77805139,
              0.73305663, 0.44714322, 0.58217209, 0.1160778 , 0.73016601,
              0.60251572, 0.93111697, 0.12148259, 0.29865376, 0.9991711 ,
              0.31553656, 0.87047225, 0.65688413, 0.63155157, 0.04018537,
              0.38784931, 0.00640661, 0.34388376, 0.37402964, 0.18786802,
              0.4141227 , 0.15533309, 0.4845888 , 0.95274438, 0.24982678,
              0.01882537, 0.11024215, 0.96972851, 0.03468671, 0.44182118,
              0.52525706, 0.72744525, 0.114379  , 0.46411463, 0.02100514,
              0.96002541, 0.25509709, 0.43612622, 0.70741354, 0.45172032,
              0.47448394, 0.08338208, 0.64082227, 0.48720691, 0.51685474,
              0.20376166, 0.69904892, 0.43835612, 0.44855823, 0.60736113,
              0.55548068, 0.13896436, 0.2598223 , 0.16751306, 0.56686264,
              0.47094007, 0.01972606, 0.08412805, 0.00628991, 0.11624226,
              0.37184728, 0.27395614, 0.61588802, 0.03348207, 0.42030669,
              0.28595573, 0.94981671, 0.92621925, 0.61006885, 0.30080707,
              0.34852297, 0.42443427, 0.63168495, 0.84815217, 0.67745549,
              0.26416065, 0.80788573, 0.67413154, 0.86637276, 0.72189135,
              0.27232562, 0.59960686, 0.21607558, 0.31279011, 0.52519197,
              0.82884144, 0.57267563, 0.49752589, 0.27051359, 0.87099855])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.12111968, 0.62705209, 0.51213788, 0.39697476, 0.27768938,
              0.2684684 , 0.63507626, 0.65825516, 0.10264972, 0.35584702,
              0.37719856, 0.07857174, 0.20011204, 0.33146122, 0.25760388,
              0.08641785, 0.7189801 , 0.09131016, 0.34487517, 0.52894615,
              0.75276094, 0.3849159 , 0.68454068, 0.21466202, 0.91306045,
              0.97203573, 0.9463735 , 0.6884471 , 0.56237715, 0.04872179,
              0.04946464, 0.84009564, 0.36972153, 0.02548877, 0.27911201,
              0.42233873, 0.82944545, 0.44377066, 0.1726011 , 0.34722833,
              0.85445555, 0.45245338, 0.48881145, 0.80493447, 0.32874889,
              0.09056467, 0.41963966, 0.08346349, 0.75635405, 0.7813313 ,
              0.50718459, 0.13750269, 0.35975179, 0.24422451, 0.68628024,
              0.62575903, 0.69060255, 0.79052608, 0.25539507, 0.27158163,
              0.79281234, 0.23807304, 0.1635748 , 0.00911129, 0.01888101,
              0.0858663 , 0.44816739, 0.0573441 , 0.71005565, 0.4989736 ,
              0.92549914, 0.4852624 , 0.6615101 , 0.90994745, 0.35561895,
              0.91597513, 0.08771588, 0.02092777, 0.1394096 , 0.5331433 ,
              0.06650467, 0.39895636, 0.2067024 , 0.54591404, 0.36552015,
              0.89095313, 0.49631237, 0.00403533, 0.53728693, 0.13106021,
              0.53611943, 0.96087058, 0.45701328, 0.57418438, 0.48408433,
              0.04526137, 0.42567641, 0.66108759, 0.3268794 , 0.0266314 ])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.26136796, 0.39263896, 0.20718904, 0.28529403, 0.84884135,
              0.96827568, 0.55497898, 0.68278358, 0.9170787 , 0.84733908,
              0.00680388, 0.37939984, 0.07740887, 0.45915744, 0.15391811,
              0.74444017, 0.51776582, 0.66667741, 0.63361816, 0.44513858,
              0.16349163, 0.35806017, 0.54965496, 0.93186409, 0.95409485,
              0.48247618, 0.38444065, 0.8710446 , 0.76921261, 0.55157092,
              0.36248852, 0.00442487, 0.19847507, 0.87854248, 0.63977207,
              0.44731535, 0.74904788, 0.01454657, 0.89214646, 0.98971496,
              0.30932235, 0.12090994, 0.3150982 , 0.0771278 , 0.14057406,
              0.6512567 , 0.2320359 , 0.48169908, 0.71745303, 0.48290829,
              0.51649429, 0.77018592, 0.84288948, 0.98881466, 0.44628883,
              0.45876111, 0.13859999, 0.63912566, 0.35496457, 0.7977801 ,
              0.05294407, 0.81980199, 0.98976053, 0.40727811, 0.08464856,
              0.10859891, 0.3316092 , 0.92859107, 0.44730742, 0.15782286,
              0.59230001, 0.43137389, 0.9353406 , 0.21696632, 0.76163468,
              0.48596173, 0.33132547, 0.16592218, 0.95521504, 0.82340083,
              0.50783084, 0.17660901, 0.41707758, 0.92530679, 0.75704029,
              0.13801314, 0.18729599, 0.1670165 , 0.89444386, 0.57754215,
              0.82546335, 0.264561  , 0.2647666 , 0.0146283 , 0.8628849 ,
              0.89297324, 0.2165718 , 0.14869714, 0.27099624, 0.28426189])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.1076052 , 0.85658919, 0.65342534, 0.29022155, 0.71698609,
              0.47248907, 0.13543893, 0.82286572, 0.47733039, 0.49788583,
              0.33173323, 0.85471586, 0.86751847, 0.74646026, 0.7085018 ,
              0.88368004, 0.27429031, 0.47023961, 0.72116265, 0.05361746,
              0.11837051, 0.99307567, 0.72315677, 0.01639568, 0.6185048 ,
              0.08906907, 0.16289667, 0.78453725, 0.53776452, 0.23549381,
              0.13371694, 0.05521276, 0.33361807, 0.75918323, 0.27526261,
              0.55364661, 0.72838644, 0.31996319, 0.58511642, 0.23166077,
              0.16911546, 0.14114119, 0.2480603 , 0.49923343, 0.13753497,
              0.77138797, 0.69208474, 0.71323097, 0.98050697, 0.71797785,
              0.60386633, 0.82284999, 0.57887621, 0.0564746 , 0.46653157,
              0.81729608, 0.02646248, 0.05913068, 0.14768235, 0.92385974,
              0.83145397, 0.93290139, 0.60691833, 0.23833326, 0.83727426,
              0.9180282 , 0.90167775, 0.55929723, 0.05789703, 0.66854764,
              0.2673382 , 0.59081838, 0.71144431, 0.26277192, 0.18865077,
              0.26301345, 0.5161259 , 0.60697184, 0.4049708 , 0.47228862,
              0.46204508, 0.2260368 , 0.82547653, 0.18766654, 0.76334971,
              0.52235751, 0.60811078, 0.56290154, 0.38776306, 0.72142816,
              0.50471301, 0.23858438, 0.13131079, 0.82603099, 0.12334095,
              0.00446234, 0.0123536 , 0.91547182, 0.68807074, 0.40996202])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.54186997, 0.70623436, 0.70191241, 0.52974392, 0.06846651,
              0.44486295, 0.93917592, 0.29108005, 0.20133523, 0.41910677,
              0.25344089, 0.64267709, 0.94852238, 0.09856767, 0.85641283,
              0.30672726, 0.40142323, 0.81472836, 0.15565127, 0.48957843,
              0.74929789, 0.43237899, 0.84538989, 0.48656169, 0.93194357,
              0.58048588, 0.10694014, 0.0572151 , 0.79752914, 0.47472296,
              0.51908869, 0.47547203, 0.04024557, 0.04475107, 0.76219159,
              0.77397215, 0.10739288, 0.12581616, 0.04095521, 0.38901538,
              0.34165913, 0.78885639, 0.23874492, 0.69295925, 0.89777705,
              0.33655472, 0.27597086, 0.36454206, 0.8164472 , 0.51401076,
              0.6655706 , 0.26023237, 0.21982551, 0.58825385, 0.50882144,
              0.7770896 , 0.61260987, 0.85613523, 0.4362407 , 0.10914591,
              0.58689662, 0.04278891, 0.8316696 , 0.02129831, 0.77735234,
              0.03327739, 0.97099535, 0.15985902, 0.53312653, 0.33292702,
              0.6304825 , 0.08905873, 0.12338959, 0.52719234, 0.18975377,
              0.11315526, 0.91227619, 0.85856205, 0.48573808, 0.16255901,
              0.50721134, 0.90952464, 0.23421703, 0.89232187, 0.3802036 ,
              0.4263574 , 0.57813841, 0.12250666, 0.16400728, 0.89056145,
              0.54077868, 0.9076814 , 0.86720871, 0.3360372 , 0.87783883,
              0.86884788, 0.95719619, 0.78856627, 0.68098503, 0.4614502 ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.59823154, 0.16112525, 0.27452558, 0.72789808, 0.78246469,
              0.38660778, 0.72873188, 0.82387948, 0.47514914, 0.33792099,
              0.94176722, 0.09761692, 0.66763109, 0.40863808, 0.80195349,
              0.70214923, 0.10313713, 0.00792678, 0.77783852, 0.595205  ,
              0.31688008, 0.618995  , 0.95699399, 0.07918561, 0.10685615,
              0.0663651 , 0.71534788, 0.70939682, 0.18911075, 0.52626523,
              0.30904168, 0.24142322, 0.54005014, 0.805196  , 0.83939998,
              0.12398434, 0.26178081, 0.72696024, 0.1311992 , 0.5629857 ,
              0.25854986, 0.39273466, 0.45300281, 0.6286021 , 0.44959764,
              0.10490793, 0.17344632, 0.51715837, 0.11306415, 0.10079541,
              0.49269814, 0.95015557, 0.02589417, 0.99058416, 0.7343288 ,
              0.93047885, 0.88670502, 0.8417684 , 0.03862344, 0.84208488,
              0.72499204, 0.96921362, 0.91861988, 0.08587395, 0.14683754,
              0.89010419, 0.58369634, 0.34576242, 0.71235072, 0.87319535,
              0.74473795, 0.78136837, 0.27905587, 0.83696218, 0.00686457,
              0.51752864, 0.75909717, 0.76079775, 0.67758785, 0.50493758,
              0.43522474, 0.96776378, 0.77663565, 0.55993429, 0.04361774,
              0.47125793, 0.33276283, 0.92368934, 0.74557699, 0.09979805,
              0.27586015, 0.22211867, 0.75934303, 0.99597859, 0.71074119,
              0.67902074, 0.39575995, 0.71592613, 0.26543915, 0.37903326])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.33032585, 0.18638421, 0.3967092 , 0.60359468, 0.45581525,
              0.66330199, 0.40540383, 0.53512983, 0.17870367, 0.44315112,
              0.00750033, 0.54541815, 0.64656795, 0.01749963, 0.2589053 ,
              0.92702954, 0.52325842, 0.04673395, 0.0180372 , 0.84772197,
              0.88576448, 0.24754059, 0.96145559, 0.20888879, 0.54809529,
              0.7851551 , 0.42956822, 0.07532547, 0.35278559, 0.39938557,
              0.61150906, 0.39578773, 0.81568548, 0.14374097, 0.71337599,
              0.03440263, 0.2285305 , 0.47538924, 0.189003  , 0.09075849,
              0.40905143, 0.89755025, 0.13090505, 0.3798393 , 0.85451538,
              0.93606427, 0.6879446 , 0.63297451, 0.7801758 , 0.04011328,
              0.33090304, 0.27718846, 0.0150341 , 0.26583407, 0.2359067 ,
              0.46055585, 0.52843392, 0.33789855, 0.0126674 , 0.17889948,
              0.96095662, 0.75087735, 0.83456148, 0.14084352, 0.91082823,
              0.2743317 , 0.21967446, 0.2256245 , 0.82608944, 0.201072  ,
              0.57260885, 0.45717869, 0.05974047, 0.9981045 , 0.61581622,
              0.5084145 , 0.8410814 , 0.00263983, 0.80555948, 0.11972869,
              0.70849067, 0.21153137, 0.2776437 , 0.00977713, 0.63021008,
              0.33866041, 0.36607606, 0.88579773, 0.34739147, 0.31669859,
              0.62068318, 0.22229889, 0.0612943 , 0.49729   , 0.98658538,
              0.91280483, 0.39991456, 0.79559058, 0.22301911, 0.54159599])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.1076052 , 0.85658919, 0.65342534, 0.29022155, 0.71698609,
              0.47248907, 0.13543893, 0.82286572, 0.47733039, 0.49788583,
              0.33173323, 0.85471586, 0.86751847, 0.74646026, 0.7085018 ,
              0.88368004, 0.27429031, 0.47023961, 0.72116265, 0.05361746,
              0.11837051, 0.99307567, 0.72315677, 0.01639568, 0.6185048 ,
              0.08906907, 0.16289667, 0.78453725, 0.53776452, 0.23549381,
              0.13371694, 0.05521276, 0.33361807, 0.75918323, 0.27526261,
              0.55364661, 0.72838644, 0.31996319, 0.58511642, 0.23166077,
              0.16911546, 0.14114119, 0.2480603 , 0.49923343, 0.13753497,
              0.77138797, 0.69208474, 0.71323097, 0.98050697, 0.71797785,
              0.60386633, 0.82284999, 0.57887621, 0.0564746 , 0.46653157,
              0.81729608, 0.02646248, 0.05913068, 0.14768235, 0.92385974,
              0.83145397, 0.93290139, 0.60691833, 0.23833326, 0.83727426,
              0.9180282 , 0.90167775, 0.55929723, 0.05789703, 0.66854764,
              0.2673382 , 0.59081838, 0.71144431, 0.26277192, 0.18865077,
              0.26301345, 0.5161259 , 0.60697184, 0.4049708 , 0.47228862,
              0.46204508, 0.2260368 , 0.82547653, 0.18766654, 0.76334971,
              0.52235751, 0.60811078, 0.56290154, 0.38776306, 0.72142816,
              0.50471301, 0.23858438, 0.13131079, 0.82603099, 0.12334095,
              0.00446234, 0.0123536 , 0.91547182, 0.68807074, 0.40996202])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.54186997, 0.70623436, 0.70191241, 0.52974392, 0.06846651,
              0.44486295, 0.93917592, 0.29108005, 0.20133523, 0.41910677,
              0.25344089, 0.64267709, 0.94852238, 0.09856767, 0.85641283,
              0.30672726, 0.40142323, 0.81472836, 0.15565127, 0.48957843,
              0.74929789, 0.43237899, 0.84538989, 0.48656169, 0.93194357,
              0.58048588, 0.10694014, 0.0572151 , 0.79752914, 0.47472296,
              0.51908869, 0.47547203, 0.04024557, 0.04475107, 0.76219159,
              0.77397215, 0.10739288, 0.12581616, 0.04095521, 0.38901538,
              0.34165913, 0.78885639, 0.23874492, 0.69295925, 0.89777705,
              0.33655472, 0.27597086, 0.36454206, 0.8164472 , 0.51401076,
              0.6655706 , 0.26023237, 0.21982551, 0.58825385, 0.50882144,
              0.7770896 , 0.61260987, 0.85613523, 0.4362407 , 0.10914591,
              0.58689662, 0.04278891, 0.8316696 , 0.02129831, 0.77735234,
              0.03327739, 0.97099535, 0.15985902, 0.53312653, 0.33292702,
              0.6304825 , 0.08905873, 0.12338959, 0.52719234, 0.18975377,
              0.11315526, 0.91227619, 0.85856205, 0.48573808, 0.16255901,
              0.50721134, 0.90952464, 0.23421703, 0.89232187, 0.3802036 ,
              0.4263574 , 0.57813841, 0.12250666, 0.16400728, 0.89056145,
              0.54077868, 0.9076814 , 0.86720871, 0.3360372 , 0.87783883,
              0.86884788, 0.95719619, 0.78856627, 0.68098503, 0.4614502 ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.59823154, 0.16112525, 0.27452558, 0.72789808, 0.78246469,
              0.38660778, 0.72873188, 0.82387948, 0.47514914, 0.33792099,
              0.94176722, 0.09761692, 0.66763109, 0.40863808, 0.80195349,
              0.70214923, 0.10313713, 0.00792678, 0.77783852, 0.595205  ,
              0.31688008, 0.618995  , 0.95699399, 0.07918561, 0.10685615,
              0.0663651 , 0.71534788, 0.70939682, 0.18911075, 0.52626523,
              0.30904168, 0.24142322, 0.54005014, 0.805196  , 0.83939998,
              0.12398434, 0.26178081, 0.72696024, 0.1311992 , 0.5629857 ,
              0.25854986, 0.39273466, 0.45300281, 0.6286021 , 0.44959764,
              0.10490793, 0.17344632, 0.51715837, 0.11306415, 0.10079541,
              0.49269814, 0.95015557, 0.02589417, 0.99058416, 0.7343288 ,
              0.93047885, 0.88670502, 0.8417684 , 0.03862344, 0.84208488,
              0.72499204, 0.96921362, 0.91861988, 0.08587395, 0.14683754,
              0.89010419, 0.58369634, 0.34576242, 0.71235072, 0.87319535,
              0.74473795, 0.78136837, 0.27905587, 0.83696218, 0.00686457,
              0.51752864, 0.75909717, 0.76079775, 0.67758785, 0.50493758,
              0.43522474, 0.96776378, 0.77663565, 0.55993429, 0.04361774,
              0.47125793, 0.33276283, 0.92368934, 0.74557699, 0.09979805,
              0.27586015, 0.22211867, 0.75934303, 0.99597859, 0.71074119,
              0.67902074, 0.39575995, 0.71592613, 0.26543915, 0.37903326])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.36221734, 0.1711173 , 0.8241473 , 0.165728  , 0.60082404,
              0.30856341, 0.38267852, 0.69186342, 0.55779556, 0.29974379,
              0.26260732, 0.97019586, 0.74163016, 0.05183346, 0.70588847,
              0.39472888, 0.13339178, 0.64876109, 0.47745753, 0.79056217,
              0.97836132, 0.23483343, 0.2151252 , 0.07797322, 0.79566408,
              0.27788981, 0.82084893, 0.05322414, 0.53537117, 0.28563178,
              0.07702251, 0.17710208, 0.98597389, 0.22775793, 0.86879309,
              0.1350755 , 0.90642961, 0.93270791, 0.8820172 , 0.46853488,
              0.25536146, 0.65895212, 0.74166769, 0.46274803, 0.23681777,
              0.02908133, 0.25472257, 0.55720714, 0.87480434, 0.71356697,
              0.78576906, 0.90609744, 0.3892284 , 0.78299141, 0.70109472,
              0.14650336, 0.51891865, 0.27357391, 0.1794431 , 0.09817168,
              0.29959595, 0.1023618 , 0.97299289, 0.09071778, 0.10678704,
              0.87280692, 0.99357649, 0.10876456, 0.62989873, 0.90887476,
              0.97625606, 0.82698807, 0.44884482, 0.93367506, 0.39161414,
              0.31758489, 0.4609661 , 0.51904815, 0.61400094, 0.41602199,
              0.23443641, 0.29708913, 0.37124326, 0.79842266, 0.03327366,
              0.99365046, 0.68915602, 0.51632797, 0.35424836, 0.7589198 ,
              0.62899281, 0.78772736, 0.59469433, 0.04133229, 0.18786511,
              0.4680604 , 0.64792385, 0.17138301, 0.51022222, 0.35248993])}]]


