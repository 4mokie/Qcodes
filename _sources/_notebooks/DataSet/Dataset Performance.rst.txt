
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='15fe67c3-f1be-4386-9911-6111776458ed'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='470457ca-1ceb-48b3-888e-d2af2f8e5f3c'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.933299957054982],
     [0.455597351599914],
     [0.895500838885077],
     [0.513637456587864],
     [0.421270957267273],
     [0.751166922976272],
     [0.0681412976930031],
     [0.407137503378037],
     [0.0450384978690077],
     [0.703053283973295],
     [0.278400881595716],
     [0.621232410725723],
     [0.62190760730089],
     [0.239346504973087],
     [0.460778970210235],
     [0.76509625186765],
     [0.766809167593143],
     [0.031270870389514],
     [0.512362292067088],
     [0.976253343591459],
     [0.388780158707059],
     [0.242699766755982],
     [0.522982667913081],
     [0.0651723779414051],
     [0.991430545376595],
     [0.44049210425756],
     [0.966510371989572],
     [0.0571580878494217],
     [0.393165222776605],
     [0.255192227678347],
     [0.683378540823132],
     [0.11443321673194],
     [0.71083831082395],
     [0.225658443708272],
     [0.406584417410388],
     [0.909490450609663],
     [0.436056722629027],
     [0.271414535282927],
     [0.147443996137365],
     [0.412525248382564],
     [0.582177561113282],
     [0.977316117897578],
     [0.806387755194829],
     [0.876852971393444],
     [0.506971600959596],
     [0.085543120120703],
     [0.852189090821576],
     [0.387508266151644],
     [0.0665590814476132],
     [0.706677551353527],
     [0.593475029509622],
     [0.0573311394054462],
     [0.513878717026708],
     [0.145326029619336],
     [0.659693076070876],
     [0.981097126753411],
     [0.871318256277956],
     [0.671821596817243],
     [0.588547247853718],
     [0.6529625399339],
     [0.68436103113486],
     [0.401744203903211],
     [0.632439392849156],
     [0.222070871435303],
     [0.755987199906966],
     [0.892379758234122],
     [0.454122256939322],
     [0.675988926699031],
     [0.16862050360074],
     [0.144789108454212],
     [0.645077939919338],
     [0.729783701629822],
     [0.949999689932263],
     [0.431690850136975],
     [0.905833313241826],
     [0.234958593630689],
     [0.836544173969256],
     [0.0821199443663213],
     [0.419753225407118],
     [0.854838443880077],
     [0.0244610588491836],
     [0.7093719819378],
     [0.304668511338111],
     [0.827319412315081],
     [0.306201565139649],
     [0.981614424131826],
     [0.699984155096145],
     [0.809792634348788],
     [0.819390074628894],
     [0.141054477943094],
     [0.461069203856331],
     [0.0442063752237805],
     [0.983440930213814],
     [0.344275002767279],
     [0.323078124411664],
     [0.450867959670575],
     [0.628175022865141],
     [0.994634155562543],
     [0.804819443498041],
     [0.793209143484205]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.69291763])],
     [array([0.82507259])],
     [array([0.23848378])],
     [array([0.22109834])],
     [array([0.7074199])],
     [array([0.34706137])],
     [array([0.99238012])],
     [array([0.69845923])],
     [array([0.8089599])],
     [array([0.77777004])],
     [array([0.44076107])],
     [array([0.76004451])],
     [array([0.03548755])],
     [array([0.04521348])],
     [array([0.70302249])],
     [array([0.87482157])],
     [array([0.29699502])],
     [array([0.34380085])],
     [array([0.79537195])],
     [array([0.48412989])],
     [array([0.91776451])],
     [array([0.07587947])],
     [array([0.99182267])],
     [array([0.44732509])],
     [array([0.7543281])],
     [array([0.30755662])],
     [array([0.4443688])],
     [array([0.45983905])],
     [array([0.00107614])],
     [array([0.09220504])],
     [array([0.59028245])],
     [array([0.8320345])],
     [array([0.80731783])],
     [array([0.04641309])],
     [array([0.61550275])],
     [array([0.26843522])],
     [array([0.32518312])],
     [array([0.64180697])],
     [array([0.65233393])],
     [array([0.44254364])],
     [array([0.67455795])],
     [array([0.48508741])],
     [array([0.15272571])],
     [array([0.00862679])],
     [array([0.95165609])],
     [array([0.4870665])],
     [array([0.92269498])],
     [array([0.35845454])],
     [array([0.3566467])],
     [array([0.22175289])],
     [array([0.99636713])],
     [array([0.60184134])],
     [array([0.61115877])],
     [array([0.1839368])],
     [array([0.81916891])],
     [array([0.20142016])],
     [array([0.6550144])],
     [array([0.1957823])],
     [array([0.45535079])],
     [array([0.39438484])],
     [array([0.41933314])],
     [array([0.27802726])],
     [array([0.52440154])],
     [array([0.30058902])],
     [array([0.53315161])],
     [array([0.41000155])],
     [array([0.1959818])],
     [array([0.99865895])],
     [array([0.30281124])],
     [array([0.63590684])],
     [array([0.42344416])],
     [array([0.62568865])],
     [array([0.96114147])],
     [array([0.11734907])],
     [array([0.50805882])],
     [array([0.05000237])],
     [array([0.2945039])],
     [array([0.41927348])],
     [array([0.99311241])],
     [array([0.63044387])],
     [array([0.40861901])],
     [array([0.5616868])],
     [array([0.11099573])],
     [array([0.9786464])],
     [array([0.4877306])],
     [array([0.9576138])],
     [array([0.31229173])],
     [array([0.98040894])],
     [array([0.97812721])],
     [array([0.40915042])],
     [array([0.56454811])],
     [array([0.59963781])],
     [array([0.57969296])],
     [array([0.18647561])],
     [array([0.93176554])],
     [array([0.48342912])],
     [array([0.82162848])],
     [array([0.64783635])],
     [array([0.07495034])],
     [array([0.433521])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.69291763, 0.82507259, 0.23848378, 0.22109834, 0.7074199 ,
           0.34706137, 0.99238012, 0.69845923, 0.8089599 , 0.77777004,
           0.44076107, 0.76004451, 0.03548755, 0.04521348, 0.70302249,
           0.87482157, 0.29699502, 0.34380085, 0.79537195, 0.48412989,
           0.91776451, 0.07587947, 0.99182267, 0.44732509, 0.7543281 ,
           0.30755662, 0.4443688 , 0.45983905, 0.00107614, 0.09220504,
           0.59028245, 0.8320345 , 0.80731783, 0.04641309, 0.61550275,
           0.26843522, 0.32518312, 0.64180697, 0.65233393, 0.44254364,
           0.67455795, 0.48508741, 0.15272571, 0.00862679, 0.95165609,
           0.4870665 , 0.92269498, 0.35845454, 0.3566467 , 0.22175289,
           0.99636713, 0.60184134, 0.61115877, 0.1839368 , 0.81916891,
           0.20142016, 0.6550144 , 0.1957823 , 0.45535079, 0.39438484,
           0.41933314, 0.27802726, 0.52440154, 0.30058902, 0.53315161,
           0.41000155, 0.1959818 , 0.99865895, 0.30281124, 0.63590684,
           0.42344416, 0.62568865, 0.96114147, 0.11734907, 0.50805882,
           0.05000237, 0.2945039 , 0.41927348, 0.99311241, 0.63044387,
           0.40861901, 0.5616868 , 0.11099573, 0.9786464 , 0.4877306 ,
           0.9576138 , 0.31229173, 0.98040894, 0.97812721, 0.40915042,
           0.56454811, 0.59963781, 0.57969296, 0.18647561, 0.93176554,
           0.48342912, 0.82162848, 0.64783635, 0.07495034, 0.433521  ])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.93329996, 0.45559735, 0.89550084, 0.51363746, 0.42127096,
              0.75116692, 0.0681413 , 0.4071375 , 0.0450385 , 0.70305328,
              0.27840088, 0.62123241, 0.62190761, 0.2393465 , 0.46077897,
              0.76509625, 0.76680917, 0.03127087, 0.51236229, 0.97625334,
              0.38878016, 0.24269977, 0.52298267, 0.06517238, 0.99143055,
              0.4404921 , 0.96651037, 0.05715809, 0.39316522, 0.25519223,
              0.68337854, 0.11443322, 0.71083831, 0.22565844, 0.40658442,
              0.90949045, 0.43605672, 0.27141454, 0.147444  , 0.41252525,
              0.58217756, 0.97731612, 0.80638776, 0.87685297, 0.5069716 ,
              0.08554312, 0.85218909, 0.38750827, 0.06655908, 0.70667755,
              0.59347503, 0.05733114, 0.51387872, 0.14532603, 0.65969308,
              0.98109713, 0.87131826, 0.6718216 , 0.58854725, 0.65296254,
              0.68436103, 0.4017442 , 0.63243939, 0.22207087, 0.7559872 ,
              0.89237976, 0.45412226, 0.67598893, 0.1686205 , 0.14478911,
              0.64507794, 0.7297837 , 0.94999969, 0.43169085, 0.90583331,
              0.23495859, 0.83654417, 0.08211994, 0.41975323, 0.85483844,
              0.02446106, 0.70937198, 0.30466851, 0.82731941, 0.30620157,
              0.98161442, 0.69998416, 0.80979263, 0.81939007, 0.14105448,
              0.4610692 , 0.04420638, 0.98344093, 0.344275  , 0.32307812,
              0.45086796, 0.62817502, 0.99463416, 0.80481944, 0.79320914])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.17849882, 0.04379281, 0.35989865, 0.36059845, 0.48419264,
              0.28057087, 0.53842629, 0.12819762, 0.47957434, 0.93712611,
              0.30181512, 0.50866852, 0.59749018, 0.96778995, 0.34426056,
              0.19649309, 0.9162209 , 0.71645788, 0.8914746 , 0.25241731,
              0.57347009, 0.75388102, 0.62825431, 0.71395846, 0.03908883,
              0.11492635, 0.20675481, 0.09754011, 0.46594636, 0.43522475,
              0.06482504, 0.40345466, 0.26281025, 0.43976195, 0.28800034,
              0.45102741, 0.10273435, 0.91696295, 0.03339973, 0.78678969,
              0.78570895, 0.39041965, 0.54109924, 0.77122157, 0.17084048,
              0.37508333, 0.50809323, 0.35033903, 0.35406477, 0.09194294,
              0.65122741, 0.66134189, 0.09381137, 0.46708989, 0.02634235,
              0.55053091, 0.15062292, 0.89676738, 0.4299274 , 0.32196944,
              0.25672065, 0.1110708 , 0.56471576, 0.3438498 , 0.7098503 ,
              0.24853518, 0.90653788, 0.02544363, 0.71627921, 0.89131827,
              0.08757112, 0.66769013, 0.27518208, 0.74835233, 0.22018675,
              0.62670916, 0.49999401, 0.5345695 , 0.86277039, 0.39770674,
              0.745198  , 0.45967254, 0.99284757, 0.39752431, 0.68807183,
              0.03977639, 0.6392761 , 0.36453087, 0.68762333, 0.74346283,
              0.90414393, 0.48768758, 0.10252863, 0.59158131, 0.88518542,
              0.05060359, 0.4058065 , 0.89825065, 0.77489833, 0.29629514])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.59913242, 0.80764226, 0.76334717, 0.11810411, 0.03066649,
              0.69674188, 0.9488729 , 0.7981335 , 0.78652775, 0.83477993,
              0.07717444, 0.06559463, 0.12317788, 0.76622788, 0.97775213,
              0.66145088, 0.22547506, 0.05650538, 0.95485822, 0.24063283,
              0.90134404, 0.34691482, 0.82490292, 0.90798786, 0.99912276,
              0.98404828, 0.98495722, 0.21920885, 0.17885374, 0.18382729,
              0.10609769, 0.16909131, 0.62832697, 0.92596019, 0.23984497,
              0.13068899, 0.56334633, 0.05695094, 0.88117753, 0.37922937,
              0.90461759, 0.17252973, 0.72157311, 0.75086174, 0.68537756,
              0.90456478, 0.33248498, 0.42851609, 0.80253999, 0.27992048,
              0.74452976, 0.3046665 , 0.65447581, 0.58580901, 0.72327355,
              0.29465763, 0.58442888, 0.42803856, 0.26382621, 0.76058678,
              0.15848771, 0.76755889, 0.75726994, 0.56311441, 0.36353442,
              0.49192425, 0.3536938 , 0.70216349, 0.3286125 , 0.73778997,
              0.07848794, 0.02855599, 0.79410474, 0.53627651, 0.11392149,
              0.61310751, 0.3532548 , 0.29302114, 0.48945864, 0.47254369,
              0.6218964 , 0.10368224, 0.26741   , 0.25477105, 0.11548029,
              0.96377231, 0.26092856, 0.41960376, 0.83574692, 0.49027752,
              0.98740906, 0.17415218, 0.66595134, 0.3262658 , 0.40618877,
              0.4191299 , 0.62477305, 0.3299413 , 0.9139869 , 0.04920881])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.32250239, 0.28434062, 0.45759008, 0.27712562, 0.69400557,
              0.05451733, 0.93861719, 0.3189015 , 0.1014961 , 0.23496537,
              0.28988095, 0.79628002, 0.51361868, 0.6377893 , 0.55821609,
              0.94642534, 0.23454161, 0.26867144, 0.12370769, 0.23430965,
              0.72208412, 0.19646509, 0.09094763, 0.28968819, 0.30148887,
              0.70520421, 0.32752529, 0.65290258, 0.0688697 , 0.5398594 ,
              0.5832111 , 0.58743358, 0.34849986, 0.92435724, 0.70112635,
              0.465542  , 0.75778444, 0.16346052, 0.33477763, 0.61269311,
              0.95128721, 0.47685944, 0.85848164, 0.99559069, 0.08343416,
              0.36984755, 0.07917134, 0.73887503, 0.93331578, 0.0408029 ,
              0.09722111, 0.33787082, 0.99999994, 0.14110449, 0.70270883,
              0.99376851, 0.08209052, 0.69169689, 0.64250292, 0.696125  ,
              0.29791379, 0.3502833 , 0.89318794, 0.14224385, 0.61962124,
              0.47038844, 0.08480041, 0.67825149, 0.46551953, 0.93260677,
              0.71261366, 0.45677734, 0.72824453, 0.99021589, 0.19268354,
              0.65326826, 0.15789303, 0.50256718, 0.72234445, 0.67082303,
              0.37011387, 0.31877046, 0.99061807, 0.72924334, 0.61656778,
              0.35515365, 0.09446006, 0.74974654, 0.50499502, 0.85811561,
              0.43575038, 0.59600175, 0.60265174, 0.09032401, 0.25787162,
              0.42955937, 0.60748562, 0.61263717, 0.33959672, 0.07300104])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.93329996, 0.45559735, 0.89550084, 0.51363746, 0.42127096,
              0.75116692, 0.0681413 , 0.4071375 , 0.0450385 , 0.70305328,
              0.27840088, 0.62123241, 0.62190761, 0.2393465 , 0.46077897,
              0.76509625, 0.76680917, 0.03127087, 0.51236229, 0.97625334,
              0.38878016, 0.24269977, 0.52298267, 0.06517238, 0.99143055,
              0.4404921 , 0.96651037, 0.05715809, 0.39316522, 0.25519223,
              0.68337854, 0.11443322, 0.71083831, 0.22565844, 0.40658442,
              0.90949045, 0.43605672, 0.27141454, 0.147444  , 0.41252525,
              0.58217756, 0.97731612, 0.80638776, 0.87685297, 0.5069716 ,
              0.08554312, 0.85218909, 0.38750827, 0.06655908, 0.70667755,
              0.59347503, 0.05733114, 0.51387872, 0.14532603, 0.65969308,
              0.98109713, 0.87131826, 0.6718216 , 0.58854725, 0.65296254,
              0.68436103, 0.4017442 , 0.63243939, 0.22207087, 0.7559872 ,
              0.89237976, 0.45412226, 0.67598893, 0.1686205 , 0.14478911,
              0.64507794, 0.7297837 , 0.94999969, 0.43169085, 0.90583331,
              0.23495859, 0.83654417, 0.08211994, 0.41975323, 0.85483844,
              0.02446106, 0.70937198, 0.30466851, 0.82731941, 0.30620157,
              0.98161442, 0.69998416, 0.80979263, 0.81939007, 0.14105448,
              0.4610692 , 0.04420638, 0.98344093, 0.344275  , 0.32307812,
              0.45086796, 0.62817502, 0.99463416, 0.80481944, 0.79320914])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.17849882, 0.04379281, 0.35989865, 0.36059845, 0.48419264,
              0.28057087, 0.53842629, 0.12819762, 0.47957434, 0.93712611,
              0.30181512, 0.50866852, 0.59749018, 0.96778995, 0.34426056,
              0.19649309, 0.9162209 , 0.71645788, 0.8914746 , 0.25241731,
              0.57347009, 0.75388102, 0.62825431, 0.71395846, 0.03908883,
              0.11492635, 0.20675481, 0.09754011, 0.46594636, 0.43522475,
              0.06482504, 0.40345466, 0.26281025, 0.43976195, 0.28800034,
              0.45102741, 0.10273435, 0.91696295, 0.03339973, 0.78678969,
              0.78570895, 0.39041965, 0.54109924, 0.77122157, 0.17084048,
              0.37508333, 0.50809323, 0.35033903, 0.35406477, 0.09194294,
              0.65122741, 0.66134189, 0.09381137, 0.46708989, 0.02634235,
              0.55053091, 0.15062292, 0.89676738, 0.4299274 , 0.32196944,
              0.25672065, 0.1110708 , 0.56471576, 0.3438498 , 0.7098503 ,
              0.24853518, 0.90653788, 0.02544363, 0.71627921, 0.89131827,
              0.08757112, 0.66769013, 0.27518208, 0.74835233, 0.22018675,
              0.62670916, 0.49999401, 0.5345695 , 0.86277039, 0.39770674,
              0.745198  , 0.45967254, 0.99284757, 0.39752431, 0.68807183,
              0.03977639, 0.6392761 , 0.36453087, 0.68762333, 0.74346283,
              0.90414393, 0.48768758, 0.10252863, 0.59158131, 0.88518542,
              0.05060359, 0.4058065 , 0.89825065, 0.77489833, 0.29629514])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.59913242, 0.80764226, 0.76334717, 0.11810411, 0.03066649,
              0.69674188, 0.9488729 , 0.7981335 , 0.78652775, 0.83477993,
              0.07717444, 0.06559463, 0.12317788, 0.76622788, 0.97775213,
              0.66145088, 0.22547506, 0.05650538, 0.95485822, 0.24063283,
              0.90134404, 0.34691482, 0.82490292, 0.90798786, 0.99912276,
              0.98404828, 0.98495722, 0.21920885, 0.17885374, 0.18382729,
              0.10609769, 0.16909131, 0.62832697, 0.92596019, 0.23984497,
              0.13068899, 0.56334633, 0.05695094, 0.88117753, 0.37922937,
              0.90461759, 0.17252973, 0.72157311, 0.75086174, 0.68537756,
              0.90456478, 0.33248498, 0.42851609, 0.80253999, 0.27992048,
              0.74452976, 0.3046665 , 0.65447581, 0.58580901, 0.72327355,
              0.29465763, 0.58442888, 0.42803856, 0.26382621, 0.76058678,
              0.15848771, 0.76755889, 0.75726994, 0.56311441, 0.36353442,
              0.49192425, 0.3536938 , 0.70216349, 0.3286125 , 0.73778997,
              0.07848794, 0.02855599, 0.79410474, 0.53627651, 0.11392149,
              0.61310751, 0.3532548 , 0.29302114, 0.48945864, 0.47254369,
              0.6218964 , 0.10368224, 0.26741   , 0.25477105, 0.11548029,
              0.96377231, 0.26092856, 0.41960376, 0.83574692, 0.49027752,
              0.98740906, 0.17415218, 0.66595134, 0.3262658 , 0.40618877,
              0.4191299 , 0.62477305, 0.3299413 , 0.9139869 , 0.04920881])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.9648153 , 0.7699677 , 0.60470331, 0.92531822, 0.11747496,
              0.25556478, 0.07941323, 0.48556632, 0.19897066, 0.56923832,
              0.05804719, 0.58181492, 0.3248322 , 0.56779311, 0.95025044,
              0.63722303, 0.51821365, 0.89909428, 0.6725077 , 0.34090974,
              0.69836829, 0.62334768, 0.69811645, 0.70831225, 0.54394312,
              0.3666011 , 0.63448756, 0.59640002, 0.7042711 , 0.94334511,
              0.59205514, 0.61169791, 0.16491823, 0.57683453, 0.9582039 ,
              0.90217317, 0.30044983, 0.98430386, 0.16038617, 0.62683636,
              0.7443718 , 0.17958318, 0.74754096, 0.81228685, 0.55921665,
              0.11319834, 0.99377778, 0.17139463, 0.70856317, 0.62297083,
              0.86555554, 0.58512878, 0.5241512 , 0.74804791, 0.7571453 ,
              0.69859616, 0.70847668, 0.06907643, 0.34258383, 0.33525682,
              0.81501984, 0.62181447, 0.77186221, 0.19023105, 0.43046999,
              0.15898245, 0.4383102 , 0.92094067, 0.41432745, 0.78482962,
              0.76680919, 0.1743015 , 0.09461586, 0.47892905, 0.61286493,
              0.95270214, 0.27239338, 0.47975637, 0.40493336, 0.31235292,
              0.09458667, 0.70198638, 0.98892457, 0.21581464, 0.91104145,
              0.57849396, 0.09354111, 0.58978456, 0.24748831, 0.39271323,
              0.65546316, 0.68000063, 0.81565876, 0.07334152, 0.26033845,
              0.09519428, 0.98377324, 0.38746714, 0.02785272, 0.67035126])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.69291763, 0.82507259, 0.23848378, 0.22109834, 0.7074199 ,
              0.34706137, 0.99238012, 0.69845923, 0.8089599 , 0.77777004,
              0.44076107, 0.76004451, 0.03548755, 0.04521348, 0.70302249,
              0.87482157, 0.29699502, 0.34380085, 0.79537195, 0.48412989,
              0.91776451, 0.07587947, 0.99182267, 0.44732509, 0.7543281 ,
              0.30755662, 0.4443688 , 0.45983905, 0.00107614, 0.09220504,
              0.59028245, 0.8320345 , 0.80731783, 0.04641309, 0.61550275,
              0.26843522, 0.32518312, 0.64180697, 0.65233393, 0.44254364,
              0.67455795, 0.48508741, 0.15272571, 0.00862679, 0.95165609,
              0.4870665 , 0.92269498, 0.35845454, 0.3566467 , 0.22175289,
              0.99636713, 0.60184134, 0.61115877, 0.1839368 , 0.81916891,
              0.20142016, 0.6550144 , 0.1957823 , 0.45535079, 0.39438484,
              0.41933314, 0.27802726, 0.52440154, 0.30058902, 0.53315161,
              0.41000155, 0.1959818 , 0.99865895, 0.30281124, 0.63590684,
              0.42344416, 0.62568865, 0.96114147, 0.11734907, 0.50805882,
              0.05000237, 0.2945039 , 0.41927348, 0.99311241, 0.63044387,
              0.40861901, 0.5616868 , 0.11099573, 0.9786464 , 0.4877306 ,
              0.9576138 , 0.31229173, 0.98040894, 0.97812721, 0.40915042,
              0.56454811, 0.59963781, 0.57969296, 0.18647561, 0.93176554,
              0.48342912, 0.82162848, 0.64783635, 0.07495034, 0.433521  ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([6.67935134e-01, 7.02918036e-01, 4.31089911e-01, 8.13878003e-01,
              1.19497531e-02, 3.80445110e-01, 3.47188378e-01, 7.95932971e-01,
              9.08941577e-01, 6.88281648e-01, 5.49612758e-01, 5.18870134e-01,
              7.86078940e-01, 7.10068165e-01, 9.47739388e-01, 6.86826016e-01,
              1.24674650e-01, 9.43350776e-01, 6.17138025e-01, 3.66729378e-01,
              9.05111859e-01, 4.89424286e-01, 2.79243650e-01, 6.07664090e-01,
              6.05755154e-01, 6.95885009e-01, 6.27137299e-01, 1.56668420e-01,
              6.45322378e-01, 1.28993366e-01, 5.14365679e-01, 8.11018791e-01,
              3.38689807e-01, 2.50790961e-01, 2.92293604e-02, 2.74577305e-02,
              7.65761698e-01, 3.51815943e-01, 7.03111646e-02, 9.51750830e-01,
              6.71575302e-02, 7.62117910e-01, 6.09190457e-01, 1.47347687e-01,
              5.91690635e-01, 6.42061039e-01, 4.01893157e-01, 9.95246874e-01,
              8.58331230e-01, 4.00797581e-01, 7.53599459e-01, 2.41325619e-01,
              8.03292845e-01, 7.62135023e-01, 8.56624920e-01, 3.69780244e-01,
              6.98129473e-01, 8.15952678e-01, 9.78512519e-01, 6.99487751e-01,
              2.08798297e-01, 1.08629820e-01, 1.85786274e-01, 5.90924693e-01,
              7.10274616e-01, 1.20462284e-01, 7.26446284e-01, 5.03429292e-01,
              4.53152689e-01, 5.50003989e-01, 4.82010895e-01, 4.71478633e-01,
              4.71489391e-01, 9.00458866e-01, 6.40339315e-01, 8.81561096e-01,
              7.64661914e-04, 9.24107925e-01, 7.15329013e-01, 9.21443665e-01,
              4.97911171e-01, 6.93171006e-01, 3.86588105e-01, 9.20277755e-01,
              6.81177108e-01, 7.85041999e-01, 5.15650347e-01, 9.75053357e-02,
              6.02708432e-01, 6.30670364e-02, 3.44875755e-01, 7.74060851e-01,
              1.47486252e-03, 1.65217220e-01, 3.09842763e-03, 3.39952420e-01,
              8.00505096e-01, 4.74147514e-01, 3.52808874e-01, 2.47162029e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([1.84829501e-01, 6.65521899e-01, 3.73269212e-01, 6.54732909e-01,
              4.96113863e-01, 7.50416469e-02, 2.98824982e-02, 7.17031743e-01,
              2.50264670e-01, 7.55291688e-01, 3.97286775e-01, 7.67218593e-01,
              7.21863925e-01, 3.61651072e-01, 1.32712745e-01, 2.99712169e-01,
              7.59277358e-01, 2.12985688e-02, 4.28506436e-01, 5.81464845e-01,
              4.25434923e-01, 9.26680705e-01, 6.85273804e-01, 5.24896198e-01,
              8.44350124e-01, 6.69444352e-01, 1.34223058e-01, 7.86398302e-02,
              3.57665423e-02, 4.32371048e-01, 5.63307873e-01, 2.46033607e-04,
              9.04992478e-01, 6.18350765e-01, 5.29136288e-01, 8.36963763e-01,
              3.88739745e-01, 9.91391431e-01, 5.01262409e-01, 9.07683238e-01,
              6.62672462e-01, 7.07793338e-01, 5.86487584e-01, 7.19206650e-01,
              8.74663211e-01, 5.79095683e-01, 6.00663527e-01, 5.31906000e-02,
              6.38979800e-01, 1.55624627e-02, 5.89437376e-01, 3.12473910e-01,
              3.40044850e-01, 6.27261891e-01, 3.61110696e-01, 8.59565302e-01,
              7.27239427e-01, 3.78882418e-01, 5.28510388e-01, 9.98324977e-01,
              6.16692412e-02, 3.19713788e-01, 6.71353124e-02, 1.69968942e-01,
              1.78520176e-01, 6.30349037e-01, 8.16717266e-01, 1.87321714e-01,
              8.53791737e-01, 7.58763847e-01, 9.99398681e-01, 8.95794631e-01,
              7.39156922e-02, 4.99139669e-01, 3.10312394e-02, 9.58806116e-02,
              6.70776897e-01, 3.75974982e-01, 3.83926149e-01, 6.78047811e-01,
              9.10958350e-01, 8.12514685e-01, 3.81538091e-01, 3.21459862e-04,
              4.43467676e-01, 1.87774159e-01, 7.53785600e-01, 3.43702692e-01,
              1.34840305e-01, 1.98795768e-01, 4.26397482e-01, 8.92042860e-01,
              9.09563345e-01, 2.31281073e-02, 1.55757584e-01, 5.47169766e-01,
              4.55381957e-01, 1.08352549e-01, 8.37932175e-02, 3.69786472e-01])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([9.42931318e-01, 2.83249269e-01, 9.79850265e-01, 1.73106200e-01,
              2.15692983e-01, 7.11708338e-01, 3.07633976e-01, 5.63455184e-01,
              1.52055755e-01, 7.67340656e-01, 2.53254164e-01, 5.61388045e-01,
              9.60622024e-01, 6.81725269e-04, 5.76102716e-01, 3.08418914e-01,
              5.43970289e-01, 8.47872888e-02, 1.41410134e-01, 9.28378952e-01,
              1.85733202e-01, 2.51044225e-01, 7.39855921e-01, 4.27706841e-04,
              6.52554045e-01, 5.73917652e-01, 7.47728206e-01, 3.97785271e-01,
              6.83664153e-01, 9.44438513e-01, 5.20420348e-01, 4.89268750e-01,
              3.81531602e-01, 1.52769799e-01, 5.10926596e-01, 1.16318893e-01,
              6.22503708e-01, 8.63430905e-01, 8.30744262e-02, 9.60396274e-01,
              9.78917723e-01, 2.48500477e-01, 8.82158036e-01, 9.95462358e-01,
              6.38122891e-01, 5.72600122e-01, 4.53610373e-01, 1.71839903e-01,
              6.33302605e-01, 1.98496708e-01, 7.25188561e-01, 9.78605188e-01,
              2.09006031e-01, 6.14516912e-01, 5.25132213e-01, 2.56909099e-01,
              6.18944438e-01, 8.14836175e-01, 9.20631003e-01, 1.93522636e-01,
              9.79565198e-01, 3.13754676e-01, 6.77174824e-01, 7.56126406e-01,
              4.44782614e-01, 8.18386035e-01, 3.46262116e-01, 7.98594846e-01,
              3.22611922e-02, 3.62738657e-01, 7.99648940e-01, 8.69747161e-01,
              7.11972725e-01, 2.85957764e-01, 7.20996734e-01, 8.96628514e-01,
              5.94491758e-01, 5.32517628e-01, 8.04681305e-01, 6.66892273e-01,
              4.34899123e-01, 8.36301320e-01, 3.02167781e-01, 9.25601885e-01,
              5.80913356e-01, 4.31420352e-01, 1.48344503e-02, 7.11902900e-01,
              7.84681761e-01, 3.65978811e-01, 6.88634146e-01, 7.22103100e-02,
              2.56384246e-01, 6.94686594e-01, 9.24680827e-01, 8.57677201e-02,
              3.01228061e-01, 6.56559047e-01, 6.03819505e-01, 4.38547343e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.69291763, 0.82507259, 0.23848378, 0.22109834, 0.7074199 ,
              0.34706137, 0.99238012, 0.69845923, 0.8089599 , 0.77777004,
              0.44076107, 0.76004451, 0.03548755, 0.04521348, 0.70302249,
              0.87482157, 0.29699502, 0.34380085, 0.79537195, 0.48412989,
              0.91776451, 0.07587947, 0.99182267, 0.44732509, 0.7543281 ,
              0.30755662, 0.4443688 , 0.45983905, 0.00107614, 0.09220504,
              0.59028245, 0.8320345 , 0.80731783, 0.04641309, 0.61550275,
              0.26843522, 0.32518312, 0.64180697, 0.65233393, 0.44254364,
              0.67455795, 0.48508741, 0.15272571, 0.00862679, 0.95165609,
              0.4870665 , 0.92269498, 0.35845454, 0.3566467 , 0.22175289,
              0.99636713, 0.60184134, 0.61115877, 0.1839368 , 0.81916891,
              0.20142016, 0.6550144 , 0.1957823 , 0.45535079, 0.39438484,
              0.41933314, 0.27802726, 0.52440154, 0.30058902, 0.53315161,
              0.41000155, 0.1959818 , 0.99865895, 0.30281124, 0.63590684,
              0.42344416, 0.62568865, 0.96114147, 0.11734907, 0.50805882,
              0.05000237, 0.2945039 , 0.41927348, 0.99311241, 0.63044387,
              0.40861901, 0.5616868 , 0.11099573, 0.9786464 , 0.4877306 ,
              0.9576138 , 0.31229173, 0.98040894, 0.97812721, 0.40915042,
              0.56454811, 0.59963781, 0.57969296, 0.18647561, 0.93176554,
              0.48342912, 0.82162848, 0.64783635, 0.07495034, 0.433521  ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([6.67935134e-01, 7.02918036e-01, 4.31089911e-01, 8.13878003e-01,
              1.19497531e-02, 3.80445110e-01, 3.47188378e-01, 7.95932971e-01,
              9.08941577e-01, 6.88281648e-01, 5.49612758e-01, 5.18870134e-01,
              7.86078940e-01, 7.10068165e-01, 9.47739388e-01, 6.86826016e-01,
              1.24674650e-01, 9.43350776e-01, 6.17138025e-01, 3.66729378e-01,
              9.05111859e-01, 4.89424286e-01, 2.79243650e-01, 6.07664090e-01,
              6.05755154e-01, 6.95885009e-01, 6.27137299e-01, 1.56668420e-01,
              6.45322378e-01, 1.28993366e-01, 5.14365679e-01, 8.11018791e-01,
              3.38689807e-01, 2.50790961e-01, 2.92293604e-02, 2.74577305e-02,
              7.65761698e-01, 3.51815943e-01, 7.03111646e-02, 9.51750830e-01,
              6.71575302e-02, 7.62117910e-01, 6.09190457e-01, 1.47347687e-01,
              5.91690635e-01, 6.42061039e-01, 4.01893157e-01, 9.95246874e-01,
              8.58331230e-01, 4.00797581e-01, 7.53599459e-01, 2.41325619e-01,
              8.03292845e-01, 7.62135023e-01, 8.56624920e-01, 3.69780244e-01,
              6.98129473e-01, 8.15952678e-01, 9.78512519e-01, 6.99487751e-01,
              2.08798297e-01, 1.08629820e-01, 1.85786274e-01, 5.90924693e-01,
              7.10274616e-01, 1.20462284e-01, 7.26446284e-01, 5.03429292e-01,
              4.53152689e-01, 5.50003989e-01, 4.82010895e-01, 4.71478633e-01,
              4.71489391e-01, 9.00458866e-01, 6.40339315e-01, 8.81561096e-01,
              7.64661914e-04, 9.24107925e-01, 7.15329013e-01, 9.21443665e-01,
              4.97911171e-01, 6.93171006e-01, 3.86588105e-01, 9.20277755e-01,
              6.81177108e-01, 7.85041999e-01, 5.15650347e-01, 9.75053357e-02,
              6.02708432e-01, 6.30670364e-02, 3.44875755e-01, 7.74060851e-01,
              1.47486252e-03, 1.65217220e-01, 3.09842763e-03, 3.39952420e-01,
              8.00505096e-01, 4.74147514e-01, 3.52808874e-01, 2.47162029e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([1.84829501e-01, 6.65521899e-01, 3.73269212e-01, 6.54732909e-01,
              4.96113863e-01, 7.50416469e-02, 2.98824982e-02, 7.17031743e-01,
              2.50264670e-01, 7.55291688e-01, 3.97286775e-01, 7.67218593e-01,
              7.21863925e-01, 3.61651072e-01, 1.32712745e-01, 2.99712169e-01,
              7.59277358e-01, 2.12985688e-02, 4.28506436e-01, 5.81464845e-01,
              4.25434923e-01, 9.26680705e-01, 6.85273804e-01, 5.24896198e-01,
              8.44350124e-01, 6.69444352e-01, 1.34223058e-01, 7.86398302e-02,
              3.57665423e-02, 4.32371048e-01, 5.63307873e-01, 2.46033607e-04,
              9.04992478e-01, 6.18350765e-01, 5.29136288e-01, 8.36963763e-01,
              3.88739745e-01, 9.91391431e-01, 5.01262409e-01, 9.07683238e-01,
              6.62672462e-01, 7.07793338e-01, 5.86487584e-01, 7.19206650e-01,
              8.74663211e-01, 5.79095683e-01, 6.00663527e-01, 5.31906000e-02,
              6.38979800e-01, 1.55624627e-02, 5.89437376e-01, 3.12473910e-01,
              3.40044850e-01, 6.27261891e-01, 3.61110696e-01, 8.59565302e-01,
              7.27239427e-01, 3.78882418e-01, 5.28510388e-01, 9.98324977e-01,
              6.16692412e-02, 3.19713788e-01, 6.71353124e-02, 1.69968942e-01,
              1.78520176e-01, 6.30349037e-01, 8.16717266e-01, 1.87321714e-01,
              8.53791737e-01, 7.58763847e-01, 9.99398681e-01, 8.95794631e-01,
              7.39156922e-02, 4.99139669e-01, 3.10312394e-02, 9.58806116e-02,
              6.70776897e-01, 3.75974982e-01, 3.83926149e-01, 6.78047811e-01,
              9.10958350e-01, 8.12514685e-01, 3.81538091e-01, 3.21459862e-04,
              4.43467676e-01, 1.87774159e-01, 7.53785600e-01, 3.43702692e-01,
              1.34840305e-01, 1.98795768e-01, 4.26397482e-01, 8.92042860e-01,
              9.09563345e-01, 2.31281073e-02, 1.55757584e-01, 5.47169766e-01,
              4.55381957e-01, 1.08352549e-01, 8.37932175e-02, 3.69786472e-01])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.20690304, 0.31008178, 0.05691764, 0.38947609, 0.23780606,
              0.13472225, 0.29620904, 0.19034106, 0.43890619, 0.94182691,
              0.27434828, 0.88638362, 0.12214681, 0.51521608, 0.59347195,
              0.49422649, 0.56902945, 0.52545772, 0.06104485, 0.361079  ,
              0.56389483, 0.4809542 , 0.70487144, 0.81536355, 0.60517764,
              0.65545015, 0.19904705, 0.15989235, 0.092433  , 0.68456512,
              0.82853024, 0.0454113 , 0.22683925, 0.47784625, 0.40682551,
              0.56332148, 0.96833914, 0.26313979, 0.7745827 , 0.13302966,
              0.95363893, 0.75284741, 0.8228392 , 0.44735195, 0.56663354,
              0.19881381, 0.98900134, 0.7879341 , 0.52280355, 0.94138144,
              0.84893721, 0.31051131, 0.1779382 , 0.27513869, 0.05683027,
              0.59958691, 0.3679502 , 0.51484814, 0.39654125, 0.56796522,
              0.35395432, 0.69906759, 0.23832613, 0.89672665, 0.33192244,
              0.02261949, 0.85286257, 0.27034869, 0.91537932, 0.39122349,
              0.64874179, 0.65786567, 0.97880531, 0.41952972, 0.56352651,
              0.48274563, 0.8978601 , 0.21565244, 0.49435975, 0.76733805,
              0.09779997, 0.96821479, 0.84752233, 0.05240837, 0.59136116,
              0.75565928, 0.98494251, 0.56690073, 0.0027266 , 0.11029998,
              0.12498146, 0.51743062, 0.99079294, 0.64421357, 0.43924268,
              0.84206371, 0.88923879, 0.22951487, 0.53543454, 0.03135408])}]]


