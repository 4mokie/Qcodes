
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='93eeaf4b-af77-424d-8d5e-253180c80526'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='0210d265-9508-4ab4-b732-ece8c11caa71'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.874595808864197],
     [0.242524291427312],
     [0.943025057440019],
     [0.659727252695701],
     [0.450833283001487],
     [0.290436868165809],
     [0.035770611721216],
     [0.92164568439949],
     [0.128968421129127],
     [0.690954859127129],
     [0.0737371806630305],
     [0.742686658397011],
     [0.79565429934389],
     [0.187154252066142],
     [0.0232244717617462],
     [0.547161617919007],
     [0.909423410653903],
     [0.155738511571826],
     [0.998942389522781],
     [0.930211857528626],
     [0.354258803614453],
     [0.768112385701526],
     [0.344454745795378],
     [0.912132250698298],
     [0.744752602336819],
     [0.873839467061846],
     [0.222898438325891],
     [0.950845898258276],
     [0.8112328041428],
     [0.566117945545697],
     [0.479148381915628],
     [0.90023873235376],
     [0.296514652169739],
     [0.576929801801788],
     [0.259887627289207],
     [0.571803713104857],
     [0.673446742166578],
     [0.812086431019899],
     [0.0484375125929465],
     [0.175000207126693],
     [0.959941676058015],
     [0.211522562739267],
     [0.014206124387467],
     [0.724171106138806],
     [0.495297795700959],
     [0.414094414981805],
     [0.0597573311274023],
     [0.632291311933988],
     [0.371911460303545],
     [0.907495560658848],
     [0.876517530962228],
     [0.675320032647084],
     [0.75521621112206],
     [0.406723251418512],
     [0.9107681609672],
     [0.338198181376827],
     [0.530439849718507],
     [0.119776481067793],
     [0.414446701157311],
     [0.604524496423336],
     [0.0961798924474278],
     [0.534286465008557],
     [0.59312017401216],
     [0.952433195485462],
     [0.96301902090758],
     [0.727860252854141],
     [0.895866572439673],
     [0.172115217107434],
     [0.634920770610539],
     [0.869575340921178],
     [0.912053685967546],
     [0.107440883348265],
     [0.964798141659556],
     [0.112003097475038],
     [0.0558584254885541],
     [0.447141349458537],
     [0.55794844167055],
     [0.0303089085608291],
     [0.0822668812035636],
     [0.964037600219123],
     [0.0824123262822154],
     [0.360249568522545],
     [0.650732050327853],
     [0.282106760043641],
     [0.10876271715294],
     [0.171685375884424],
     [0.265674771233331],
     [0.336625400957924],
     [0.430609602569391],
     [0.219379926058815],
     [0.924521488865086],
     [0.860237886323286],
     [0.759550350422302],
     [0.106134815373506],
     [0.525280621217666],
     [0.279219529996894],
     [0.599750086913925],
     [0.836741643219184],
     [0.874479893505253],
     [0.890283651610201]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.83303605])],
     [array([0.34255968])],
     [array([0.71342711])],
     [array([0.45308273])],
     [array([0.41083965])],
     [array([0.21095772])],
     [array([0.71106755])],
     [array([0.14256098])],
     [array([0.59252479])],
     [array([0.12829656])],
     [array([0.94244566])],
     [array([0.35268577])],
     [array([0.88198762])],
     [array([0.25765435])],
     [array([0.46989273])],
     [array([0.84928013])],
     [array([0.45180266])],
     [array([0.22728954])],
     [array([0.55567442])],
     [array([0.0615193])],
     [array([0.25957562])],
     [array([0.25298217])],
     [array([0.8447599])],
     [array([0.39086972])],
     [array([0.01027248])],
     [array([0.2188599])],
     [array([0.15068733])],
     [array([0.97460041])],
     [array([0.41208758])],
     [array([0.44978432])],
     [array([0.16132785])],
     [array([0.56708208])],
     [array([0.09472783])],
     [array([0.96683977])],
     [array([0.01943118])],
     [array([0.00642136])],
     [array([0.67443305])],
     [array([0.45536689])],
     [array([0.19578998])],
     [array([0.48001736])],
     [array([0.61382014])],
     [array([0.864983])],
     [array([0.47685028])],
     [array([0.82193596])],
     [array([0.75378052])],
     [array([0.46688478])],
     [array([0.56421242])],
     [array([0.68391281])],
     [array([0.92733806])],
     [array([0.01993515])],
     [array([0.81478152])],
     [array([0.19884749])],
     [array([0.01260336])],
     [array([0.25219217])],
     [array([0.90280066])],
     [array([0.99884491])],
     [array([0.38270154])],
     [array([0.32717078])],
     [array([0.36427729])],
     [array([0.07051122])],
     [array([0.10521416])],
     [array([0.96732508])],
     [array([0.92061116])],
     [array([0.50715586])],
     [array([0.01539491])],
     [array([0.1212461])],
     [array([0.36798574])],
     [array([0.15604327])],
     [array([0.88628622])],
     [array([0.28598497])],
     [array([0.86717159])],
     [array([0.00416028])],
     [array([0.38905501])],
     [array([0.49836202])],
     [array([0.07811456])],
     [array([0.64234362])],
     [array([0.01187153])],
     [array([0.57208807])],
     [array([0.33428324])],
     [array([0.41285248])],
     [array([0.21604267])],
     [array([0.77872343])],
     [array([0.16433968])],
     [array([0.88278623])],
     [array([0.81212967])],
     [array([0.35217179])],
     [array([0.50467819])],
     [array([0.40805454])],
     [array([0.84523958])],
     [array([0.45661908])],
     [array([0.34332875])],
     [array([0.02253735])],
     [array([0.35115468])],
     [array([0.65821955])],
     [array([0.96925549])],
     [array([0.18589559])],
     [array([0.20599726])],
     [array([0.47561875])],
     [array([0.3109868])],
     [array([0.18173747])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.83303605, 0.34255968, 0.71342711, 0.45308273, 0.41083965,
           0.21095772, 0.71106755, 0.14256098, 0.59252479, 0.12829656,
           0.94244566, 0.35268577, 0.88198762, 0.25765435, 0.46989273,
           0.84928013, 0.45180266, 0.22728954, 0.55567442, 0.0615193 ,
           0.25957562, 0.25298217, 0.8447599 , 0.39086972, 0.01027248,
           0.2188599 , 0.15068733, 0.97460041, 0.41208758, 0.44978432,
           0.16132785, 0.56708208, 0.09472783, 0.96683977, 0.01943118,
           0.00642136, 0.67443305, 0.45536689, 0.19578998, 0.48001736,
           0.61382014, 0.864983  , 0.47685028, 0.82193596, 0.75378052,
           0.46688478, 0.56421242, 0.68391281, 0.92733806, 0.01993515,
           0.81478152, 0.19884749, 0.01260336, 0.25219217, 0.90280066,
           0.99884491, 0.38270154, 0.32717078, 0.36427729, 0.07051122,
           0.10521416, 0.96732508, 0.92061116, 0.50715586, 0.01539491,
           0.1212461 , 0.36798574, 0.15604327, 0.88628622, 0.28598497,
           0.86717159, 0.00416028, 0.38905501, 0.49836202, 0.07811456,
           0.64234362, 0.01187153, 0.57208807, 0.33428324, 0.41285248,
           0.21604267, 0.77872343, 0.16433968, 0.88278623, 0.81212967,
           0.35217179, 0.50467819, 0.40805454, 0.84523958, 0.45661908,
           0.34332875, 0.02253735, 0.35115468, 0.65821955, 0.96925549,
           0.18589559, 0.20599726, 0.47561875, 0.3109868 , 0.18173747])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.87459581, 0.24252429, 0.94302506, 0.65972725, 0.45083328,
              0.29043687, 0.03577061, 0.92164568, 0.12896842, 0.69095486,
              0.07373718, 0.74268666, 0.7956543 , 0.18715425, 0.02322447,
              0.54716162, 0.90942341, 0.15573851, 0.99894239, 0.93021186,
              0.3542588 , 0.76811239, 0.34445475, 0.91213225, 0.7447526 ,
              0.87383947, 0.22289844, 0.9508459 , 0.8112328 , 0.56611795,
              0.47914838, 0.90023873, 0.29651465, 0.5769298 , 0.25988763,
              0.57180371, 0.67344674, 0.81208643, 0.04843751, 0.17500021,
              0.95994168, 0.21152256, 0.01420612, 0.72417111, 0.4952978 ,
              0.41409441, 0.05975733, 0.63229131, 0.37191146, 0.90749556,
              0.87651753, 0.67532003, 0.75521621, 0.40672325, 0.91076816,
              0.33819818, 0.53043985, 0.11977648, 0.4144467 , 0.6045245 ,
              0.09617989, 0.53428647, 0.59312017, 0.9524332 , 0.96301902,
              0.72786025, 0.89586657, 0.17211522, 0.63492077, 0.86957534,
              0.91205369, 0.10744088, 0.96479814, 0.1120031 , 0.05585843,
              0.44714135, 0.55794844, 0.03030891, 0.08226688, 0.9640376 ,
              0.08241233, 0.36024957, 0.65073205, 0.28210676, 0.10876272,
              0.17168538, 0.26567477, 0.3366254 , 0.4306096 , 0.21937993,
              0.92452149, 0.86023789, 0.75955035, 0.10613482, 0.52528062,
              0.27921953, 0.59975009, 0.83674164, 0.87447989, 0.89028365])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.97199317, 0.58308414, 0.05251085, 0.36049212, 0.2576713 ,
              0.13192524, 0.13621827, 0.89847095, 0.3295492 , 0.58137506,
              0.01910597, 0.4447753 , 0.32800382, 0.70481942, 0.73341952,
              0.9083873 , 0.9157484 , 0.97912971, 0.86463449, 0.26942959,
              0.85504069, 0.52702494, 0.27154842, 0.55587361, 0.42154208,
              0.91779835, 0.52111753, 0.35794668, 0.46692876, 0.6386493 ,
              0.5379257 , 0.0183229 , 0.58477601, 0.79241286, 0.93092581,
              0.65395314, 0.69482386, 0.88210698, 0.95019016, 0.8640685 ,
              0.84681266, 0.37099445, 0.38485717, 0.82799015, 0.01373424,
              0.96704482, 0.29258132, 0.42814679, 0.0468025 , 0.74580805,
              0.23115451, 0.58391283, 0.44326414, 0.98139309, 0.32981018,
              0.42638483, 0.57904115, 0.9123909 , 0.17205491, 0.15154658,
              0.86296981, 0.63919847, 0.23381506, 0.46212987, 0.01423976,
              0.78559076, 0.70635255, 0.93200963, 0.4196479 , 0.47742839,
              0.47458153, 0.11006384, 0.6494521 , 0.04305523, 0.0645428 ,
              0.84486993, 0.60877475, 0.45986791, 0.10223067, 0.80411907,
              0.80976407, 0.55607339, 0.35416284, 0.03906727, 0.59336338,
              0.04533733, 0.62629076, 0.39113001, 0.31331686, 0.28773268,
              0.42585812, 0.57521696, 0.04463714, 0.00643525, 0.8904413 ,
              0.60030501, 0.10621036, 0.13849731, 0.67919045, 0.58229842])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.40808925, 0.65020374, 0.94977706, 0.69841365, 0.55071185,
              0.1505523 , 0.45006736, 0.94123011, 0.44133762, 0.47445411,
              0.38814168, 0.32448639, 0.12799096, 0.90212207, 0.64867005,
              0.90291455, 0.15423663, 0.22399445, 0.5320363 , 0.233816  ,
              0.22689865, 0.31215254, 0.24755836, 0.77373094, 0.47723058,
              0.97549573, 0.29656425, 0.23678517, 0.88441566, 0.19308186,
              0.61337127, 0.74091712, 0.93560837, 0.01613712, 0.96904972,
              0.84775735, 0.77283845, 0.6549524 , 0.31571583, 0.86881371,
              0.05805188, 0.86512978, 0.33472824, 0.75882127, 0.3013887 ,
              0.80559599, 0.45618631, 0.09856473, 0.09167091, 0.41230071,
              0.20122164, 0.11913421, 0.16043891, 0.55138245, 0.30659326,
              0.15752397, 0.2345259 , 0.04295178, 0.47672575, 0.68298271,
              0.78419796, 0.7360324 , 0.91150439, 0.20414753, 0.98926806,
              0.92536449, 0.64529754, 0.38311691, 0.87225412, 0.43768619,
              0.02375831, 0.23367608, 0.35341164, 0.77942217, 0.57566359,
              0.98986939, 0.13482634, 0.20304415, 0.2194193 , 0.4373635 ,
              0.23134788, 0.63559705, 0.33893933, 0.84024589, 0.39923789,
              0.3332236 , 0.16173155, 0.75247428, 0.43613022, 0.31731227,
              0.58792145, 0.47256107, 0.9586265 , 0.98863513, 0.29708823,
              0.05996782, 0.6792266 , 0.56397221, 0.63148129, 0.50566305])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.49839   , 0.02966042, 0.44487313, 0.01143532, 0.03817445,
              0.39943059, 0.72085658, 0.6605345 , 0.51372932, 0.40871772,
              0.77822976, 0.14376642, 0.66348828, 0.74325117, 0.90704749,
              0.6204624 , 0.16152187, 0.16614353, 0.98035304, 0.70287375,
              0.98593898, 0.79142938, 0.52349313, 0.90128175, 0.58620757,
              0.79421092, 0.95887289, 0.80525183, 0.08047257, 0.16188299,
              0.34150134, 0.84632228, 0.29600688, 0.24843   , 0.50418308,
              0.51844734, 0.07907626, 0.46956216, 0.25981031, 0.72799148,
              0.41647734, 0.29984469, 0.65534841, 0.35346395, 0.31788338,
              0.76167704, 0.64302967, 0.80247618, 0.15446385, 0.70987968,
              0.84258754, 0.32894411, 0.33902062, 0.099149  , 0.03933333,
              0.95257007, 0.72528522, 0.9135502 , 0.39985949, 0.6552078 ,
              0.1496255 , 0.55597679, 0.25509065, 0.16430989, 0.4977212 ,
              0.35910076, 0.96161822, 0.852589  , 0.04014301, 0.95321419,
              0.97317297, 0.92128598, 0.86033363, 0.66164626, 0.29759679,
              0.01861941, 0.96241036, 0.78660758, 0.38665613, 0.96118028,
              0.39701865, 0.04016789, 0.74085065, 0.77640827, 0.93504779,
              0.50822382, 0.17359722, 0.42928075, 0.42179966, 0.82453097,
              0.11378292, 0.98661115, 0.25741234, 0.05258169, 0.93904299,
              0.66293793, 0.72665425, 0.506925  , 0.52304256, 0.44431043])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.87459581, 0.24252429, 0.94302506, 0.65972725, 0.45083328,
              0.29043687, 0.03577061, 0.92164568, 0.12896842, 0.69095486,
              0.07373718, 0.74268666, 0.7956543 , 0.18715425, 0.02322447,
              0.54716162, 0.90942341, 0.15573851, 0.99894239, 0.93021186,
              0.3542588 , 0.76811239, 0.34445475, 0.91213225, 0.7447526 ,
              0.87383947, 0.22289844, 0.9508459 , 0.8112328 , 0.56611795,
              0.47914838, 0.90023873, 0.29651465, 0.5769298 , 0.25988763,
              0.57180371, 0.67344674, 0.81208643, 0.04843751, 0.17500021,
              0.95994168, 0.21152256, 0.01420612, 0.72417111, 0.4952978 ,
              0.41409441, 0.05975733, 0.63229131, 0.37191146, 0.90749556,
              0.87651753, 0.67532003, 0.75521621, 0.40672325, 0.91076816,
              0.33819818, 0.53043985, 0.11977648, 0.4144467 , 0.6045245 ,
              0.09617989, 0.53428647, 0.59312017, 0.9524332 , 0.96301902,
              0.72786025, 0.89586657, 0.17211522, 0.63492077, 0.86957534,
              0.91205369, 0.10744088, 0.96479814, 0.1120031 , 0.05585843,
              0.44714135, 0.55794844, 0.03030891, 0.08226688, 0.9640376 ,
              0.08241233, 0.36024957, 0.65073205, 0.28210676, 0.10876272,
              0.17168538, 0.26567477, 0.3366254 , 0.4306096 , 0.21937993,
              0.92452149, 0.86023789, 0.75955035, 0.10613482, 0.52528062,
              0.27921953, 0.59975009, 0.83674164, 0.87447989, 0.89028365])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.97199317, 0.58308414, 0.05251085, 0.36049212, 0.2576713 ,
              0.13192524, 0.13621827, 0.89847095, 0.3295492 , 0.58137506,
              0.01910597, 0.4447753 , 0.32800382, 0.70481942, 0.73341952,
              0.9083873 , 0.9157484 , 0.97912971, 0.86463449, 0.26942959,
              0.85504069, 0.52702494, 0.27154842, 0.55587361, 0.42154208,
              0.91779835, 0.52111753, 0.35794668, 0.46692876, 0.6386493 ,
              0.5379257 , 0.0183229 , 0.58477601, 0.79241286, 0.93092581,
              0.65395314, 0.69482386, 0.88210698, 0.95019016, 0.8640685 ,
              0.84681266, 0.37099445, 0.38485717, 0.82799015, 0.01373424,
              0.96704482, 0.29258132, 0.42814679, 0.0468025 , 0.74580805,
              0.23115451, 0.58391283, 0.44326414, 0.98139309, 0.32981018,
              0.42638483, 0.57904115, 0.9123909 , 0.17205491, 0.15154658,
              0.86296981, 0.63919847, 0.23381506, 0.46212987, 0.01423976,
              0.78559076, 0.70635255, 0.93200963, 0.4196479 , 0.47742839,
              0.47458153, 0.11006384, 0.6494521 , 0.04305523, 0.0645428 ,
              0.84486993, 0.60877475, 0.45986791, 0.10223067, 0.80411907,
              0.80976407, 0.55607339, 0.35416284, 0.03906727, 0.59336338,
              0.04533733, 0.62629076, 0.39113001, 0.31331686, 0.28773268,
              0.42585812, 0.57521696, 0.04463714, 0.00643525, 0.8904413 ,
              0.60030501, 0.10621036, 0.13849731, 0.67919045, 0.58229842])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.40808925, 0.65020374, 0.94977706, 0.69841365, 0.55071185,
              0.1505523 , 0.45006736, 0.94123011, 0.44133762, 0.47445411,
              0.38814168, 0.32448639, 0.12799096, 0.90212207, 0.64867005,
              0.90291455, 0.15423663, 0.22399445, 0.5320363 , 0.233816  ,
              0.22689865, 0.31215254, 0.24755836, 0.77373094, 0.47723058,
              0.97549573, 0.29656425, 0.23678517, 0.88441566, 0.19308186,
              0.61337127, 0.74091712, 0.93560837, 0.01613712, 0.96904972,
              0.84775735, 0.77283845, 0.6549524 , 0.31571583, 0.86881371,
              0.05805188, 0.86512978, 0.33472824, 0.75882127, 0.3013887 ,
              0.80559599, 0.45618631, 0.09856473, 0.09167091, 0.41230071,
              0.20122164, 0.11913421, 0.16043891, 0.55138245, 0.30659326,
              0.15752397, 0.2345259 , 0.04295178, 0.47672575, 0.68298271,
              0.78419796, 0.7360324 , 0.91150439, 0.20414753, 0.98926806,
              0.92536449, 0.64529754, 0.38311691, 0.87225412, 0.43768619,
              0.02375831, 0.23367608, 0.35341164, 0.77942217, 0.57566359,
              0.98986939, 0.13482634, 0.20304415, 0.2194193 , 0.4373635 ,
              0.23134788, 0.63559705, 0.33893933, 0.84024589, 0.39923789,
              0.3332236 , 0.16173155, 0.75247428, 0.43613022, 0.31731227,
              0.58792145, 0.47256107, 0.9586265 , 0.98863513, 0.29708823,
              0.05996782, 0.6792266 , 0.56397221, 0.63148129, 0.50566305])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.33078881, 0.57957775, 0.97505746, 0.87364771, 0.09868303,
              0.51818342, 0.59671137, 0.36510635, 0.18216509, 0.51347924,
              0.38467786, 0.56647313, 0.74562811, 0.42737743, 0.54729582,
              0.68449453, 0.65990994, 0.34506502, 0.19552495, 0.3403529 ,
              0.31872915, 0.73299247, 0.97324852, 0.25979377, 0.74048332,
              0.90906628, 0.32228639, 0.62487341, 0.08463624, 0.86098719,
              0.65901911, 0.10693647, 0.84214426, 0.27787496, 0.37227681,
              0.39725957, 0.75530932, 0.84536475, 0.95848518, 0.95353081,
              0.23830894, 0.7353538 , 0.78562177, 0.87271226, 0.01938016,
              0.86315705, 0.44027511, 0.89027144, 0.23084181, 0.71000992,
              0.08438957, 0.58835442, 0.2053314 , 0.77695333, 0.30830789,
              0.83162518, 0.74612668, 0.91298687, 0.9600533 , 0.0251605 ,
              0.09500513, 0.66408127, 0.82011093, 0.84684397, 0.88197971,
              0.47960427, 0.58799367, 0.01339382, 0.11913356, 0.37699669,
              0.73632069, 0.95171612, 0.80569115, 0.87258481, 0.91993809,
              0.38336247, 0.85355274, 0.28556033, 0.93847568, 0.05564399,
              0.07061927, 0.28379511, 0.42442987, 0.84596121, 0.56340219,
              0.54466799, 0.81643874, 0.50531754, 0.51840572, 0.3145883 ,
              0.80248605, 0.8191455 , 0.02620448, 0.06231564, 0.18984038,
              0.8096839 , 0.10421849, 0.10947508, 0.02945344, 0.25238328])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.83303605, 0.34255968, 0.71342711, 0.45308273, 0.41083965,
              0.21095772, 0.71106755, 0.14256098, 0.59252479, 0.12829656,
              0.94244566, 0.35268577, 0.88198762, 0.25765435, 0.46989273,
              0.84928013, 0.45180266, 0.22728954, 0.55567442, 0.0615193 ,
              0.25957562, 0.25298217, 0.8447599 , 0.39086972, 0.01027248,
              0.2188599 , 0.15068733, 0.97460041, 0.41208758, 0.44978432,
              0.16132785, 0.56708208, 0.09472783, 0.96683977, 0.01943118,
              0.00642136, 0.67443305, 0.45536689, 0.19578998, 0.48001736,
              0.61382014, 0.864983  , 0.47685028, 0.82193596, 0.75378052,
              0.46688478, 0.56421242, 0.68391281, 0.92733806, 0.01993515,
              0.81478152, 0.19884749, 0.01260336, 0.25219217, 0.90280066,
              0.99884491, 0.38270154, 0.32717078, 0.36427729, 0.07051122,
              0.10521416, 0.96732508, 0.92061116, 0.50715586, 0.01539491,
              0.1212461 , 0.36798574, 0.15604327, 0.88628622, 0.28598497,
              0.86717159, 0.00416028, 0.38905501, 0.49836202, 0.07811456,
              0.64234362, 0.01187153, 0.57208807, 0.33428324, 0.41285248,
              0.21604267, 0.77872343, 0.16433968, 0.88278623, 0.81212967,
              0.35217179, 0.50467819, 0.40805454, 0.84523958, 0.45661908,
              0.34332875, 0.02253735, 0.35115468, 0.65821955, 0.96925549,
              0.18589559, 0.20599726, 0.47561875, 0.3109868 , 0.18173747])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.85900871, 0.1233438 , 0.62510801, 0.81327409, 0.07768492,
              0.88416591, 0.52253591, 0.35334344, 0.43665581, 0.13467405,
              0.15212549, 0.35614974, 0.91647952, 0.57918712, 0.62041896,
              0.87169114, 0.18935563, 0.57568124, 0.94860508, 0.72321089,
              0.80871305, 0.80241012, 0.31911705, 0.2764371 , 0.61677248,
              0.05428143, 0.77666552, 0.52101049, 0.0464207 , 0.27748723,
              0.66112076, 0.54224797, 0.54401796, 0.54021126, 0.20873205,
              0.7153994 , 0.01377723, 0.35821097, 0.6353888 , 0.83346698,
              0.52876946, 0.25211862, 0.81301071, 0.75936466, 0.97365572,
              0.92225055, 0.98211549, 0.22029838, 0.44728639, 0.09308977,
              0.753518  , 0.50824456, 0.23345448, 0.38364833, 0.25702727,
              0.07746922, 0.60402335, 0.76685648, 0.42106224, 0.22637341,
              0.63035124, 0.64689455, 0.097725  , 0.62382586, 0.60973587,
              0.37921189, 0.67890761, 0.01295606, 0.40504446, 0.71620594,
              0.33826049, 0.57665427, 0.19707175, 0.34771467, 0.0418624 ,
              0.63688303, 0.03763683, 0.5914842 , 0.31102304, 0.5997355 ,
              0.07032195, 0.47053951, 0.09474732, 0.48711755, 0.74260715,
              0.84773534, 0.12024707, 0.36560585, 0.58388632, 0.76937701,
              0.60417979, 0.99568071, 0.04654058, 0.18731612, 0.42528682,
              0.1975576 , 0.87502443, 0.5300687 , 0.15718325, 0.2502892 ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.95215665, 0.81676364, 0.86743563, 0.79810781, 0.12031169,
              0.42294854, 0.12544402, 0.58710532, 0.18059695, 0.71487804,
              0.53385181, 0.05404276, 0.79700429, 0.96258621, 0.61682273,
              0.35918969, 0.06061939, 0.08089769, 0.3895311 , 0.00104065,
              0.74260814, 0.03424636, 0.69206549, 0.33928646, 0.7409247 ,
              0.50220712, 0.03253696, 0.09085168, 0.66196865, 0.86461484,
              0.06135911, 0.21908219, 0.43453559, 0.22285745, 0.27128277,
              0.28990228, 0.34714727, 0.67128221, 0.52395186, 0.01119783,
              0.51960901, 0.46911158, 0.93609525, 0.06972009, 0.93197492,
              0.33070736, 0.54136367, 0.91566189, 0.8067015 , 0.46741525,
              0.76648764, 0.22948725, 0.3290216 , 0.06698501, 0.22727493,
              0.06482935, 0.13665028, 0.70970291, 0.11330842, 0.96996995,
              0.91479946, 0.10238904, 0.27769598, 0.750732  , 0.16765733,
              0.86958423, 0.38959712, 0.27628949, 0.23685078, 0.97062432,
              0.66851387, 0.6920661 , 0.75145912, 0.6413687 , 0.6691663 ,
              0.75478168, 0.66538747, 0.28444927, 0.00458445, 0.03719252,
              0.90905735, 0.25602026, 0.81419244, 0.12989138, 0.28376568,
              0.82606691, 0.66008475, 0.98367771, 0.82185103, 0.72988538,
              0.63810268, 0.14745602, 0.30511679, 0.31115737, 0.16592916,
              0.64112381, 0.31539936, 0.32952936, 0.67133571, 0.01856625])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([9.58773028e-01, 4.00686649e-01, 3.03950915e-01, 6.84993717e-01,
              6.70175493e-01, 5.32980551e-01, 7.43949010e-01, 7.96445250e-01,
              3.21909862e-02, 5.26423411e-01, 2.06064380e-03, 6.10954888e-01,
              6.36181367e-01, 1.78340671e-01, 2.22240313e-01, 5.16208344e-01,
              8.90182716e-01, 3.37938231e-02, 7.33446243e-01, 7.97031744e-01,
              6.51873595e-01, 6.24671859e-01, 5.85974248e-01, 5.59910486e-01,
              5.28824004e-01, 7.45432859e-01, 5.80479837e-01, 3.06492332e-01,
              4.52669224e-01, 6.34940991e-01, 4.89630640e-01, 7.96214255e-01,
              2.43079290e-02, 9.67288870e-01, 6.81719475e-01, 8.12298144e-01,
              2.28314339e-01, 7.08647577e-01, 2.98757574e-01, 6.71608282e-01,
              7.75954464e-01, 4.76312424e-01, 9.85669584e-01, 9.82431642e-01,
              7.17639341e-01, 8.77924485e-01, 1.82401771e-01, 8.23068192e-01,
              1.38322003e-01, 6.69279860e-01, 5.31549260e-01, 8.49259926e-01,
              9.67921736e-01, 7.58686738e-01, 7.60388392e-01, 6.75188749e-02,
              7.36393381e-01, 7.62319150e-01, 5.18241713e-01, 6.80030141e-01,
              7.22548319e-01, 1.33571132e-01, 1.27859884e-01, 9.78396543e-01,
              5.00719252e-01, 9.94680395e-02, 8.54536805e-01, 9.88767283e-01,
              1.74971038e-01, 6.08843863e-04, 7.36996324e-01, 5.27376894e-01,
              7.08008230e-01, 9.78877745e-01, 1.93633861e-01, 6.21189179e-01,
              7.78959572e-01, 8.31131224e-01, 5.40787495e-01, 3.40510862e-01,
              8.55439740e-01, 3.91201760e-01, 5.33233722e-01, 3.34579362e-01,
              3.43623487e-01, 2.61698238e-01, 7.25968221e-01, 9.80660269e-01,
              5.86703968e-01, 2.63388813e-01, 7.16078081e-01, 3.12990925e-01,
              3.91821803e-01, 8.59266613e-01, 1.45731209e-01, 3.32016001e-02,
              3.34201055e-01, 7.34960314e-01, 4.48528008e-01, 8.51793110e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.83303605, 0.34255968, 0.71342711, 0.45308273, 0.41083965,
              0.21095772, 0.71106755, 0.14256098, 0.59252479, 0.12829656,
              0.94244566, 0.35268577, 0.88198762, 0.25765435, 0.46989273,
              0.84928013, 0.45180266, 0.22728954, 0.55567442, 0.0615193 ,
              0.25957562, 0.25298217, 0.8447599 , 0.39086972, 0.01027248,
              0.2188599 , 0.15068733, 0.97460041, 0.41208758, 0.44978432,
              0.16132785, 0.56708208, 0.09472783, 0.96683977, 0.01943118,
              0.00642136, 0.67443305, 0.45536689, 0.19578998, 0.48001736,
              0.61382014, 0.864983  , 0.47685028, 0.82193596, 0.75378052,
              0.46688478, 0.56421242, 0.68391281, 0.92733806, 0.01993515,
              0.81478152, 0.19884749, 0.01260336, 0.25219217, 0.90280066,
              0.99884491, 0.38270154, 0.32717078, 0.36427729, 0.07051122,
              0.10521416, 0.96732508, 0.92061116, 0.50715586, 0.01539491,
              0.1212461 , 0.36798574, 0.15604327, 0.88628622, 0.28598497,
              0.86717159, 0.00416028, 0.38905501, 0.49836202, 0.07811456,
              0.64234362, 0.01187153, 0.57208807, 0.33428324, 0.41285248,
              0.21604267, 0.77872343, 0.16433968, 0.88278623, 0.81212967,
              0.35217179, 0.50467819, 0.40805454, 0.84523958, 0.45661908,
              0.34332875, 0.02253735, 0.35115468, 0.65821955, 0.96925549,
              0.18589559, 0.20599726, 0.47561875, 0.3109868 , 0.18173747])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.85900871, 0.1233438 , 0.62510801, 0.81327409, 0.07768492,
              0.88416591, 0.52253591, 0.35334344, 0.43665581, 0.13467405,
              0.15212549, 0.35614974, 0.91647952, 0.57918712, 0.62041896,
              0.87169114, 0.18935563, 0.57568124, 0.94860508, 0.72321089,
              0.80871305, 0.80241012, 0.31911705, 0.2764371 , 0.61677248,
              0.05428143, 0.77666552, 0.52101049, 0.0464207 , 0.27748723,
              0.66112076, 0.54224797, 0.54401796, 0.54021126, 0.20873205,
              0.7153994 , 0.01377723, 0.35821097, 0.6353888 , 0.83346698,
              0.52876946, 0.25211862, 0.81301071, 0.75936466, 0.97365572,
              0.92225055, 0.98211549, 0.22029838, 0.44728639, 0.09308977,
              0.753518  , 0.50824456, 0.23345448, 0.38364833, 0.25702727,
              0.07746922, 0.60402335, 0.76685648, 0.42106224, 0.22637341,
              0.63035124, 0.64689455, 0.097725  , 0.62382586, 0.60973587,
              0.37921189, 0.67890761, 0.01295606, 0.40504446, 0.71620594,
              0.33826049, 0.57665427, 0.19707175, 0.34771467, 0.0418624 ,
              0.63688303, 0.03763683, 0.5914842 , 0.31102304, 0.5997355 ,
              0.07032195, 0.47053951, 0.09474732, 0.48711755, 0.74260715,
              0.84773534, 0.12024707, 0.36560585, 0.58388632, 0.76937701,
              0.60417979, 0.99568071, 0.04654058, 0.18731612, 0.42528682,
              0.1975576 , 0.87502443, 0.5300687 , 0.15718325, 0.2502892 ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.95215665, 0.81676364, 0.86743563, 0.79810781, 0.12031169,
              0.42294854, 0.12544402, 0.58710532, 0.18059695, 0.71487804,
              0.53385181, 0.05404276, 0.79700429, 0.96258621, 0.61682273,
              0.35918969, 0.06061939, 0.08089769, 0.3895311 , 0.00104065,
              0.74260814, 0.03424636, 0.69206549, 0.33928646, 0.7409247 ,
              0.50220712, 0.03253696, 0.09085168, 0.66196865, 0.86461484,
              0.06135911, 0.21908219, 0.43453559, 0.22285745, 0.27128277,
              0.28990228, 0.34714727, 0.67128221, 0.52395186, 0.01119783,
              0.51960901, 0.46911158, 0.93609525, 0.06972009, 0.93197492,
              0.33070736, 0.54136367, 0.91566189, 0.8067015 , 0.46741525,
              0.76648764, 0.22948725, 0.3290216 , 0.06698501, 0.22727493,
              0.06482935, 0.13665028, 0.70970291, 0.11330842, 0.96996995,
              0.91479946, 0.10238904, 0.27769598, 0.750732  , 0.16765733,
              0.86958423, 0.38959712, 0.27628949, 0.23685078, 0.97062432,
              0.66851387, 0.6920661 , 0.75145912, 0.6413687 , 0.6691663 ,
              0.75478168, 0.66538747, 0.28444927, 0.00458445, 0.03719252,
              0.90905735, 0.25602026, 0.81419244, 0.12989138, 0.28376568,
              0.82606691, 0.66008475, 0.98367771, 0.82185103, 0.72988538,
              0.63810268, 0.14745602, 0.30511679, 0.31115737, 0.16592916,
              0.64112381, 0.31539936, 0.32952936, 0.67133571, 0.01856625])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.30783935, 0.50710242, 0.57547615, 0.04604046, 0.80648557,
              0.4674684 , 0.40176941, 0.07500421, 0.53071051, 0.87315517,
              0.43627191, 0.1957371 , 0.94881103, 0.35717793, 0.61980153,
              0.10024009, 0.76330493, 0.12293354, 0.8731286 , 0.49397668,
              0.42195108, 0.60056819, 0.56821759, 0.77175872, 0.56058511,
              0.41449509, 0.15265715, 0.38923186, 0.26119252, 0.38496167,
              0.73264748, 0.90334715, 0.66446637, 0.15316065, 0.18472624,
              0.81715368, 0.6791024 , 0.88699065, 0.26640486, 0.10350418,
              0.84537432, 0.52982099, 0.29333346, 0.60583296, 0.79742569,
              0.51075518, 0.10851676, 0.27009602, 0.79311925, 0.53699389,
              0.91960691, 0.97526775, 0.244317  , 0.50716929, 0.75111356,
              0.68989807, 0.55842918, 0.14482792, 0.56634316, 0.06410162,
              0.61482799, 0.54776177, 0.65099328, 0.9303568 , 0.83647004,
              0.42767262, 0.26962184, 0.81352213, 0.66415938, 0.90706097,
              0.3033964 , 0.0194517 , 0.62947046, 0.69067856, 0.12937412,
              0.59333468, 0.24578774, 0.67597527, 0.15611876, 0.35725649,
              0.98805175, 0.26890861, 0.7509244 , 0.60951326, 0.00519825,
              0.79835721, 0.86475807, 0.05641364, 0.20973449, 0.59749528,
              0.03730083, 0.57308333, 0.01966368, 0.39258499, 0.31863106,
              0.47817123, 0.4890006 , 0.90073043, 0.02451889, 0.29367724])}]]


