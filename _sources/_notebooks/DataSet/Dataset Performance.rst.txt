
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='4b9b5013-9b9f-4ad5-bff8-468b2728a004'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='cfbee744-3345-4175-8e02-787ecce27608'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.558780920931374],
     [0.633922562430661],
     [0.551663185482951],
     [0.428104081344043],
     [0.899353319097283],
     [0.847298634007233],
     [0.129328098870697],
     [0.611502206818556],
     [0.466029252240854],
     [0.107691194105956],
     [0.782371457848819],
     [0.826987632760076],
     [0.617642641784411],
     [0.273360841563027],
     [0.708048049997931],
     [0.532697655326199],
     [0.6832874950779],
     [0.0733543512793425],
     [0.509937547564314],
     [0.960835309662],
     [0.178528418949879],
     [0.273080757724097],
     [0.944348155313336],
     [0.7689612740762],
     [0.308196618175224],
     [0.257128681204633],
     [0.565692381397284],
     [0.846087498747763],
     [0.380202582197436],
     [0.298412179744783],
     [0.7946600425831],
     [0.0112627318558025],
     [0.431415760550998],
     [0.537109083071995],
     [0.85943787683624],
     [0.642270564691866],
     [0.0383340437926252],
     [0.408635362712022],
     [0.386900799649153],
     [0.827358711927247],
     [0.284181790433015],
     [0.865835847038821],
     [0.322683864505511],
     [0.619018743735157],
     [0.720987421493625],
     [0.118067004069663],
     [0.795270794405673],
     [0.864249091957688],
     [0.793053516288716],
     [0.101327035067745],
     [0.335012568658549],
     [0.324581434570318],
     [0.879821707423746],
     [0.309298159014655],
     [0.385789210855793],
     [0.00842947271525241],
     [0.601091258482561],
     [0.0087467855141905],
     [0.35976414549056],
     [0.585141257226718],
     [0.784314111818296],
     [0.821658012965807],
     [0.73436710728562],
     [0.703074582380817],
     [0.709121533970516],
     [0.250401640008528],
     [0.554833027278497],
     [0.755190394674525],
     [0.431821219434142],
     [0.463624599654869],
     [0.300160047558777],
     [0.683224210751457],
     [0.353633751144735],
     [0.580334195677853],
     [0.398277818608801],
     [0.466600473979883],
     [0.459889492142827],
     [0.487430813308644],
     [0.290329681058754],
     [0.918994006316302],
     [0.0616413814055665],
     [0.211841059419106],
     [0.712240878312389],
     [0.957218947930486],
     [0.802847952995266],
     [0.537907330524796],
     [0.15185766958084],
     [0.75726230384998],
     [0.376224411206861],
     [0.690336247550225],
     [0.467911993539974],
     [0.657852993641466],
     [0.421240643593846],
     [0.279493695120159],
     [0.355726924352166],
     [0.535079737780755],
     [0.820612542601306],
     [0.629072635436697],
     [0.0371242454886175],
     [0.298667998019293]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.04247227])],
     [array([0.02965927])],
     [array([0.98293294])],
     [array([0.55097993])],
     [array([0.06930015])],
     [array([0.63473663])],
     [array([0.85916784])],
     [array([0.71228466])],
     [array([0.47757076])],
     [array([0.9006367])],
     [array([0.09915282])],
     [array([0.11009144])],
     [array([0.54958619])],
     [array([0.51336353])],
     [array([0.07707864])],
     [array([0.30671814])],
     [array([0.63987526])],
     [array([0.09425957])],
     [array([0.45451403])],
     [array([0.25833433])],
     [array([0.08830803])],
     [array([0.94763031])],
     [array([0.97506287])],
     [array([0.08467083])],
     [array([0.32605159])],
     [array([0.30951399])],
     [array([0.0609089])],
     [array([0.73779319])],
     [array([0.05301779])],
     [array([0.79215183])],
     [array([0.2917046])],
     [array([0.28602029])],
     [array([0.64340361])],
     [array([0.78877319])],
     [array([0.98780474])],
     [array([0.33212583])],
     [array([0.28181694])],
     [array([0.20674169])],
     [array([0.15697102])],
     [array([0.97451298])],
     [array([0.83989606])],
     [array([0.75940014])],
     [array([0.96115941])],
     [array([0.17820378])],
     [array([0.50443665])],
     [array([0.19042391])],
     [array([0.23907351])],
     [array([0.77890966])],
     [array([0.02769426])],
     [array([0.65338974])],
     [array([0.64091874])],
     [array([0.83538914])],
     [array([0.7698989])],
     [array([0.19840948])],
     [array([0.96051752])],
     [array([0.43426842])],
     [array([0.46931005])],
     [array([0.62387179])],
     [array([0.64469114])],
     [array([0.58785985])],
     [array([0.65260802])],
     [array([0.92335639])],
     [array([0.06518748])],
     [array([0.93606521])],
     [array([0.25853986])],
     [array([0.07097005])],
     [array([0.09203794])],
     [array([0.50822752])],
     [array([0.30472323])],
     [array([0.88725281])],
     [array([0.12523307])],
     [array([0.63651921])],
     [array([0.25320897])],
     [array([0.50715553])],
     [array([0.02723372])],
     [array([0.00874859])],
     [array([0.60836501])],
     [array([0.11567334])],
     [array([0.89608138])],
     [array([0.21507392])],
     [array([0.31787326])],
     [array([0.82480777])],
     [array([0.01650807])],
     [array([0.14051844])],
     [array([0.51693272])],
     [array([0.31549725])],
     [array([0.18422152])],
     [array([0.72223831])],
     [array([0.17408728])],
     [array([0.85099437])],
     [array([0.67348685])],
     [array([0.78449289])],
     [array([0.77232748])],
     [array([0.54307754])],
     [array([0.86546265])],
     [array([0.71371208])],
     [array([0.53916382])],
     [array([0.02855034])],
     [array([0.63264082])],
     [array([0.83518285])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.04247227, 0.02965927, 0.98293294, 0.55097993, 0.06930015,
           0.63473663, 0.85916784, 0.71228466, 0.47757076, 0.9006367 ,
           0.09915282, 0.11009144, 0.54958619, 0.51336353, 0.07707864,
           0.30671814, 0.63987526, 0.09425957, 0.45451403, 0.25833433,
           0.08830803, 0.94763031, 0.97506287, 0.08467083, 0.32605159,
           0.30951399, 0.0609089 , 0.73779319, 0.05301779, 0.79215183,
           0.2917046 , 0.28602029, 0.64340361, 0.78877319, 0.98780474,
           0.33212583, 0.28181694, 0.20674169, 0.15697102, 0.97451298,
           0.83989606, 0.75940014, 0.96115941, 0.17820378, 0.50443665,
           0.19042391, 0.23907351, 0.77890966, 0.02769426, 0.65338974,
           0.64091874, 0.83538914, 0.7698989 , 0.19840948, 0.96051752,
           0.43426842, 0.46931005, 0.62387179, 0.64469114, 0.58785985,
           0.65260802, 0.92335639, 0.06518748, 0.93606521, 0.25853986,
           0.07097005, 0.09203794, 0.50822752, 0.30472323, 0.88725281,
           0.12523307, 0.63651921, 0.25320897, 0.50715553, 0.02723372,
           0.00874859, 0.60836501, 0.11567334, 0.89608138, 0.21507392,
           0.31787326, 0.82480777, 0.01650807, 0.14051844, 0.51693272,
           0.31549725, 0.18422152, 0.72223831, 0.17408728, 0.85099437,
           0.67348685, 0.78449289, 0.77232748, 0.54307754, 0.86546265,
           0.71371208, 0.53916382, 0.02855034, 0.63264082, 0.83518285])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.55878092, 0.63392256, 0.55166319, 0.42810408, 0.89935332,
              0.84729863, 0.1293281 , 0.61150221, 0.46602925, 0.10769119,
              0.78237146, 0.82698763, 0.61764264, 0.27336084, 0.70804805,
              0.53269766, 0.6832875 , 0.07335435, 0.50993755, 0.96083531,
              0.17852842, 0.27308076, 0.94434816, 0.76896127, 0.30819662,
              0.25712868, 0.56569238, 0.8460875 , 0.38020258, 0.29841218,
              0.79466004, 0.01126273, 0.43141576, 0.53710908, 0.85943788,
              0.64227056, 0.03833404, 0.40863536, 0.3869008 , 0.82735871,
              0.28418179, 0.86583585, 0.32268386, 0.61901874, 0.72098742,
              0.118067  , 0.79527079, 0.86424909, 0.79305352, 0.10132704,
              0.33501257, 0.32458143, 0.87982171, 0.30929816, 0.38578921,
              0.00842947, 0.60109126, 0.00874679, 0.35976415, 0.58514126,
              0.78431411, 0.82165801, 0.73436711, 0.70307458, 0.70912153,
              0.25040164, 0.55483303, 0.75519039, 0.43182122, 0.4636246 ,
              0.30016005, 0.68322421, 0.35363375, 0.5803342 , 0.39827782,
              0.46660047, 0.45988949, 0.48743081, 0.29032968, 0.91899401,
              0.06164138, 0.21184106, 0.71224088, 0.95721895, 0.80284795,
              0.53790733, 0.15185767, 0.7572623 , 0.37622441, 0.69033625,
              0.46791199, 0.65785299, 0.42124064, 0.2794937 , 0.35572692,
              0.53507974, 0.82061254, 0.62907264, 0.03712425, 0.298668  ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.38799213, 0.41668198, 0.89972706, 0.15979454, 0.05575487,
              0.93227419, 0.67935553, 0.85478647, 0.00969964, 0.16587084,
              0.89916065, 0.90541502, 0.68108925, 0.12179212, 0.41336391,
              0.28778237, 0.41996834, 0.00263132, 0.2226946 , 0.02143123,
              0.47702506, 0.10329029, 0.43415511, 0.06016685, 0.21354678,
              0.41575214, 0.48956145, 0.32241643, 0.70937881, 0.73997728,
              0.31522597, 0.54754882, 0.48855945, 0.16121504, 0.03226813,
              0.80963355, 0.78726628, 0.68631185, 0.72259388, 0.81056787,
              0.74788197, 0.87871615, 0.87202664, 0.51771748, 0.67493634,
              0.9482261 , 0.05879677, 0.1384326 , 0.39225204, 0.11137119,
              0.60081731, 0.97501842, 0.85171364, 0.09677384, 0.98627471,
              0.60403833, 0.31195932, 0.61809558, 0.48634732, 0.06721527,
              0.76708123, 0.19021586, 0.76890768, 0.37035428, 0.62233194,
              0.33269429, 0.5540675 , 0.00270011, 0.4433706 , 0.13492962,
              0.31703469, 0.38384764, 0.16421976, 0.40346352, 0.41492938,
              0.05262775, 0.81867586, 0.2125485 , 0.68863021, 0.36080836,
              0.99342053, 0.61841066, 0.62550506, 0.72152659, 0.49413856,
              0.92206124, 0.67147189, 0.64689242, 0.51739476, 0.6311771 ,
              0.4201365 , 0.08677063, 0.39591136, 0.50844846, 0.46166578,
              0.14307009, 0.13096272, 0.5359817 , 0.71974219, 0.29040021])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.7692432 , 0.24459839, 0.32439028, 0.79146583, 0.44775666,
              0.56548284, 0.99975314, 0.88666703, 0.56174359, 0.44537988,
              0.55098577, 0.33112482, 0.0057475 , 0.20807188, 0.83856489,
              0.36947039, 0.40171752, 0.17839052, 0.59212101, 0.92862994,
              0.56100407, 0.19235915, 0.06808   , 0.16071807, 0.75679375,
              0.89555584, 0.29618234, 0.50019136, 0.08524253, 0.67913748,
              0.79099768, 0.59467882, 0.87380246, 0.80284349, 0.9348567 ,
              0.08077861, 0.93768915, 0.99925472, 0.82621358, 0.12372831,
              0.42572442, 0.36160552, 0.43903515, 0.41869847, 0.8523818 ,
              0.31560626, 0.8501152 , 0.98255841, 0.28591653, 0.8693461 ,
              0.89811205, 0.11431895, 0.15594211, 0.364462  , 0.41022856,
              0.43481667, 0.93125764, 0.81052562, 0.83815117, 0.36713889,
              0.8305167 , 0.80804363, 0.14667789, 0.58466207, 0.33499626,
              0.064966  , 0.52990733, 0.08624188, 0.55993247, 0.97433568,
              0.51131902, 0.59341797, 0.57766956, 0.59820573, 0.78886115,
              0.74955253, 0.68608124, 0.03391262, 0.05403984, 0.79156011,
              0.13867149, 0.89158517, 0.49820749, 0.06341207, 0.62176262,
              0.1327251 , 0.22342676, 0.57129139, 0.47387851, 0.58084107,
              0.13932096, 0.03084453, 0.60767833, 0.13860028, 0.71540303,
              0.28476187, 0.4213853 , 0.40218364, 0.46198551, 0.47725364])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([3.62416756e-01, 9.72051576e-01, 1.14920731e-01, 7.66205465e-01,
              2.75306234e-01, 1.08401293e-01, 6.11903260e-01, 7.97852674e-01,
              8.00812550e-01, 2.22779194e-01, 6.40887266e-01, 1.96423482e-01,
              7.85661417e-01, 4.26219154e-01, 8.01405421e-01, 8.51830305e-01,
              3.02816012e-01, 4.60215575e-01, 6.90915357e-01, 3.37926560e-02,
              4.76421054e-01, 3.68989426e-01, 7.53693695e-01, 8.96357575e-01,
              9.96039761e-01, 6.53470552e-01, 3.81682690e-01, 9.53360374e-01,
              3.79242853e-01, 4.52866376e-01, 5.83005872e-01, 1.89740781e-01,
              1.11662402e-01, 4.69445631e-01, 2.19165299e-01, 3.49538673e-01,
              6.36302044e-01, 8.07288955e-01, 1.86316411e-01, 8.93331661e-01,
              9.84404020e-01, 8.07368048e-01, 2.61941643e-01, 5.09013315e-01,
              7.47958825e-04, 4.07647416e-01, 1.31591543e-01, 6.92469159e-01,
              3.65670412e-01, 2.64905334e-01, 3.26704630e-01, 5.24494028e-01,
              9.01206498e-01, 1.16948147e-01, 1.95005533e-01, 9.01069876e-01,
              2.90713230e-01, 6.36738597e-02, 9.82390124e-01, 1.36882070e-02,
              7.20689847e-01, 1.94212308e-01, 1.45671379e-01, 5.81808379e-01,
              3.72306696e-02, 3.61888958e-01, 1.36449536e-01, 1.71490674e-01,
              5.87493984e-01, 9.95254108e-01, 6.09753569e-01, 4.12229114e-01,
              8.20066166e-02, 8.09991648e-01, 7.77470386e-01, 9.02937088e-01,
              1.33040805e-01, 4.86399265e-01, 3.99920362e-01, 9.69129847e-01,
              1.88434137e-01, 3.49829327e-01, 6.42232320e-01, 8.07092847e-01,
              8.09250560e-01, 4.74351517e-01, 9.83839306e-01, 5.21894329e-01,
              5.39039992e-01, 7.39204400e-02, 3.38295808e-01, 6.27084637e-01,
              1.93043740e-01, 3.75138345e-01, 3.42955871e-01, 2.04037696e-01,
              2.20366977e-01, 3.67142610e-01, 6.09392604e-01, 6.63750946e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.55878092, 0.63392256, 0.55166319, 0.42810408, 0.89935332,
              0.84729863, 0.1293281 , 0.61150221, 0.46602925, 0.10769119,
              0.78237146, 0.82698763, 0.61764264, 0.27336084, 0.70804805,
              0.53269766, 0.6832875 , 0.07335435, 0.50993755, 0.96083531,
              0.17852842, 0.27308076, 0.94434816, 0.76896127, 0.30819662,
              0.25712868, 0.56569238, 0.8460875 , 0.38020258, 0.29841218,
              0.79466004, 0.01126273, 0.43141576, 0.53710908, 0.85943788,
              0.64227056, 0.03833404, 0.40863536, 0.3869008 , 0.82735871,
              0.28418179, 0.86583585, 0.32268386, 0.61901874, 0.72098742,
              0.118067  , 0.79527079, 0.86424909, 0.79305352, 0.10132704,
              0.33501257, 0.32458143, 0.87982171, 0.30929816, 0.38578921,
              0.00842947, 0.60109126, 0.00874679, 0.35976415, 0.58514126,
              0.78431411, 0.82165801, 0.73436711, 0.70307458, 0.70912153,
              0.25040164, 0.55483303, 0.75519039, 0.43182122, 0.4636246 ,
              0.30016005, 0.68322421, 0.35363375, 0.5803342 , 0.39827782,
              0.46660047, 0.45988949, 0.48743081, 0.29032968, 0.91899401,
              0.06164138, 0.21184106, 0.71224088, 0.95721895, 0.80284795,
              0.53790733, 0.15185767, 0.7572623 , 0.37622441, 0.69033625,
              0.46791199, 0.65785299, 0.42124064, 0.2794937 , 0.35572692,
              0.53507974, 0.82061254, 0.62907264, 0.03712425, 0.298668  ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.38799213, 0.41668198, 0.89972706, 0.15979454, 0.05575487,
              0.93227419, 0.67935553, 0.85478647, 0.00969964, 0.16587084,
              0.89916065, 0.90541502, 0.68108925, 0.12179212, 0.41336391,
              0.28778237, 0.41996834, 0.00263132, 0.2226946 , 0.02143123,
              0.47702506, 0.10329029, 0.43415511, 0.06016685, 0.21354678,
              0.41575214, 0.48956145, 0.32241643, 0.70937881, 0.73997728,
              0.31522597, 0.54754882, 0.48855945, 0.16121504, 0.03226813,
              0.80963355, 0.78726628, 0.68631185, 0.72259388, 0.81056787,
              0.74788197, 0.87871615, 0.87202664, 0.51771748, 0.67493634,
              0.9482261 , 0.05879677, 0.1384326 , 0.39225204, 0.11137119,
              0.60081731, 0.97501842, 0.85171364, 0.09677384, 0.98627471,
              0.60403833, 0.31195932, 0.61809558, 0.48634732, 0.06721527,
              0.76708123, 0.19021586, 0.76890768, 0.37035428, 0.62233194,
              0.33269429, 0.5540675 , 0.00270011, 0.4433706 , 0.13492962,
              0.31703469, 0.38384764, 0.16421976, 0.40346352, 0.41492938,
              0.05262775, 0.81867586, 0.2125485 , 0.68863021, 0.36080836,
              0.99342053, 0.61841066, 0.62550506, 0.72152659, 0.49413856,
              0.92206124, 0.67147189, 0.64689242, 0.51739476, 0.6311771 ,
              0.4201365 , 0.08677063, 0.39591136, 0.50844846, 0.46166578,
              0.14307009, 0.13096272, 0.5359817 , 0.71974219, 0.29040021])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.7692432 , 0.24459839, 0.32439028, 0.79146583, 0.44775666,
              0.56548284, 0.99975314, 0.88666703, 0.56174359, 0.44537988,
              0.55098577, 0.33112482, 0.0057475 , 0.20807188, 0.83856489,
              0.36947039, 0.40171752, 0.17839052, 0.59212101, 0.92862994,
              0.56100407, 0.19235915, 0.06808   , 0.16071807, 0.75679375,
              0.89555584, 0.29618234, 0.50019136, 0.08524253, 0.67913748,
              0.79099768, 0.59467882, 0.87380246, 0.80284349, 0.9348567 ,
              0.08077861, 0.93768915, 0.99925472, 0.82621358, 0.12372831,
              0.42572442, 0.36160552, 0.43903515, 0.41869847, 0.8523818 ,
              0.31560626, 0.8501152 , 0.98255841, 0.28591653, 0.8693461 ,
              0.89811205, 0.11431895, 0.15594211, 0.364462  , 0.41022856,
              0.43481667, 0.93125764, 0.81052562, 0.83815117, 0.36713889,
              0.8305167 , 0.80804363, 0.14667789, 0.58466207, 0.33499626,
              0.064966  , 0.52990733, 0.08624188, 0.55993247, 0.97433568,
              0.51131902, 0.59341797, 0.57766956, 0.59820573, 0.78886115,
              0.74955253, 0.68608124, 0.03391262, 0.05403984, 0.79156011,
              0.13867149, 0.89158517, 0.49820749, 0.06341207, 0.62176262,
              0.1327251 , 0.22342676, 0.57129139, 0.47387851, 0.58084107,
              0.13932096, 0.03084453, 0.60767833, 0.13860028, 0.71540303,
              0.28476187, 0.4213853 , 0.40218364, 0.46198551, 0.47725364])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.01882151, 0.92509455, 0.20368566, 0.63987551, 0.01621696,
              0.30377785, 0.14945389, 0.16260745, 0.90890486, 0.56636281,
              0.37868729, 0.90973581, 0.0929993 , 0.47742808, 0.99445715,
              0.73663219, 0.05806894, 0.02197435, 0.76260752, 0.49861731,
              0.19121659, 0.90400609, 0.40326688, 0.11463804, 0.70320125,
              0.64429157, 0.29708571, 0.42009   , 0.26878136, 0.60792003,
              0.61392539, 0.28891838, 0.44722339, 0.84979054, 0.04947298,
              0.38949167, 0.19144235, 0.88900086, 0.79215449, 0.82445617,
              0.43095159, 0.42844553, 0.96879894, 0.61131778, 0.21174548,
              0.51525783, 0.31146667, 0.38813885, 0.31572207, 0.85096137,
              0.13094819, 0.4717621 , 0.36808313, 0.06914164, 0.89945023,
              0.73902895, 0.53431178, 0.22691874, 0.71805629, 0.07244979,
              0.74909392, 0.18906669, 0.7571422 , 0.14301973, 0.91357565,
              0.63800382, 0.21974782, 0.18303212, 0.53426548, 0.19352457,
              0.65581162, 0.35823872, 0.17585925, 0.50638679, 0.93754411,
              0.38877477, 0.18108893, 0.01096851, 0.80960369, 0.55157076,
              0.91312493, 0.49011282, 0.7938212 , 0.51470699, 0.2146954 ,
              0.13481665, 0.26674032, 0.64891992, 0.78598521, 0.02810167,
              0.48172111, 0.91905183, 0.31492325, 0.65414631, 0.83651415,
              0.27927998, 0.88087513, 0.62695524, 0.28991129, 0.30683578])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.04247227, 0.02965927, 0.98293294, 0.55097993, 0.06930015,
              0.63473663, 0.85916784, 0.71228466, 0.47757076, 0.9006367 ,
              0.09915282, 0.11009144, 0.54958619, 0.51336353, 0.07707864,
              0.30671814, 0.63987526, 0.09425957, 0.45451403, 0.25833433,
              0.08830803, 0.94763031, 0.97506287, 0.08467083, 0.32605159,
              0.30951399, 0.0609089 , 0.73779319, 0.05301779, 0.79215183,
              0.2917046 , 0.28602029, 0.64340361, 0.78877319, 0.98780474,
              0.33212583, 0.28181694, 0.20674169, 0.15697102, 0.97451298,
              0.83989606, 0.75940014, 0.96115941, 0.17820378, 0.50443665,
              0.19042391, 0.23907351, 0.77890966, 0.02769426, 0.65338974,
              0.64091874, 0.83538914, 0.7698989 , 0.19840948, 0.96051752,
              0.43426842, 0.46931005, 0.62387179, 0.64469114, 0.58785985,
              0.65260802, 0.92335639, 0.06518748, 0.93606521, 0.25853986,
              0.07097005, 0.09203794, 0.50822752, 0.30472323, 0.88725281,
              0.12523307, 0.63651921, 0.25320897, 0.50715553, 0.02723372,
              0.00874859, 0.60836501, 0.11567334, 0.89608138, 0.21507392,
              0.31787326, 0.82480777, 0.01650807, 0.14051844, 0.51693272,
              0.31549725, 0.18422152, 0.72223831, 0.17408728, 0.85099437,
              0.67348685, 0.78449289, 0.77232748, 0.54307754, 0.86546265,
              0.71371208, 0.53916382, 0.02855034, 0.63264082, 0.83518285])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([2.37061586e-01, 8.94173016e-01, 5.72249101e-01, 8.47650370e-01,
              5.96352117e-02, 6.15745376e-01, 3.02644114e-01, 3.82381302e-01,
              9.13570766e-01, 3.06623452e-01, 1.46438112e-01, 4.62278455e-01,
              2.68522429e-01, 5.71442259e-01, 1.05303246e-01, 9.55340440e-01,
              7.90150145e-01, 3.85525174e-01, 8.38624513e-02, 7.11701655e-01,
              8.42379819e-01, 3.33405527e-01, 3.50190265e-03, 7.00791013e-01,
              5.70536273e-01, 4.28009099e-01, 8.89774354e-01, 6.30915959e-01,
              1.50107483e-01, 2.54896606e-01, 8.62349457e-01, 7.72590894e-01,
              9.00893465e-01, 3.16870676e-01, 8.17203634e-01, 2.39088132e-01,
              2.03101269e-01, 6.99607082e-01, 8.93777124e-01, 5.49000097e-01,
              5.79249883e-01, 4.22591981e-01, 6.38930420e-01, 7.22805759e-01,
              5.21184940e-01, 5.53190011e-01, 6.80810945e-01, 7.84341400e-01,
              5.53732459e-01, 1.66788347e-02, 2.55234642e-01, 6.10017420e-01,
              9.24495633e-01, 5.28008861e-01, 1.23538829e-01, 7.96604528e-04,
              4.33689864e-01, 1.79769902e-01, 2.71486596e-01, 8.71896830e-01,
              3.35614408e-01, 6.36189970e-01, 3.26540765e-01, 8.26526008e-01,
              9.59915601e-01, 3.97155697e-01, 3.52168204e-01, 1.65697298e-01,
              2.33337789e-01, 5.02741196e-01, 6.17886490e-01, 7.18991581e-01,
              1.97060348e-01, 2.65749092e-01, 8.86705425e-01, 8.33127338e-01,
              6.87408247e-01, 2.43754467e-01, 6.29399548e-01, 6.80521116e-01,
              4.67541608e-01, 6.69101118e-01, 5.64357881e-01, 7.31095169e-01,
              7.78075756e-01, 6.69650426e-01, 1.73956381e-02, 6.26917282e-01,
              4.58987924e-01, 7.68649397e-02, 4.05277158e-01, 5.97578314e-01,
              2.90871203e-01, 2.26996649e-01, 1.38181359e-01, 2.40275091e-01,
              7.65152494e-01, 1.58321514e-01, 8.87478378e-01, 8.22392427e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.82452224, 0.55404989, 0.71550088, 0.8096661 , 0.84043515,
              0.99492439, 0.94862484, 0.97644187, 0.78769443, 0.64297986,
              0.24045919, 0.7332307 , 0.39283532, 0.10357748, 0.68282897,
              0.58045245, 0.17129023, 0.82724529, 0.20692715, 0.2717653 ,
              0.11447938, 0.6752141 , 0.50761342, 0.76320436, 0.74534324,
              0.25668646, 0.00890405, 0.98369291, 0.85373133, 0.13767946,
              0.99247468, 0.56281247, 0.68095563, 0.83462845, 0.52243629,
              0.87866623, 0.58010898, 0.80699818, 0.88268584, 0.02333946,
              0.64450871, 0.66184412, 0.76878312, 0.90368038, 0.12976511,
              0.55226772, 0.92121446, 0.02015462, 0.5582229 , 0.69843616,
              0.92658345, 0.50804284, 0.36473035, 0.13182801, 0.55976179,
              0.15468387, 0.26841891, 0.15275329, 0.75309964, 0.51458448,
              0.00258915, 0.30030278, 0.73092098, 0.06124407, 0.75509563,
              0.53856059, 0.09292905, 0.90937666, 0.29861777, 0.92620606,
              0.67474816, 0.70468653, 0.09187613, 0.07387307, 0.62161703,
              0.11131008, 0.34820833, 0.96878654, 0.63171127, 0.3859127 ,
              0.90679262, 0.72572983, 0.52826232, 0.1383431 , 0.26044578,
              0.17433017, 0.74333399, 0.63286753, 0.62581365, 0.90474431,
              0.64903858, 0.09213226, 0.73247277, 0.26165115, 0.42580211,
              0.73858049, 0.09212985, 0.65955853, 0.10347473, 0.40510935])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.25578684, 0.9669647 , 0.52073617, 0.01966712, 0.63681098,
              0.79657324, 0.91997792, 0.26272032, 0.01882854, 0.51546789,
              0.37223509, 0.51858431, 0.1057708 , 0.90488444, 0.80423207,
              0.50638594, 0.16448461, 0.32896251, 0.30693891, 0.93040833,
              0.23028621, 0.55122181, 0.48137663, 0.37147009, 0.10093564,
              0.27088997, 0.75348353, 0.42096992, 0.15746751, 0.60331729,
              0.97438938, 0.64580963, 0.53589057, 0.78780382, 0.46140949,
              0.62129456, 0.62162054, 0.79990284, 0.96717904, 0.65946813,
              0.40027802, 0.65766019, 0.20953647, 0.7863971 , 0.49910725,
              0.38786183, 0.47225995, 0.59218763, 0.83364015, 0.33099526,
              0.15637993, 0.01860598, 0.70702587, 0.54635186, 0.38742276,
              0.73105635, 0.70954251, 0.41031296, 0.7371183 , 0.0959214 ,
              0.37743545, 0.38202909, 0.90192815, 0.6134356 , 0.08967813,
              0.81613367, 0.28730946, 0.51573491, 0.84532006, 0.63732612,
              0.65656719, 0.74401476, 0.1853634 , 0.91006772, 0.59752357,
              0.8759003 , 0.63326591, 0.53213848, 0.81704832, 0.55192256,
              0.22925501, 0.95925235, 0.16955442, 0.42229556, 0.13513672,
              0.23426198, 0.83991719, 0.41193608, 0.94044035, 0.40963395,
              0.99296439, 0.17161236, 0.46101422, 0.12848753, 0.64556019,
              0.38156749, 0.61933042, 0.104015  , 0.71821842, 0.22538712])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.04247227, 0.02965927, 0.98293294, 0.55097993, 0.06930015,
              0.63473663, 0.85916784, 0.71228466, 0.47757076, 0.9006367 ,
              0.09915282, 0.11009144, 0.54958619, 0.51336353, 0.07707864,
              0.30671814, 0.63987526, 0.09425957, 0.45451403, 0.25833433,
              0.08830803, 0.94763031, 0.97506287, 0.08467083, 0.32605159,
              0.30951399, 0.0609089 , 0.73779319, 0.05301779, 0.79215183,
              0.2917046 , 0.28602029, 0.64340361, 0.78877319, 0.98780474,
              0.33212583, 0.28181694, 0.20674169, 0.15697102, 0.97451298,
              0.83989606, 0.75940014, 0.96115941, 0.17820378, 0.50443665,
              0.19042391, 0.23907351, 0.77890966, 0.02769426, 0.65338974,
              0.64091874, 0.83538914, 0.7698989 , 0.19840948, 0.96051752,
              0.43426842, 0.46931005, 0.62387179, 0.64469114, 0.58785985,
              0.65260802, 0.92335639, 0.06518748, 0.93606521, 0.25853986,
              0.07097005, 0.09203794, 0.50822752, 0.30472323, 0.88725281,
              0.12523307, 0.63651921, 0.25320897, 0.50715553, 0.02723372,
              0.00874859, 0.60836501, 0.11567334, 0.89608138, 0.21507392,
              0.31787326, 0.82480777, 0.01650807, 0.14051844, 0.51693272,
              0.31549725, 0.18422152, 0.72223831, 0.17408728, 0.85099437,
              0.67348685, 0.78449289, 0.77232748, 0.54307754, 0.86546265,
              0.71371208, 0.53916382, 0.02855034, 0.63264082, 0.83518285])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([2.37061586e-01, 8.94173016e-01, 5.72249101e-01, 8.47650370e-01,
              5.96352117e-02, 6.15745376e-01, 3.02644114e-01, 3.82381302e-01,
              9.13570766e-01, 3.06623452e-01, 1.46438112e-01, 4.62278455e-01,
              2.68522429e-01, 5.71442259e-01, 1.05303246e-01, 9.55340440e-01,
              7.90150145e-01, 3.85525174e-01, 8.38624513e-02, 7.11701655e-01,
              8.42379819e-01, 3.33405527e-01, 3.50190265e-03, 7.00791013e-01,
              5.70536273e-01, 4.28009099e-01, 8.89774354e-01, 6.30915959e-01,
              1.50107483e-01, 2.54896606e-01, 8.62349457e-01, 7.72590894e-01,
              9.00893465e-01, 3.16870676e-01, 8.17203634e-01, 2.39088132e-01,
              2.03101269e-01, 6.99607082e-01, 8.93777124e-01, 5.49000097e-01,
              5.79249883e-01, 4.22591981e-01, 6.38930420e-01, 7.22805759e-01,
              5.21184940e-01, 5.53190011e-01, 6.80810945e-01, 7.84341400e-01,
              5.53732459e-01, 1.66788347e-02, 2.55234642e-01, 6.10017420e-01,
              9.24495633e-01, 5.28008861e-01, 1.23538829e-01, 7.96604528e-04,
              4.33689864e-01, 1.79769902e-01, 2.71486596e-01, 8.71896830e-01,
              3.35614408e-01, 6.36189970e-01, 3.26540765e-01, 8.26526008e-01,
              9.59915601e-01, 3.97155697e-01, 3.52168204e-01, 1.65697298e-01,
              2.33337789e-01, 5.02741196e-01, 6.17886490e-01, 7.18991581e-01,
              1.97060348e-01, 2.65749092e-01, 8.86705425e-01, 8.33127338e-01,
              6.87408247e-01, 2.43754467e-01, 6.29399548e-01, 6.80521116e-01,
              4.67541608e-01, 6.69101118e-01, 5.64357881e-01, 7.31095169e-01,
              7.78075756e-01, 6.69650426e-01, 1.73956381e-02, 6.26917282e-01,
              4.58987924e-01, 7.68649397e-02, 4.05277158e-01, 5.97578314e-01,
              2.90871203e-01, 2.26996649e-01, 1.38181359e-01, 2.40275091e-01,
              7.65152494e-01, 1.58321514e-01, 8.87478378e-01, 8.22392427e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.82452224, 0.55404989, 0.71550088, 0.8096661 , 0.84043515,
              0.99492439, 0.94862484, 0.97644187, 0.78769443, 0.64297986,
              0.24045919, 0.7332307 , 0.39283532, 0.10357748, 0.68282897,
              0.58045245, 0.17129023, 0.82724529, 0.20692715, 0.2717653 ,
              0.11447938, 0.6752141 , 0.50761342, 0.76320436, 0.74534324,
              0.25668646, 0.00890405, 0.98369291, 0.85373133, 0.13767946,
              0.99247468, 0.56281247, 0.68095563, 0.83462845, 0.52243629,
              0.87866623, 0.58010898, 0.80699818, 0.88268584, 0.02333946,
              0.64450871, 0.66184412, 0.76878312, 0.90368038, 0.12976511,
              0.55226772, 0.92121446, 0.02015462, 0.5582229 , 0.69843616,
              0.92658345, 0.50804284, 0.36473035, 0.13182801, 0.55976179,
              0.15468387, 0.26841891, 0.15275329, 0.75309964, 0.51458448,
              0.00258915, 0.30030278, 0.73092098, 0.06124407, 0.75509563,
              0.53856059, 0.09292905, 0.90937666, 0.29861777, 0.92620606,
              0.67474816, 0.70468653, 0.09187613, 0.07387307, 0.62161703,
              0.11131008, 0.34820833, 0.96878654, 0.63171127, 0.3859127 ,
              0.90679262, 0.72572983, 0.52826232, 0.1383431 , 0.26044578,
              0.17433017, 0.74333399, 0.63286753, 0.62581365, 0.90474431,
              0.64903858, 0.09213226, 0.73247277, 0.26165115, 0.42580211,
              0.73858049, 0.09212985, 0.65955853, 0.10347473, 0.40510935])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.27085972, 0.64743839, 0.17459003, 0.23880891, 0.255507  ,
              0.312685  , 0.42563299, 0.42836291, 0.8460407 , 0.08871204,
              0.60884146, 0.37533197, 0.09480468, 0.19418728, 0.06744434,
              0.52946359, 0.86246516, 0.00118331, 0.20430307, 0.90685264,
              0.41993796, 0.35912359, 0.91552051, 0.68515715, 0.46207181,
              0.0520763 , 0.83121883, 0.68163944, 0.7053264 , 0.44843367,
              0.63534738, 0.16040264, 0.07483262, 0.07457684, 0.31259904,
              0.06298585, 0.17822772, 0.26477236, 0.9827182 , 0.37138097,
              0.16208582, 0.85246824, 0.92378764, 0.36612726, 0.79674856,
              0.20550938, 0.75235922, 0.50261854, 0.26534112, 0.7010038 ,
              0.66966959, 0.70691987, 0.47728377, 0.07189001, 0.67599418,
              0.46880178, 0.5258769 , 0.2184572 , 0.93986895, 0.37774016,
              0.46223395, 0.81443192, 0.91651757, 0.07897561, 0.29764825,
              0.09512704, 0.6849039 , 0.88517611, 0.6129327 , 0.32044348,
              0.37322964, 0.68714347, 0.60843232, 0.57313217, 0.01756143,
              0.16723274, 0.11546296, 0.58955111, 0.09255619, 0.36053481,
              0.0761269 , 0.30071793, 0.68880825, 0.32742727, 0.03344461,
              0.11079952, 0.05147933, 0.39281658, 0.1137763 , 0.73499574,
              0.97962172, 0.55316214, 0.23993908, 0.47688646, 0.26953614,
              0.7142621 , 0.87122401, 0.73444845, 0.13735601, 0.2646177 ])}]]


