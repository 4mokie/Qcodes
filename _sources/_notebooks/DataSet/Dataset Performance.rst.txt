
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='f2a95bd6-6afd-4ce3-a534-d67de56f8ed6'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='24105041-88e3-4093-b358-b5e89341fe68'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.97137599675316],
     [0.355078610379591],
     [0.628476439814406],
     [0.352813678054807],
     [0.276633626058503],
     [0.222720647398942],
     [0.287221137261783],
     [0.558256068786804],
     [0.692836723670111],
     [0.0319150114865158],
     [0.707834979650823],
     [0.344718619871198],
     [0.882848533245179],
     [0.468796703352599],
     [0.650956434851361],
     [0.602227829910063],
     [0.749301231374117],
     [0.216065220690386],
     [0.811950196156805],
     [0.626447595437167],
     [0.480379637588985],
     [0.626793271930215],
     [0.594691086745357],
     [0.636575247811643],
     [0.587666291296907],
     [0.630641432402213],
     [0.482163143509666],
     [0.713906117796712],
     [0.86913545652097],
     [0.31676738898474],
     [0.112803990988487],
     [0.67171818046356],
     [0.733151525159069],
     [0.509017919902288],
     [0.943059228767479],
     [0.718009878480875],
     [0.390403000517914],
     [0.424575460889303],
     [0.488438872781697],
     [0.0391744385272706],
     [0.210815653210121],
     [0.800071168709659],
     [0.358744746024518],
     [0.511007495925433],
     [0.980749127113312],
     [0.670469650231984],
     [0.710228339329962],
     [0.157048089880871],
     [0.837529888406548],
     [0.76996103323446],
     [0.0313402380883673],
     [0.137276243653728],
     [0.95196213859174],
     [0.919830723100778],
     [0.171087192325844],
     [0.36728821569382],
     [0.611555995781847],
     [0.657828417958164],
     [0.538453152696826],
     [0.132030007407564],
     [0.803929870602058],
     [0.105654476520024],
     [0.0370484208246747],
     [0.424540655490079],
     [0.404570979492313],
     [0.788478158881622],
     [0.520034768092959],
     [0.843477295812773],
     [0.850475357028519],
     [0.0260599299216777],
     [0.165925414321666],
     [0.843528753291171],
     [0.864163816385147],
     [0.0774528513460155],
     [0.392091680228909],
     [0.702836316650857],
     [0.19723114936263],
     [0.0534345510606014],
     [0.814121134766011],
     [0.739762674994075],
     [0.252375860105455],
     [0.291074818077049],
     [0.167241836117215],
     [0.539678325040287],
     [0.0843540846968091],
     [0.957089581248689],
     [0.71859433597035],
     [0.34036303562544],
     [0.236201715177468],
     [0.543748022869495],
     [0.542735696967309],
     [0.412609689643116],
     [0.643812858986316],
     [0.607777108028299],
     [0.722546079968856],
     [0.722886027747984],
     [0.883674771738829],
     [0.938850927631799],
     [0.859470541890338],
     [0.690445551403336]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.13452007])],
     [array([0.82905583])],
     [array([0.47589351])],
     [array([0.87797744])],
     [array([0.11574337])],
     [array([0.52229722])],
     [array([0.89089494])],
     [array([0.97354991])],
     [array([0.41824389])],
     [array([0.53551161])],
     [array([0.05794748])],
     [array([0.40689683])],
     [array([0.24791044])],
     [array([0.93576748])],
     [array([0.68750053])],
     [array([0.69091692])],
     [array([0.48899882])],
     [array([0.96206106])],
     [array([0.05669893])],
     [array([0.78319766])],
     [array([0.88759303])],
     [array([0.44762258])],
     [array([0.00844226])],
     [array([0.57508468])],
     [array([0.57198832])],
     [array([0.85745309])],
     [array([0.33623786])],
     [array([0.83786767])],
     [array([0.3528894])],
     [array([0.31320106])],
     [array([0.57868685])],
     [array([0.68597499])],
     [array([0.5144071])],
     [array([0.2699626])],
     [array([0.27435293])],
     [array([0.23847701])],
     [array([0.14244636])],
     [array([0.26673575])],
     [array([0.814325])],
     [array([0.37410574])],
     [array([0.86736008])],
     [array([0.37180391])],
     [array([0.96458619])],
     [array([0.09718214])],
     [array([0.12672809])],
     [array([0.39005449])],
     [array([0.95740953])],
     [array([0.66191614])],
     [array([0.24346533])],
     [array([0.42515479])],
     [array([0.07460359])],
     [array([0.85240588])],
     [array([0.59786009])],
     [array([0.12366835])],
     [array([0.35999327])],
     [array([0.62002514])],
     [array([0.54767321])],
     [array([0.48894543])],
     [array([0.75525548])],
     [array([0.40924632])],
     [array([0.55754464])],
     [array([0.27796278])],
     [array([0.60340045])],
     [array([0.3037071])],
     [array([0.16258094])],
     [array([0.19970089])],
     [array([0.77776048])],
     [array([0.74848183])],
     [array([0.69092758])],
     [array([0.35542173])],
     [array([0.44685732])],
     [array([0.0302379])],
     [array([0.59352963])],
     [array([0.18363513])],
     [array([0.32321128])],
     [array([0.13890068])],
     [array([0.63718541])],
     [array([0.21639498])],
     [array([0.8452008])],
     [array([0.85031526])],
     [array([0.18199884])],
     [array([0.14211444])],
     [array([0.89637374])],
     [array([0.02547304])],
     [array([0.13269545])],
     [array([0.97555547])],
     [array([0.55373665])],
     [array([0.37273372])],
     [array([0.56341405])],
     [array([0.78304028])],
     [array([0.04034274])],
     [array([0.82779367])],
     [array([0.56533673])],
     [array([0.59239919])],
     [array([0.17660491])],
     [array([0.16590984])],
     [array([0.47988021])],
     [array([0.00148642])],
     [array([0.46874263])],
     [array([0.20120791])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.13452007, 0.82905583, 0.47589351, 0.87797744, 0.11574337,
           0.52229722, 0.89089494, 0.97354991, 0.41824389, 0.53551161,
           0.05794748, 0.40689683, 0.24791044, 0.93576748, 0.68750053,
           0.69091692, 0.48899882, 0.96206106, 0.05669893, 0.78319766,
           0.88759303, 0.44762258, 0.00844226, 0.57508468, 0.57198832,
           0.85745309, 0.33623786, 0.83786767, 0.3528894 , 0.31320106,
           0.57868685, 0.68597499, 0.5144071 , 0.2699626 , 0.27435293,
           0.23847701, 0.14244636, 0.26673575, 0.814325  , 0.37410574,
           0.86736008, 0.37180391, 0.96458619, 0.09718214, 0.12672809,
           0.39005449, 0.95740953, 0.66191614, 0.24346533, 0.42515479,
           0.07460359, 0.85240588, 0.59786009, 0.12366835, 0.35999327,
           0.62002514, 0.54767321, 0.48894543, 0.75525548, 0.40924632,
           0.55754464, 0.27796278, 0.60340045, 0.3037071 , 0.16258094,
           0.19970089, 0.77776048, 0.74848183, 0.69092758, 0.35542173,
           0.44685732, 0.0302379 , 0.59352963, 0.18363513, 0.32321128,
           0.13890068, 0.63718541, 0.21639498, 0.8452008 , 0.85031526,
           0.18199884, 0.14211444, 0.89637374, 0.02547304, 0.13269545,
           0.97555547, 0.55373665, 0.37273372, 0.56341405, 0.78304028,
           0.04034274, 0.82779367, 0.56533673, 0.59239919, 0.17660491,
           0.16590984, 0.47988021, 0.00148642, 0.46874263, 0.20120791])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.971376  , 0.35507861, 0.62847644, 0.35281368, 0.27663363,
              0.22272065, 0.28722114, 0.55825607, 0.69283672, 0.03191501,
              0.70783498, 0.34471862, 0.88284853, 0.4687967 , 0.65095643,
              0.60222783, 0.74930123, 0.21606522, 0.8119502 , 0.6264476 ,
              0.48037964, 0.62679327, 0.59469109, 0.63657525, 0.58766629,
              0.63064143, 0.48216314, 0.71390612, 0.86913546, 0.31676739,
              0.11280399, 0.67171818, 0.73315153, 0.50901792, 0.94305923,
              0.71800988, 0.390403  , 0.42457546, 0.48843887, 0.03917444,
              0.21081565, 0.80007117, 0.35874475, 0.5110075 , 0.98074913,
              0.67046965, 0.71022834, 0.15704809, 0.83752989, 0.76996103,
              0.03134024, 0.13727624, 0.95196214, 0.91983072, 0.17108719,
              0.36728822, 0.611556  , 0.65782842, 0.53845315, 0.13203001,
              0.80392987, 0.10565448, 0.03704842, 0.42454066, 0.40457098,
              0.78847816, 0.52003477, 0.8434773 , 0.85047536, 0.02605993,
              0.16592541, 0.84352875, 0.86416382, 0.07745285, 0.39209168,
              0.70283632, 0.19723115, 0.05343455, 0.81412113, 0.73976267,
              0.25237586, 0.29107482, 0.16724184, 0.53967833, 0.08435408,
              0.95708958, 0.71859434, 0.34036304, 0.23620172, 0.54374802,
              0.5427357 , 0.41260969, 0.64381286, 0.60777711, 0.72254608,
              0.72288603, 0.88367477, 0.93885093, 0.85947054, 0.69044555])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.11308305, 0.91133395, 0.2230251 , 0.55392585, 0.41196396,
              0.01467436, 0.30151987, 0.84433944, 0.63167331, 0.52043926,
              0.39572836, 0.99059809, 0.4670451 , 0.89745936, 0.8145481 ,
              0.69775663, 0.8676864 , 0.53515885, 0.01315091, 0.09116845,
              0.47405858, 0.25487949, 0.65127302, 0.74338905, 0.6471144 ,
              0.39461828, 0.97072527, 0.33185154, 0.783969  , 0.26227631,
              0.66145094, 0.42211239, 0.66210954, 0.81321609, 0.55556372,
              0.83862164, 0.84173035, 0.90560575, 0.81584673, 0.92580926,
              0.33336193, 0.74713901, 0.35641375, 0.29952186, 0.82982769,
              0.04405754, 0.28683545, 0.23904655, 0.13972674, 0.65650097,
              0.95554728, 0.70218024, 0.5628207 , 0.20215138, 0.83428075,
              0.81454552, 0.54939671, 0.17559803, 0.62441968, 0.93561828,
              0.37475387, 0.28869812, 0.77724177, 0.48763098, 0.7461099 ,
              0.05026789, 0.72494878, 0.12560034, 0.75869909, 0.60877669,
              0.81537562, 0.56809838, 0.80744364, 0.70157211, 0.24744153,
              0.57717589, 0.75548964, 0.29063752, 0.07518112, 0.35701143,
              0.33022348, 0.90529562, 0.28535406, 0.42315599, 0.49934199,
              0.90063287, 0.32004094, 0.85249637, 0.5149015 , 0.62180467,
              0.37506133, 0.07159416, 0.78625155, 0.38640356, 0.69446154,
              0.4692806 , 0.05504796, 0.83711277, 0.45679239, 0.51558649])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([8.96703218e-01, 4.39968014e-02, 6.82636529e-01, 3.36997335e-01,
              1.79830117e-01, 2.31485086e-01, 2.55158856e-01, 3.44930488e-02,
              3.34693028e-01, 7.05296136e-01, 4.85404352e-01, 7.68505437e-01,
              6.57290807e-01, 9.18650078e-01, 4.63783900e-01, 8.02591257e-01,
              5.05535159e-01, 8.05478762e-01, 6.62941746e-01, 1.23972845e-02,
              8.77432241e-01, 3.05408311e-01, 9.25025292e-04, 4.85938362e-01,
              3.09919609e-01, 5.72645814e-02, 3.61757847e-01, 7.02736941e-01,
              2.85170018e-01, 1.31040107e-01, 5.69644709e-01, 8.45158991e-01,
              6.35448718e-01, 6.56454650e-01, 9.31425783e-03, 4.32636936e-01,
              5.19139818e-01, 6.37320113e-01, 5.33475730e-01, 4.08071351e-01,
              7.01627233e-01, 9.42214451e-02, 4.30990617e-01, 8.56792749e-01,
              3.94998831e-01, 2.55610577e-01, 6.34946454e-01, 7.72115638e-01,
              1.69755058e-02, 7.23485252e-01, 7.02185224e-01, 4.79455468e-01,
              7.73311654e-02, 1.85704813e-01, 5.80182704e-01, 7.84816504e-01,
              5.70211163e-01, 4.18256132e-01, 8.08746794e-01, 3.01227539e-01,
              2.59786253e-01, 1.63591360e-01, 8.53283265e-01, 7.08253916e-01,
              8.34127943e-01, 5.47373859e-01, 6.41594265e-01, 1.97013130e-01,
              4.49462013e-01, 4.63565639e-01, 6.44224324e-01, 7.65538036e-01,
              4.28253372e-01, 3.59802518e-01, 9.33431104e-01, 8.93160507e-01,
              6.99400338e-01, 3.51633572e-01, 9.14711533e-01, 6.11816746e-01,
              1.37292027e-02, 5.99331984e-01, 8.45760304e-02, 4.30456775e-01,
              1.41340704e-01, 6.48143513e-01, 7.38315272e-01, 2.37868320e-01,
              7.14521978e-02, 6.72243794e-02, 6.46113058e-01, 6.68807255e-01,
              9.35195625e-01, 6.25062832e-01, 6.80919668e-01, 5.08157481e-01,
              3.78467288e-01, 3.28021441e-01, 8.52603138e-01, 7.65435381e-01])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.25032645, 0.03005066, 0.26211799, 0.52497501, 0.37257372,
              0.66576453, 0.58780906, 0.48904343, 0.98129622, 0.60769324,
              0.86805957, 0.16913116, 0.24588724, 0.43363722, 0.51984807,
              0.84478002, 0.30718654, 0.71905186, 0.48444531, 0.31938346,
              0.32181756, 0.97411188, 0.1589519 , 0.16112754, 0.76421981,
              0.09396529, 0.52660986, 0.75734643, 0.3378801 , 0.79831009,
              0.6928703 , 0.59942282, 0.25015791, 0.48067049, 0.95293975,
              0.85327011, 0.8176058 , 0.35549507, 0.42080978, 0.65309166,
              0.02444051, 0.9892099 , 0.25417984, 0.59363986, 0.48996552,
              0.05499717, 0.25909137, 0.1646335 , 0.73216279, 0.69846556,
              0.32300838, 0.18754024, 0.48283376, 0.50930554, 0.43280214,
              0.41877193, 0.78898592, 0.78782893, 0.40467939, 0.44503067,
              0.93273795, 0.29009911, 0.11795218, 0.75228412, 0.65133169,
              0.55492013, 0.21464694, 0.09635141, 0.05535411, 0.36766338,
              0.24039776, 0.08686046, 0.06876135, 0.23948715, 0.24359466,
              0.53219839, 0.23589277, 0.40952008, 0.3463378 , 0.76874699,
              0.57788127, 0.38628815, 0.43602331, 0.94220115, 0.49964655,
              0.14816558, 0.25188325, 0.10450021, 0.33656266, 0.88917127,
              0.76952881, 0.62374076, 0.37434419, 0.91921582, 0.95587504,
              0.80490576, 0.00215233, 0.47494307, 0.43978938, 0.91010587])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.971376  , 0.35507861, 0.62847644, 0.35281368, 0.27663363,
              0.22272065, 0.28722114, 0.55825607, 0.69283672, 0.03191501,
              0.70783498, 0.34471862, 0.88284853, 0.4687967 , 0.65095643,
              0.60222783, 0.74930123, 0.21606522, 0.8119502 , 0.6264476 ,
              0.48037964, 0.62679327, 0.59469109, 0.63657525, 0.58766629,
              0.63064143, 0.48216314, 0.71390612, 0.86913546, 0.31676739,
              0.11280399, 0.67171818, 0.73315153, 0.50901792, 0.94305923,
              0.71800988, 0.390403  , 0.42457546, 0.48843887, 0.03917444,
              0.21081565, 0.80007117, 0.35874475, 0.5110075 , 0.98074913,
              0.67046965, 0.71022834, 0.15704809, 0.83752989, 0.76996103,
              0.03134024, 0.13727624, 0.95196214, 0.91983072, 0.17108719,
              0.36728822, 0.611556  , 0.65782842, 0.53845315, 0.13203001,
              0.80392987, 0.10565448, 0.03704842, 0.42454066, 0.40457098,
              0.78847816, 0.52003477, 0.8434773 , 0.85047536, 0.02605993,
              0.16592541, 0.84352875, 0.86416382, 0.07745285, 0.39209168,
              0.70283632, 0.19723115, 0.05343455, 0.81412113, 0.73976267,
              0.25237586, 0.29107482, 0.16724184, 0.53967833, 0.08435408,
              0.95708958, 0.71859434, 0.34036304, 0.23620172, 0.54374802,
              0.5427357 , 0.41260969, 0.64381286, 0.60777711, 0.72254608,
              0.72288603, 0.88367477, 0.93885093, 0.85947054, 0.69044555])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.11308305, 0.91133395, 0.2230251 , 0.55392585, 0.41196396,
              0.01467436, 0.30151987, 0.84433944, 0.63167331, 0.52043926,
              0.39572836, 0.99059809, 0.4670451 , 0.89745936, 0.8145481 ,
              0.69775663, 0.8676864 , 0.53515885, 0.01315091, 0.09116845,
              0.47405858, 0.25487949, 0.65127302, 0.74338905, 0.6471144 ,
              0.39461828, 0.97072527, 0.33185154, 0.783969  , 0.26227631,
              0.66145094, 0.42211239, 0.66210954, 0.81321609, 0.55556372,
              0.83862164, 0.84173035, 0.90560575, 0.81584673, 0.92580926,
              0.33336193, 0.74713901, 0.35641375, 0.29952186, 0.82982769,
              0.04405754, 0.28683545, 0.23904655, 0.13972674, 0.65650097,
              0.95554728, 0.70218024, 0.5628207 , 0.20215138, 0.83428075,
              0.81454552, 0.54939671, 0.17559803, 0.62441968, 0.93561828,
              0.37475387, 0.28869812, 0.77724177, 0.48763098, 0.7461099 ,
              0.05026789, 0.72494878, 0.12560034, 0.75869909, 0.60877669,
              0.81537562, 0.56809838, 0.80744364, 0.70157211, 0.24744153,
              0.57717589, 0.75548964, 0.29063752, 0.07518112, 0.35701143,
              0.33022348, 0.90529562, 0.28535406, 0.42315599, 0.49934199,
              0.90063287, 0.32004094, 0.85249637, 0.5149015 , 0.62180467,
              0.37506133, 0.07159416, 0.78625155, 0.38640356, 0.69446154,
              0.4692806 , 0.05504796, 0.83711277, 0.45679239, 0.51558649])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([8.96703218e-01, 4.39968014e-02, 6.82636529e-01, 3.36997335e-01,
              1.79830117e-01, 2.31485086e-01, 2.55158856e-01, 3.44930488e-02,
              3.34693028e-01, 7.05296136e-01, 4.85404352e-01, 7.68505437e-01,
              6.57290807e-01, 9.18650078e-01, 4.63783900e-01, 8.02591257e-01,
              5.05535159e-01, 8.05478762e-01, 6.62941746e-01, 1.23972845e-02,
              8.77432241e-01, 3.05408311e-01, 9.25025292e-04, 4.85938362e-01,
              3.09919609e-01, 5.72645814e-02, 3.61757847e-01, 7.02736941e-01,
              2.85170018e-01, 1.31040107e-01, 5.69644709e-01, 8.45158991e-01,
              6.35448718e-01, 6.56454650e-01, 9.31425783e-03, 4.32636936e-01,
              5.19139818e-01, 6.37320113e-01, 5.33475730e-01, 4.08071351e-01,
              7.01627233e-01, 9.42214451e-02, 4.30990617e-01, 8.56792749e-01,
              3.94998831e-01, 2.55610577e-01, 6.34946454e-01, 7.72115638e-01,
              1.69755058e-02, 7.23485252e-01, 7.02185224e-01, 4.79455468e-01,
              7.73311654e-02, 1.85704813e-01, 5.80182704e-01, 7.84816504e-01,
              5.70211163e-01, 4.18256132e-01, 8.08746794e-01, 3.01227539e-01,
              2.59786253e-01, 1.63591360e-01, 8.53283265e-01, 7.08253916e-01,
              8.34127943e-01, 5.47373859e-01, 6.41594265e-01, 1.97013130e-01,
              4.49462013e-01, 4.63565639e-01, 6.44224324e-01, 7.65538036e-01,
              4.28253372e-01, 3.59802518e-01, 9.33431104e-01, 8.93160507e-01,
              6.99400338e-01, 3.51633572e-01, 9.14711533e-01, 6.11816746e-01,
              1.37292027e-02, 5.99331984e-01, 8.45760304e-02, 4.30456775e-01,
              1.41340704e-01, 6.48143513e-01, 7.38315272e-01, 2.37868320e-01,
              7.14521978e-02, 6.72243794e-02, 6.46113058e-01, 6.68807255e-01,
              9.35195625e-01, 6.25062832e-01, 6.80919668e-01, 5.08157481e-01,
              3.78467288e-01, 3.28021441e-01, 8.52603138e-01, 7.65435381e-01])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.05872029, 0.23183298, 0.55762448, 0.08862243, 0.34379587,
              0.40592866, 0.70964995, 0.67079068, 0.12345878, 0.722233  ,
              0.08838432, 0.39654739, 0.55397273, 0.51848068, 0.2310084 ,
              0.27982161, 0.08253293, 0.96972691, 0.79718052, 0.01162315,
              0.63451552, 0.38517656, 0.5668597 , 0.21786018, 0.70110009,
              0.14835324, 0.94729745, 0.18530892, 0.00500491, 0.9648817 ,
              0.2254136 , 0.38213172, 0.78623466, 0.87816522, 0.43307611,
              0.19537059, 0.34632318, 0.13240286, 0.22465055, 0.28388738,
              0.95801996, 0.20862656, 0.77425639, 0.97863949, 0.41549184,
              0.33273215, 0.36983455, 0.90977832, 0.77435094, 0.49785056,
              0.95525158, 0.93740481, 0.62142508, 0.00766402, 0.17750292,
              0.15000452, 0.78360367, 0.03200497, 0.88207103, 0.76007508,
              0.61084271, 0.8446585 , 0.65204832, 0.25502926, 0.40931409,
              0.51541574, 0.5444935 , 0.86220061, 0.89351097, 0.02345014,
              0.21232171, 0.84416519, 0.84370016, 0.58011413, 0.49819825,
              0.87721435, 0.39574479, 0.81690115, 0.18136517, 0.45685998,
              0.77298982, 0.12836638, 0.32699199, 0.24954008, 0.96521789,
              0.51139915, 0.97801526, 0.53626935, 0.02865218, 0.03900511,
              0.33369328, 0.6624218 , 0.49752439, 0.90108095, 0.89575318,
              0.6571633 , 0.59036773, 0.04048461, 0.38815202, 0.1299234 ])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.13452007, 0.82905583, 0.47589351, 0.87797744, 0.11574337,
              0.52229722, 0.89089494, 0.97354991, 0.41824389, 0.53551161,
              0.05794748, 0.40689683, 0.24791044, 0.93576748, 0.68750053,
              0.69091692, 0.48899882, 0.96206106, 0.05669893, 0.78319766,
              0.88759303, 0.44762258, 0.00844226, 0.57508468, 0.57198832,
              0.85745309, 0.33623786, 0.83786767, 0.3528894 , 0.31320106,
              0.57868685, 0.68597499, 0.5144071 , 0.2699626 , 0.27435293,
              0.23847701, 0.14244636, 0.26673575, 0.814325  , 0.37410574,
              0.86736008, 0.37180391, 0.96458619, 0.09718214, 0.12672809,
              0.39005449, 0.95740953, 0.66191614, 0.24346533, 0.42515479,
              0.07460359, 0.85240588, 0.59786009, 0.12366835, 0.35999327,
              0.62002514, 0.54767321, 0.48894543, 0.75525548, 0.40924632,
              0.55754464, 0.27796278, 0.60340045, 0.3037071 , 0.16258094,
              0.19970089, 0.77776048, 0.74848183, 0.69092758, 0.35542173,
              0.44685732, 0.0302379 , 0.59352963, 0.18363513, 0.32321128,
              0.13890068, 0.63718541, 0.21639498, 0.8452008 , 0.85031526,
              0.18199884, 0.14211444, 0.89637374, 0.02547304, 0.13269545,
              0.97555547, 0.55373665, 0.37273372, 0.56341405, 0.78304028,
              0.04034274, 0.82779367, 0.56533673, 0.59239919, 0.17660491,
              0.16590984, 0.47988021, 0.00148642, 0.46874263, 0.20120791])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.79928612, 0.76382961, 0.96845602, 0.34970433, 0.23764816,
              0.49419686, 0.7594255 , 0.22773645, 0.18513067, 0.57099122,
              0.03504355, 0.65151777, 0.61527418, 0.21217621, 0.70918444,
              0.89427725, 0.7441788 , 0.53724151, 0.44715409, 0.96906948,
              0.90271568, 0.37140802, 0.65665477, 0.50865001, 0.36800362,
              0.70635218, 0.16980079, 0.10255995, 0.86531702, 0.08053513,
              0.88548515, 0.09807696, 0.15787391, 0.79524942, 0.36102082,
              0.41205427, 0.72570102, 0.67048552, 0.90461749, 0.44258452,
              0.39971937, 0.31361048, 0.9142486 , 0.03183798, 0.8973251 ,
              0.04723054, 0.7078405 , 0.70963546, 0.41476157, 0.60725116,
              0.96614948, 0.62690963, 0.50251018, 0.3778861 , 0.03631284,
              0.5395456 , 0.10664103, 0.72928151, 0.27900731, 0.25039089,
              0.1852825 , 0.99892453, 0.36057192, 0.29032568, 0.88486744,
              0.10394887, 0.27102754, 0.42359727, 0.43186826, 0.64930669,
              0.82889349, 0.11192153, 0.94021695, 0.26493096, 0.44202051,
              0.97556719, 0.06721465, 0.50344705, 0.22590435, 0.12829355,
              0.8769239 , 0.14246535, 0.19899401, 0.73163999, 0.75864359,
              0.07182391, 0.08143514, 0.21209574, 0.10270217, 0.35146006,
              0.24633951, 0.64377688, 0.30012528, 0.21936841, 0.71503348,
              0.47321344, 0.79153229, 0.00608706, 0.77327269, 0.58755988])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.05424968, 0.0318285 , 0.4261555 , 0.66706065, 0.19363443,
              0.54128813, 0.8548439 , 0.72801106, 0.63618031, 0.50881818,
              0.65277077, 0.10918186, 0.97746348, 0.33465527, 0.3612415 ,
              0.17957151, 0.58455249, 0.91856045, 0.97144847, 0.56064182,
              0.70450941, 0.46076117, 0.94389494, 0.36282223, 0.28564747,
              0.05576657, 0.12244679, 0.67617296, 0.19236161, 0.25366436,
              0.33281101, 0.0801294 , 0.42341607, 0.58804968, 0.0377832 ,
              0.58505861, 0.89217737, 0.57154337, 0.7760585 , 0.11537484,
              0.64985042, 0.44090701, 0.89664542, 0.50757604, 0.2846612 ,
              0.52910892, 0.36074889, 0.32387721, 0.7871248 , 0.06264201,
              0.78028982, 0.09808009, 0.00961886, 0.02508978, 0.39530764,
              0.31296258, 0.68450602, 0.48761956, 0.55406891, 0.13905166,
              0.82591726, 0.5942629 , 0.32691216, 0.44830606, 0.1126583 ,
              0.16839025, 0.60287691, 0.29292912, 0.55854792, 0.39674125,
              0.26994873, 0.32415601, 0.24508715, 0.20087197, 0.11692701,
              0.03632246, 0.70541731, 0.8866322 , 0.80051999, 0.93685358,
              0.68801647, 0.26898724, 0.26822402, 0.04090384, 0.6982315 ,
              0.61727269, 0.63159313, 0.63212185, 0.88813246, 0.7445156 ,
              0.72910303, 0.55340446, 0.38037685, 0.9259809 , 0.13201231,
              0.91398164, 0.09136892, 0.61303601, 0.13031994, 0.77652768])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([6.67546639e-01, 4.35414889e-01, 8.16232448e-01, 9.01900884e-01,
              2.98352141e-01, 2.11169432e-01, 8.58358959e-01, 7.03909777e-01,
              3.29722569e-01, 2.69067700e-01, 2.24544100e-01, 9.03851879e-01,
              6.20883090e-01, 1.13460634e-01, 8.97871539e-01, 1.38276384e-01,
              6.83344773e-01, 4.20171599e-01, 3.42638283e-01, 4.23655701e-01,
              2.92111333e-01, 1.31121562e-01, 7.30946150e-01, 8.72116158e-02,
              4.74034846e-01, 7.26955113e-01, 2.10398435e-01, 7.78789177e-01,
              1.20539539e-01, 7.10226022e-01, 4.41456750e-01, 4.32895809e-01,
              2.35060617e-01, 7.72779556e-01, 2.95819088e-01, 3.63064879e-01,
              9.29967507e-01, 8.22133554e-02, 2.95601493e-01, 4.18760459e-01,
              9.05962981e-01, 6.38156460e-01, 6.92117793e-01, 3.09065882e-01,
              4.05946108e-01, 9.93894931e-01, 2.55420754e-01, 4.90942808e-01,
              1.94678191e-01, 2.81470130e-01, 9.55158802e-01, 1.87038365e-01,
              8.91020840e-01, 1.43364833e-01, 1.20399034e-01, 4.50505234e-02,
              8.07845534e-01, 4.44430102e-02, 2.22078490e-01, 5.84739894e-01,
              9.97200287e-01, 3.37959339e-01, 9.84199062e-03, 9.69948192e-01,
              6.36030199e-01, 5.03102061e-02, 6.84418478e-01, 5.81734506e-01,
              5.82117662e-01, 2.40460171e-01, 1.14191701e-01, 7.72776583e-01,
              5.24196156e-01, 7.21453783e-02, 1.20717220e-01, 1.52304533e-01,
              9.60250884e-01, 8.88696597e-01, 4.05050056e-01, 6.44486903e-01,
              9.37430033e-01, 4.39513690e-01, 9.92694100e-01, 3.59147783e-01,
              2.39569393e-04, 4.35450871e-02, 5.34949391e-01, 9.81724284e-01,
              4.70069415e-01, 7.34907877e-01, 8.04963856e-01, 5.75982255e-01,
              1.75638870e-01, 3.89018776e-01, 5.18032116e-01, 1.83164465e-01,
              6.25325928e-01, 9.05190757e-02, 8.22412464e-01, 3.84442695e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.13452007, 0.82905583, 0.47589351, 0.87797744, 0.11574337,
              0.52229722, 0.89089494, 0.97354991, 0.41824389, 0.53551161,
              0.05794748, 0.40689683, 0.24791044, 0.93576748, 0.68750053,
              0.69091692, 0.48899882, 0.96206106, 0.05669893, 0.78319766,
              0.88759303, 0.44762258, 0.00844226, 0.57508468, 0.57198832,
              0.85745309, 0.33623786, 0.83786767, 0.3528894 , 0.31320106,
              0.57868685, 0.68597499, 0.5144071 , 0.2699626 , 0.27435293,
              0.23847701, 0.14244636, 0.26673575, 0.814325  , 0.37410574,
              0.86736008, 0.37180391, 0.96458619, 0.09718214, 0.12672809,
              0.39005449, 0.95740953, 0.66191614, 0.24346533, 0.42515479,
              0.07460359, 0.85240588, 0.59786009, 0.12366835, 0.35999327,
              0.62002514, 0.54767321, 0.48894543, 0.75525548, 0.40924632,
              0.55754464, 0.27796278, 0.60340045, 0.3037071 , 0.16258094,
              0.19970089, 0.77776048, 0.74848183, 0.69092758, 0.35542173,
              0.44685732, 0.0302379 , 0.59352963, 0.18363513, 0.32321128,
              0.13890068, 0.63718541, 0.21639498, 0.8452008 , 0.85031526,
              0.18199884, 0.14211444, 0.89637374, 0.02547304, 0.13269545,
              0.97555547, 0.55373665, 0.37273372, 0.56341405, 0.78304028,
              0.04034274, 0.82779367, 0.56533673, 0.59239919, 0.17660491,
              0.16590984, 0.47988021, 0.00148642, 0.46874263, 0.20120791])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.79928612, 0.76382961, 0.96845602, 0.34970433, 0.23764816,
              0.49419686, 0.7594255 , 0.22773645, 0.18513067, 0.57099122,
              0.03504355, 0.65151777, 0.61527418, 0.21217621, 0.70918444,
              0.89427725, 0.7441788 , 0.53724151, 0.44715409, 0.96906948,
              0.90271568, 0.37140802, 0.65665477, 0.50865001, 0.36800362,
              0.70635218, 0.16980079, 0.10255995, 0.86531702, 0.08053513,
              0.88548515, 0.09807696, 0.15787391, 0.79524942, 0.36102082,
              0.41205427, 0.72570102, 0.67048552, 0.90461749, 0.44258452,
              0.39971937, 0.31361048, 0.9142486 , 0.03183798, 0.8973251 ,
              0.04723054, 0.7078405 , 0.70963546, 0.41476157, 0.60725116,
              0.96614948, 0.62690963, 0.50251018, 0.3778861 , 0.03631284,
              0.5395456 , 0.10664103, 0.72928151, 0.27900731, 0.25039089,
              0.1852825 , 0.99892453, 0.36057192, 0.29032568, 0.88486744,
              0.10394887, 0.27102754, 0.42359727, 0.43186826, 0.64930669,
              0.82889349, 0.11192153, 0.94021695, 0.26493096, 0.44202051,
              0.97556719, 0.06721465, 0.50344705, 0.22590435, 0.12829355,
              0.8769239 , 0.14246535, 0.19899401, 0.73163999, 0.75864359,
              0.07182391, 0.08143514, 0.21209574, 0.10270217, 0.35146006,
              0.24633951, 0.64377688, 0.30012528, 0.21936841, 0.71503348,
              0.47321344, 0.79153229, 0.00608706, 0.77327269, 0.58755988])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.05424968, 0.0318285 , 0.4261555 , 0.66706065, 0.19363443,
              0.54128813, 0.8548439 , 0.72801106, 0.63618031, 0.50881818,
              0.65277077, 0.10918186, 0.97746348, 0.33465527, 0.3612415 ,
              0.17957151, 0.58455249, 0.91856045, 0.97144847, 0.56064182,
              0.70450941, 0.46076117, 0.94389494, 0.36282223, 0.28564747,
              0.05576657, 0.12244679, 0.67617296, 0.19236161, 0.25366436,
              0.33281101, 0.0801294 , 0.42341607, 0.58804968, 0.0377832 ,
              0.58505861, 0.89217737, 0.57154337, 0.7760585 , 0.11537484,
              0.64985042, 0.44090701, 0.89664542, 0.50757604, 0.2846612 ,
              0.52910892, 0.36074889, 0.32387721, 0.7871248 , 0.06264201,
              0.78028982, 0.09808009, 0.00961886, 0.02508978, 0.39530764,
              0.31296258, 0.68450602, 0.48761956, 0.55406891, 0.13905166,
              0.82591726, 0.5942629 , 0.32691216, 0.44830606, 0.1126583 ,
              0.16839025, 0.60287691, 0.29292912, 0.55854792, 0.39674125,
              0.26994873, 0.32415601, 0.24508715, 0.20087197, 0.11692701,
              0.03632246, 0.70541731, 0.8866322 , 0.80051999, 0.93685358,
              0.68801647, 0.26898724, 0.26822402, 0.04090384, 0.6982315 ,
              0.61727269, 0.63159313, 0.63212185, 0.88813246, 0.7445156 ,
              0.72910303, 0.55340446, 0.38037685, 0.9259809 , 0.13201231,
              0.91398164, 0.09136892, 0.61303601, 0.13031994, 0.77652768])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.29584439, 0.84371768, 0.1008974 , 0.07978519, 0.29895603,
              0.24823368, 0.89171702, 0.03330609, 0.07513162, 0.80474103,
              0.63700273, 0.38252415, 0.47372073, 0.98034389, 0.09917969,
              0.52559201, 0.80878429, 0.13555671, 0.32461211, 0.59566479,
              0.76117348, 0.68644019, 0.84635014, 0.2908633 , 0.0267365 ,
              0.13813783, 0.1644169 , 0.1505589 , 0.35710894, 0.66010904,
              0.4764149 , 0.0671673 , 0.26634964, 0.17416081, 0.18544428,
              0.17436091, 0.68079236, 0.4320584 , 0.33304799, 0.47120239,
              0.13418365, 0.85628207, 0.72230491, 0.79394619, 0.32624538,
              0.56433209, 0.13196617, 0.32947733, 0.26367234, 0.0506322 ,
              0.01493677, 0.32575473, 0.46000735, 0.56342041, 0.90411853,
              0.95619276, 0.95151829, 0.40045712, 0.17946203, 0.70430546,
              0.34764591, 0.70784156, 0.92346363, 0.14151923, 0.94084876,
              0.71548179, 0.53053512, 0.81955518, 0.77293382, 0.65428567,
              0.08443771, 0.38165993, 0.21377285, 0.19355503, 0.9998085 ,
              0.31907018, 0.07386528, 0.64554364, 0.89554204, 0.7863135 ,
              0.14036995, 0.43383357, 0.89838498, 0.76703997, 0.08878738,
              0.52180158, 0.92696972, 0.82906913, 0.62567262, 0.55612798,
              0.12489822, 0.93665674, 0.34149554, 0.19765148, 0.77312447,
              0.93681248, 0.70672706, 0.97113577, 0.40514039, 0.46277285])}]]


