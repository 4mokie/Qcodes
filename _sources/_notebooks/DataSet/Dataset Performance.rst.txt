
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='ac1ca70e-0bba-4eb8-8862-83b806f86b10'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='dc7d40d9-2713-43fc-8fea-73c41eb6392d'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.952498119598323],
     [0.998354001189728],
     [0.170309280711559],
     [0.170511754941861],
     [0.347025944408353],
     [0.0997614141325329],
     [0.272322954158717],
     [0.93916033816279],
     [0.404898694542125],
     [0.0284343960929524],
     [0.41061959148532],
     [0.0753608820073669],
     [0.487267119762895],
     [0.405577317549094],
     [0.0414197089112481],
     [0.94316140545843],
     [0.0071209460489895],
     [0.082671188619618],
     [0.833381402038857],
     [0.927837916497087],
     [0.240133662834929],
     [0.898875635550935],
     [0.849689323715762],
     [0.789499221771198],
     [0.925052817815673],
     [0.700811224714255],
     [0.892736448850448],
     [0.486349997672604],
     [0.881756730620218],
     [0.0975737561433899],
     [0.00384814083958473],
     [0.511193616458087],
     [0.184440845861535],
     [0.738696741599702],
     [0.879460946345278],
     [0.0582024478954736],
     [0.945417315156203],
     [0.816888183214071],
     [0.243078340089153],
     [0.565834962032737],
     [0.597016652997303],
     [0.857138022976937],
     [0.377203325289129],
     [0.344788801407886],
     [0.3728394949154],
     [0.539399598054339],
     [0.0583110613809136],
     [0.0746732608292006],
     [0.799848699083338],
     [0.0826062732526441],
     [0.760586780878526],
     [0.131380293284266],
     [0.48610193369855],
     [0.856791902663593],
     [0.869338643533051],
     [0.0419766920942861],
     [0.421863708259807],
     [0.607200899860087],
     [0.405337077485032],
     [0.732851159730874],
     [0.871142604441759],
     [0.277036317329254],
     [0.1292566879567],
     [0.668835730545718],
     [0.538369094474212],
     [0.901636646570956],
     [0.90541815518469],
     [0.291252181948314],
     [0.255486475091347],
     [0.123344909759542],
     [0.405478718472962],
     [0.78032415447526],
     [0.277627666046395],
     [0.354734524550323],
     [0.636892098700621],
     [0.740501390498362],
     [0.525415639219474],
     [0.0102512894339902],
     [0.41155822792464],
     [0.373557295551387],
     [0.548104883861052],
     [0.384309968062486],
     [0.627956897597162],
     [0.539512461338314],
     [0.386379704645852],
     [0.559837141027333],
     [0.759596685469295],
     [0.976110587401383],
     [0.381120805735686],
     [0.693528657291463],
     [0.851626283875894],
     [0.170314517991984],
     [0.963690847585001],
     [0.105916391808396],
     [0.354450603097579],
     [0.056967293497986],
     [0.653015019647852],
     [0.261726883235879],
     [0.841756633124773],
     [0.888675162574733]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.80077187])],
     [array([ 0.02587271])],
     [array([ 0.85971987])],
     [array([ 0.81462568])],
     [array([ 0.99414824])],
     [array([ 0.71337447])],
     [array([ 0.65047458])],
     [array([ 0.85609145])],
     [array([ 0.46000674])],
     [array([ 0.78880073])],
     [array([ 0.5179273])],
     [array([ 0.25964154])],
     [array([ 0.01932211])],
     [array([ 0.69799945])],
     [array([ 0.24362898])],
     [array([ 0.64105827])],
     [array([ 0.52751932])],
     [array([ 0.39058908])],
     [array([ 0.83615257])],
     [array([ 0.43150314])],
     [array([ 0.86120923])],
     [array([ 0.67427245])],
     [array([ 0.58777035])],
     [array([ 0.7363629])],
     [array([ 0.76970177])],
     [array([ 0.60007958])],
     [array([ 0.9565526])],
     [array([ 0.56481455])],
     [array([ 0.97830679])],
     [array([ 0.72104925])],
     [array([ 0.10226448])],
     [array([ 0.71836556])],
     [array([ 0.86590158])],
     [array([ 0.85973857])],
     [array([ 0.80353501])],
     [array([ 0.31294221])],
     [array([ 0.48608527])],
     [array([ 0.0346819])],
     [array([ 0.74381894])],
     [array([ 0.87385764])],
     [array([ 0.04792205])],
     [array([ 0.65358184])],
     [array([ 0.34035012])],
     [array([ 0.79934114])],
     [array([ 0.3746184])],
     [array([ 0.1822405])],
     [array([ 0.54101041])],
     [array([ 0.05207661])],
     [array([ 0.22162542])],
     [array([ 0.73582777])],
     [array([ 0.37456138])],
     [array([ 0.27373424])],
     [array([ 0.56446193])],
     [array([ 0.81348684])],
     [array([ 0.41313761])],
     [array([ 0.98042709])],
     [array([ 0.5352386])],
     [array([ 0.06953221])],
     [array([ 0.1768509])],
     [array([ 0.25012439])],
     [array([ 0.6648251])],
     [array([ 0.22669329])],
     [array([ 0.49454409])],
     [array([ 0.49772664])],
     [array([ 0.20790403])],
     [array([ 0.36655534])],
     [array([ 0.74247229])],
     [array([ 0.62402404])],
     [array([ 0.03080423])],
     [array([ 0.87981381])],
     [array([ 0.4768904])],
     [array([ 0.09390092])],
     [array([ 0.85233456])],
     [array([ 0.38097909])],
     [array([ 0.79878245])],
     [array([ 0.17828121])],
     [array([ 0.83389239])],
     [array([ 0.62666264])],
     [array([ 0.74178833])],
     [array([ 0.45991546])],
     [array([ 0.46032575])],
     [array([ 0.23843633])],
     [array([ 0.68451314])],
     [array([ 0.51178367])],
     [array([ 0.84622518])],
     [array([ 0.04899686])],
     [array([ 0.55980994])],
     [array([ 0.41146117])],
     [array([ 0.04849886])],
     [array([ 0.48747522])],
     [array([ 0.2785439])],
     [array([ 0.49872638])],
     [array([ 0.60863669])],
     [array([ 0.00076574])],
     [array([ 0.58983802])],
     [array([ 0.18053396])],
     [array([ 0.74593339])],
     [array([ 0.128734])],
     [array([ 0.81501587])],
     [array([ 0.28727799])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([  8.00771874e-01,   2.58727128e-02,   8.59719873e-01,
             8.14625680e-01,   9.94148240e-01,   7.13374469e-01,
             6.50474578e-01,   8.56091452e-01,   4.60006737e-01,
             7.88800728e-01,   5.17927297e-01,   2.59641535e-01,
             1.93221111e-02,   6.97999445e-01,   2.43628978e-01,
             6.41058270e-01,   5.27519318e-01,   3.90589080e-01,
             8.36152566e-01,   4.31503136e-01,   8.61209233e-01,
             6.74272454e-01,   5.87770352e-01,   7.36362900e-01,
             7.69701773e-01,   6.00079580e-01,   9.56552601e-01,
             5.64814552e-01,   9.78306793e-01,   7.21049251e-01,
             1.02264480e-01,   7.18365558e-01,   8.65901580e-01,
             8.59738575e-01,   8.03535014e-01,   3.12942210e-01,
             4.86085266e-01,   3.46819010e-02,   7.43818941e-01,
             8.73857635e-01,   4.79220549e-02,   6.53581844e-01,
             3.40350121e-01,   7.99341137e-01,   3.74618396e-01,
             1.82240500e-01,   5.41010413e-01,   5.20766126e-02,
             2.21625418e-01,   7.35827766e-01,   3.74561380e-01,
             2.73734236e-01,   5.64461928e-01,   8.13486839e-01,
             4.13137613e-01,   9.80427092e-01,   5.35238603e-01,
             6.95322105e-02,   1.76850905e-01,   2.50124395e-01,
             6.64825103e-01,   2.26693287e-01,   4.94544090e-01,
             4.97726639e-01,   2.07904027e-01,   3.66555344e-01,
             7.42472286e-01,   6.24024036e-01,   3.08042334e-02,
             8.79813808e-01,   4.76890397e-01,   9.39009228e-02,
             8.52334564e-01,   3.80979086e-01,   7.98782454e-01,
             1.78281211e-01,   8.33892389e-01,   6.26662641e-01,
             7.41788334e-01,   4.59915460e-01,   4.60325749e-01,
             2.38436335e-01,   6.84513137e-01,   5.11783674e-01,
             8.46225180e-01,   4.89968572e-02,   5.59809938e-01,
             4.11461166e-01,   4.84988550e-02,   4.87475220e-01,
             2.78543898e-01,   4.98726378e-01,   6.08636692e-01,
             7.65742960e-04,   5.89838019e-01,   1.80533964e-01,
             7.45933394e-01,   1.28734005e-01,   8.15015866e-01,
             2.87277990e-01])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.95249812,  0.998354  ,  0.17030928,  0.17051175,  0.34702594,
               0.09976141,  0.27232295,  0.93916034,  0.40489869,  0.0284344 ,
               0.41061959,  0.07536088,  0.48726712,  0.40557732,  0.04141971,
               0.94316141,  0.00712095,  0.08267119,  0.8333814 ,  0.92783792,
               0.24013366,  0.89887564,  0.84968932,  0.78949922,  0.92505282,
               0.70081122,  0.89273645,  0.48635   ,  0.88175673,  0.09757376,
               0.00384814,  0.51119362,  0.18444085,  0.73869674,  0.87946095,
               0.05820245,  0.94541732,  0.81688818,  0.24307834,  0.56583496,
               0.59701665,  0.85713802,  0.37720333,  0.3447888 ,  0.37283949,
               0.5393996 ,  0.05831106,  0.07467326,  0.7998487 ,  0.08260627,
               0.76058678,  0.13138029,  0.48610193,  0.8567919 ,  0.86933864,
               0.04197669,  0.42186371,  0.6072009 ,  0.40533708,  0.73285116,
               0.8711426 ,  0.27703632,  0.12925669,  0.66883573,  0.53836909,
               0.90163665,  0.90541816,  0.29125218,  0.25548648,  0.12334491,
               0.40547872,  0.78032415,  0.27762767,  0.35473452,  0.6368921 ,
               0.74050139,  0.52541564,  0.01025129,  0.41155823,  0.3735573 ,
               0.54810488,  0.38430997,  0.6279569 ,  0.53951246,  0.3863797 ,
               0.55983714,  0.75959669,  0.97611059,  0.38112081,  0.69352866,
               0.85162628,  0.17031452,  0.96369085,  0.10591639,  0.3544506 ,
               0.05696729,  0.65301502,  0.26172688,  0.84175663,  0.88867516])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.85992169,  0.08749961,  0.95356465,  0.73809161,  0.99390502,
               0.13322832,  0.96259713,  0.0374173 ,  0.56470659,  0.57677781,
               0.50849754,  0.56285263,  0.49288301,  0.1135768 ,  0.31176395,
               0.44340104,  0.64008876,  0.39963142,  0.42685651,  0.88423709,
               0.76235944,  0.87307107,  0.47570446,  0.10659811,  0.24437637,
               0.37775033,  0.1939577 ,  0.38043913,  0.12216659,  0.75459523,
               0.42283491,  0.69628459,  0.19337622,  0.64111297,  0.50149387,
               0.25456114,  0.7797192 ,  0.57129846,  0.36011096,  0.67200815,
               0.6074521 ,  0.30754081,  0.42717861,  0.453017  ,  0.14097176,
               0.26001562,  0.12231223,  0.85056404,  0.37371138,  0.8858087 ,
               0.21638748,  0.08614186,  0.80395091,  0.4900521 ,  0.38966802,
               0.55381898,  0.32995379,  0.21156948,  0.94078329,  0.23157679,
               0.44696879,  0.0303279 ,  0.98751904,  0.08464461,  0.10261726,
               0.89752995,  0.70371213,  0.61312321,  0.6743677 ,  0.77168541,
               0.88085003,  0.78272605,  0.04278792,  0.0474243 ,  0.57908833,
               0.65169724,  0.32778343,  0.57568724,  0.92975063,  0.42282192,
               0.19499565,  0.96583977,  0.47064351,  0.04717799,  0.4234805 ,
               0.08137737,  0.04596419,  0.87431231,  0.61780087,  0.72864383,
               0.51581769,  0.07780926,  0.37312548,  0.23926502,  0.04062442,
               0.60434948,  0.83809081,  0.71235387,  0.07192332,  0.822625  ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.87934658,  0.12984332,  0.83432997,  0.17800188,  0.02820781,
               0.00870862,  0.99955515,  0.70785245,  0.44970168,  0.70479863,
               0.78504888,  0.16023011,  0.47042921,  0.98309401,  0.29938032,
               0.91759495,  0.13443558,  0.42094109,  0.91417818,  0.28167103,
               0.56405133,  0.52450359,  0.00816788,  0.78874707,  0.73294755,
               0.62914883,  0.20333323,  0.76370341,  0.40339596,  0.26007073,
               0.99914404,  0.19620139,  0.640781  ,  0.89944163,  0.91955466,
               0.41131686,  0.50728087,  0.24744478,  0.69065829,  0.45559644,
               0.99350267,  0.61439372,  0.34743347,  0.32534473,  0.71265577,
               0.49781029,  0.02216143,  0.38722475,  0.19335785,  0.30651968,
               0.09265436,  0.2705858 ,  0.51728333,  0.10285696,  0.77033183,
               0.14542725,  0.17554184,  0.72536226,  0.85448999,  0.34034462,
               0.44548122,  0.96191043,  0.06932263,  0.77325574,  0.29402398,
               0.62314302,  0.17044934,  0.11997303,  0.54987384,  0.35031937,
               0.00152031,  0.50058724,  0.08189242,  0.87817512,  0.96287909,
               0.46607678,  0.25756323,  0.84098415,  0.28764045,  0.72236772,
               0.27473233,  0.1479888 ,  0.61590534,  0.15618569,  0.62774622,
               0.08522652,  0.54162643,  0.5500451 ,  0.91408242,  0.71840068,
               0.8025712 ,  0.11677683,  0.84677789,  0.94598275,  0.24699484,
               0.37280779,  0.29473469,  0.17456583,  0.9746251 ,  0.21064214])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.64764359,  0.15121284,  0.76251353,  0.92810471,  0.61337626,
               0.72218693,  0.25266509,  0.29783244,  0.52612329,  0.99261531,
               0.66268544,  0.18830157,  0.58206026,  0.70648108,  0.53651948,
               0.6304116 ,  0.10479248,  0.86868068,  0.8149592 ,  0.11080307,
               0.05744534,  0.7470106 ,  0.10268028,  0.19895939,  0.52329009,
               0.35970231,  0.46298282,  0.22051283,  0.47542188,  0.8487626 ,
               0.67401331,  0.54077992,  0.40406938,  0.48331392,  0.66581093,
               0.14033911,  0.94194418,  0.89544947,  0.17895211,  0.34425906,
               0.31683785,  0.68292951,  0.59936342,  0.93085848,  0.80873652,
               0.01209574,  0.31845709,  0.91395412,  0.14624972,  0.35008997,
               0.96204605,  0.62545431,  0.41151027,  0.64630823,  0.86505733,
               0.71967504,  0.01807493,  0.86970015,  0.22414922,  0.02968052,
               0.35041061,  0.33075313,  0.99187005,  0.33526299,  0.73144955,
               0.10666604,  0.1284053 ,  0.13248566,  0.75779658,  0.38220177,
               0.53215974,  0.98918072,  0.54992436,  0.86263903,  0.29216625,
               0.84589618,  0.96497677,  0.62355753,  0.3912439 ,  0.8068718 ,
               0.81154518,  0.05047821,  0.24233016,  0.23317567,  0.73154123,
               0.81475394,  0.52986596,  0.39206123,  0.89243435,  0.35220509,
               0.9116254 ,  0.39660226,  0.94353809,  0.28753786,  0.13039339,
               0.72114801,  0.93839561,  0.22451065,  0.48752378,  0.13321162])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.95249812,  0.998354  ,  0.17030928,  0.17051175,  0.34702594,
               0.09976141,  0.27232295,  0.93916034,  0.40489869,  0.0284344 ,
               0.41061959,  0.07536088,  0.48726712,  0.40557732,  0.04141971,
               0.94316141,  0.00712095,  0.08267119,  0.8333814 ,  0.92783792,
               0.24013366,  0.89887564,  0.84968932,  0.78949922,  0.92505282,
               0.70081122,  0.89273645,  0.48635   ,  0.88175673,  0.09757376,
               0.00384814,  0.51119362,  0.18444085,  0.73869674,  0.87946095,
               0.05820245,  0.94541732,  0.81688818,  0.24307834,  0.56583496,
               0.59701665,  0.85713802,  0.37720333,  0.3447888 ,  0.37283949,
               0.5393996 ,  0.05831106,  0.07467326,  0.7998487 ,  0.08260627,
               0.76058678,  0.13138029,  0.48610193,  0.8567919 ,  0.86933864,
               0.04197669,  0.42186371,  0.6072009 ,  0.40533708,  0.73285116,
               0.8711426 ,  0.27703632,  0.12925669,  0.66883573,  0.53836909,
               0.90163665,  0.90541816,  0.29125218,  0.25548648,  0.12334491,
               0.40547872,  0.78032415,  0.27762767,  0.35473452,  0.6368921 ,
               0.74050139,  0.52541564,  0.01025129,  0.41155823,  0.3735573 ,
               0.54810488,  0.38430997,  0.6279569 ,  0.53951246,  0.3863797 ,
               0.55983714,  0.75959669,  0.97611059,  0.38112081,  0.69352866,
               0.85162628,  0.17031452,  0.96369085,  0.10591639,  0.3544506 ,
               0.05696729,  0.65301502,  0.26172688,  0.84175663,  0.88867516])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.85992169,  0.08749961,  0.95356465,  0.73809161,  0.99390502,
               0.13322832,  0.96259713,  0.0374173 ,  0.56470659,  0.57677781,
               0.50849754,  0.56285263,  0.49288301,  0.1135768 ,  0.31176395,
               0.44340104,  0.64008876,  0.39963142,  0.42685651,  0.88423709,
               0.76235944,  0.87307107,  0.47570446,  0.10659811,  0.24437637,
               0.37775033,  0.1939577 ,  0.38043913,  0.12216659,  0.75459523,
               0.42283491,  0.69628459,  0.19337622,  0.64111297,  0.50149387,
               0.25456114,  0.7797192 ,  0.57129846,  0.36011096,  0.67200815,
               0.6074521 ,  0.30754081,  0.42717861,  0.453017  ,  0.14097176,
               0.26001562,  0.12231223,  0.85056404,  0.37371138,  0.8858087 ,
               0.21638748,  0.08614186,  0.80395091,  0.4900521 ,  0.38966802,
               0.55381898,  0.32995379,  0.21156948,  0.94078329,  0.23157679,
               0.44696879,  0.0303279 ,  0.98751904,  0.08464461,  0.10261726,
               0.89752995,  0.70371213,  0.61312321,  0.6743677 ,  0.77168541,
               0.88085003,  0.78272605,  0.04278792,  0.0474243 ,  0.57908833,
               0.65169724,  0.32778343,  0.57568724,  0.92975063,  0.42282192,
               0.19499565,  0.96583977,  0.47064351,  0.04717799,  0.4234805 ,
               0.08137737,  0.04596419,  0.87431231,  0.61780087,  0.72864383,
               0.51581769,  0.07780926,  0.37312548,  0.23926502,  0.04062442,
               0.60434948,  0.83809081,  0.71235387,  0.07192332,  0.822625  ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.87934658,  0.12984332,  0.83432997,  0.17800188,  0.02820781,
               0.00870862,  0.99955515,  0.70785245,  0.44970168,  0.70479863,
               0.78504888,  0.16023011,  0.47042921,  0.98309401,  0.29938032,
               0.91759495,  0.13443558,  0.42094109,  0.91417818,  0.28167103,
               0.56405133,  0.52450359,  0.00816788,  0.78874707,  0.73294755,
               0.62914883,  0.20333323,  0.76370341,  0.40339596,  0.26007073,
               0.99914404,  0.19620139,  0.640781  ,  0.89944163,  0.91955466,
               0.41131686,  0.50728087,  0.24744478,  0.69065829,  0.45559644,
               0.99350267,  0.61439372,  0.34743347,  0.32534473,  0.71265577,
               0.49781029,  0.02216143,  0.38722475,  0.19335785,  0.30651968,
               0.09265436,  0.2705858 ,  0.51728333,  0.10285696,  0.77033183,
               0.14542725,  0.17554184,  0.72536226,  0.85448999,  0.34034462,
               0.44548122,  0.96191043,  0.06932263,  0.77325574,  0.29402398,
               0.62314302,  0.17044934,  0.11997303,  0.54987384,  0.35031937,
               0.00152031,  0.50058724,  0.08189242,  0.87817512,  0.96287909,
               0.46607678,  0.25756323,  0.84098415,  0.28764045,  0.72236772,
               0.27473233,  0.1479888 ,  0.61590534,  0.15618569,  0.62774622,
               0.08522652,  0.54162643,  0.5500451 ,  0.91408242,  0.71840068,
               0.8025712 ,  0.11677683,  0.84677789,  0.94598275,  0.24699484,
               0.37280779,  0.29473469,  0.17456583,  0.9746251 ,  0.21064214])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.97979304,  0.926422  ,  0.35103493,  0.70022452,  0.68995626,
               0.38143046,  0.17103833,  0.52598643,  0.05877943,  0.52075805,
               0.88033542,  0.17352399,  0.19287491,  0.81757451,  0.41837777,
               0.25830697,  0.52974489,  0.6213595 ,  0.04680103,  0.52124735,
               0.50616184,  0.16743789,  0.06264767,  0.34325207,  0.34968189,
               0.28291359,  0.88891566,  0.58614421,  0.47026182,  0.97086612,
               0.565584  ,  0.58372683,  0.59214994,  0.60530189,  0.62697333,
               0.84072396,  0.9112369 ,  0.87718172,  0.49854435,  0.68289858,
               0.58670348,  0.05254748,  0.00330777,  0.03383001,  0.44797322,
               0.34268129,  0.82784015,  0.13987293,  0.97501403,  0.23420378,
               0.05533435,  0.79280109,  0.46472476,  0.31314894,  0.23484521,
               0.04350511,  0.22463389,  0.3881891 ,  0.92779719,  0.06529246,
               0.49705301,  0.17439657,  0.04725709,  0.01839757,  0.93327947,
               0.66445889,  0.82011248,  0.01573464,  0.60501143,  0.85366671,
               0.48546633,  0.07949199,  0.29596276,  0.37258306,  0.6787332 ,
               0.29868699,  0.86940432,  0.7614474 ,  0.03942901,  0.02817931,
               0.12753085,  0.54420388,  0.83227056,  0.84048577,  0.5857043 ,
               0.95000359,  0.7374884 ,  0.91284316,  0.53328992,  0.76317888,
               0.95010163,  0.77406067,  0.98675834,  0.69836467,  0.01089608,
               0.70053795,  0.4678707 ,  0.08993638,  0.12937385,  0.67564391])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  8.00771874e-01,   2.58727128e-02,   8.59719873e-01,
                8.14625680e-01,   9.94148240e-01,   7.13374469e-01,
                6.50474578e-01,   8.56091452e-01,   4.60006737e-01,
                7.88800728e-01,   5.17927297e-01,   2.59641535e-01,
                1.93221111e-02,   6.97999445e-01,   2.43628978e-01,
                6.41058270e-01,   5.27519318e-01,   3.90589080e-01,
                8.36152566e-01,   4.31503136e-01,   8.61209233e-01,
                6.74272454e-01,   5.87770352e-01,   7.36362900e-01,
                7.69701773e-01,   6.00079580e-01,   9.56552601e-01,
                5.64814552e-01,   9.78306793e-01,   7.21049251e-01,
                1.02264480e-01,   7.18365558e-01,   8.65901580e-01,
                8.59738575e-01,   8.03535014e-01,   3.12942210e-01,
                4.86085266e-01,   3.46819010e-02,   7.43818941e-01,
                8.73857635e-01,   4.79220549e-02,   6.53581844e-01,
                3.40350121e-01,   7.99341137e-01,   3.74618396e-01,
                1.82240500e-01,   5.41010413e-01,   5.20766126e-02,
                2.21625418e-01,   7.35827766e-01,   3.74561380e-01,
                2.73734236e-01,   5.64461928e-01,   8.13486839e-01,
                4.13137613e-01,   9.80427092e-01,   5.35238603e-01,
                6.95322105e-02,   1.76850905e-01,   2.50124395e-01,
                6.64825103e-01,   2.26693287e-01,   4.94544090e-01,
                4.97726639e-01,   2.07904027e-01,   3.66555344e-01,
                7.42472286e-01,   6.24024036e-01,   3.08042334e-02,
                8.79813808e-01,   4.76890397e-01,   9.39009228e-02,
                8.52334564e-01,   3.80979086e-01,   7.98782454e-01,
                1.78281211e-01,   8.33892389e-01,   6.26662641e-01,
                7.41788334e-01,   4.59915460e-01,   4.60325749e-01,
                2.38436335e-01,   6.84513137e-01,   5.11783674e-01,
                8.46225180e-01,   4.89968572e-02,   5.59809938e-01,
                4.11461166e-01,   4.84988550e-02,   4.87475220e-01,
                2.78543898e-01,   4.98726378e-01,   6.08636692e-01,
                7.65742960e-04,   5.89838019e-01,   1.80533964e-01,
                7.45933394e-01,   1.28734005e-01,   8.15015866e-01,
                2.87277990e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.71755058,  0.60222155,  0.39332018,  0.75453097,  0.26449328,
               0.35120496,  0.50162712,  0.87199039,  0.21490799,  0.67992411,
               0.38482535,  0.40795993,  0.93538519,  0.25992574,  0.19650123,
               0.21685965,  0.46348973,  0.89726531,  0.75149177,  0.12833776,
               0.92746638,  0.00987556,  0.78327242,  0.56150824,  0.02599413,
               0.58895608,  0.4064504 ,  0.93098006,  0.97573284,  0.27012512,
               0.02939313,  0.45539808,  0.15318366,  0.88582644,  0.13345866,
               0.24598668,  0.5890147 ,  0.56309343,  0.19721506,  0.56564757,
               0.5396436 ,  0.9292262 ,  0.06798166,  0.80169192,  0.73698278,
               0.59910229,  0.91764159,  0.54607727,  0.84002459,  0.49634996,
               0.9706292 ,  0.69541215,  0.79385921,  0.06703557,  0.79461438,
               0.37007329,  0.85093208,  0.18317161,  0.6442407 ,  0.94615885,
               0.7301616 ,  0.98170253,  0.50323419,  0.04266046,  0.15055986,
               0.13111041,  0.29455586,  0.41641546,  0.68039749,  0.48401818,
               0.74672789,  0.36825686,  0.44580994,  0.72906685,  0.24109168,
               0.51995903,  0.19719239,  0.82389705,  0.4207504 ,  0.43134861,
               0.14239436,  0.8291421 ,  0.88434808,  0.08515791,  0.41919647,
               0.54493983,  0.09928804,  0.74053701,  0.7448657 ,  0.20731679,
               0.26970689,  0.16777807,  0.61915355,  0.72622803,  0.01304761,
               0.36501442,  0.07509794,  0.38009986,  0.71278313,  0.91822264])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.75473546,  0.74769344,  0.11621601,  0.62817888,  0.52421617,
               0.89191497,  0.18573513,  0.71710389,  0.05168685,  0.77175891,
               0.66481667,  0.61319868,  0.26637819,  0.35488779,  0.97686798,
               0.76639946,  0.59929054,  0.49667509,  0.85545146,  0.64298473,
               0.86151796,  0.70574548,  0.20000923,  0.42957587,  0.37164234,
               0.77343226,  0.63035405,  0.86946283,  0.53910526,  0.99317249,
               0.17939925,  0.66875318,  0.06772336,  0.20409303,  0.56348878,
               0.53210111,  0.70213821,  0.6859575 ,  0.17863835,  0.47965071,
               0.68758532,  0.80453301,  0.21143142,  0.31542411,  0.79911288,
               0.6397952 ,  0.65586069,  0.16490558,  0.27698104,  0.60565744,
               0.03685166,  0.71468616,  0.83201092,  0.88472581,  0.63060251,
               0.08228794,  0.44215499,  0.52086492,  0.81577008,  0.43710566,
               0.27733571,  0.39635628,  0.43898429,  0.16862933,  0.33198854,
               0.53754283,  0.11856971,  0.03522991,  0.24826394,  0.19265367,
               0.81703121,  0.01680027,  0.71962416,  0.95194244,  0.12721981,
               0.38122597,  0.49209954,  0.61841027,  0.92899142,  0.08679139,
               0.21762335,  0.73687436,  0.79284461,  0.24155065,  0.66973034,
               0.73074858,  0.39664622,  0.46997328,  0.75820798,  0.93534952,
               0.37951233,  0.79375097,  0.53687359,  0.51915   ,  0.70382785,
               0.27590063,  0.28720596,  0.23631647,  0.06465395,  0.30205411])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.4611232 ,  0.86225248,  0.94099179,  0.64625805,  0.6289483 ,
               0.05023601,  0.33661889,  0.02923478,  0.49565544,  0.98167795,
               0.61812115,  0.60991116,  0.24119161,  0.24728485,  0.50714056,
               0.16375053,  0.22672812,  0.54143626,  0.25209509,  0.02859549,
               0.31300567,  0.33876036,  0.20852279,  0.21742441,  0.02285714,
               0.78175769,  0.75632645,  0.83670497,  0.50119124,  0.49033745,
               0.34864826,  0.69841423,  0.97130063,  0.31210852,  0.14474669,
               0.5920046 ,  0.76313817,  0.19001012,  0.67974979,  0.33007839,
               0.53368114,  0.67866805,  0.9819622 ,  0.04946809,  0.40291422,
               0.16010618,  0.19766316,  0.10473404,  0.40506086,  0.74934331,
               0.2550447 ,  0.05297518,  0.21087297,  0.51381669,  0.25719388,
               0.15157849,  0.83137136,  0.27126115,  0.12623473,  0.89570406,
               0.5160808 ,  0.73029401,  0.19750303,  0.49265094,  0.65941719,
               0.15132593,  0.32943724,  0.67501493,  0.51382249,  0.83858756,
               0.37907697,  0.38700203,  0.02202438,  0.30246569,  0.66390587,
               0.09922499,  0.85886556,  0.18944894,  0.09005164,  0.19046736,
               0.10663599,  0.91690996,  0.31127661,  0.51326144,  0.11559926,
               0.45798997,  0.5147572 ,  0.28106843,  0.07426299,  0.87444084,
               0.98682526,  0.03070632,  0.72863494,  0.95769726,  0.63756405,
               0.98230285,  0.8479995 ,  0.47887973,  0.83241006,  0.26564237])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  8.00771874e-01,   2.58727128e-02,   8.59719873e-01,
                8.14625680e-01,   9.94148240e-01,   7.13374469e-01,
                6.50474578e-01,   8.56091452e-01,   4.60006737e-01,
                7.88800728e-01,   5.17927297e-01,   2.59641535e-01,
                1.93221111e-02,   6.97999445e-01,   2.43628978e-01,
                6.41058270e-01,   5.27519318e-01,   3.90589080e-01,
                8.36152566e-01,   4.31503136e-01,   8.61209233e-01,
                6.74272454e-01,   5.87770352e-01,   7.36362900e-01,
                7.69701773e-01,   6.00079580e-01,   9.56552601e-01,
                5.64814552e-01,   9.78306793e-01,   7.21049251e-01,
                1.02264480e-01,   7.18365558e-01,   8.65901580e-01,
                8.59738575e-01,   8.03535014e-01,   3.12942210e-01,
                4.86085266e-01,   3.46819010e-02,   7.43818941e-01,
                8.73857635e-01,   4.79220549e-02,   6.53581844e-01,
                3.40350121e-01,   7.99341137e-01,   3.74618396e-01,
                1.82240500e-01,   5.41010413e-01,   5.20766126e-02,
                2.21625418e-01,   7.35827766e-01,   3.74561380e-01,
                2.73734236e-01,   5.64461928e-01,   8.13486839e-01,
                4.13137613e-01,   9.80427092e-01,   5.35238603e-01,
                6.95322105e-02,   1.76850905e-01,   2.50124395e-01,
                6.64825103e-01,   2.26693287e-01,   4.94544090e-01,
                4.97726639e-01,   2.07904027e-01,   3.66555344e-01,
                7.42472286e-01,   6.24024036e-01,   3.08042334e-02,
                8.79813808e-01,   4.76890397e-01,   9.39009228e-02,
                8.52334564e-01,   3.80979086e-01,   7.98782454e-01,
                1.78281211e-01,   8.33892389e-01,   6.26662641e-01,
                7.41788334e-01,   4.59915460e-01,   4.60325749e-01,
                2.38436335e-01,   6.84513137e-01,   5.11783674e-01,
                8.46225180e-01,   4.89968572e-02,   5.59809938e-01,
                4.11461166e-01,   4.84988550e-02,   4.87475220e-01,
                2.78543898e-01,   4.98726378e-01,   6.08636692e-01,
                7.65742960e-04,   5.89838019e-01,   1.80533964e-01,
                7.45933394e-01,   1.28734005e-01,   8.15015866e-01,
                2.87277990e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.71755058,  0.60222155,  0.39332018,  0.75453097,  0.26449328,
               0.35120496,  0.50162712,  0.87199039,  0.21490799,  0.67992411,
               0.38482535,  0.40795993,  0.93538519,  0.25992574,  0.19650123,
               0.21685965,  0.46348973,  0.89726531,  0.75149177,  0.12833776,
               0.92746638,  0.00987556,  0.78327242,  0.56150824,  0.02599413,
               0.58895608,  0.4064504 ,  0.93098006,  0.97573284,  0.27012512,
               0.02939313,  0.45539808,  0.15318366,  0.88582644,  0.13345866,
               0.24598668,  0.5890147 ,  0.56309343,  0.19721506,  0.56564757,
               0.5396436 ,  0.9292262 ,  0.06798166,  0.80169192,  0.73698278,
               0.59910229,  0.91764159,  0.54607727,  0.84002459,  0.49634996,
               0.9706292 ,  0.69541215,  0.79385921,  0.06703557,  0.79461438,
               0.37007329,  0.85093208,  0.18317161,  0.6442407 ,  0.94615885,
               0.7301616 ,  0.98170253,  0.50323419,  0.04266046,  0.15055986,
               0.13111041,  0.29455586,  0.41641546,  0.68039749,  0.48401818,
               0.74672789,  0.36825686,  0.44580994,  0.72906685,  0.24109168,
               0.51995903,  0.19719239,  0.82389705,  0.4207504 ,  0.43134861,
               0.14239436,  0.8291421 ,  0.88434808,  0.08515791,  0.41919647,
               0.54493983,  0.09928804,  0.74053701,  0.7448657 ,  0.20731679,
               0.26970689,  0.16777807,  0.61915355,  0.72622803,  0.01304761,
               0.36501442,  0.07509794,  0.38009986,  0.71278313,  0.91822264])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.75473546,  0.74769344,  0.11621601,  0.62817888,  0.52421617,
               0.89191497,  0.18573513,  0.71710389,  0.05168685,  0.77175891,
               0.66481667,  0.61319868,  0.26637819,  0.35488779,  0.97686798,
               0.76639946,  0.59929054,  0.49667509,  0.85545146,  0.64298473,
               0.86151796,  0.70574548,  0.20000923,  0.42957587,  0.37164234,
               0.77343226,  0.63035405,  0.86946283,  0.53910526,  0.99317249,
               0.17939925,  0.66875318,  0.06772336,  0.20409303,  0.56348878,
               0.53210111,  0.70213821,  0.6859575 ,  0.17863835,  0.47965071,
               0.68758532,  0.80453301,  0.21143142,  0.31542411,  0.79911288,
               0.6397952 ,  0.65586069,  0.16490558,  0.27698104,  0.60565744,
               0.03685166,  0.71468616,  0.83201092,  0.88472581,  0.63060251,
               0.08228794,  0.44215499,  0.52086492,  0.81577008,  0.43710566,
               0.27733571,  0.39635628,  0.43898429,  0.16862933,  0.33198854,
               0.53754283,  0.11856971,  0.03522991,  0.24826394,  0.19265367,
               0.81703121,  0.01680027,  0.71962416,  0.95194244,  0.12721981,
               0.38122597,  0.49209954,  0.61841027,  0.92899142,  0.08679139,
               0.21762335,  0.73687436,  0.79284461,  0.24155065,  0.66973034,
               0.73074858,  0.39664622,  0.46997328,  0.75820798,  0.93534952,
               0.37951233,  0.79375097,  0.53687359,  0.51915   ,  0.70382785,
               0.27590063,  0.28720596,  0.23631647,  0.06465395,  0.30205411])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.87764056,  0.6540708 ,  0.9061479 ,  0.73959195,  0.69535032,
               0.70555627,  0.95797174,  0.37208091,  0.14039245,  0.9026298 ,
               0.19443741,  0.19440561,  0.37470812,  0.42608118,  0.12956842,
               0.78923917,  0.01868861,  0.39913079,  0.84693359,  0.11104947,
               0.77213242,  0.39599781,  0.53644509,  0.87826731,  0.78774259,
               0.30470348,  0.12585346,  0.57186275,  0.58324098,  0.59667071,
               0.83224356,  0.62027036,  0.7920937 ,  0.87738259,  0.75301937,
               0.58223355,  0.73679067,  0.77175133,  0.26761524,  0.96572626,
               0.14108921,  0.06967847,  0.29845887,  0.91790159,  0.96652145,
               0.9505182 ,  0.2661531 ,  0.31390813,  0.05357625,  0.62298629,
               0.00796756,  0.25787047,  0.31333809,  0.42652156,  0.05701436,
               0.83153662,  0.96571916,  0.75941153,  0.83453233,  0.07862975,
               0.04755802,  0.43084515,  0.33033111,  0.71472861,  0.3939885 ,
               0.72559857,  0.97227232,  0.78416961,  0.73111281,  0.58049963,
               0.06765591,  0.52867982,  0.15209308,  0.9793978 ,  0.0544689 ,
               0.8901058 ,  0.37043208,  0.20963092,  0.29681285,  0.32094874,
               0.93744594,  0.56274085,  0.78871806,  0.18420051,  0.79139249,
               0.88937248,  0.11769253,  0.75206591,  0.31067998,  0.5620157 ,
               0.979687  ,  0.82493374,  0.70113316,  0.5225273 ,  0.7584583 ,
               0.46896625,  0.7217934 ,  0.31390975,  0.67197731,  0.58095275])}]]


