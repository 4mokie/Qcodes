
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='ee271137-db18-4b5a-9e9b-255f6959c946'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='ea69df48-3bc1-433e-9ba6-d8d9711d6926'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.874707852672639],
     [0.575634347212589],
     [0.583969776673846],
     [0.658837207517052],
     [0.716895100662634],
     [0.951795512517894],
     [0.0688241515187163],
     [0.721717291952441],
     [0.862488166801381],
     [0.0941890740457962],
     [0.943017360495769],
     [0.922356604277732],
     [0.974729065101717],
     [0.915233171391389],
     [0.227453503315896],
     [0.756057315320297],
     [0.138173412841622],
     [0.492117262361881],
     [0.827709044313604],
     [0.805949706117208],
     [0.180851953564726],
     [0.034971263034848],
     [0.255568287633832],
     [0.242082112128377],
     [0.382043402025558],
     [0.377499733483939],
     [0.956345465376047],
     [0.793299483633183],
     [0.240002317943408],
     [0.493519965827942],
     [0.714594277296465],
     [0.431875731447255],
     [0.726357081307353],
     [0.143029745152409],
     [0.240663611088494],
     [0.486700455575834],
     [0.0621259608913539],
     [0.185681690893936],
     [0.754639340778107],
     [0.765704425046916],
     [0.526517059328776],
     [0.907708575030999],
     [0.387820516996301],
     [0.0263962165902436],
     [0.548745549669191],
     [0.277943424946983],
     [0.201334532589135],
     [0.975013598268369],
     [0.932525584559038],
     [0.62481548155655],
     [0.111712799215752],
     [0.247405233779924],
     [0.0892123588777933],
     [0.779443293099555],
     [0.524129640687199],
     [0.76793408764813],
     [0.354006647787927],
     [0.0972077779571053],
     [0.255014075609212],
     [0.408842657657302],
     [0.810455059634976],
     [0.552007882061537],
     [0.719542969208744],
     [0.713590820784242],
     [0.965834531134413],
     [0.929224819229313],
     [0.258089659449774],
     [0.364092122919099],
     [0.494102462361996],
     [0.901925706084711],
     [0.81225127955323],
     [0.176932277988319],
     [0.153515194922371],
     [0.899862638827634],
     [0.620250285936135],
     [0.0564768372683087],
     [0.25254970145834],
     [0.687612233633629],
     [0.0311736821245286],
     [0.789602150668222],
     [0.488377937950408],
     [0.0236881329401214],
     [0.409087537351506],
     [0.649214090056211],
     [0.523989146542882],
     [0.706098283938951],
     [0.658138077805705],
     [0.827726565970071],
     [0.432006276429143],
     [0.956117049594473],
     [0.847662505528308],
     [0.254823072894806],
     [0.935051462107746],
     [0.479210416357994],
     [0.948243017947264],
     [0.382347574128745],
     [0.703314856885711],
     [0.776073461447849],
     [0.897625584314528],
     [0.371624183128846]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.68467845])],
     [array([0.12619822])],
     [array([0.24992026])],
     [array([0.32606053])],
     [array([0.66019717])],
     [array([0.80511332])],
     [array([0.64770553])],
     [array([0.03808646])],
     [array([0.24893289])],
     [array([0.50931037])],
     [array([0.05271255])],
     [array([0.03420889])],
     [array([0.28194129])],
     [array([0.35279753])],
     [array([0.34195009])],
     [array([0.95463011])],
     [array([0.52239091])],
     [array([0.15839978])],
     [array([0.32199418])],
     [array([0.98177545])],
     [array([0.07269098])],
     [array([0.39187386])],
     [array([0.14547726])],
     [array([0.16221081])],
     [array([0.99129489])],
     [array([0.11153372])],
     [array([0.49070371])],
     [array([0.79085042])],
     [array([0.058255])],
     [array([0.69326277])],
     [array([0.71870172])],
     [array([0.26623226])],
     [array([0.79327968])],
     [array([0.13164982])],
     [array([0.71908052])],
     [array([0.66843804])],
     [array([0.48539103])],
     [array([0.19681648])],
     [array([0.73338155])],
     [array([0.49737399])],
     [array([0.00054701])],
     [array([0.37308376])],
     [array([0.47695928])],
     [array([0.0564544])],
     [array([0.9893606])],
     [array([0.53565993])],
     [array([0.75145655])],
     [array([0.64969157])],
     [array([0.19754113])],
     [array([0.36766621])],
     [array([0.05719352])],
     [array([0.93866367])],
     [array([0.98303771])],
     [array([0.52963724])],
     [array([0.35849892])],
     [array([0.74502008])],
     [array([0.04589664])],
     [array([0.43713783])],
     [array([0.55488925])],
     [array([0.32682771])],
     [array([0.76249904])],
     [array([0.27576698])],
     [array([0.80757501])],
     [array([0.27163348])],
     [array([0.90529571])],
     [array([0.4762945])],
     [array([0.7780585])],
     [array([0.04011243])],
     [array([0.81775795])],
     [array([0.36513814])],
     [array([0.91482097])],
     [array([0.47932561])],
     [array([0.59568717])],
     [array([0.87577879])],
     [array([0.69065986])],
     [array([0.22762739])],
     [array([0.96153706])],
     [array([0.39937209])],
     [array([0.96497317])],
     [array([0.3761345])],
     [array([0.70495632])],
     [array([0.59650809])],
     [array([0.28787629])],
     [array([0.52812903])],
     [array([0.40209082])],
     [array([0.06382041])],
     [array([0.44818273])],
     [array([0.29923815])],
     [array([0.83580069])],
     [array([0.23842297])],
     [array([0.75072127])],
     [array([0.45823619])],
     [array([0.87811379])],
     [array([0.26155339])],
     [array([0.80776106])],
     [array([0.68939619])],
     [array([0.70336205])],
     [array([0.20714067])],
     [array([0.58993821])],
     [array([0.11549011])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([6.84678451e-01, 1.26198223e-01, 2.49920262e-01, 3.26060534e-01,
           6.60197173e-01, 8.05113321e-01, 6.47705526e-01, 3.80864572e-02,
           2.48932888e-01, 5.09310374e-01, 5.27125483e-02, 3.42088879e-02,
           2.81941293e-01, 3.52797526e-01, 3.41950087e-01, 9.54630113e-01,
           5.22390905e-01, 1.58399778e-01, 3.21994176e-01, 9.81775455e-01,
           7.26909777e-02, 3.91873860e-01, 1.45477259e-01, 1.62210815e-01,
           9.91294890e-01, 1.11533720e-01, 4.90703712e-01, 7.90850416e-01,
           5.82550046e-02, 6.93262767e-01, 7.18701716e-01, 2.66232261e-01,
           7.93279677e-01, 1.31649820e-01, 7.19080525e-01, 6.68438036e-01,
           4.85391029e-01, 1.96816478e-01, 7.33381549e-01, 4.97373993e-01,
           5.47011769e-04, 3.73083760e-01, 4.76959283e-01, 5.64543982e-02,
           9.89360599e-01, 5.35659928e-01, 7.51456548e-01, 6.49691569e-01,
           1.97541133e-01, 3.67666208e-01, 5.71935217e-02, 9.38663669e-01,
           9.83037712e-01, 5.29637243e-01, 3.58498916e-01, 7.45020079e-01,
           4.58966444e-02, 4.37137832e-01, 5.54889250e-01, 3.26827705e-01,
           7.62499038e-01, 2.75766980e-01, 8.07575011e-01, 2.71633478e-01,
           9.05295707e-01, 4.76294498e-01, 7.78058496e-01, 4.01124258e-02,
           8.17757955e-01, 3.65138136e-01, 9.14820971e-01, 4.79325614e-01,
           5.95687172e-01, 8.75778787e-01, 6.90659857e-01, 2.27627394e-01,
           9.61537064e-01, 3.99372092e-01, 9.64973167e-01, 3.76134502e-01,
           7.04956320e-01, 5.96508087e-01, 2.87876289e-01, 5.28129026e-01,
           4.02090820e-01, 6.38204127e-02, 4.48182730e-01, 2.99238153e-01,
           8.35800688e-01, 2.38422974e-01, 7.50721265e-01, 4.58236194e-01,
           8.78113785e-01, 2.61553391e-01, 8.07761056e-01, 6.89396188e-01,
           7.03362055e-01, 2.07140666e-01, 5.89938212e-01, 1.15490110e-01])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.87470785, 0.57563435, 0.58396978, 0.65883721, 0.7168951 ,
              0.95179551, 0.06882415, 0.72171729, 0.86248817, 0.09418907,
              0.94301736, 0.9223566 , 0.97472907, 0.91523317, 0.2274535 ,
              0.75605732, 0.13817341, 0.49211726, 0.82770904, 0.80594971,
              0.18085195, 0.03497126, 0.25556829, 0.24208211, 0.3820434 ,
              0.37749973, 0.95634547, 0.79329948, 0.24000232, 0.49351997,
              0.71459428, 0.43187573, 0.72635708, 0.14302975, 0.24066361,
              0.48670046, 0.06212596, 0.18568169, 0.75463934, 0.76570443,
              0.52651706, 0.90770858, 0.38782052, 0.02639622, 0.54874555,
              0.27794342, 0.20133453, 0.9750136 , 0.93252558, 0.62481548,
              0.1117128 , 0.24740523, 0.08921236, 0.77944329, 0.52412964,
              0.76793409, 0.35400665, 0.09720778, 0.25501408, 0.40884266,
              0.81045506, 0.55200788, 0.71954297, 0.71359082, 0.96583453,
              0.92922482, 0.25808966, 0.36409212, 0.49410246, 0.90192571,
              0.81225128, 0.17693228, 0.15351519, 0.89986264, 0.62025029,
              0.05647684, 0.2525497 , 0.68761223, 0.03117368, 0.78960215,
              0.48837794, 0.02368813, 0.40908754, 0.64921409, 0.52398915,
              0.70609828, 0.65813808, 0.82772657, 0.43200628, 0.95611705,
              0.84766251, 0.25482307, 0.93505146, 0.47921042, 0.94824302,
              0.38234757, 0.70331486, 0.77607346, 0.89762558, 0.37162418])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.0100079 , 0.31805334, 0.4026728 , 0.46623521, 0.37932359,
              0.58664875, 0.8073103 , 0.54076418, 0.88184301, 0.06511281,
              0.9556186 , 0.40437123, 0.57504091, 0.95749177, 0.27413246,
              0.63288647, 0.14604589, 0.53241809, 0.0939162 , 0.3774575 ,
              0.12995793, 0.00895688, 0.91424116, 0.93644172, 0.38507326,
              0.15427993, 0.60778892, 0.10764702, 0.44616235, 0.19577377,
              0.29958783, 0.73407277, 0.72087613, 0.78314506, 0.20186726,
              0.02363921, 0.21985736, 0.83457149, 0.87579833, 0.33951426,
              0.21611385, 0.54530726, 0.86058922, 0.52935787, 0.38962201,
              0.3036622 , 0.80157383, 0.36324541, 0.90203896, 0.89073946,
              0.8118031 , 0.66821253, 0.00808049, 0.31411093, 0.25617702,
              0.77662181, 0.96334008, 0.91419392, 0.14078641, 0.87257981,
              0.44497403, 0.94955812, 0.90450218, 0.2055319 , 0.21966416,
              0.5843342 , 0.11176995, 0.02879019, 0.77651912, 0.30560849,
              0.58246225, 0.85017042, 0.83841895, 0.34946962, 0.0407434 ,
              0.6662846 , 0.70906097, 0.18388731, 0.32675328, 0.71197657,
              0.79689835, 0.31027735, 0.9395679 , 0.17367373, 0.54536017,
              0.84625612, 0.68461959, 0.64764293, 0.00655199, 0.69687411,
              0.11706313, 0.21004741, 0.88297127, 0.05195383, 0.97586424,
              0.49585244, 0.82577145, 0.0591287 , 0.63009985, 0.41886245])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.4956849 , 0.3587163 , 0.8722652 , 0.37966792, 0.2661847 ,
              0.40304971, 0.20607116, 0.31937567, 0.35564256, 0.02035705,
              0.44390511, 0.38977816, 0.02613793, 0.17687211, 0.57178231,
              0.33668172, 0.02774561, 0.46229636, 0.10440386, 0.78578551,
              0.66147452, 0.86120582, 0.22816004, 0.91240507, 0.90552334,
              0.62021731, 0.1997903 , 0.83244644, 0.51813239, 0.42713531,
              0.36961238, 0.39759517, 0.32251341, 0.01518192, 0.17282655,
              0.95300455, 0.60558123, 0.40554195, 0.67221061, 0.19613305,
              0.3072937 , 0.11116141, 0.10424171, 0.95051821, 0.53126711,
              0.51128385, 0.94783425, 0.48822027, 0.06684701, 0.47780022,
              0.53260394, 0.22606745, 0.89779267, 0.53160779, 0.75551479,
              0.77645734, 0.88184215, 0.19641705, 0.07538754, 0.87278015,
              0.97980884, 0.86101906, 0.38674692, 0.83143714, 0.64571565,
              0.42441583, 0.72049028, 0.99609385, 0.13540718, 0.07709923,
              0.08095178, 0.58938426, 0.61098076, 0.59309728, 0.36512066,
              0.67463996, 0.17867011, 0.32168601, 0.94936525, 0.15071805,
              0.97951384, 0.79831564, 0.01627028, 0.72028915, 0.73910612,
              0.57481939, 0.11431817, 0.10291922, 0.29818753, 0.52742576,
              0.27763498, 0.45263169, 0.42582042, 0.30345532, 0.11133856,
              0.39168027, 0.97358806, 0.92249683, 0.85292752, 0.7669859 ])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.16112293, 0.1961169 , 0.17035126, 0.02119451, 0.57574355,
              0.27050023, 0.75937249, 0.47945401, 0.11695305, 0.18095757,
              0.41444134, 0.35127777, 0.08767195, 0.34622292, 0.38184588,
              0.05584669, 0.13815625, 0.64595136, 0.96836145, 0.51025646,
              0.60143698, 0.85501752, 0.38352947, 0.8125676 , 0.32482134,
              0.16303579, 0.65081268, 0.92263913, 0.11658531, 0.30519733,
              0.93803656, 0.1939102 , 0.19702977, 0.85219475, 0.96091143,
              0.6301154 , 0.27966076, 0.92371011, 0.03560846, 0.01034356,
              0.80576243, 0.93997219, 0.41183885, 0.67913838, 0.15031171,
              0.95625848, 0.70902996, 0.82172755, 0.62131489, 0.44506952,
              0.38231326, 0.53184845, 0.30664202, 0.52745682, 0.91659221,
              0.66888395, 0.82591877, 0.3241131 , 0.21598549, 0.96167354,
              0.17056568, 0.11375943, 0.51148471, 0.23449089, 0.32916349,
              0.37862906, 0.36677533, 0.40179526, 0.97583163, 0.11651272,
              0.23296983, 0.4400175 , 0.02680247, 0.52143116, 0.5868112 ,
              0.18732949, 0.39192565, 0.86039821, 0.38353433, 0.95426978,
              0.51914309, 0.12842799, 0.94839257, 0.0169054 , 0.68193995,
              0.26894053, 0.50345649, 0.14098399, 0.88931997, 0.71042237,
              0.37659396, 0.80549426, 0.43606207, 0.33359365, 0.28047784,
              0.38125481, 0.32760639, 0.46354677, 0.85310635, 0.4939877 ])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.87470785, 0.57563435, 0.58396978, 0.65883721, 0.7168951 ,
              0.95179551, 0.06882415, 0.72171729, 0.86248817, 0.09418907,
              0.94301736, 0.9223566 , 0.97472907, 0.91523317, 0.2274535 ,
              0.75605732, 0.13817341, 0.49211726, 0.82770904, 0.80594971,
              0.18085195, 0.03497126, 0.25556829, 0.24208211, 0.3820434 ,
              0.37749973, 0.95634547, 0.79329948, 0.24000232, 0.49351997,
              0.71459428, 0.43187573, 0.72635708, 0.14302975, 0.24066361,
              0.48670046, 0.06212596, 0.18568169, 0.75463934, 0.76570443,
              0.52651706, 0.90770858, 0.38782052, 0.02639622, 0.54874555,
              0.27794342, 0.20133453, 0.9750136 , 0.93252558, 0.62481548,
              0.1117128 , 0.24740523, 0.08921236, 0.77944329, 0.52412964,
              0.76793409, 0.35400665, 0.09720778, 0.25501408, 0.40884266,
              0.81045506, 0.55200788, 0.71954297, 0.71359082, 0.96583453,
              0.92922482, 0.25808966, 0.36409212, 0.49410246, 0.90192571,
              0.81225128, 0.17693228, 0.15351519, 0.89986264, 0.62025029,
              0.05647684, 0.2525497 , 0.68761223, 0.03117368, 0.78960215,
              0.48837794, 0.02368813, 0.40908754, 0.64921409, 0.52398915,
              0.70609828, 0.65813808, 0.82772657, 0.43200628, 0.95611705,
              0.84766251, 0.25482307, 0.93505146, 0.47921042, 0.94824302,
              0.38234757, 0.70331486, 0.77607346, 0.89762558, 0.37162418])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.0100079 , 0.31805334, 0.4026728 , 0.46623521, 0.37932359,
              0.58664875, 0.8073103 , 0.54076418, 0.88184301, 0.06511281,
              0.9556186 , 0.40437123, 0.57504091, 0.95749177, 0.27413246,
              0.63288647, 0.14604589, 0.53241809, 0.0939162 , 0.3774575 ,
              0.12995793, 0.00895688, 0.91424116, 0.93644172, 0.38507326,
              0.15427993, 0.60778892, 0.10764702, 0.44616235, 0.19577377,
              0.29958783, 0.73407277, 0.72087613, 0.78314506, 0.20186726,
              0.02363921, 0.21985736, 0.83457149, 0.87579833, 0.33951426,
              0.21611385, 0.54530726, 0.86058922, 0.52935787, 0.38962201,
              0.3036622 , 0.80157383, 0.36324541, 0.90203896, 0.89073946,
              0.8118031 , 0.66821253, 0.00808049, 0.31411093, 0.25617702,
              0.77662181, 0.96334008, 0.91419392, 0.14078641, 0.87257981,
              0.44497403, 0.94955812, 0.90450218, 0.2055319 , 0.21966416,
              0.5843342 , 0.11176995, 0.02879019, 0.77651912, 0.30560849,
              0.58246225, 0.85017042, 0.83841895, 0.34946962, 0.0407434 ,
              0.6662846 , 0.70906097, 0.18388731, 0.32675328, 0.71197657,
              0.79689835, 0.31027735, 0.9395679 , 0.17367373, 0.54536017,
              0.84625612, 0.68461959, 0.64764293, 0.00655199, 0.69687411,
              0.11706313, 0.21004741, 0.88297127, 0.05195383, 0.97586424,
              0.49585244, 0.82577145, 0.0591287 , 0.63009985, 0.41886245])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.4956849 , 0.3587163 , 0.8722652 , 0.37966792, 0.2661847 ,
              0.40304971, 0.20607116, 0.31937567, 0.35564256, 0.02035705,
              0.44390511, 0.38977816, 0.02613793, 0.17687211, 0.57178231,
              0.33668172, 0.02774561, 0.46229636, 0.10440386, 0.78578551,
              0.66147452, 0.86120582, 0.22816004, 0.91240507, 0.90552334,
              0.62021731, 0.1997903 , 0.83244644, 0.51813239, 0.42713531,
              0.36961238, 0.39759517, 0.32251341, 0.01518192, 0.17282655,
              0.95300455, 0.60558123, 0.40554195, 0.67221061, 0.19613305,
              0.3072937 , 0.11116141, 0.10424171, 0.95051821, 0.53126711,
              0.51128385, 0.94783425, 0.48822027, 0.06684701, 0.47780022,
              0.53260394, 0.22606745, 0.89779267, 0.53160779, 0.75551479,
              0.77645734, 0.88184215, 0.19641705, 0.07538754, 0.87278015,
              0.97980884, 0.86101906, 0.38674692, 0.83143714, 0.64571565,
              0.42441583, 0.72049028, 0.99609385, 0.13540718, 0.07709923,
              0.08095178, 0.58938426, 0.61098076, 0.59309728, 0.36512066,
              0.67463996, 0.17867011, 0.32168601, 0.94936525, 0.15071805,
              0.97951384, 0.79831564, 0.01627028, 0.72028915, 0.73910612,
              0.57481939, 0.11431817, 0.10291922, 0.29818753, 0.52742576,
              0.27763498, 0.45263169, 0.42582042, 0.30345532, 0.11133856,
              0.39168027, 0.97358806, 0.92249683, 0.85292752, 0.7669859 ])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.2819853 , 0.80318865, 0.77560896, 0.40324133, 0.73726589,
              0.25056258, 0.44024247, 0.05237864, 0.26487294, 0.56581741,
              0.36971947, 0.22506228, 0.41286081, 0.52507876, 0.57100077,
              0.2685106 , 0.16135431, 0.20420857, 0.87203195, 0.25163593,
              0.65467095, 0.61390418, 0.22055692, 0.50246224, 0.98267342,
              0.88913267, 0.40498841, 0.21327739, 0.13019234, 0.32827178,
              0.05142215, 0.31424341, 0.64890482, 0.21660652, 0.38453168,
              0.29240243, 0.51068888, 0.79651648, 0.89320616, 0.88337523,
              0.07952719, 0.41702758, 0.92723803, 0.45558748, 0.73324919,
              0.17795207, 0.05497282, 0.05559559, 0.67420338, 0.84450003,
              0.98161947, 0.82318439, 0.80758628, 0.9176844 , 0.79612072,
              0.15017931, 0.5386146 , 0.20382458, 0.12848856, 0.62074201,
              0.33045472, 0.54820743, 0.99211424, 0.46293813, 0.00419727,
              0.24672431, 0.38662837, 0.9221779 , 0.95303906, 0.5289536 ,
              0.21147985, 0.06189019, 0.79654879, 0.49478651, 0.69781034,
              0.00564397, 0.15166437, 0.00384333, 0.96473311, 0.42274159,
              0.87906241, 0.94689621, 0.65375073, 0.29486905, 0.39585242,
              0.14712678, 0.62060114, 0.21189682, 0.75923763, 0.83268211,
              0.77559941, 0.62708145, 0.820403  , 0.77175905, 0.29927776,
              0.80470458, 0.0264624 , 0.6586005 , 0.89638806, 0.40216673])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([6.84678451e-01, 1.26198223e-01, 2.49920262e-01, 3.26060534e-01,
              6.60197173e-01, 8.05113321e-01, 6.47705526e-01, 3.80864572e-02,
              2.48932888e-01, 5.09310374e-01, 5.27125483e-02, 3.42088879e-02,
              2.81941293e-01, 3.52797526e-01, 3.41950087e-01, 9.54630113e-01,
              5.22390905e-01, 1.58399778e-01, 3.21994176e-01, 9.81775455e-01,
              7.26909777e-02, 3.91873860e-01, 1.45477259e-01, 1.62210815e-01,
              9.91294890e-01, 1.11533720e-01, 4.90703712e-01, 7.90850416e-01,
              5.82550046e-02, 6.93262767e-01, 7.18701716e-01, 2.66232261e-01,
              7.93279677e-01, 1.31649820e-01, 7.19080525e-01, 6.68438036e-01,
              4.85391029e-01, 1.96816478e-01, 7.33381549e-01, 4.97373993e-01,
              5.47011769e-04, 3.73083760e-01, 4.76959283e-01, 5.64543982e-02,
              9.89360599e-01, 5.35659928e-01, 7.51456548e-01, 6.49691569e-01,
              1.97541133e-01, 3.67666208e-01, 5.71935217e-02, 9.38663669e-01,
              9.83037712e-01, 5.29637243e-01, 3.58498916e-01, 7.45020079e-01,
              4.58966444e-02, 4.37137832e-01, 5.54889250e-01, 3.26827705e-01,
              7.62499038e-01, 2.75766980e-01, 8.07575011e-01, 2.71633478e-01,
              9.05295707e-01, 4.76294498e-01, 7.78058496e-01, 4.01124258e-02,
              8.17757955e-01, 3.65138136e-01, 9.14820971e-01, 4.79325614e-01,
              5.95687172e-01, 8.75778787e-01, 6.90659857e-01, 2.27627394e-01,
              9.61537064e-01, 3.99372092e-01, 9.64973167e-01, 3.76134502e-01,
              7.04956320e-01, 5.96508087e-01, 2.87876289e-01, 5.28129026e-01,
              4.02090820e-01, 6.38204127e-02, 4.48182730e-01, 2.99238153e-01,
              8.35800688e-01, 2.38422974e-01, 7.50721265e-01, 4.58236194e-01,
              8.78113785e-01, 2.61553391e-01, 8.07761056e-01, 6.89396188e-01,
              7.03362055e-01, 2.07140666e-01, 5.89938212e-01, 1.15490110e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.19995892, 0.32316341, 0.60808326, 0.7629081 , 0.65906466,
              0.62927473, 0.91836021, 0.53673554, 0.98693978, 0.8437119 ,
              0.81616764, 0.95412412, 0.70237539, 0.85188664, 0.05284401,
              0.91360825, 0.57309249, 0.68710518, 0.58897098, 0.50340206,
              0.49706687, 0.06244469, 0.67357971, 0.88055977, 0.41687665,
              0.97901486, 0.19279751, 0.37168744, 0.70117066, 0.13888505,
              0.39137626, 0.81711435, 0.91566384, 0.35115394, 0.7278169 ,
              0.2990676 , 0.12898279, 0.83656865, 0.02843601, 0.38831444,
              0.03639355, 0.83268095, 0.76846706, 0.81162945, 0.93673923,
              0.54297255, 0.56321414, 0.48897229, 0.58716976, 0.99236122,
              0.86132114, 0.83780637, 0.08307781, 0.35633561, 0.70295905,
              0.17759113, 0.75051895, 0.32975142, 0.76429676, 0.84262384,
              0.05544591, 0.08031797, 0.52129206, 0.14928121, 0.30528085,
              0.27331005, 0.64468416, 0.11181864, 0.28492272, 0.08115274,
              0.61110245, 0.12150371, 0.31541946, 0.40322134, 0.02335556,
              0.12464941, 0.43595997, 0.93724773, 0.7217874 , 0.83284184,
              0.87495674, 0.13037866, 0.5281052 , 0.10416779, 0.31696772,
              0.24779644, 0.88796621, 0.24942764, 0.29519991, 0.82122365,
              0.02811605, 0.21085683, 0.94097271, 0.80783794, 0.39200863,
              0.25975369, 0.84870673, 0.4153174 , 0.91994227, 0.09776332])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.21823407, 0.11899218, 0.1158786 , 0.61859778, 0.65279471,
              0.7956602 , 0.81087148, 0.07341312, 0.30308569, 0.21649685,
              0.86052663, 0.55496865, 0.80169334, 0.98684019, 0.32552347,
              0.72468282, 0.71024882, 0.4290052 , 0.80409658, 0.17862911,
              0.20153952, 0.3298815 , 0.43119911, 0.88316436, 0.27271236,
              0.46624806, 0.94761177, 0.1274511 , 0.01000837, 0.22917351,
              0.13883372, 0.13278389, 0.88184161, 0.58707767, 0.53050778,
              0.98548953, 0.78897658, 0.31173947, 0.97222216, 0.41934434,
              0.92822182, 0.63315721, 0.40161762, 0.30464795, 0.40608385,
              0.89516338, 0.81606394, 0.06527489, 0.85422253, 0.78504779,
              0.00122845, 0.68384697, 0.11715028, 0.07513851, 0.00638184,
              0.54979312, 0.20441051, 0.0443572 , 0.82850182, 0.20791862,
              0.65853933, 0.07105104, 0.42204018, 0.11436022, 0.82557106,
              0.55586101, 0.28552   , 0.53352524, 0.89112194, 0.55306633,
              0.96503552, 0.49002721, 0.53404731, 0.70385002, 0.29199785,
              0.80754525, 0.79191535, 0.98288518, 0.35427193, 0.26577258,
              0.48541877, 0.70875228, 0.04357064, 0.49376518, 0.86953638,
              0.11115497, 0.10082158, 0.77910119, 0.92485267, 0.33677388,
              0.66826814, 0.32182373, 0.48612545, 0.25836364, 0.7164968 ,
              0.99489184, 0.62205215, 0.47480101, 0.45956772, 0.90664343])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([5.12966305e-01, 1.32998737e-01, 6.58156565e-01, 2.85271521e-01,
              3.94315146e-01, 1.55672821e-02, 9.93278994e-01, 9.49215873e-01,
              7.51034717e-01, 4.81261062e-01, 1.82145945e-01, 1.79704085e-01,
              7.02507953e-02, 9.58355913e-01, 7.40058209e-01, 9.02176904e-01,
              7.17560701e-01, 8.78753679e-01, 1.50354452e-01, 6.03530427e-01,
              4.54711143e-01, 1.49752472e-01, 7.45499213e-01, 4.59193743e-01,
              7.40663617e-01, 7.25680187e-01, 3.78868980e-01, 6.22717721e-01,
              2.10822040e-01, 4.50046537e-01, 8.98028636e-02, 9.60100340e-01,
              8.90745406e-01, 7.83545735e-02, 4.11727282e-02, 2.75198818e-01,
              4.20086188e-01, 5.03324501e-01, 2.65626154e-01, 3.91780054e-01,
              4.78030043e-01, 1.04663266e-01, 4.45888447e-02, 2.05627377e-01,
              9.58269351e-01, 4.80540360e-01, 5.07115484e-01, 2.75923339e-01,
              9.77245586e-01, 6.54084207e-01, 2.84501793e-01, 3.28776875e-01,
              1.09266010e-01, 6.40656645e-01, 3.65491379e-01, 4.71502595e-01,
              3.42051318e-01, 2.54825856e-01, 7.37409755e-01, 5.26071459e-01,
              9.72399592e-01, 1.16164935e-01, 1.77290527e-01, 5.32568752e-04,
              2.04479164e-01, 4.06330037e-01, 8.53235035e-01, 9.08925217e-01,
              1.26159709e-01, 6.66863078e-01, 5.72805172e-01, 6.17519429e-01,
              4.44954188e-01, 3.64466938e-01, 1.04003588e-01, 1.49141140e-01,
              2.83098914e-01, 3.99366481e-01, 3.94015406e-01, 4.11579192e-01,
              9.78214934e-01, 1.74620552e-01, 1.05240611e-01, 4.79013558e-01,
              5.78618051e-01, 1.18916393e-01, 8.12113865e-01, 3.58299305e-01,
              4.99438325e-01, 6.88160837e-01, 5.92223853e-01, 3.08443156e-01,
              9.50212791e-01, 7.44497359e-01, 9.26850658e-02, 1.84351963e-02,
              4.72541125e-01, 8.60105890e-01, 2.21556256e-01, 3.62544615e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([6.84678451e-01, 1.26198223e-01, 2.49920262e-01, 3.26060534e-01,
              6.60197173e-01, 8.05113321e-01, 6.47705526e-01, 3.80864572e-02,
              2.48932888e-01, 5.09310374e-01, 5.27125483e-02, 3.42088879e-02,
              2.81941293e-01, 3.52797526e-01, 3.41950087e-01, 9.54630113e-01,
              5.22390905e-01, 1.58399778e-01, 3.21994176e-01, 9.81775455e-01,
              7.26909777e-02, 3.91873860e-01, 1.45477259e-01, 1.62210815e-01,
              9.91294890e-01, 1.11533720e-01, 4.90703712e-01, 7.90850416e-01,
              5.82550046e-02, 6.93262767e-01, 7.18701716e-01, 2.66232261e-01,
              7.93279677e-01, 1.31649820e-01, 7.19080525e-01, 6.68438036e-01,
              4.85391029e-01, 1.96816478e-01, 7.33381549e-01, 4.97373993e-01,
              5.47011769e-04, 3.73083760e-01, 4.76959283e-01, 5.64543982e-02,
              9.89360599e-01, 5.35659928e-01, 7.51456548e-01, 6.49691569e-01,
              1.97541133e-01, 3.67666208e-01, 5.71935217e-02, 9.38663669e-01,
              9.83037712e-01, 5.29637243e-01, 3.58498916e-01, 7.45020079e-01,
              4.58966444e-02, 4.37137832e-01, 5.54889250e-01, 3.26827705e-01,
              7.62499038e-01, 2.75766980e-01, 8.07575011e-01, 2.71633478e-01,
              9.05295707e-01, 4.76294498e-01, 7.78058496e-01, 4.01124258e-02,
              8.17757955e-01, 3.65138136e-01, 9.14820971e-01, 4.79325614e-01,
              5.95687172e-01, 8.75778787e-01, 6.90659857e-01, 2.27627394e-01,
              9.61537064e-01, 3.99372092e-01, 9.64973167e-01, 3.76134502e-01,
              7.04956320e-01, 5.96508087e-01, 2.87876289e-01, 5.28129026e-01,
              4.02090820e-01, 6.38204127e-02, 4.48182730e-01, 2.99238153e-01,
              8.35800688e-01, 2.38422974e-01, 7.50721265e-01, 4.58236194e-01,
              8.78113785e-01, 2.61553391e-01, 8.07761056e-01, 6.89396188e-01,
              7.03362055e-01, 2.07140666e-01, 5.89938212e-01, 1.15490110e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.19995892, 0.32316341, 0.60808326, 0.7629081 , 0.65906466,
              0.62927473, 0.91836021, 0.53673554, 0.98693978, 0.8437119 ,
              0.81616764, 0.95412412, 0.70237539, 0.85188664, 0.05284401,
              0.91360825, 0.57309249, 0.68710518, 0.58897098, 0.50340206,
              0.49706687, 0.06244469, 0.67357971, 0.88055977, 0.41687665,
              0.97901486, 0.19279751, 0.37168744, 0.70117066, 0.13888505,
              0.39137626, 0.81711435, 0.91566384, 0.35115394, 0.7278169 ,
              0.2990676 , 0.12898279, 0.83656865, 0.02843601, 0.38831444,
              0.03639355, 0.83268095, 0.76846706, 0.81162945, 0.93673923,
              0.54297255, 0.56321414, 0.48897229, 0.58716976, 0.99236122,
              0.86132114, 0.83780637, 0.08307781, 0.35633561, 0.70295905,
              0.17759113, 0.75051895, 0.32975142, 0.76429676, 0.84262384,
              0.05544591, 0.08031797, 0.52129206, 0.14928121, 0.30528085,
              0.27331005, 0.64468416, 0.11181864, 0.28492272, 0.08115274,
              0.61110245, 0.12150371, 0.31541946, 0.40322134, 0.02335556,
              0.12464941, 0.43595997, 0.93724773, 0.7217874 , 0.83284184,
              0.87495674, 0.13037866, 0.5281052 , 0.10416779, 0.31696772,
              0.24779644, 0.88796621, 0.24942764, 0.29519991, 0.82122365,
              0.02811605, 0.21085683, 0.94097271, 0.80783794, 0.39200863,
              0.25975369, 0.84870673, 0.4153174 , 0.91994227, 0.09776332])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.21823407, 0.11899218, 0.1158786 , 0.61859778, 0.65279471,
              0.7956602 , 0.81087148, 0.07341312, 0.30308569, 0.21649685,
              0.86052663, 0.55496865, 0.80169334, 0.98684019, 0.32552347,
              0.72468282, 0.71024882, 0.4290052 , 0.80409658, 0.17862911,
              0.20153952, 0.3298815 , 0.43119911, 0.88316436, 0.27271236,
              0.46624806, 0.94761177, 0.1274511 , 0.01000837, 0.22917351,
              0.13883372, 0.13278389, 0.88184161, 0.58707767, 0.53050778,
              0.98548953, 0.78897658, 0.31173947, 0.97222216, 0.41934434,
              0.92822182, 0.63315721, 0.40161762, 0.30464795, 0.40608385,
              0.89516338, 0.81606394, 0.06527489, 0.85422253, 0.78504779,
              0.00122845, 0.68384697, 0.11715028, 0.07513851, 0.00638184,
              0.54979312, 0.20441051, 0.0443572 , 0.82850182, 0.20791862,
              0.65853933, 0.07105104, 0.42204018, 0.11436022, 0.82557106,
              0.55586101, 0.28552   , 0.53352524, 0.89112194, 0.55306633,
              0.96503552, 0.49002721, 0.53404731, 0.70385002, 0.29199785,
              0.80754525, 0.79191535, 0.98288518, 0.35427193, 0.26577258,
              0.48541877, 0.70875228, 0.04357064, 0.49376518, 0.86953638,
              0.11115497, 0.10082158, 0.77910119, 0.92485267, 0.33677388,
              0.66826814, 0.32182373, 0.48612545, 0.25836364, 0.7164968 ,
              0.99489184, 0.62205215, 0.47480101, 0.45956772, 0.90664343])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.68436953, 0.29579026, 0.47478841, 0.25221652, 0.48606993,
              0.67423287, 0.15515937, 0.31313675, 0.79897878, 0.17581179,
              0.44624705, 0.62276645, 0.2144861 , 0.08594245, 0.05570926,
              0.81416675, 0.37952569, 0.877859  , 0.73502273, 0.22366695,
              0.07548781, 0.87154778, 0.8613376 , 0.39285712, 0.51393742,
              0.68026923, 0.48347321, 0.24132927, 0.39505291, 0.76438816,
              0.33997861, 0.64353922, 0.42259906, 0.25590246, 0.36546204,
              0.42518431, 0.33483192, 0.8640394 , 0.98201727, 0.73825803,
              0.50076687, 0.69778745, 0.76790611, 0.31386751, 0.93496833,
              0.78527057, 0.19559299, 0.19923413, 0.42930651, 0.94389684,
              0.69536908, 0.56838433, 0.30959707, 0.89923827, 0.69148344,
              0.44974231, 0.26247871, 0.53602305, 0.91782334, 0.33346707,
              0.54096038, 0.22664217, 0.70654174, 0.25015068, 0.12465863,
              0.83686802, 0.36865886, 0.23552305, 0.80352127, 0.37354686,
              0.42794709, 0.08619123, 0.99135225, 0.87028813, 0.6699329 ,
              0.15986201, 0.50323075, 0.25441883, 0.54679497, 0.71949696,
              0.26282023, 0.59931895, 0.36503011, 0.65573208, 0.31382873,
              0.88807558, 0.14068098, 0.32083549, 0.59494254, 0.8978508 ,
              0.8469776 , 0.40582745, 0.97768969, 0.68574551, 0.41352263,
              0.35665038, 0.77306736, 0.60388233, 0.36040905, 0.42601568])}]]


