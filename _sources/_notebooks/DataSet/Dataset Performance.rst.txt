
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='418c4747-7e89-47d0-90f9-349150f9dd79'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='bd2c645a-dcab-46be-a6ad-9db1bc86fa7a'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.177633074951094],
     [0.520822937646213],
     [0.345019701457596],
     [0.660155835695813],
     [0.982143607637579],
     [0.362312380890825],
     [0.0800751509905491],
     [0.00705674281235891],
     [0.386684812767504],
     [0.890482948470009],
     [0.152857805830449],
     [0.485992916093242],
     [0.322161673022263],
     [0.28160333397308],
     [0.648843980025779],
     [0.0407281763346774],
     [0.524287905712207],
     [0.374553319219688],
     [0.417724647939746],
     [0.609148673883156],
     [0.857347916405792],
     [0.489251021695668],
     [0.330428386182264],
     [0.366065832484911],
     [0.570539674849416],
     [0.937351440676922],
     [0.718293417189818],
     [0.669619635009627],
     [0.930415462121559],
     [0.885962486725436],
     [0.93425073082163],
     [0.992733302600296],
     [0.00442783166170424],
     [0.877508155949171],
     [0.375392614155842],
     [0.0173379460582355],
     [0.89817786449944],
     [0.889048629599095],
     [0.879717379250016],
     [0.139300235122935],
     [0.223358874771046],
     [0.405495450844528],
     [0.778891303505045],
     [0.31032170066437],
     [0.533897414679679],
     [0.206738100074784],
     [0.309887803262985],
     [0.648109696470277],
     [0.828292991071746],
     [0.580216636149036],
     [0.551936557565456],
     [0.344719840082027],
     [0.486920286623926],
     [0.401783021440027],
     [0.64068671660909],
     [0.727207560697072],
     [0.232926302360496],
     [0.272513452908725],
     [0.961991794994515],
     [0.812886489129749],
     [0.639171220509669],
     [0.776811245775806],
     [0.679888814900841],
     [0.503431282959001],
     [0.427620475478185],
     [0.0921867214761528],
     [0.143847236595867],
     [0.226645752389323],
     [0.156874413951959],
     [0.260065082817545],
     [0.0965657055454497],
     [0.225502848325807],
     [0.698625763501698],
     [0.958211224911762],
     [0.573090342420265],
     [0.551877578172343],
     [0.742922860372714],
     [0.543818449429808],
     [0.509935079728007],
     [0.606741389005736],
     [0.365542957871543],
     [0.471816303633518],
     [0.328782231085674],
     [0.755944143651276],
     [0.956149254633225],
     [0.663063257652307],
     [0.518563301024468],
     [0.539082591205668],
     [0.0355454934159322],
     [0.449984718511115],
     [0.254272267457329],
     [0.537536720384198],
     [0.224861824008011],
     [0.498210950170219],
     [0.138002870896011],
     [0.687703899268367],
     [0.381029614400544],
     [0.143323341841658],
     [0.0824740419734084],
     [0.151423193503696]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.51440411])],
     [array([0.20871496])],
     [array([0.70446507])],
     [array([0.0519523])],
     [array([0.51176916])],
     [array([0.74945379])],
     [array([0.94687543])],
     [array([0.67053428])],
     [array([0.69395553])],
     [array([0.15932892])],
     [array([0.2489062])],
     [array([0.40175143])],
     [array([0.80895343])],
     [array([0.10456974])],
     [array([0.88217089])],
     [array([0.33248014])],
     [array([0.0437757])],
     [array([0.86358068])],
     [array([0.09011102])],
     [array([0.16658133])],
     [array([0.98478381])],
     [array([0.28590371])],
     [array([0.17467428])],
     [array([0.99064877])],
     [array([0.06145444])],
     [array([0.49837372])],
     [array([0.83016078])],
     [array([0.70350685])],
     [array([0.22090544])],
     [array([0.62595503])],
     [array([0.27944158])],
     [array([0.58139018])],
     [array([0.03971699])],
     [array([0.32854489])],
     [array([0.57829232])],
     [array([0.76624525])],
     [array([0.29881167])],
     [array([0.80403892])],
     [array([0.9493193])],
     [array([0.4543257])],
     [array([0.22859913])],
     [array([0.68345371])],
     [array([0.37579562])],
     [array([0.67622085])],
     [array([0.49896306])],
     [array([0.70106381])],
     [array([0.23559279])],
     [array([0.72395382])],
     [array([0.28141846])],
     [array([0.71684031])],
     [array([0.74663639])],
     [array([0.7755056])],
     [array([0.34237753])],
     [array([0.89061352])],
     [array([0.30102178])],
     [array([0.7469259])],
     [array([0.79182648])],
     [array([0.23615057])],
     [array([0.44441013])],
     [array([0.03672322])],
     [array([0.31144064])],
     [array([0.95206753])],
     [array([0.42108714])],
     [array([0.84263599])],
     [array([0.55410535])],
     [array([0.86344067])],
     [array([0.60480857])],
     [array([0.80324536])],
     [array([0.6595211])],
     [array([0.86529161])],
     [array([0.6071465])],
     [array([0.64200314])],
     [array([0.36513645])],
     [array([0.54418921])],
     [array([0.34917341])],
     [array([0.46142566])],
     [array([0.91040544])],
     [array([0.68690036])],
     [array([0.63463363])],
     [array([0.0882491])],
     [array([0.4265454])],
     [array([0.436382])],
     [array([0.15821558])],
     [array([0.90640798])],
     [array([0.12001177])],
     [array([0.79318206])],
     [array([0.83960453])],
     [array([0.48085354])],
     [array([0.14164741])],
     [array([0.82415458])],
     [array([0.81492354])],
     [array([0.45293448])],
     [array([0.12103178])],
     [array([0.32230569])],
     [array([0.28073185])],
     [array([0.14812598])],
     [array([0.20795987])],
     [array([0.39739393])],
     [array([0.40928658])],
     [array([0.95506512])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.51440411, 0.20871496, 0.70446507, 0.0519523 , 0.51176916,
           0.74945379, 0.94687543, 0.67053428, 0.69395553, 0.15932892,
           0.2489062 , 0.40175143, 0.80895343, 0.10456974, 0.88217089,
           0.33248014, 0.0437757 , 0.86358068, 0.09011102, 0.16658133,
           0.98478381, 0.28590371, 0.17467428, 0.99064877, 0.06145444,
           0.49837372, 0.83016078, 0.70350685, 0.22090544, 0.62595503,
           0.27944158, 0.58139018, 0.03971699, 0.32854489, 0.57829232,
           0.76624525, 0.29881167, 0.80403892, 0.9493193 , 0.4543257 ,
           0.22859913, 0.68345371, 0.37579562, 0.67622085, 0.49896306,
           0.70106381, 0.23559279, 0.72395382, 0.28141846, 0.71684031,
           0.74663639, 0.7755056 , 0.34237753, 0.89061352, 0.30102178,
           0.7469259 , 0.79182648, 0.23615057, 0.44441013, 0.03672322,
           0.31144064, 0.95206753, 0.42108714, 0.84263599, 0.55410535,
           0.86344067, 0.60480857, 0.80324536, 0.6595211 , 0.86529161,
           0.6071465 , 0.64200314, 0.36513645, 0.54418921, 0.34917341,
           0.46142566, 0.91040544, 0.68690036, 0.63463363, 0.0882491 ,
           0.4265454 , 0.436382  , 0.15821558, 0.90640798, 0.12001177,
           0.79318206, 0.83960453, 0.48085354, 0.14164741, 0.82415458,
           0.81492354, 0.45293448, 0.12103178, 0.32230569, 0.28073185,
           0.14812598, 0.20795987, 0.39739393, 0.40928658, 0.95506512])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.17763307, 0.52082294, 0.3450197 , 0.66015584, 0.98214361,
              0.36231238, 0.08007515, 0.00705674, 0.38668481, 0.89048295,
              0.15285781, 0.48599292, 0.32216167, 0.28160333, 0.64884398,
              0.04072818, 0.52428791, 0.37455332, 0.41772465, 0.60914867,
              0.85734792, 0.48925102, 0.33042839, 0.36606583, 0.57053967,
              0.93735144, 0.71829342, 0.66961964, 0.93041546, 0.88596249,
              0.93425073, 0.9927333 , 0.00442783, 0.87750816, 0.37539261,
              0.01733795, 0.89817786, 0.88904863, 0.87971738, 0.13930024,
              0.22335887, 0.40549545, 0.7788913 , 0.3103217 , 0.53389741,
              0.2067381 , 0.3098878 , 0.6481097 , 0.82829299, 0.58021664,
              0.55193656, 0.34471984, 0.48692029, 0.40178302, 0.64068672,
              0.72720756, 0.2329263 , 0.27251345, 0.96199179, 0.81288649,
              0.63917122, 0.77681125, 0.67988881, 0.50343128, 0.42762048,
              0.09218672, 0.14384724, 0.22664575, 0.15687441, 0.26006508,
              0.09656571, 0.22550285, 0.69862576, 0.95821122, 0.57309034,
              0.55187758, 0.74292286, 0.54381845, 0.50993508, 0.60674139,
              0.36554296, 0.4718163 , 0.32878223, 0.75594414, 0.95614925,
              0.66306326, 0.5185633 , 0.53908259, 0.03554549, 0.44998472,
              0.25427227, 0.53753672, 0.22486182, 0.49821095, 0.13800287,
              0.6877039 , 0.38102961, 0.14332334, 0.08247404, 0.15142319])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.29631905, 0.20024806, 0.58705152, 0.50105375, 0.90134845,
              0.87405559, 0.40361715, 0.48414815, 0.91572545, 0.23510832,
              0.30927266, 0.89121517, 0.60307471, 0.53024748, 0.50944305,
              0.38569589, 0.88154172, 0.42741919, 0.24850144, 0.65407522,
              0.50748045, 0.96211784, 0.53542608, 0.63224689, 0.29665959,
              0.3726648 , 0.35883501, 0.29851872, 0.5669092 , 0.81903198,
              0.11245542, 0.68013641, 0.97391377, 0.76649256, 0.1667542 ,
              0.41333667, 0.69053818, 0.7020738 , 0.19554892, 0.16969281,
              0.31098226, 0.53303159, 0.20132612, 0.65535619, 0.82252603,
              0.91433896, 0.60254691, 0.41581185, 0.91258768, 0.19068715,
              0.47972099, 0.862274  , 0.64244751, 0.50746067, 0.29925743,
              0.018612  , 0.01972907, 0.26688307, 0.22078212, 0.60245134,
              0.52680717, 0.74501375, 0.02852498, 0.46218807, 0.45287753,
              0.0729231 , 0.91983899, 0.88465586, 0.95273841, 0.15137552,
              0.43022818, 0.76583676, 0.71435458, 0.20428251, 0.88772326,
              0.04814922, 0.65842498, 0.23877736, 0.86279486, 0.25069885,
              0.97677487, 0.48184305, 0.40822893, 0.09470719, 0.47940379,
              0.83383688, 0.77211917, 0.19930039, 0.91119012, 0.74141807,
              0.21934442, 0.501633  , 0.1580944 , 0.39096639, 0.59716174,
              0.35327202, 0.9169544 , 0.79834371, 0.77414595, 0.60564526])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.05161432, 0.93291251, 0.48616793, 0.46313731, 0.85469132,
              0.25332569, 0.11174608, 0.70793069, 0.92996067, 0.57614211,
              0.15108679, 0.64542684, 0.11229058, 0.30539217, 0.82423147,
              0.70245399, 0.84266003, 0.25684066, 0.75476814, 0.88325494,
              0.13804843, 0.62101763, 0.9410387 , 0.36556376, 0.26546045,
              0.71216205, 0.37101447, 0.15106311, 0.31756902, 0.35087278,
              0.7822628 , 0.46380476, 0.35243715, 0.98683046, 0.65905985,
              0.38451035, 0.62755131, 0.54631546, 0.66344014, 0.88940598,
              0.48686592, 0.81280065, 0.5244077 , 0.25034082, 0.06007769,
              0.51480845, 0.27150193, 0.60019402, 0.74188562, 0.26566538,
              0.68506752, 0.99778431, 0.08451175, 0.77496789, 0.93546791,
              0.59581063, 0.12407116, 0.49798395, 0.22780688, 0.09223772,
              0.47170321, 0.88365603, 0.04424705, 0.57227649, 0.15177672,
              0.27660252, 0.15374339, 0.43247447, 0.57120752, 0.26245508,
              0.09594907, 0.64102598, 0.64050089, 0.35812129, 0.18415723,
              0.68128469, 0.51238202, 0.61423077, 0.73398039, 0.46782129,
              0.28277996, 0.82728423, 0.92220273, 0.05043144, 0.06150035,
              0.96911834, 0.27198258, 0.52584422, 0.61528039, 0.03229831,
              0.62617885, 0.74889759, 0.88521358, 0.86175862, 0.05981799,
              0.97462451, 0.0614298 , 0.95848012, 0.38012684, 0.11070917])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.01076423, 0.92823455, 0.29633929, 0.30277834, 0.2890385 ,
              0.93138244, 0.64415086, 0.99988968, 0.52241281, 0.06509628,
              0.60908126, 0.36182986, 0.03358107, 0.56314342, 0.69074253,
              0.80791705, 0.70905741, 0.89309236, 0.77313652, 0.92389375,
              0.25592888, 0.14070738, 0.40735178, 0.36814224, 0.31778751,
              0.29549018, 0.18074298, 0.55850446, 0.76798955, 0.33183299,
              0.36037163, 0.48399425, 0.33339616, 0.95880289, 0.12839515,
              0.11281856, 0.97996259, 0.84276133, 0.38058416, 0.62681002,
              0.35548948, 0.88200369, 0.92401632, 0.91359383, 0.55773844,
              0.8697109 , 0.25932605, 0.78550228, 0.87908751, 0.04903237,
              0.25181408, 0.85117796, 0.17632583, 0.18833852, 0.87477867,
              0.06673221, 0.30024927, 0.13341753, 0.27626946, 0.95807185,
              0.01955717, 0.18855792, 0.56503255, 0.44625422, 0.64001699,
              0.86308326, 0.93778641, 0.91651376, 0.87487816, 0.93107403,
              0.79861498, 0.97678284, 0.53187116, 0.61064912, 0.9427202 ,
              0.43345573, 0.11353418, 0.9119714 , 0.53291947, 0.55308905,
              0.8741186 , 0.64178322, 0.72296118, 0.05623548, 0.23024429,
              0.41562347, 0.73319551, 0.69149126, 0.75738763, 0.28625822,
              0.82751781, 0.7780032 , 0.15190085, 0.91391643, 0.39422827,
              0.58471188, 0.13513469, 0.12505969, 0.80525978, 0.88738212])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.17763307, 0.52082294, 0.3450197 , 0.66015584, 0.98214361,
              0.36231238, 0.08007515, 0.00705674, 0.38668481, 0.89048295,
              0.15285781, 0.48599292, 0.32216167, 0.28160333, 0.64884398,
              0.04072818, 0.52428791, 0.37455332, 0.41772465, 0.60914867,
              0.85734792, 0.48925102, 0.33042839, 0.36606583, 0.57053967,
              0.93735144, 0.71829342, 0.66961964, 0.93041546, 0.88596249,
              0.93425073, 0.9927333 , 0.00442783, 0.87750816, 0.37539261,
              0.01733795, 0.89817786, 0.88904863, 0.87971738, 0.13930024,
              0.22335887, 0.40549545, 0.7788913 , 0.3103217 , 0.53389741,
              0.2067381 , 0.3098878 , 0.6481097 , 0.82829299, 0.58021664,
              0.55193656, 0.34471984, 0.48692029, 0.40178302, 0.64068672,
              0.72720756, 0.2329263 , 0.27251345, 0.96199179, 0.81288649,
              0.63917122, 0.77681125, 0.67988881, 0.50343128, 0.42762048,
              0.09218672, 0.14384724, 0.22664575, 0.15687441, 0.26006508,
              0.09656571, 0.22550285, 0.69862576, 0.95821122, 0.57309034,
              0.55187758, 0.74292286, 0.54381845, 0.50993508, 0.60674139,
              0.36554296, 0.4718163 , 0.32878223, 0.75594414, 0.95614925,
              0.66306326, 0.5185633 , 0.53908259, 0.03554549, 0.44998472,
              0.25427227, 0.53753672, 0.22486182, 0.49821095, 0.13800287,
              0.6877039 , 0.38102961, 0.14332334, 0.08247404, 0.15142319])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.29631905, 0.20024806, 0.58705152, 0.50105375, 0.90134845,
              0.87405559, 0.40361715, 0.48414815, 0.91572545, 0.23510832,
              0.30927266, 0.89121517, 0.60307471, 0.53024748, 0.50944305,
              0.38569589, 0.88154172, 0.42741919, 0.24850144, 0.65407522,
              0.50748045, 0.96211784, 0.53542608, 0.63224689, 0.29665959,
              0.3726648 , 0.35883501, 0.29851872, 0.5669092 , 0.81903198,
              0.11245542, 0.68013641, 0.97391377, 0.76649256, 0.1667542 ,
              0.41333667, 0.69053818, 0.7020738 , 0.19554892, 0.16969281,
              0.31098226, 0.53303159, 0.20132612, 0.65535619, 0.82252603,
              0.91433896, 0.60254691, 0.41581185, 0.91258768, 0.19068715,
              0.47972099, 0.862274  , 0.64244751, 0.50746067, 0.29925743,
              0.018612  , 0.01972907, 0.26688307, 0.22078212, 0.60245134,
              0.52680717, 0.74501375, 0.02852498, 0.46218807, 0.45287753,
              0.0729231 , 0.91983899, 0.88465586, 0.95273841, 0.15137552,
              0.43022818, 0.76583676, 0.71435458, 0.20428251, 0.88772326,
              0.04814922, 0.65842498, 0.23877736, 0.86279486, 0.25069885,
              0.97677487, 0.48184305, 0.40822893, 0.09470719, 0.47940379,
              0.83383688, 0.77211917, 0.19930039, 0.91119012, 0.74141807,
              0.21934442, 0.501633  , 0.1580944 , 0.39096639, 0.59716174,
              0.35327202, 0.9169544 , 0.79834371, 0.77414595, 0.60564526])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.05161432, 0.93291251, 0.48616793, 0.46313731, 0.85469132,
              0.25332569, 0.11174608, 0.70793069, 0.92996067, 0.57614211,
              0.15108679, 0.64542684, 0.11229058, 0.30539217, 0.82423147,
              0.70245399, 0.84266003, 0.25684066, 0.75476814, 0.88325494,
              0.13804843, 0.62101763, 0.9410387 , 0.36556376, 0.26546045,
              0.71216205, 0.37101447, 0.15106311, 0.31756902, 0.35087278,
              0.7822628 , 0.46380476, 0.35243715, 0.98683046, 0.65905985,
              0.38451035, 0.62755131, 0.54631546, 0.66344014, 0.88940598,
              0.48686592, 0.81280065, 0.5244077 , 0.25034082, 0.06007769,
              0.51480845, 0.27150193, 0.60019402, 0.74188562, 0.26566538,
              0.68506752, 0.99778431, 0.08451175, 0.77496789, 0.93546791,
              0.59581063, 0.12407116, 0.49798395, 0.22780688, 0.09223772,
              0.47170321, 0.88365603, 0.04424705, 0.57227649, 0.15177672,
              0.27660252, 0.15374339, 0.43247447, 0.57120752, 0.26245508,
              0.09594907, 0.64102598, 0.64050089, 0.35812129, 0.18415723,
              0.68128469, 0.51238202, 0.61423077, 0.73398039, 0.46782129,
              0.28277996, 0.82728423, 0.92220273, 0.05043144, 0.06150035,
              0.96911834, 0.27198258, 0.52584422, 0.61528039, 0.03229831,
              0.62617885, 0.74889759, 0.88521358, 0.86175862, 0.05981799,
              0.97462451, 0.0614298 , 0.95848012, 0.38012684, 0.11070917])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.61166448, 0.58825911, 0.14424136, 0.06466852, 0.03127963,
              0.86766252, 0.61190384, 0.21082283, 0.83533806, 0.47218624,
              0.65754016, 0.07419718, 0.36997408, 0.10811009, 0.41825015,
              0.85758568, 0.4473444 , 0.14899347, 0.60057117, 0.28281231,
              0.64725944, 0.55928629, 0.09485968, 0.26885202, 0.11611697,
              0.16543601, 0.3577876 , 0.57312358, 0.68823778, 0.53013429,
              0.5021778 , 0.5836492 , 0.46559721, 0.6343293 , 0.50254689,
              0.83394101, 0.6489711 , 0.89868886, 0.98809949, 0.51924421,
              0.53626218, 0.84724624, 0.11472329, 0.12777986, 0.516851  ,
              0.41495806, 0.04132158, 0.4482902 , 0.11728548, 0.15462865,
              0.73586786, 0.3216812 , 0.40914618, 0.38289395, 0.51805382,
              0.2377582 , 0.70700446, 0.2203388 , 0.16331786, 0.25078901,
              0.22853962, 0.79916041, 0.2273484 , 0.91914905, 0.54554414,
              0.46929721, 0.96998046, 0.15275082, 0.11049164, 0.36115064,
              0.29141945, 0.5951569 , 0.27419266, 0.67102805, 0.43469268,
              0.3605922 , 0.02511507, 0.03705623, 0.1336264 , 0.89981818,
              0.87445006, 0.86727476, 0.37521645, 0.03240764, 0.34568331,
              0.41105817, 0.16257221, 0.95429965, 0.26402613, 0.56984111,
              0.84463326, 0.59800641, 0.31553149, 0.7030967 , 0.35551318,
              0.02219737, 0.0794466 , 0.54896285, 0.37219371, 0.50638714])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.51440411, 0.20871496, 0.70446507, 0.0519523 , 0.51176916,
              0.74945379, 0.94687543, 0.67053428, 0.69395553, 0.15932892,
              0.2489062 , 0.40175143, 0.80895343, 0.10456974, 0.88217089,
              0.33248014, 0.0437757 , 0.86358068, 0.09011102, 0.16658133,
              0.98478381, 0.28590371, 0.17467428, 0.99064877, 0.06145444,
              0.49837372, 0.83016078, 0.70350685, 0.22090544, 0.62595503,
              0.27944158, 0.58139018, 0.03971699, 0.32854489, 0.57829232,
              0.76624525, 0.29881167, 0.80403892, 0.9493193 , 0.4543257 ,
              0.22859913, 0.68345371, 0.37579562, 0.67622085, 0.49896306,
              0.70106381, 0.23559279, 0.72395382, 0.28141846, 0.71684031,
              0.74663639, 0.7755056 , 0.34237753, 0.89061352, 0.30102178,
              0.7469259 , 0.79182648, 0.23615057, 0.44441013, 0.03672322,
              0.31144064, 0.95206753, 0.42108714, 0.84263599, 0.55410535,
              0.86344067, 0.60480857, 0.80324536, 0.6595211 , 0.86529161,
              0.6071465 , 0.64200314, 0.36513645, 0.54418921, 0.34917341,
              0.46142566, 0.91040544, 0.68690036, 0.63463363, 0.0882491 ,
              0.4265454 , 0.436382  , 0.15821558, 0.90640798, 0.12001177,
              0.79318206, 0.83960453, 0.48085354, 0.14164741, 0.82415458,
              0.81492354, 0.45293448, 0.12103178, 0.32230569, 0.28073185,
              0.14812598, 0.20795987, 0.39739393, 0.40928658, 0.95506512])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.39526455, 0.519932  , 0.75837623, 0.17642862, 0.06442266,
              0.20539627, 0.21580705, 0.19403104, 0.48926116, 0.2468265 ,
              0.39974383, 0.40780117, 0.28631243, 0.22971523, 0.60862446,
              0.99288889, 0.91311895, 0.74352893, 0.27333957, 0.81006876,
              0.62320042, 0.11985405, 0.49855418, 0.72970241, 0.81490011,
              0.44464934, 0.60859041, 0.56171452, 0.22781936, 0.41798477,
              0.0381528 , 0.40937162, 0.81011607, 0.66725264, 0.96465783,
              0.5641963 , 0.48617516, 0.57977691, 0.8627555 , 0.39962652,
              0.80424499, 0.92397268, 0.67570177, 0.66713467, 0.18544781,
              0.2096904 , 0.91520666, 0.39844155, 0.28163964, 0.61760488,
              0.28197573, 0.80870175, 0.72213074, 0.90041792, 0.63469877,
              0.14873412, 0.32538507, 0.78472008, 0.27290903, 0.48813848,
              0.12170114, 0.58179526, 0.26883961, 0.51992603, 0.858781  ,
              0.43559244, 0.32932821, 0.86708181, 0.51621407, 0.41237596,
              0.34034151, 0.83266395, 0.66193776, 0.41116933, 0.72509026,
              0.83910213, 0.78435623, 0.9369082 , 0.21189501, 0.67509466,
              0.55279729, 0.03119791, 0.71276385, 0.58481466, 0.55332751,
              0.98067511, 0.66173582, 0.26249163, 0.67629147, 0.89520329,
              0.69680937, 0.09005079, 0.81518054, 0.42980013, 0.93767938,
              0.80238276, 0.32924643, 0.28876423, 0.24758615, 0.69214794])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.547803  , 0.82207729, 0.08701064, 0.47825873, 0.19314106,
              0.89341681, 0.74467975, 0.36536056, 0.2614058 , 0.2045108 ,
              0.68607977, 0.86197775, 0.55908135, 0.82935171, 0.79931233,
              0.56823141, 0.21549527, 0.31318964, 0.29665192, 0.50003762,
              0.2311025 , 0.07929191, 0.47420259, 0.3827854 , 0.47076556,
              0.32721317, 0.40641252, 0.6128688 , 0.92270815, 0.65863115,
              0.22195647, 0.49930673, 0.80062902, 0.67708232, 0.15494881,
              0.01906248, 0.4586648 , 0.74298268, 0.49862355, 0.90388186,
              0.06857452, 0.39984388, 0.20117226, 0.768324  , 0.03511026,
              0.9505319 , 0.13840873, 0.97819036, 0.03279785, 0.170693  ,
              0.0648815 , 0.32086403, 0.0592309 , 0.51457749, 0.70445055,
              0.80808359, 0.32607516, 0.78052145, 0.43485032, 0.76297546,
              0.49866844, 0.91521354, 0.04119458, 0.43307979, 0.13326015,
              0.03264174, 0.19534143, 0.19492071, 0.15524431, 0.77995072,
              0.30191575, 0.89020408, 0.01970664, 0.73309904, 0.69783237,
              0.23537847, 0.64256366, 0.31365702, 0.50007599, 0.37050415,
              0.61643008, 0.3860279 , 0.92258297, 0.68036796, 0.13672346,
              0.73859002, 0.737181  , 0.36750441, 0.78719734, 0.79924808,
              0.81612923, 0.36859878, 0.79367297, 0.20312156, 0.76818862,
              0.02484716, 0.58617791, 0.80448786, 0.69447326, 0.69252331])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.79446691, 0.38622311, 0.17600885, 0.60334852, 0.62805672,
              0.62605144, 0.2148067 , 0.36871118, 0.828889  , 0.72105125,
              0.99923745, 0.51959046, 0.72380573, 0.62157599, 0.97025669,
              0.96605231, 0.15844392, 0.76047125, 0.33475038, 0.43633017,
              0.89020277, 0.5906084 , 0.27251645, 0.66512759, 0.07998361,
              0.65233298, 0.27787541, 0.90399079, 0.40617134, 0.99448622,
              0.12265153, 0.4049626 , 0.01744039, 0.6092758 , 0.02451753,
              0.51759393, 0.68007808, 0.39270552, 0.62238329, 0.16884103,
              0.62960483, 0.18801898, 0.17425528, 0.72887659, 0.00277688,
              0.25933787, 0.98979823, 0.70677903, 0.50482459, 0.33506106,
              0.74391382, 0.7990968 , 0.5932549 , 0.0442502 , 0.47332539,
              0.25202086, 0.60562233, 0.76378889, 0.34751404, 0.73401443,
              0.85196047, 0.80053841, 0.88119318, 0.29528919, 0.89610866,
              0.49257738, 0.02515472, 0.10227472, 0.846847  , 0.76517359,
              0.04901092, 0.70383411, 0.06737715, 0.47311924, 0.05435817,
              0.59377484, 0.82971585, 0.52997682, 0.6541597 , 0.70970686,
              0.18878267, 0.81177532, 0.84866718, 0.5610254 , 0.51943571,
              0.62269177, 0.63292263, 0.41692451, 0.30711423, 0.5141644 ,
              0.04805514, 0.35528738, 0.49768708, 0.92221602, 0.99048934,
              0.84806922, 0.25444333, 0.93184035, 0.34505024, 0.65506632])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.51440411, 0.20871496, 0.70446507, 0.0519523 , 0.51176916,
              0.74945379, 0.94687543, 0.67053428, 0.69395553, 0.15932892,
              0.2489062 , 0.40175143, 0.80895343, 0.10456974, 0.88217089,
              0.33248014, 0.0437757 , 0.86358068, 0.09011102, 0.16658133,
              0.98478381, 0.28590371, 0.17467428, 0.99064877, 0.06145444,
              0.49837372, 0.83016078, 0.70350685, 0.22090544, 0.62595503,
              0.27944158, 0.58139018, 0.03971699, 0.32854489, 0.57829232,
              0.76624525, 0.29881167, 0.80403892, 0.9493193 , 0.4543257 ,
              0.22859913, 0.68345371, 0.37579562, 0.67622085, 0.49896306,
              0.70106381, 0.23559279, 0.72395382, 0.28141846, 0.71684031,
              0.74663639, 0.7755056 , 0.34237753, 0.89061352, 0.30102178,
              0.7469259 , 0.79182648, 0.23615057, 0.44441013, 0.03672322,
              0.31144064, 0.95206753, 0.42108714, 0.84263599, 0.55410535,
              0.86344067, 0.60480857, 0.80324536, 0.6595211 , 0.86529161,
              0.6071465 , 0.64200314, 0.36513645, 0.54418921, 0.34917341,
              0.46142566, 0.91040544, 0.68690036, 0.63463363, 0.0882491 ,
              0.4265454 , 0.436382  , 0.15821558, 0.90640798, 0.12001177,
              0.79318206, 0.83960453, 0.48085354, 0.14164741, 0.82415458,
              0.81492354, 0.45293448, 0.12103178, 0.32230569, 0.28073185,
              0.14812598, 0.20795987, 0.39739393, 0.40928658, 0.95506512])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.39526455, 0.519932  , 0.75837623, 0.17642862, 0.06442266,
              0.20539627, 0.21580705, 0.19403104, 0.48926116, 0.2468265 ,
              0.39974383, 0.40780117, 0.28631243, 0.22971523, 0.60862446,
              0.99288889, 0.91311895, 0.74352893, 0.27333957, 0.81006876,
              0.62320042, 0.11985405, 0.49855418, 0.72970241, 0.81490011,
              0.44464934, 0.60859041, 0.56171452, 0.22781936, 0.41798477,
              0.0381528 , 0.40937162, 0.81011607, 0.66725264, 0.96465783,
              0.5641963 , 0.48617516, 0.57977691, 0.8627555 , 0.39962652,
              0.80424499, 0.92397268, 0.67570177, 0.66713467, 0.18544781,
              0.2096904 , 0.91520666, 0.39844155, 0.28163964, 0.61760488,
              0.28197573, 0.80870175, 0.72213074, 0.90041792, 0.63469877,
              0.14873412, 0.32538507, 0.78472008, 0.27290903, 0.48813848,
              0.12170114, 0.58179526, 0.26883961, 0.51992603, 0.858781  ,
              0.43559244, 0.32932821, 0.86708181, 0.51621407, 0.41237596,
              0.34034151, 0.83266395, 0.66193776, 0.41116933, 0.72509026,
              0.83910213, 0.78435623, 0.9369082 , 0.21189501, 0.67509466,
              0.55279729, 0.03119791, 0.71276385, 0.58481466, 0.55332751,
              0.98067511, 0.66173582, 0.26249163, 0.67629147, 0.89520329,
              0.69680937, 0.09005079, 0.81518054, 0.42980013, 0.93767938,
              0.80238276, 0.32924643, 0.28876423, 0.24758615, 0.69214794])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.547803  , 0.82207729, 0.08701064, 0.47825873, 0.19314106,
              0.89341681, 0.74467975, 0.36536056, 0.2614058 , 0.2045108 ,
              0.68607977, 0.86197775, 0.55908135, 0.82935171, 0.79931233,
              0.56823141, 0.21549527, 0.31318964, 0.29665192, 0.50003762,
              0.2311025 , 0.07929191, 0.47420259, 0.3827854 , 0.47076556,
              0.32721317, 0.40641252, 0.6128688 , 0.92270815, 0.65863115,
              0.22195647, 0.49930673, 0.80062902, 0.67708232, 0.15494881,
              0.01906248, 0.4586648 , 0.74298268, 0.49862355, 0.90388186,
              0.06857452, 0.39984388, 0.20117226, 0.768324  , 0.03511026,
              0.9505319 , 0.13840873, 0.97819036, 0.03279785, 0.170693  ,
              0.0648815 , 0.32086403, 0.0592309 , 0.51457749, 0.70445055,
              0.80808359, 0.32607516, 0.78052145, 0.43485032, 0.76297546,
              0.49866844, 0.91521354, 0.04119458, 0.43307979, 0.13326015,
              0.03264174, 0.19534143, 0.19492071, 0.15524431, 0.77995072,
              0.30191575, 0.89020408, 0.01970664, 0.73309904, 0.69783237,
              0.23537847, 0.64256366, 0.31365702, 0.50007599, 0.37050415,
              0.61643008, 0.3860279 , 0.92258297, 0.68036796, 0.13672346,
              0.73859002, 0.737181  , 0.36750441, 0.78719734, 0.79924808,
              0.81612923, 0.36859878, 0.79367297, 0.20312156, 0.76818862,
              0.02484716, 0.58617791, 0.80448786, 0.69447326, 0.69252331])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.46456324, 0.86440876, 0.20169425, 0.3409655 , 0.43270234,
              0.93954598, 0.77074864, 0.82184937, 0.62076206, 0.48352643,
              0.9903107 , 0.04743649, 0.30120475, 0.16767618, 0.04263239,
              0.6850349 , 0.67650236, 0.59036183, 0.84398875, 0.03127217,
              0.12728398, 0.54798176, 0.03426268, 0.74258618, 0.06495412,
              0.0554294 , 0.36420462, 0.6679409 , 0.79821076, 0.29929962,
              0.28189623, 0.82313317, 0.45616425, 0.41587004, 0.40570324,
              0.16359511, 0.58268147, 0.7707678 , 0.92773236, 0.42487111,
              0.72358841, 0.45250109, 0.1426683 , 0.66897598, 0.56133286,
              0.34159727, 0.59027874, 0.01158842, 0.19567907, 0.72677538,
              0.21044368, 0.44326143, 0.45065209, 0.38871001, 0.35127485,
              0.25851242, 0.18744209, 0.05019283, 0.58156147, 0.49825703,
              0.3723783 , 0.25960426, 0.3318323 , 0.25184681, 0.12796377,
              0.85017951, 0.59837372, 0.54432952, 0.47025492, 0.55256607,
              0.26091944, 0.67024553, 0.26485973, 0.13074923, 0.52092277,
              0.28645398, 0.72816821, 0.29627014, 0.83177273, 0.73466706,
              0.46690286, 0.03160272, 0.31294535, 0.91183301, 0.80370148,
              0.98588414, 0.91423088, 0.13566097, 0.48518722, 0.52509016,
              0.1877229 , 0.12082515, 0.73572633, 0.96389734, 0.15071501,
              0.19996472, 0.53119201, 0.92868055, 0.49049426, 0.50046023])}]]


