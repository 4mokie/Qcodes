
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='9a579e5c-c098-4cb6-9d3e-787c4a36f59a'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='a80693b4-3d0c-4f33-ac7f-0c0385f1e76e'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.291868768006245],
     [0.225638821986236],
     [0.464458006846569],
     [0.796714557714259],
     [0.853702661889371],
     [0.499740855581482],
     [0.661027993815494],
     [0.0456618593201917],
     [0.888337795417172],
     [0.656084700165686],
     [0.257133879849038],
     [0.282085358563862],
     [0.161842989426145],
     [0.0693186255802918],
     [0.817496612093908],
     [0.648130839687055],
     [0.38185490409478],
     [0.111311389741611],
     [0.936284370374585],
     [0.877915932287264],
     [0.848075845441826],
     [0.819865326617234],
     [0.198102376028808],
     [0.778801920573942],
     [0.00453949910688145],
     [0.505089421093531],
     [0.777024142420776],
     [0.348624373327009],
     [0.869606214877654],
     [0.19267990544877],
     [0.271234233523076],
     [0.913245704299327],
     [0.962111252517136],
     [0.765044234538307],
     [0.29843802754508],
     [0.950768237334434],
     [0.297891431271253],
     [0.322678409272431],
     [0.369876986518801],
     [0.830813184218451],
     [0.383042141556265],
     [0.314040254700274],
     [0.00960626992877878],
     [0.346812711926328],
     [0.846650428652122],
     [0.858999542126057],
     [0.572310004631508],
     [0.946982412356364],
     [0.732820012497325],
     [0.630686225805489],
     [0.685031859040548],
     [0.818037036812367],
     [0.0281257215765932],
     [0.430869433329796],
     [0.504499880252725],
     [0.181247021233814],
     [0.219365532823272],
     [0.67151549968826],
     [0.53970414620616],
     [0.104250715410964],
     [0.906345426892044],
     [0.906523597357029],
     [0.623496336998388],
     [0.429373078532554],
     [0.668311623919347],
     [0.982096438928295],
     [0.959552698456995],
     [0.0389418416914206],
     [0.37722139182334],
     [0.00533226299764034],
     [0.680347649280437],
     [0.512841616013534],
     [0.844023403265784],
     [0.931565782908166],
     [0.985337501234047],
     [0.0484161876151945],
     [0.717749590247717],
     [0.211139619951119],
     [0.196366785416967],
     [0.871001035695851],
     [0.610965405369371],
     [0.0236784638992381],
     [0.336505848573925],
     [0.419625695346868],
     [0.698846042184072],
     [0.439768832281228],
     [0.657982876549334],
     [0.660052830964822],
     [0.809406954069744],
     [0.821811415631521],
     [0.853132239027763],
     [0.712914491253318],
     [0.0788371149311933],
     [0.969083023356985],
     [0.867219474383253],
     [0.677657722190396],
     [0.208320736811863],
     [0.959797782089038],
     [0.997605477697933],
     [0.152057380486869]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.82322511])],
     [array([0.9822189])],
     [array([0.39601479])],
     [array([0.271358])],
     [array([0.7491254])],
     [array([0.85781862])],
     [array([0.72209838])],
     [array([0.07694144])],
     [array([0.93007442])],
     [array([0.99401167])],
     [array([0.32973707])],
     [array([0.0539784])],
     [array([0.66736369])],
     [array([0.5837508])],
     [array([0.5011875])],
     [array([0.26450415])],
     [array([0.15262981])],
     [array([0.25080196])],
     [array([0.55782311])],
     [array([0.60480844])],
     [array([0.50881384])],
     [array([0.42059567])],
     [array([0.24808598])],
     [array([0.45135588])],
     [array([0.10683793])],
     [array([0.91148391])],
     [array([0.80275065])],
     [array([0.19467714])],
     [array([0.35694347])],
     [array([0.15963838])],
     [array([0.80430235])],
     [array([0.35092442])],
     [array([0.59830469])],
     [array([0.41609473])],
     [array([0.33872642])],
     [array([0.11304993])],
     [array([0.65120971])],
     [array([0.98276506])],
     [array([0.65106518])],
     [array([0.96275417])],
     [array([0.72639011])],
     [array([0.88731119])],
     [array([0.19940845])],
     [array([0.62206747])],
     [array([0.51088685])],
     [array([0.19239715])],
     [array([0.08460781])],
     [array([0.8887882])],
     [array([0.89966508])],
     [array([0.19183828])],
     [array([0.43925038])],
     [array([0.23058509])],
     [array([0.75566629])],
     [array([0.52768904])],
     [array([0.57487998])],
     [array([0.4799363])],
     [array([0.81669693])],
     [array([0.18379957])],
     [array([0.18328077])],
     [array([0.36500049])],
     [array([0.85036026])],
     [array([0.78289511])],
     [array([0.15615371])],
     [array([0.62510928])],
     [array([0.66152422])],
     [array([0.76140722])],
     [array([0.96787212])],
     [array([0.12751308])],
     [array([0.82167509])],
     [array([0.08850349])],
     [array([0.31265133])],
     [array([0.48909137])],
     [array([0.98710119])],
     [array([0.25604595])],
     [array([0.66272389])],
     [array([0.79082032])],
     [array([0.5586168])],
     [array([0.16178173])],
     [array([0.50273693])],
     [array([0.82420454])],
     [array([0.35260419])],
     [array([0.87550667])],
     [array([0.78875453])],
     [array([0.21797445])],
     [array([0.17018449])],
     [array([0.23783056])],
     [array([0.48759814])],
     [array([0.51259567])],
     [array([0.84439446])],
     [array([0.81183934])],
     [array([0.43983814])],
     [array([0.56855261])],
     [array([0.98269436])],
     [array([0.44561286])],
     [array([0.87599944])],
     [array([0.87630765])],
     [array([0.91055801])],
     [array([0.25255698])],
     [array([0.19128328])],
     [array([0.83935367])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.82322511, 0.9822189 , 0.39601479, 0.271358  , 0.7491254 ,
           0.85781862, 0.72209838, 0.07694144, 0.93007442, 0.99401167,
           0.32973707, 0.0539784 , 0.66736369, 0.5837508 , 0.5011875 ,
           0.26450415, 0.15262981, 0.25080196, 0.55782311, 0.60480844,
           0.50881384, 0.42059567, 0.24808598, 0.45135588, 0.10683793,
           0.91148391, 0.80275065, 0.19467714, 0.35694347, 0.15963838,
           0.80430235, 0.35092442, 0.59830469, 0.41609473, 0.33872642,
           0.11304993, 0.65120971, 0.98276506, 0.65106518, 0.96275417,
           0.72639011, 0.88731119, 0.19940845, 0.62206747, 0.51088685,
           0.19239715, 0.08460781, 0.8887882 , 0.89966508, 0.19183828,
           0.43925038, 0.23058509, 0.75566629, 0.52768904, 0.57487998,
           0.4799363 , 0.81669693, 0.18379957, 0.18328077, 0.36500049,
           0.85036026, 0.78289511, 0.15615371, 0.62510928, 0.66152422,
           0.76140722, 0.96787212, 0.12751308, 0.82167509, 0.08850349,
           0.31265133, 0.48909137, 0.98710119, 0.25604595, 0.66272389,
           0.79082032, 0.5586168 , 0.16178173, 0.50273693, 0.82420454,
           0.35260419, 0.87550667, 0.78875453, 0.21797445, 0.17018449,
           0.23783056, 0.48759814, 0.51259567, 0.84439446, 0.81183934,
           0.43983814, 0.56855261, 0.98269436, 0.44561286, 0.87599944,
           0.87630765, 0.91055801, 0.25255698, 0.19128328, 0.83935367])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.29186877, 0.22563882, 0.46445801, 0.79671456, 0.85370266,
              0.49974086, 0.66102799, 0.04566186, 0.8883378 , 0.6560847 ,
              0.25713388, 0.28208536, 0.16184299, 0.06931863, 0.81749661,
              0.64813084, 0.3818549 , 0.11131139, 0.93628437, 0.87791593,
              0.84807585, 0.81986533, 0.19810238, 0.77880192, 0.0045395 ,
              0.50508942, 0.77702414, 0.34862437, 0.86960621, 0.19267991,
              0.27123423, 0.9132457 , 0.96211125, 0.76504423, 0.29843803,
              0.95076824, 0.29789143, 0.32267841, 0.36987699, 0.83081318,
              0.38304214, 0.31404025, 0.00960627, 0.34681271, 0.84665043,
              0.85899954, 0.57231   , 0.94698241, 0.73282001, 0.63068623,
              0.68503186, 0.81803704, 0.02812572, 0.43086943, 0.50449988,
              0.18124702, 0.21936553, 0.6715155 , 0.53970415, 0.10425072,
              0.90634543, 0.9065236 , 0.62349634, 0.42937308, 0.66831162,
              0.98209644, 0.9595527 , 0.03894184, 0.37722139, 0.00533226,
              0.68034765, 0.51284162, 0.8440234 , 0.93156578, 0.9853375 ,
              0.04841619, 0.71774959, 0.21113962, 0.19636679, 0.87100104,
              0.61096541, 0.02367846, 0.33650585, 0.4196257 , 0.69884604,
              0.43976883, 0.65798288, 0.66005283, 0.80940695, 0.82181142,
              0.85313224, 0.71291449, 0.07883711, 0.96908302, 0.86721947,
              0.67765772, 0.20832074, 0.95979778, 0.99760548, 0.15205738])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.42093126, 0.8716572 , 0.59043522, 0.46642217, 0.11787763,
              0.15282114, 0.4409392 , 0.66709721, 0.63267072, 0.87321815,
              0.05569421, 0.93378246, 0.86344203, 0.26418656, 0.43146994,
              0.77964008, 0.71386639, 0.62431003, 0.87855607, 0.13086469,
              0.80714986, 0.80282412, 0.52995475, 0.82882366, 0.82141616,
              0.41753993, 0.91501852, 0.48594604, 0.54878797, 0.35421375,
              0.48861978, 0.48896133, 0.643     , 0.65977951, 0.19583617,
              0.26300832, 0.52644961, 0.3271178 , 0.01072892, 0.82537041,
              0.91563348, 0.78179176, 0.57773346, 0.50627337, 0.40998655,
              0.78937728, 0.83898584, 0.50612554, 0.77513952, 0.04832471,
              0.18022762, 0.96381727, 0.41973578, 0.84062456, 0.52463215,
              0.3266559 , 0.72149337, 0.99629713, 0.60601623, 0.1439414 ,
              0.40005359, 0.40163163, 0.52609602, 0.09599197, 0.8315975 ,
              0.35992916, 0.16712628, 0.35075512, 0.37833981, 0.24240603,
              0.61423615, 0.09653645, 0.46243123, 0.44179927, 0.35497646,
              0.69160228, 0.05915595, 0.03692554, 0.69969194, 0.32243954,
              0.80251923, 0.15729755, 0.59777858, 0.70427791, 0.55003554,
              0.12388273, 0.84916702, 0.57975006, 0.84490432, 0.35304427,
              0.88203854, 0.39550416, 0.06555726, 0.24774003, 0.71042744,
              0.53373125, 0.75255528, 0.22260296, 0.87326955, 0.20399517])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.67609784, 0.71144732, 0.44548773, 0.34355141, 0.73854567,
              0.26214936, 0.22425582, 0.69158346, 0.59337236, 0.77711282,
              0.12574965, 0.84467409, 0.99680888, 0.2507433 , 0.2097471 ,
              0.11611911, 0.22111422, 0.78335139, 0.37795802, 0.6595926 ,
              0.97259905, 0.6471059 , 0.43280281, 0.88107977, 0.89660774,
              0.38095448, 0.53392607, 0.977112  , 0.52820702, 0.05365051,
              0.96556147, 0.07474812, 0.20638839, 0.9327561 , 0.03814473,
              0.15018121, 0.96884902, 0.7023345 , 0.47513573, 0.0608618 ,
              0.46565   , 0.13808888, 0.34062456, 0.33140455, 0.94126673,
              0.61083579, 0.67845593, 0.07728785, 0.23855675, 0.22040027,
              0.76735621, 0.03092227, 0.53069895, 0.28735275, 0.97474425,
              0.25625015, 0.09683565, 0.48802318, 0.34628428, 0.90082438,
              0.20472448, 0.07356441, 0.48586338, 0.85209765, 0.62316781,
              0.00642376, 0.16338068, 0.22434138, 0.15202981, 0.75599815,
              0.15561201, 0.09844425, 0.71540207, 0.41799907, 0.22986385,
              0.08867041, 0.26084647, 0.59659073, 0.91808479, 0.40987675,
              0.59037509, 0.57697176, 0.18726066, 0.05755626, 0.62174203,
              0.18965768, 0.24638764, 0.48885338, 0.26952431, 0.4912065 ,
              0.5520299 , 0.35425539, 0.35961589, 0.73418321, 0.36848268,
              0.59277249, 0.05915381, 0.92942481, 0.1768207 , 0.27155248])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.06877222, 0.75210284, 0.07546413, 0.29636316, 0.06235758,
              0.40255603, 0.84592241, 0.63631584, 0.81513591, 0.91881264,
              0.6227519 , 0.30456889, 0.45927708, 0.1612419 , 0.56409327,
              0.73333635, 0.58919632, 0.76159513, 0.45671325, 0.98915819,
              0.1134014 , 0.17609693, 0.48256211, 0.77862901, 0.32990458,
              0.29368992, 0.58219907, 0.08048401, 0.83050376, 0.17503115,
              0.31325575, 0.32415074, 0.28965639, 0.95746588, 0.46908193,
              0.39447088, 0.25070887, 0.89764662, 0.06275829, 0.28018881,
              0.43842233, 0.81946756, 0.03783314, 0.40526146, 0.47795613,
              0.26468849, 0.38700181, 0.8509814 , 0.16497051, 0.04862519,
              0.49371867, 0.56268104, 0.54149588, 0.9298315 , 0.08169761,
              0.90017272, 0.38330135, 0.30456759, 0.20743222, 0.12094646,
              0.57611837, 0.5856419 , 0.345003  , 0.09846187, 0.71976268,
              0.43747311, 0.57360274, 0.41381973, 0.12057428, 0.76977966,
              0.43738359, 0.75861846, 0.25812812, 0.20968501, 0.58320743,
              0.12390485, 0.11085839, 0.47365347, 0.94960156, 0.23892651,
              0.80060585, 0.6384075 , 0.25809223, 0.66995084, 0.8393147 ,
              0.16609613, 0.18648408, 0.18512196, 0.67435605, 0.77860935,
              0.85793728, 0.93376674, 0.24585622, 0.33986752, 0.40304828,
              0.50379776, 0.93058675, 0.97910518, 0.32846133, 0.93715369])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.29186877, 0.22563882, 0.46445801, 0.79671456, 0.85370266,
              0.49974086, 0.66102799, 0.04566186, 0.8883378 , 0.6560847 ,
              0.25713388, 0.28208536, 0.16184299, 0.06931863, 0.81749661,
              0.64813084, 0.3818549 , 0.11131139, 0.93628437, 0.87791593,
              0.84807585, 0.81986533, 0.19810238, 0.77880192, 0.0045395 ,
              0.50508942, 0.77702414, 0.34862437, 0.86960621, 0.19267991,
              0.27123423, 0.9132457 , 0.96211125, 0.76504423, 0.29843803,
              0.95076824, 0.29789143, 0.32267841, 0.36987699, 0.83081318,
              0.38304214, 0.31404025, 0.00960627, 0.34681271, 0.84665043,
              0.85899954, 0.57231   , 0.94698241, 0.73282001, 0.63068623,
              0.68503186, 0.81803704, 0.02812572, 0.43086943, 0.50449988,
              0.18124702, 0.21936553, 0.6715155 , 0.53970415, 0.10425072,
              0.90634543, 0.9065236 , 0.62349634, 0.42937308, 0.66831162,
              0.98209644, 0.9595527 , 0.03894184, 0.37722139, 0.00533226,
              0.68034765, 0.51284162, 0.8440234 , 0.93156578, 0.9853375 ,
              0.04841619, 0.71774959, 0.21113962, 0.19636679, 0.87100104,
              0.61096541, 0.02367846, 0.33650585, 0.4196257 , 0.69884604,
              0.43976883, 0.65798288, 0.66005283, 0.80940695, 0.82181142,
              0.85313224, 0.71291449, 0.07883711, 0.96908302, 0.86721947,
              0.67765772, 0.20832074, 0.95979778, 0.99760548, 0.15205738])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.42093126, 0.8716572 , 0.59043522, 0.46642217, 0.11787763,
              0.15282114, 0.4409392 , 0.66709721, 0.63267072, 0.87321815,
              0.05569421, 0.93378246, 0.86344203, 0.26418656, 0.43146994,
              0.77964008, 0.71386639, 0.62431003, 0.87855607, 0.13086469,
              0.80714986, 0.80282412, 0.52995475, 0.82882366, 0.82141616,
              0.41753993, 0.91501852, 0.48594604, 0.54878797, 0.35421375,
              0.48861978, 0.48896133, 0.643     , 0.65977951, 0.19583617,
              0.26300832, 0.52644961, 0.3271178 , 0.01072892, 0.82537041,
              0.91563348, 0.78179176, 0.57773346, 0.50627337, 0.40998655,
              0.78937728, 0.83898584, 0.50612554, 0.77513952, 0.04832471,
              0.18022762, 0.96381727, 0.41973578, 0.84062456, 0.52463215,
              0.3266559 , 0.72149337, 0.99629713, 0.60601623, 0.1439414 ,
              0.40005359, 0.40163163, 0.52609602, 0.09599197, 0.8315975 ,
              0.35992916, 0.16712628, 0.35075512, 0.37833981, 0.24240603,
              0.61423615, 0.09653645, 0.46243123, 0.44179927, 0.35497646,
              0.69160228, 0.05915595, 0.03692554, 0.69969194, 0.32243954,
              0.80251923, 0.15729755, 0.59777858, 0.70427791, 0.55003554,
              0.12388273, 0.84916702, 0.57975006, 0.84490432, 0.35304427,
              0.88203854, 0.39550416, 0.06555726, 0.24774003, 0.71042744,
              0.53373125, 0.75255528, 0.22260296, 0.87326955, 0.20399517])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.67609784, 0.71144732, 0.44548773, 0.34355141, 0.73854567,
              0.26214936, 0.22425582, 0.69158346, 0.59337236, 0.77711282,
              0.12574965, 0.84467409, 0.99680888, 0.2507433 , 0.2097471 ,
              0.11611911, 0.22111422, 0.78335139, 0.37795802, 0.6595926 ,
              0.97259905, 0.6471059 , 0.43280281, 0.88107977, 0.89660774,
              0.38095448, 0.53392607, 0.977112  , 0.52820702, 0.05365051,
              0.96556147, 0.07474812, 0.20638839, 0.9327561 , 0.03814473,
              0.15018121, 0.96884902, 0.7023345 , 0.47513573, 0.0608618 ,
              0.46565   , 0.13808888, 0.34062456, 0.33140455, 0.94126673,
              0.61083579, 0.67845593, 0.07728785, 0.23855675, 0.22040027,
              0.76735621, 0.03092227, 0.53069895, 0.28735275, 0.97474425,
              0.25625015, 0.09683565, 0.48802318, 0.34628428, 0.90082438,
              0.20472448, 0.07356441, 0.48586338, 0.85209765, 0.62316781,
              0.00642376, 0.16338068, 0.22434138, 0.15202981, 0.75599815,
              0.15561201, 0.09844425, 0.71540207, 0.41799907, 0.22986385,
              0.08867041, 0.26084647, 0.59659073, 0.91808479, 0.40987675,
              0.59037509, 0.57697176, 0.18726066, 0.05755626, 0.62174203,
              0.18965768, 0.24638764, 0.48885338, 0.26952431, 0.4912065 ,
              0.5520299 , 0.35425539, 0.35961589, 0.73418321, 0.36848268,
              0.59277249, 0.05915381, 0.92942481, 0.1768207 , 0.27155248])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.8909837 , 0.92496229, 0.6319428 , 0.08073659, 0.94440318,
              0.14483882, 0.24598283, 0.86193423, 0.08071519, 0.70209502,
              0.42935179, 0.74352688, 0.41531829, 0.9883034 , 0.07765406,
              0.10138146, 0.51030671, 0.52669906, 0.88817364, 0.17575096,
              0.53328035, 0.77264913, 0.99226073, 0.36143773, 0.03428892,
              0.2897613 , 0.98880194, 0.19804376, 0.47296765, 0.36193193,
              0.87664604, 0.85571426, 0.92444911, 0.07138927, 0.24990204,
              0.13945678, 0.15812478, 0.36421208, 0.57819856, 0.91077744,
              0.14915681, 0.43760521, 0.55387314, 0.29796927, 0.95893254,
              0.76770654, 0.73429013, 0.5312245 , 0.16619981, 0.06959665,
              0.27220298, 0.63551495, 0.99692549, 0.85912136, 0.08653326,
              0.4391662 , 0.20884778, 0.6539469 , 0.85171019, 0.64882539,
              0.81098758, 0.65102505, 0.9012619 , 0.7717239 , 0.48112231,
              0.37714555, 0.92427181, 0.1071409 , 0.79464522, 0.76699491,
              0.49764142, 0.12255323, 0.90849498, 0.23472431, 0.74082641,
              0.4274853 , 0.69639143, 0.11584901, 0.14394059, 0.18542525,
              0.08495629, 0.05355184, 0.3933005 , 0.9504139 , 0.02363515,
              0.36602495, 0.81065387, 0.37156241, 0.2070862 , 0.44016186,
              0.89980354, 0.37822249, 0.7019097 , 0.83423286, 0.38135286,
              0.97488511, 0.9758713 , 0.59505392, 0.31518845, 0.00960665])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.82322511, 0.9822189 , 0.39601479, 0.271358  , 0.7491254 ,
              0.85781862, 0.72209838, 0.07694144, 0.93007442, 0.99401167,
              0.32973707, 0.0539784 , 0.66736369, 0.5837508 , 0.5011875 ,
              0.26450415, 0.15262981, 0.25080196, 0.55782311, 0.60480844,
              0.50881384, 0.42059567, 0.24808598, 0.45135588, 0.10683793,
              0.91148391, 0.80275065, 0.19467714, 0.35694347, 0.15963838,
              0.80430235, 0.35092442, 0.59830469, 0.41609473, 0.33872642,
              0.11304993, 0.65120971, 0.98276506, 0.65106518, 0.96275417,
              0.72639011, 0.88731119, 0.19940845, 0.62206747, 0.51088685,
              0.19239715, 0.08460781, 0.8887882 , 0.89966508, 0.19183828,
              0.43925038, 0.23058509, 0.75566629, 0.52768904, 0.57487998,
              0.4799363 , 0.81669693, 0.18379957, 0.18328077, 0.36500049,
              0.85036026, 0.78289511, 0.15615371, 0.62510928, 0.66152422,
              0.76140722, 0.96787212, 0.12751308, 0.82167509, 0.08850349,
              0.31265133, 0.48909137, 0.98710119, 0.25604595, 0.66272389,
              0.79082032, 0.5586168 , 0.16178173, 0.50273693, 0.82420454,
              0.35260419, 0.87550667, 0.78875453, 0.21797445, 0.17018449,
              0.23783056, 0.48759814, 0.51259567, 0.84439446, 0.81183934,
              0.43983814, 0.56855261, 0.98269436, 0.44561286, 0.87599944,
              0.87630765, 0.91055801, 0.25255698, 0.19128328, 0.83935367])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.44233176, 0.36081379, 0.87620372, 0.56796717, 0.57228574,
              0.83362197, 0.51854798, 0.4754087 , 0.932841  , 0.37129568,
              0.99587526, 0.66669013, 0.83272447, 0.15117748, 0.33917371,
              0.29978049, 0.16583408, 0.24538819, 0.12906023, 0.31394743,
              0.20855108, 0.73125539, 0.30912104, 0.06366247, 0.70343598,
              0.02510606, 0.98882956, 0.50167994, 0.15668666, 0.54190819,
              0.76457938, 0.43906462, 0.72252252, 0.25455274, 0.2428523 ,
              0.47545281, 0.37274525, 0.66202328, 0.55857571, 0.19524739,
              0.63215732, 0.17223537, 0.96541246, 0.64538133, 0.93293008,
              0.98788497, 0.74457334, 0.17280682, 0.98625152, 0.90742453,
              0.43741881, 0.05910737, 0.50462111, 0.58757509, 0.08371477,
              0.2198785 , 0.6173537 , 0.53736216, 0.46164647, 0.21206377,
              0.26976116, 0.06454306, 0.92794109, 0.41996094, 0.33822957,
              0.46463081, 0.15518575, 0.93586042, 0.06111489, 0.47829671,
              0.78097072, 0.40782036, 0.48047284, 0.12997803, 0.62960883,
              0.27322187, 0.18315588, 0.86885122, 0.66713985, 0.13412865,
              0.59726393, 0.15138448, 0.84234503, 0.01194616, 0.91913023,
              0.49449862, 0.99068433, 0.47903499, 0.0583931 , 0.6306172 ,
              0.42933106, 0.3377145 , 0.70168975, 0.48258015, 0.88187263,
              0.03933294, 0.35211891, 0.72816006, 0.76250864, 0.50976729])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.36486   , 0.74464408, 0.06395055, 0.92999469, 0.72157623,
              0.11695833, 0.68490432, 0.95619917, 0.59794601, 0.39972966,
              0.51418455, 0.75932462, 0.73816668, 0.23701581, 0.6991795 ,
              0.41163128, 0.50452748, 0.54336774, 0.42905341, 0.34099028,
              0.26571902, 0.38980505, 0.16428086, 0.02571408, 0.55363603,
              0.3743461 , 0.19033087, 0.93186209, 0.62078679, 0.29999816,
              0.56132932, 0.25430719, 0.38643183, 0.3578508 , 0.99095765,
              0.12438744, 0.05674545, 0.47919375, 0.2075042 , 0.61182099,
              0.73664806, 0.1807726 , 0.11822188, 0.58993184, 0.26602879,
              0.3866088 , 0.67964081, 0.99951507, 0.22777787, 0.1740114 ,
              0.53694124, 0.53912686, 0.49098306, 0.17190756, 0.1170624 ,
              0.04848921, 0.38916161, 0.50367997, 0.182216  , 0.20738993,
              0.00895756, 0.16971265, 0.69676545, 0.41515165, 0.07652997,
              0.20483683, 0.538912  , 0.45341715, 0.60245613, 0.82609502,
              0.00800288, 0.66879341, 0.96237093, 0.29777888, 0.32914879,
              0.52865253, 0.08637489, 0.55359736, 0.00325592, 0.27294281,
              0.57267638, 0.56953391, 0.98780433, 0.56001795, 0.40591001,
              0.17332662, 0.19226259, 0.7242679 , 0.03365327, 0.40883125,
              0.96463342, 0.54347811, 0.2873736 , 0.71726344, 0.73348746,
              0.48621987, 0.9893079 , 0.46094491, 0.04489868, 0.72773616])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([8.46810145e-01, 8.87977933e-01, 5.54648719e-01, 7.96855123e-01,
              3.72030486e-01, 7.49750304e-01, 6.38878782e-01, 9.69410570e-01,
              2.11149650e-01, 1.79906426e-01, 3.61930882e-01, 3.11033206e-01,
              2.37131782e-01, 8.03195159e-01, 5.66215085e-01, 6.54496693e-01,
              2.35839764e-01, 3.89051154e-01, 3.91802145e-01, 5.28715290e-01,
              8.56506443e-01, 7.15351167e-01, 6.43805806e-01, 9.56385769e-01,
              1.48163898e-01, 3.34397035e-01, 9.96024473e-01, 4.06046258e-01,
              9.70600890e-01, 6.79542236e-01, 9.59403470e-02, 9.31126042e-02,
              9.57081436e-02, 3.69098913e-01, 2.83296716e-01, 5.49102151e-01,
              2.50499582e-01, 5.67920969e-01, 7.01561480e-01, 9.14863251e-01,
              6.62537022e-01, 1.13637988e-01, 9.70839099e-01, 9.95872589e-01,
              5.96823183e-01, 9.39872544e-01, 8.77265284e-04, 4.52166529e-01,
              1.48004423e-01, 6.70802572e-01, 6.12724030e-01, 3.34720252e-01,
              4.95362995e-01, 5.92878817e-01, 2.87693720e-01, 3.86071057e-01,
              3.22360822e-01, 8.46150547e-01, 1.50281498e-01, 2.55545203e-01,
              6.22508773e-01, 5.58073115e-01, 4.05770867e-01, 2.82097277e-01,
              4.09569331e-01, 3.36008881e-01, 5.20669620e-02, 9.52480653e-01,
              7.28025025e-01, 6.03155537e-01, 9.01459859e-01, 9.76843508e-01,
              3.25965234e-01, 5.78960743e-01, 6.36630213e-01, 6.85601148e-01,
              6.25185311e-01, 8.06747047e-01, 3.93294660e-03, 3.96721382e-01,
              2.43827960e-01, 9.24638404e-01, 5.48226263e-01, 1.45712340e-01,
              1.10689219e-01, 4.61925601e-01, 5.31937768e-02, 5.93712579e-01,
              4.98909024e-01, 3.74231270e-01, 7.18146811e-02, 8.73329455e-01,
              2.48247887e-01, 6.47190039e-01, 4.60679071e-01, 5.34480028e-01,
              8.65344998e-01, 1.61302649e-01, 1.06109357e-01, 4.73934215e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.82322511, 0.9822189 , 0.39601479, 0.271358  , 0.7491254 ,
              0.85781862, 0.72209838, 0.07694144, 0.93007442, 0.99401167,
              0.32973707, 0.0539784 , 0.66736369, 0.5837508 , 0.5011875 ,
              0.26450415, 0.15262981, 0.25080196, 0.55782311, 0.60480844,
              0.50881384, 0.42059567, 0.24808598, 0.45135588, 0.10683793,
              0.91148391, 0.80275065, 0.19467714, 0.35694347, 0.15963838,
              0.80430235, 0.35092442, 0.59830469, 0.41609473, 0.33872642,
              0.11304993, 0.65120971, 0.98276506, 0.65106518, 0.96275417,
              0.72639011, 0.88731119, 0.19940845, 0.62206747, 0.51088685,
              0.19239715, 0.08460781, 0.8887882 , 0.89966508, 0.19183828,
              0.43925038, 0.23058509, 0.75566629, 0.52768904, 0.57487998,
              0.4799363 , 0.81669693, 0.18379957, 0.18328077, 0.36500049,
              0.85036026, 0.78289511, 0.15615371, 0.62510928, 0.66152422,
              0.76140722, 0.96787212, 0.12751308, 0.82167509, 0.08850349,
              0.31265133, 0.48909137, 0.98710119, 0.25604595, 0.66272389,
              0.79082032, 0.5586168 , 0.16178173, 0.50273693, 0.82420454,
              0.35260419, 0.87550667, 0.78875453, 0.21797445, 0.17018449,
              0.23783056, 0.48759814, 0.51259567, 0.84439446, 0.81183934,
              0.43983814, 0.56855261, 0.98269436, 0.44561286, 0.87599944,
              0.87630765, 0.91055801, 0.25255698, 0.19128328, 0.83935367])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.44233176, 0.36081379, 0.87620372, 0.56796717, 0.57228574,
              0.83362197, 0.51854798, 0.4754087 , 0.932841  , 0.37129568,
              0.99587526, 0.66669013, 0.83272447, 0.15117748, 0.33917371,
              0.29978049, 0.16583408, 0.24538819, 0.12906023, 0.31394743,
              0.20855108, 0.73125539, 0.30912104, 0.06366247, 0.70343598,
              0.02510606, 0.98882956, 0.50167994, 0.15668666, 0.54190819,
              0.76457938, 0.43906462, 0.72252252, 0.25455274, 0.2428523 ,
              0.47545281, 0.37274525, 0.66202328, 0.55857571, 0.19524739,
              0.63215732, 0.17223537, 0.96541246, 0.64538133, 0.93293008,
              0.98788497, 0.74457334, 0.17280682, 0.98625152, 0.90742453,
              0.43741881, 0.05910737, 0.50462111, 0.58757509, 0.08371477,
              0.2198785 , 0.6173537 , 0.53736216, 0.46164647, 0.21206377,
              0.26976116, 0.06454306, 0.92794109, 0.41996094, 0.33822957,
              0.46463081, 0.15518575, 0.93586042, 0.06111489, 0.47829671,
              0.78097072, 0.40782036, 0.48047284, 0.12997803, 0.62960883,
              0.27322187, 0.18315588, 0.86885122, 0.66713985, 0.13412865,
              0.59726393, 0.15138448, 0.84234503, 0.01194616, 0.91913023,
              0.49449862, 0.99068433, 0.47903499, 0.0583931 , 0.6306172 ,
              0.42933106, 0.3377145 , 0.70168975, 0.48258015, 0.88187263,
              0.03933294, 0.35211891, 0.72816006, 0.76250864, 0.50976729])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.36486   , 0.74464408, 0.06395055, 0.92999469, 0.72157623,
              0.11695833, 0.68490432, 0.95619917, 0.59794601, 0.39972966,
              0.51418455, 0.75932462, 0.73816668, 0.23701581, 0.6991795 ,
              0.41163128, 0.50452748, 0.54336774, 0.42905341, 0.34099028,
              0.26571902, 0.38980505, 0.16428086, 0.02571408, 0.55363603,
              0.3743461 , 0.19033087, 0.93186209, 0.62078679, 0.29999816,
              0.56132932, 0.25430719, 0.38643183, 0.3578508 , 0.99095765,
              0.12438744, 0.05674545, 0.47919375, 0.2075042 , 0.61182099,
              0.73664806, 0.1807726 , 0.11822188, 0.58993184, 0.26602879,
              0.3866088 , 0.67964081, 0.99951507, 0.22777787, 0.1740114 ,
              0.53694124, 0.53912686, 0.49098306, 0.17190756, 0.1170624 ,
              0.04848921, 0.38916161, 0.50367997, 0.182216  , 0.20738993,
              0.00895756, 0.16971265, 0.69676545, 0.41515165, 0.07652997,
              0.20483683, 0.538912  , 0.45341715, 0.60245613, 0.82609502,
              0.00800288, 0.66879341, 0.96237093, 0.29777888, 0.32914879,
              0.52865253, 0.08637489, 0.55359736, 0.00325592, 0.27294281,
              0.57267638, 0.56953391, 0.98780433, 0.56001795, 0.40591001,
              0.17332662, 0.19226259, 0.7242679 , 0.03365327, 0.40883125,
              0.96463342, 0.54347811, 0.2873736 , 0.71726344, 0.73348746,
              0.48621987, 0.9893079 , 0.46094491, 0.04489868, 0.72773616])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.28717455, 0.98639509, 0.9212363 , 0.92239019, 0.01665072,
              0.04894757, 0.05953635, 0.51568565, 0.71671012, 0.07957545,
              0.59382407, 0.24508295, 0.14241323, 0.03666888, 0.88810585,
              0.58995506, 0.29873478, 0.42937401, 0.82206352, 0.95187997,
              0.98113692, 0.82817618, 0.59007428, 0.83718146, 0.29671405,
              0.36256122, 0.43126566, 0.96281271, 0.25782502, 0.5263938 ,
              0.08585616, 0.17188213, 0.43958021, 0.41477593, 0.77493645,
              0.20630922, 0.44293782, 0.09311149, 0.59475328, 0.76281509,
              0.29923536, 0.60565473, 0.64374995, 0.87512553, 0.11370742,
              0.90511216, 0.52812576, 0.73849282, 0.99690863, 0.00371009,
              0.96512906, 0.87630909, 0.34036655, 0.68642595, 0.71826638,
              0.12413517, 0.7551939 , 0.6327503 , 0.35294032, 0.35650859,
              0.87365491, 0.86313372, 0.77054828, 0.51973491, 0.81345624,
              0.53299303, 0.0260027 , 0.26881485, 0.89518187, 0.29534288,
              0.54724316, 0.97668659, 0.67146668, 0.84487136, 0.74200626,
              0.36934842, 0.16887506, 0.19211154, 0.23763011, 0.70535383,
              0.44851657, 0.07623043, 0.07020718, 0.56368758, 0.55655646,
              0.44028095, 0.58532528, 0.12063128, 0.92754584, 0.659394  ,
              0.57920646, 0.00989536, 0.49643632, 0.71243318, 0.7270525 ,
              0.51728088, 0.26628044, 0.31122847, 0.81491802, 0.16321402])}]]


