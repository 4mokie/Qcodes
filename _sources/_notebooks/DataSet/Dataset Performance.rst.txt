
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='484ea32f-2c91-432e-9982-51b08f7250e9'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='8481f0ae-5191-4185-8895-76892cc881ce'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.0577317175630105],
     [0.687568779814422],
     [0.0300797729471792],
     [0.825428109406645],
     [0.0664937738848287],
     [0.99313430549921],
     [0.600631253209939],
     [0.169142257785118],
     [0.180754238903651],
     [0.390953902995814],
     [0.756894385502647],
     [0.624028302853695],
     [0.492199926620472],
     [0.556562516173445],
     [0.637237861741579],
     [0.555158664564612],
     [0.64842071919841],
     [0.992154405215224],
     [0.668083034104159],
     [0.151117113542154],
     [0.602682320927746],
     [0.119688169665672],
     [0.736877347390094],
     [0.424170241613303],
     [0.261503276979408],
     [0.413205745746071],
     [0.752131128001949],
     [0.869264760689526],
     [0.718447079855774],
     [0.173943242184007],
     [0.0265389871829743],
     [0.482459860422042],
     [0.618030204250166],
     [0.0265624146373605],
     [0.588212234474367],
     [0.327591360605568],
     [0.556008454386375],
     [0.222069861691598],
     [0.637349231880831],
     [0.00620657601828356],
     [0.946750536339888],
     [0.734276130268712],
     [0.164451167373851],
     [0.61684473765796],
     [0.515332336631561],
     [0.871771759868751],
     [0.775534497356123],
     [0.0320894377417937],
     [0.180949257009218],
     [0.240796142685006],
     [0.299563853396514],
     [0.938532634191206],
     [0.614427592190632],
     [0.330473961838081],
     [0.910068548462852],
     [0.97852096024056],
     [0.954539452213526],
     [0.17754406577017],
     [0.064882205587722],
     [0.0844267729765731],
     [0.0460607283934737],
     [0.885672325300788],
     [0.030348513329278],
     [0.424562661708608],
     [0.282485441124824],
     [0.826971278963767],
     [0.198738650586167],
     [0.813426224404397],
     [0.615767003909379],
     [0.547107181651483],
     [0.584095866896856],
     [0.268368024279541],
     [0.464477174798392],
     [0.132051525578654],
     [0.544477353072222],
     [0.625996762602931],
     [0.0367018507447822],
     [0.274620718678436],
     [0.190656524615379],
     [0.610703742321649],
     [0.592130892717155],
     [0.164040006857746],
     [0.630810005567359],
     [0.70760543428952],
     [0.355368299504797],
     [0.0330390437863799],
     [0.670926791172045],
     [0.841667582109953],
     [0.885312038811126],
     [0.424852311951816],
     [0.797181925336988],
     [0.484469576953234],
     [0.58099125573687],
     [0.0469123845489202],
     [0.173767106163371],
     [0.759847520390413],
     [0.588865591931509],
     [0.863943698947529],
     [0.187062415341954],
     [0.561672814519316]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.07064227])],
     [array([0.17689474])],
     [array([0.55763113])],
     [array([0.3981047])],
     [array([0.19227995])],
     [array([0.73946465])],
     [array([0.88734888])],
     [array([0.57572167])],
     [array([0.93822119])],
     [array([0.80343611])],
     [array([0.12564286])],
     [array([0.02469655])],
     [array([0.52798164])],
     [array([0.74877155])],
     [array([0.42414207])],
     [array([0.93838212])],
     [array([0.1981077])],
     [array([0.61065707])],
     [array([0.22484401])],
     [array([0.2519894])],
     [array([0.76614373])],
     [array([0.75925553])],
     [array([0.3810683])],
     [array([0.4396876])],
     [array([0.94841301])],
     [array([0.08578036])],
     [array([0.9283639])],
     [array([0.58094507])],
     [array([0.44440275])],
     [array([0.76703673])],
     [array([0.01206876])],
     [array([0.57367685])],
     [array([0.24018146])],
     [array([0.67639709])],
     [array([0.8917647])],
     [array([0.93777851])],
     [array([0.46089414])],
     [array([0.20240073])],
     [array([0.49200725])],
     [array([0.7142088])],
     [array([0.80699769])],
     [array([0.25120879])],
     [array([0.15317688])],
     [array([0.49575497])],
     [array([0.5454715])],
     [array([0.67878713])],
     [array([0.71466105])],
     [array([0.10060729])],
     [array([0.96122192])],
     [array([0.90263101])],
     [array([0.25723026])],
     [array([0.48214575])],
     [array([0.02435925])],
     [array([0.59233601])],
     [array([0.1872551])],
     [array([0.12482147])],
     [array([0.95672776])],
     [array([0.54186305])],
     [array([0.59241237])],
     [array([0.63666072])],
     [array([0.704568])],
     [array([0.48897183])],
     [array([0.20506562])],
     [array([0.02633927])],
     [array([0.94552739])],
     [array([0.49393312])],
     [array([0.76623337])],
     [array([0.31332569])],
     [array([0.19922116])],
     [array([0.44756686])],
     [array([0.01264775])],
     [array([0.60939704])],
     [array([0.26162335])],
     [array([0.91884037])],
     [array([0.14892369])],
     [array([0.2116218])],
     [array([0.91937318])],
     [array([0.2017958])],
     [array([0.0681316])],
     [array([0.4474743])],
     [array([0.63749682])],
     [array([0.29925049])],
     [array([0.22299184])],
     [array([0.98377142])],
     [array([0.44664189])],
     [array([0.28935353])],
     [array([0.73988173])],
     [array([0.36487152])],
     [array([0.43938617])],
     [array([0.34328939])],
     [array([0.804669])],
     [array([0.51440273])],
     [array([0.09241467])],
     [array([0.13222576])],
     [array([0.86915134])],
     [array([0.32504221])],
     [array([0.95265938])],
     [array([0.8973427])],
     [array([0.74665401])],
     [array([0.5708701])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.07064227, 0.17689474, 0.55763113, 0.3981047 , 0.19227995,
           0.73946465, 0.88734888, 0.57572167, 0.93822119, 0.80343611,
           0.12564286, 0.02469655, 0.52798164, 0.74877155, 0.42414207,
           0.93838212, 0.1981077 , 0.61065707, 0.22484401, 0.2519894 ,
           0.76614373, 0.75925553, 0.3810683 , 0.4396876 , 0.94841301,
           0.08578036, 0.9283639 , 0.58094507, 0.44440275, 0.76703673,
           0.01206876, 0.57367685, 0.24018146, 0.67639709, 0.8917647 ,
           0.93777851, 0.46089414, 0.20240073, 0.49200725, 0.7142088 ,
           0.80699769, 0.25120879, 0.15317688, 0.49575497, 0.5454715 ,
           0.67878713, 0.71466105, 0.10060729, 0.96122192, 0.90263101,
           0.25723026, 0.48214575, 0.02435925, 0.59233601, 0.1872551 ,
           0.12482147, 0.95672776, 0.54186305, 0.59241237, 0.63666072,
           0.704568  , 0.48897183, 0.20506562, 0.02633927, 0.94552739,
           0.49393312, 0.76623337, 0.31332569, 0.19922116, 0.44756686,
           0.01264775, 0.60939704, 0.26162335, 0.91884037, 0.14892369,
           0.2116218 , 0.91937318, 0.2017958 , 0.0681316 , 0.4474743 ,
           0.63749682, 0.29925049, 0.22299184, 0.98377142, 0.44664189,
           0.28935353, 0.73988173, 0.36487152, 0.43938617, 0.34328939,
           0.804669  , 0.51440273, 0.09241467, 0.13222576, 0.86915134,
           0.32504221, 0.95265938, 0.8973427 , 0.74665401, 0.5708701 ])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.05773172, 0.68756878, 0.03007977, 0.82542811, 0.06649377,
              0.99313431, 0.60063125, 0.16914226, 0.18075424, 0.3909539 ,
              0.75689439, 0.6240283 , 0.49219993, 0.55656252, 0.63723786,
              0.55515866, 0.64842072, 0.99215441, 0.66808303, 0.15111711,
              0.60268232, 0.11968817, 0.73687735, 0.42417024, 0.26150328,
              0.41320575, 0.75213113, 0.86926476, 0.71844708, 0.17394324,
              0.02653899, 0.48245986, 0.6180302 , 0.02656241, 0.58821223,
              0.32759136, 0.55600845, 0.22206986, 0.63734923, 0.00620658,
              0.94675054, 0.73427613, 0.16445117, 0.61684474, 0.51533234,
              0.87177176, 0.7755345 , 0.03208944, 0.18094926, 0.24079614,
              0.29956385, 0.93853263, 0.61442759, 0.33047396, 0.91006855,
              0.97852096, 0.95453945, 0.17754407, 0.06488221, 0.08442677,
              0.04606073, 0.88567233, 0.03034851, 0.42456266, 0.28248544,
              0.82697128, 0.19873865, 0.81342622, 0.615767  , 0.54710718,
              0.58409587, 0.26836802, 0.46447717, 0.13205153, 0.54447735,
              0.62599676, 0.03670185, 0.27462072, 0.19065652, 0.61070374,
              0.59213089, 0.16404001, 0.63081001, 0.70760543, 0.3553683 ,
              0.03303904, 0.67092679, 0.84166758, 0.88531204, 0.42485231,
              0.79718193, 0.48446958, 0.58099126, 0.04691238, 0.17376711,
              0.75984752, 0.58886559, 0.8639437 , 0.18706242, 0.56167281])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([5.76619420e-01, 6.15490960e-01, 1.56720258e-01, 8.09005938e-01,
              3.39921815e-01, 9.54459335e-01, 6.27580421e-01, 8.60340843e-02,
              4.30390312e-02, 7.39927874e-01, 9.70757344e-01, 3.83968068e-01,
              1.47769577e-01, 9.16011296e-01, 1.61412089e-01, 3.93988795e-01,
              7.92320662e-01, 9.49491587e-01, 4.80900663e-04, 7.25868767e-01,
              9.03389272e-01, 9.61325433e-02, 3.05181479e-01, 4.32146414e-01,
              6.95412825e-01, 9.96229321e-02, 3.87745030e-01, 9.17999359e-01,
              1.22239512e-01, 4.19959620e-01, 2.17921711e-01, 7.61912013e-01,
              2.51953731e-01, 4.96163608e-01, 8.93903335e-01, 8.02189550e-01,
              4.22574244e-01, 6.20674312e-01, 7.94791289e-01, 9.85440459e-01,
              7.66470559e-01, 9.87323454e-01, 9.84657935e-01, 7.09434065e-01,
              4.25463026e-01, 4.12594699e-01, 5.51430803e-01, 2.87881153e-01,
              5.60137345e-01, 7.49862823e-01, 4.97861066e-01, 7.60228357e-01,
              1.69007710e-01, 3.22941478e-01, 4.69476816e-01, 3.13978697e-01,
              2.27800692e-01, 4.57575678e-01, 2.47237596e-01, 8.58160619e-01,
              9.78659148e-01, 5.69959564e-01, 2.50907996e-01, 5.98273709e-01,
              4.83993667e-01, 4.75482873e-01, 6.84017419e-01, 8.05585145e-01,
              3.33569231e-01, 8.77846372e-01, 3.28484233e-01, 5.90684198e-01,
              9.42188644e-02, 3.76145948e-01, 2.24582359e-01, 6.53746435e-01,
              6.22847358e-01, 9.27092415e-01, 4.68846239e-01, 6.56486590e-01,
              8.45452555e-01, 5.71206928e-01, 1.73450245e-01, 1.38933691e-01,
              9.60139792e-01, 5.87536123e-01, 5.84778281e-01, 6.37538042e-01,
              8.17030485e-01, 5.56571353e-01, 7.41457387e-01, 4.00614354e-01,
              9.20612686e-01, 3.54204468e-01, 5.01052163e-01, 7.70722525e-01,
              2.33433374e-01, 4.97726706e-01, 5.05672769e-01, 8.76532238e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.47318677, 0.12651624, 0.57424521, 0.63862826, 0.0810195 ,
              0.47610273, 0.9868429 , 0.47047952, 0.60205134, 0.43443245,
              0.34650843, 0.64700426, 0.81519204, 0.94856234, 0.11702383,
              0.96227686, 0.30753022, 0.01975684, 0.0629332 , 0.0624359 ,
              0.28340361, 0.2101702 , 0.45851712, 0.6026132 , 0.52200476,
              0.01943036, 0.63548914, 0.49356973, 0.70056008, 0.96705113,
              0.9244231 , 0.5283743 , 0.61513914, 0.84376043, 0.99006479,
              0.22708655, 0.65062061, 0.77860336, 0.32199695, 0.14226051,
              0.26314545, 0.56874755, 0.4159685 , 0.69590917, 0.83687662,
              0.77766112, 0.13266376, 0.86470177, 0.89389644, 0.35853985,
              0.63705996, 0.57168318, 0.59965136, 0.21441202, 0.69272199,
              0.23073653, 0.06824715, 0.20621943, 0.47652381, 0.63716037,
              0.61654476, 0.80540657, 0.47244306, 0.66067962, 0.29794339,
              0.57036767, 0.21790242, 0.55764202, 0.09496109, 0.7746347 ,
              0.47966169, 0.25978768, 0.26644784, 0.868668  , 0.68107041,
              0.46108688, 0.04582435, 0.09247263, 0.12049643, 0.14132423,
              0.86797666, 0.65251812, 0.2431939 , 0.79940086, 0.96744846,
              0.67686034, 0.72220023, 0.93264769, 0.21564202, 0.94293814,
              0.35312503, 0.26428751, 0.09224282, 0.29874823, 0.77794127,
              0.16318937, 0.88856115, 0.49995497, 0.06842657, 0.07392643])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.20895241, 0.93168181, 0.36769261, 0.57917221, 0.73695175,
              0.96385446, 0.68635137, 0.04613998, 0.8451328 , 0.1886418 ,
              0.6560526 , 0.83001144, 0.66823004, 0.58198494, 0.73901648,
              0.9177668 , 0.37358249, 0.75650623, 0.50033573, 0.99175585,
              0.17719241, 0.85306938, 0.13173522, 0.28355677, 0.31068617,
              0.98569747, 0.27815636, 0.55236339, 0.02537169, 0.21103869,
              0.52847743, 0.75855332, 0.22596838, 0.39967618, 0.73615686,
              0.28285992, 0.88448337, 0.85770779, 0.39583642, 0.0305319 ,
              0.33882632, 0.1657612 , 0.8255533 , 0.3849287 , 0.74377692,
              0.87036575, 0.78176429, 0.84079896, 0.08604564, 0.10456653,
              0.94878831, 0.4107512 , 0.90151711, 0.69684789, 0.59638792,
              0.69178216, 0.03901987, 0.74797657, 0.20571832, 0.27140492,
              0.64073512, 0.26316371, 0.6983625 , 0.91942193, 0.45384977,
              0.54526788, 0.42839371, 0.36068666, 0.71018244, 0.23063637,
              0.24723114, 0.08217289, 0.19143293, 0.14837045, 0.83946973,
              0.39716226, 0.78248316, 0.91018501, 0.69122735, 0.30313293,
              0.21797507, 0.93674322, 0.74615917, 0.44413042, 0.44436059,
              0.68351018, 0.82071996, 0.4665638 , 0.85563763, 0.46514671,
              0.90140246, 0.64972243, 0.70146116, 0.50031567, 0.3473    ,
              0.66690605, 0.80862546, 0.25665295, 0.58869799, 0.51988152])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.05773172, 0.68756878, 0.03007977, 0.82542811, 0.06649377,
              0.99313431, 0.60063125, 0.16914226, 0.18075424, 0.3909539 ,
              0.75689439, 0.6240283 , 0.49219993, 0.55656252, 0.63723786,
              0.55515866, 0.64842072, 0.99215441, 0.66808303, 0.15111711,
              0.60268232, 0.11968817, 0.73687735, 0.42417024, 0.26150328,
              0.41320575, 0.75213113, 0.86926476, 0.71844708, 0.17394324,
              0.02653899, 0.48245986, 0.6180302 , 0.02656241, 0.58821223,
              0.32759136, 0.55600845, 0.22206986, 0.63734923, 0.00620658,
              0.94675054, 0.73427613, 0.16445117, 0.61684474, 0.51533234,
              0.87177176, 0.7755345 , 0.03208944, 0.18094926, 0.24079614,
              0.29956385, 0.93853263, 0.61442759, 0.33047396, 0.91006855,
              0.97852096, 0.95453945, 0.17754407, 0.06488221, 0.08442677,
              0.04606073, 0.88567233, 0.03034851, 0.42456266, 0.28248544,
              0.82697128, 0.19873865, 0.81342622, 0.615767  , 0.54710718,
              0.58409587, 0.26836802, 0.46447717, 0.13205153, 0.54447735,
              0.62599676, 0.03670185, 0.27462072, 0.19065652, 0.61070374,
              0.59213089, 0.16404001, 0.63081001, 0.70760543, 0.3553683 ,
              0.03303904, 0.67092679, 0.84166758, 0.88531204, 0.42485231,
              0.79718193, 0.48446958, 0.58099126, 0.04691238, 0.17376711,
              0.75984752, 0.58886559, 0.8639437 , 0.18706242, 0.56167281])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([5.76619420e-01, 6.15490960e-01, 1.56720258e-01, 8.09005938e-01,
              3.39921815e-01, 9.54459335e-01, 6.27580421e-01, 8.60340843e-02,
              4.30390312e-02, 7.39927874e-01, 9.70757344e-01, 3.83968068e-01,
              1.47769577e-01, 9.16011296e-01, 1.61412089e-01, 3.93988795e-01,
              7.92320662e-01, 9.49491587e-01, 4.80900663e-04, 7.25868767e-01,
              9.03389272e-01, 9.61325433e-02, 3.05181479e-01, 4.32146414e-01,
              6.95412825e-01, 9.96229321e-02, 3.87745030e-01, 9.17999359e-01,
              1.22239512e-01, 4.19959620e-01, 2.17921711e-01, 7.61912013e-01,
              2.51953731e-01, 4.96163608e-01, 8.93903335e-01, 8.02189550e-01,
              4.22574244e-01, 6.20674312e-01, 7.94791289e-01, 9.85440459e-01,
              7.66470559e-01, 9.87323454e-01, 9.84657935e-01, 7.09434065e-01,
              4.25463026e-01, 4.12594699e-01, 5.51430803e-01, 2.87881153e-01,
              5.60137345e-01, 7.49862823e-01, 4.97861066e-01, 7.60228357e-01,
              1.69007710e-01, 3.22941478e-01, 4.69476816e-01, 3.13978697e-01,
              2.27800692e-01, 4.57575678e-01, 2.47237596e-01, 8.58160619e-01,
              9.78659148e-01, 5.69959564e-01, 2.50907996e-01, 5.98273709e-01,
              4.83993667e-01, 4.75482873e-01, 6.84017419e-01, 8.05585145e-01,
              3.33569231e-01, 8.77846372e-01, 3.28484233e-01, 5.90684198e-01,
              9.42188644e-02, 3.76145948e-01, 2.24582359e-01, 6.53746435e-01,
              6.22847358e-01, 9.27092415e-01, 4.68846239e-01, 6.56486590e-01,
              8.45452555e-01, 5.71206928e-01, 1.73450245e-01, 1.38933691e-01,
              9.60139792e-01, 5.87536123e-01, 5.84778281e-01, 6.37538042e-01,
              8.17030485e-01, 5.56571353e-01, 7.41457387e-01, 4.00614354e-01,
              9.20612686e-01, 3.54204468e-01, 5.01052163e-01, 7.70722525e-01,
              2.33433374e-01, 4.97726706e-01, 5.05672769e-01, 8.76532238e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.47318677, 0.12651624, 0.57424521, 0.63862826, 0.0810195 ,
              0.47610273, 0.9868429 , 0.47047952, 0.60205134, 0.43443245,
              0.34650843, 0.64700426, 0.81519204, 0.94856234, 0.11702383,
              0.96227686, 0.30753022, 0.01975684, 0.0629332 , 0.0624359 ,
              0.28340361, 0.2101702 , 0.45851712, 0.6026132 , 0.52200476,
              0.01943036, 0.63548914, 0.49356973, 0.70056008, 0.96705113,
              0.9244231 , 0.5283743 , 0.61513914, 0.84376043, 0.99006479,
              0.22708655, 0.65062061, 0.77860336, 0.32199695, 0.14226051,
              0.26314545, 0.56874755, 0.4159685 , 0.69590917, 0.83687662,
              0.77766112, 0.13266376, 0.86470177, 0.89389644, 0.35853985,
              0.63705996, 0.57168318, 0.59965136, 0.21441202, 0.69272199,
              0.23073653, 0.06824715, 0.20621943, 0.47652381, 0.63716037,
              0.61654476, 0.80540657, 0.47244306, 0.66067962, 0.29794339,
              0.57036767, 0.21790242, 0.55764202, 0.09496109, 0.7746347 ,
              0.47966169, 0.25978768, 0.26644784, 0.868668  , 0.68107041,
              0.46108688, 0.04582435, 0.09247263, 0.12049643, 0.14132423,
              0.86797666, 0.65251812, 0.2431939 , 0.79940086, 0.96744846,
              0.67686034, 0.72220023, 0.93264769, 0.21564202, 0.94293814,
              0.35312503, 0.26428751, 0.09224282, 0.29874823, 0.77794127,
              0.16318937, 0.88856115, 0.49995497, 0.06842657, 0.07392643])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.85305437, 0.6442313 , 0.67382281, 0.87044688, 0.93333686,
              0.8192547 , 0.92690561, 0.27013716, 0.10764505, 0.60044325,
              0.33533995, 0.73051938, 0.87762685, 0.94848567, 0.34413108,
              0.02037522, 0.22129227, 0.98250711, 0.96185716, 0.18135914,
              0.33942731, 0.5354161 , 0.10241056, 0.91411341, 0.87376241,
              0.72537711, 0.03078635, 0.27570802, 0.44368535, 0.14400132,
              0.6434903 , 0.91809197, 0.02659539, 0.76177443, 0.52284236,
              0.23618672, 0.16210196, 0.10354175, 0.78778837, 0.84865795,
              0.25614032, 0.97018606, 0.84228428, 0.93890448, 0.45121371,
              0.83295018, 0.18590272, 0.5781918 , 0.13312709, 0.89007568,
              0.93774702, 0.25110733, 0.61582109, 0.25823221, 0.59164944,
              0.15041958, 0.44415512, 0.41510511, 0.88183753, 0.87979448,
              0.40211132, 0.43449327, 0.63530786, 0.51290481, 0.16225697,
              0.33937508, 0.65340066, 0.43653722, 0.07048713, 0.13948337,
              0.44041525, 0.50800926, 0.05448875, 0.65901001, 0.03747103,
              0.01049802, 0.06573741, 0.56353049, 0.96909837, 0.93020053,
              0.37650791, 0.84635881, 0.54928008, 0.28467917, 0.95072389,
              0.67110718, 0.76100513, 0.86682147, 0.24710095, 0.31256977,
              0.9033811 , 0.09489166, 0.2597155 , 0.21705034, 0.71251791,
              0.86267714, 0.55601193, 0.54226932, 0.49564687, 0.0345105 ])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.07064227, 0.17689474, 0.55763113, 0.3981047 , 0.19227995,
              0.73946465, 0.88734888, 0.57572167, 0.93822119, 0.80343611,
              0.12564286, 0.02469655, 0.52798164, 0.74877155, 0.42414207,
              0.93838212, 0.1981077 , 0.61065707, 0.22484401, 0.2519894 ,
              0.76614373, 0.75925553, 0.3810683 , 0.4396876 , 0.94841301,
              0.08578036, 0.9283639 , 0.58094507, 0.44440275, 0.76703673,
              0.01206876, 0.57367685, 0.24018146, 0.67639709, 0.8917647 ,
              0.93777851, 0.46089414, 0.20240073, 0.49200725, 0.7142088 ,
              0.80699769, 0.25120879, 0.15317688, 0.49575497, 0.5454715 ,
              0.67878713, 0.71466105, 0.10060729, 0.96122192, 0.90263101,
              0.25723026, 0.48214575, 0.02435925, 0.59233601, 0.1872551 ,
              0.12482147, 0.95672776, 0.54186305, 0.59241237, 0.63666072,
              0.704568  , 0.48897183, 0.20506562, 0.02633927, 0.94552739,
              0.49393312, 0.76623337, 0.31332569, 0.19922116, 0.44756686,
              0.01264775, 0.60939704, 0.26162335, 0.91884037, 0.14892369,
              0.2116218 , 0.91937318, 0.2017958 , 0.0681316 , 0.4474743 ,
              0.63749682, 0.29925049, 0.22299184, 0.98377142, 0.44664189,
              0.28935353, 0.73988173, 0.36487152, 0.43938617, 0.34328939,
              0.804669  , 0.51440273, 0.09241467, 0.13222576, 0.86915134,
              0.32504221, 0.95265938, 0.8973427 , 0.74665401, 0.5708701 ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([2.17631949e-01, 5.22839225e-02, 1.15705455e-01, 9.72817793e-01,
              6.75993738e-01, 1.59509860e-01, 5.66805310e-01, 7.56370464e-01,
              3.82422839e-01, 6.81388758e-01, 7.51680850e-01, 4.01493813e-01,
              3.99033918e-02, 5.40075964e-02, 6.28359384e-01, 3.44553338e-01,
              5.75753351e-01, 3.08623980e-01, 7.00982582e-01, 6.46067394e-01,
              2.15290188e-01, 7.50982162e-01, 5.28953756e-01, 2.43290078e-01,
              4.70436088e-01, 8.07801358e-02, 4.57773264e-01, 7.14175859e-01,
              9.45010734e-01, 6.07790625e-01, 8.70136200e-01, 2.04111154e-01,
              2.67470757e-01, 1.63681837e-01, 5.71095634e-02, 2.30064657e-01,
              8.25760226e-01, 9.97862563e-01, 5.61262474e-01, 9.83371054e-01,
              9.12642305e-01, 7.57892117e-01, 7.07124234e-01, 5.04531458e-01,
              3.62661265e-01, 9.66793139e-01, 4.35607763e-01, 2.57363833e-01,
              1.71031992e-01, 9.43032698e-01, 8.55127012e-01, 2.56230695e-01,
              9.82010082e-01, 5.37190334e-02, 4.81237677e-01, 5.08669401e-02,
              6.22191252e-02, 7.75135696e-01, 7.39030518e-01, 4.10914152e-01,
              1.78710195e-01, 7.24887970e-01, 7.66828041e-01, 3.97582463e-02,
              2.03426588e-01, 3.27808731e-01, 7.97410477e-01, 4.71075142e-01,
              9.85767158e-01, 9.54225143e-01, 1.49655047e-01, 9.97855091e-01,
              8.67389685e-04, 2.42231708e-01, 8.33960908e-01, 9.23309476e-01,
              2.37003323e-01, 2.78896504e-01, 5.01963535e-01, 2.49231356e-02,
              6.06262012e-01, 1.98448197e-01, 4.15017755e-01, 3.79832214e-01,
              4.10216926e-01, 2.53926142e-01, 3.00831715e-01, 5.11546477e-01,
              4.36046456e-01, 6.67815015e-01, 5.10593256e-01, 5.64861798e-01,
              3.32157753e-01, 2.47437876e-01, 9.07223092e-01, 8.85638230e-01,
              2.75810976e-01, 5.54886671e-01, 9.10049718e-02, 8.52637592e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([1.38862509e-01, 3.94774936e-01, 5.21085952e-04, 9.94908082e-01,
              3.80115715e-01, 4.33353463e-01, 3.78888373e-01, 7.92992401e-01,
              4.54629308e-01, 8.52740736e-01, 2.49205220e-01, 1.51716420e-02,
              9.12025018e-01, 8.97708935e-01, 4.73816221e-01, 3.25220237e-01,
              9.78603002e-01, 8.22301674e-01, 8.22075047e-01, 3.26412744e-01,
              8.50593411e-01, 2.06609163e-01, 3.50571388e-01, 9.07089993e-01,
              3.19100829e-01, 3.77302281e-01, 3.19713902e-01, 7.12915987e-01,
              2.33759286e-01, 1.27714789e-01, 3.31070120e-01, 5.97857392e-03,
              9.08255902e-01, 2.01382033e-01, 4.06913708e-01, 8.19515199e-01,
              8.50357753e-01, 1.78007465e-01, 6.49528442e-01, 9.00426647e-01,
              2.82630337e-01, 6.53379117e-01, 7.86154948e-02, 7.25412975e-01,
              2.96707979e-01, 1.14954117e-01, 9.21444729e-01, 5.33863870e-02,
              1.76970351e-01, 9.07830567e-01, 5.17666172e-01, 6.53494324e-01,
              7.58652248e-02, 5.78953224e-01, 1.31580559e-01, 4.71292228e-01,
              1.67857036e-02, 8.53015717e-01, 7.12848769e-01, 1.38320344e-01,
              9.27618383e-01, 1.02941458e-01, 9.24716482e-01, 4.01846342e-01,
              2.12930310e-01, 1.21056980e-01, 1.35381711e-01, 1.19471824e-03,
              2.99962198e-01, 2.50854053e-01, 4.76100794e-01, 9.27658806e-01,
              5.87807629e-01, 2.57244420e-01, 7.39557613e-01, 3.82861918e-01,
              9.88015405e-01, 1.83015397e-01, 9.82916698e-01, 9.48874217e-01,
              7.61313945e-01, 1.46213441e-01, 5.32577024e-01, 5.63837004e-01,
              1.65409776e-01, 7.30691492e-01, 2.67917697e-01, 5.02727889e-02,
              7.18918758e-01, 6.24429955e-01, 7.83876941e-01, 5.43767154e-01,
              2.37236340e-01, 2.41403230e-01, 7.36154014e-01, 1.97018399e-01,
              4.24478312e-01, 5.98810516e-01, 4.37874836e-01, 4.83582145e-01])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.30793501, 0.91775944, 0.02926204, 0.91721916, 0.12625134,
              0.68111947, 0.74342199, 0.16576951, 0.83408998, 0.54115804,
              0.94782598, 0.8869392 , 0.38778697, 0.61800103, 0.92560003,
              0.66731532, 0.33051392, 0.91266794, 0.45109158, 0.27805342,
              0.67366445, 0.03789031, 0.99667882, 0.45835938, 0.29466641,
              0.86012504, 0.45505802, 0.74285606, 0.32059861, 0.73877551,
              0.13873349, 0.92072497, 0.97737566, 0.93970166, 0.10643647,
              0.59940174, 0.20342381, 0.59078076, 0.31841244, 0.35830534,
              0.57664819, 0.78297956, 0.55263783, 0.18865665, 0.08989887,
              0.20057035, 0.80022692, 0.50861274, 0.7192605 , 0.64600106,
              0.73531294, 0.23634133, 0.82955133, 0.69042149, 0.68796149,
              0.45205795, 0.12512666, 0.44066439, 0.25304762, 0.16324241,
              0.52100367, 0.15679632, 0.70139089, 0.02339201, 0.35356192,
              0.41548387, 0.67832327, 0.1600839 , 0.86187431, 0.35058856,
              0.18044365, 0.99472553, 0.19824884, 0.22465439, 0.75442329,
              0.2159802 , 0.08162926, 0.33935271, 0.37989808, 0.44027173,
              0.62053066, 0.98547704, 0.12747194, 0.02861354, 0.45674358,
              0.82044537, 0.4434383 , 0.89891907, 0.6097835 , 0.05748415,
              0.81366583, 0.86230727, 0.96555363, 0.80185931, 0.22064818,
              0.73600654, 0.43758207, 0.74012883, 0.02148005, 0.17357068])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.07064227, 0.17689474, 0.55763113, 0.3981047 , 0.19227995,
              0.73946465, 0.88734888, 0.57572167, 0.93822119, 0.80343611,
              0.12564286, 0.02469655, 0.52798164, 0.74877155, 0.42414207,
              0.93838212, 0.1981077 , 0.61065707, 0.22484401, 0.2519894 ,
              0.76614373, 0.75925553, 0.3810683 , 0.4396876 , 0.94841301,
              0.08578036, 0.9283639 , 0.58094507, 0.44440275, 0.76703673,
              0.01206876, 0.57367685, 0.24018146, 0.67639709, 0.8917647 ,
              0.93777851, 0.46089414, 0.20240073, 0.49200725, 0.7142088 ,
              0.80699769, 0.25120879, 0.15317688, 0.49575497, 0.5454715 ,
              0.67878713, 0.71466105, 0.10060729, 0.96122192, 0.90263101,
              0.25723026, 0.48214575, 0.02435925, 0.59233601, 0.1872551 ,
              0.12482147, 0.95672776, 0.54186305, 0.59241237, 0.63666072,
              0.704568  , 0.48897183, 0.20506562, 0.02633927, 0.94552739,
              0.49393312, 0.76623337, 0.31332569, 0.19922116, 0.44756686,
              0.01264775, 0.60939704, 0.26162335, 0.91884037, 0.14892369,
              0.2116218 , 0.91937318, 0.2017958 , 0.0681316 , 0.4474743 ,
              0.63749682, 0.29925049, 0.22299184, 0.98377142, 0.44664189,
              0.28935353, 0.73988173, 0.36487152, 0.43938617, 0.34328939,
              0.804669  , 0.51440273, 0.09241467, 0.13222576, 0.86915134,
              0.32504221, 0.95265938, 0.8973427 , 0.74665401, 0.5708701 ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([2.17631949e-01, 5.22839225e-02, 1.15705455e-01, 9.72817793e-01,
              6.75993738e-01, 1.59509860e-01, 5.66805310e-01, 7.56370464e-01,
              3.82422839e-01, 6.81388758e-01, 7.51680850e-01, 4.01493813e-01,
              3.99033918e-02, 5.40075964e-02, 6.28359384e-01, 3.44553338e-01,
              5.75753351e-01, 3.08623980e-01, 7.00982582e-01, 6.46067394e-01,
              2.15290188e-01, 7.50982162e-01, 5.28953756e-01, 2.43290078e-01,
              4.70436088e-01, 8.07801358e-02, 4.57773264e-01, 7.14175859e-01,
              9.45010734e-01, 6.07790625e-01, 8.70136200e-01, 2.04111154e-01,
              2.67470757e-01, 1.63681837e-01, 5.71095634e-02, 2.30064657e-01,
              8.25760226e-01, 9.97862563e-01, 5.61262474e-01, 9.83371054e-01,
              9.12642305e-01, 7.57892117e-01, 7.07124234e-01, 5.04531458e-01,
              3.62661265e-01, 9.66793139e-01, 4.35607763e-01, 2.57363833e-01,
              1.71031992e-01, 9.43032698e-01, 8.55127012e-01, 2.56230695e-01,
              9.82010082e-01, 5.37190334e-02, 4.81237677e-01, 5.08669401e-02,
              6.22191252e-02, 7.75135696e-01, 7.39030518e-01, 4.10914152e-01,
              1.78710195e-01, 7.24887970e-01, 7.66828041e-01, 3.97582463e-02,
              2.03426588e-01, 3.27808731e-01, 7.97410477e-01, 4.71075142e-01,
              9.85767158e-01, 9.54225143e-01, 1.49655047e-01, 9.97855091e-01,
              8.67389685e-04, 2.42231708e-01, 8.33960908e-01, 9.23309476e-01,
              2.37003323e-01, 2.78896504e-01, 5.01963535e-01, 2.49231356e-02,
              6.06262012e-01, 1.98448197e-01, 4.15017755e-01, 3.79832214e-01,
              4.10216926e-01, 2.53926142e-01, 3.00831715e-01, 5.11546477e-01,
              4.36046456e-01, 6.67815015e-01, 5.10593256e-01, 5.64861798e-01,
              3.32157753e-01, 2.47437876e-01, 9.07223092e-01, 8.85638230e-01,
              2.75810976e-01, 5.54886671e-01, 9.10049718e-02, 8.52637592e-01])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([1.38862509e-01, 3.94774936e-01, 5.21085952e-04, 9.94908082e-01,
              3.80115715e-01, 4.33353463e-01, 3.78888373e-01, 7.92992401e-01,
              4.54629308e-01, 8.52740736e-01, 2.49205220e-01, 1.51716420e-02,
              9.12025018e-01, 8.97708935e-01, 4.73816221e-01, 3.25220237e-01,
              9.78603002e-01, 8.22301674e-01, 8.22075047e-01, 3.26412744e-01,
              8.50593411e-01, 2.06609163e-01, 3.50571388e-01, 9.07089993e-01,
              3.19100829e-01, 3.77302281e-01, 3.19713902e-01, 7.12915987e-01,
              2.33759286e-01, 1.27714789e-01, 3.31070120e-01, 5.97857392e-03,
              9.08255902e-01, 2.01382033e-01, 4.06913708e-01, 8.19515199e-01,
              8.50357753e-01, 1.78007465e-01, 6.49528442e-01, 9.00426647e-01,
              2.82630337e-01, 6.53379117e-01, 7.86154948e-02, 7.25412975e-01,
              2.96707979e-01, 1.14954117e-01, 9.21444729e-01, 5.33863870e-02,
              1.76970351e-01, 9.07830567e-01, 5.17666172e-01, 6.53494324e-01,
              7.58652248e-02, 5.78953224e-01, 1.31580559e-01, 4.71292228e-01,
              1.67857036e-02, 8.53015717e-01, 7.12848769e-01, 1.38320344e-01,
              9.27618383e-01, 1.02941458e-01, 9.24716482e-01, 4.01846342e-01,
              2.12930310e-01, 1.21056980e-01, 1.35381711e-01, 1.19471824e-03,
              2.99962198e-01, 2.50854053e-01, 4.76100794e-01, 9.27658806e-01,
              5.87807629e-01, 2.57244420e-01, 7.39557613e-01, 3.82861918e-01,
              9.88015405e-01, 1.83015397e-01, 9.82916698e-01, 9.48874217e-01,
              7.61313945e-01, 1.46213441e-01, 5.32577024e-01, 5.63837004e-01,
              1.65409776e-01, 7.30691492e-01, 2.67917697e-01, 5.02727889e-02,
              7.18918758e-01, 6.24429955e-01, 7.83876941e-01, 5.43767154e-01,
              2.37236340e-01, 2.41403230e-01, 7.36154014e-01, 1.97018399e-01,
              4.24478312e-01, 5.98810516e-01, 4.37874836e-01, 4.83582145e-01])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.09826457, 0.10402822, 0.50633098, 0.24198765, 0.87255323,
              0.00280789, 0.07548595, 0.5654071 , 0.3836217 , 0.09678044,
              0.83968124, 0.33765653, 0.95928311, 0.98052049, 0.84403214,
              0.29509902, 0.82959271, 0.94583971, 0.34585492, 0.08654838,
              0.99646518, 0.0575703 , 0.29011402, 0.68722622, 0.15858088,
              0.7638906 , 0.48927501, 0.88609816, 0.88663196, 0.43714621,
              0.16971356, 0.99284501, 0.35844005, 0.03656271, 0.57259869,
              0.40194709, 0.39842415, 0.91884592, 0.7193102 , 0.14691603,
              0.45778111, 0.91787512, 0.33700468, 0.62359814, 0.48930307,
              0.40953705, 0.67572907, 0.20534773, 0.4781931 , 0.2982697 ,
              0.16263636, 0.08158179, 0.54207304, 0.47279376, 0.874311  ,
              0.84314659, 0.02796308, 0.86978617, 0.29957619, 0.62453343,
              0.4762703 , 0.73203739, 0.44885998, 0.45766125, 0.08031548,
              0.61563698, 0.73103837, 0.72998427, 0.45535151, 0.67522848,
              0.00335712, 0.87775868, 0.91745296, 0.49863811, 0.0625657 ,
              0.80954975, 0.61527982, 0.46514194, 0.10423564, 0.97915183,
              0.05232023, 0.65037088, 0.9426901 , 0.06252723, 0.89973876,
              0.07149241, 0.26286433, 0.09501494, 0.46570388, 0.95446996,
              0.35289936, 0.83523871, 0.99903097, 0.95172452, 0.20304522,
              0.8739514 , 0.0375704 , 0.25620646, 0.51437526, 0.4951537 ])}]]


