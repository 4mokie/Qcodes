
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='67f2c99d-79f8-4fec-9dc3-5c9e2e04239f'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='1634dc4b-2f32-446a-9114-289f4f9b637e'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.921398230816299],
     [0.7660863800008],
     [0.58325075937103],
     [0.538168931699158],
     [0.955567577136759],
     [0.0603598139792326],
     [0.897730603167267],
     [0.659437425433811],
     [0.0216790362376941],
     [0.74522798808222],
     [0.280277645886011],
     [0.914715661090098],
     [0.0704973208683409],
     [0.569672794745565],
     [0.677851909414731],
     [0.896006499567137],
     [0.283184118489911],
     [0.513545922539861],
     [0.961402834952862],
     [0.189402256252582],
     [0.434237393613182],
     [0.808504989769535],
     [0.748995854063648],
     [0.762869262900095],
     [0.892098475892355],
     [0.603224205924784],
     [0.119948770739501],
     [0.0916697554690309],
     [0.540589194791754],
     [0.437392645804026],
     [0.925512966059119],
     [0.811543688783839],
     [0.677025096143116],
     [0.924114973800843],
     [0.395929204975517],
     [0.672367254341385],
     [0.224592419437764],
     [0.0385626374674921],
     [0.893768224614561],
     [0.9294877685148],
     [0.191362412010618],
     [0.843941948549342],
     [0.105452514575961],
     [0.818189012014294],
     [0.403592601831738],
     [0.612296612680617],
     [0.0184971129106104],
     [0.210281340266459],
     [0.907829395840252],
     [0.0136563863624984],
     [0.278489570354849],
     [0.876656444898212],
     [0.243177032707023],
     [0.680012049965813],
     [0.602013549402982],
     [0.0790384034466252],
     [0.80810689645924],
     [0.771182597452632],
     [0.771413759708261],
     [0.173865427874885],
     [0.341010621368946],
     [0.0976444333358669],
     [0.848622346293204],
     [0.610615343685116],
     [0.112472015277834],
     [0.340879879051058],
     [0.0315992461995185],
     [0.494517589044125],
     [0.357235700092592],
     [0.805063117141213],
     [0.87709742267584],
     [0.395721172106169],
     [0.322874651759935],
     [0.767756208864363],
     [0.642701523520449],
     [0.790363501273532],
     [0.396689180657732],
     [0.541051393661496],
     [0.578759450316569],
     [0.849985336047354],
     [0.424291524015262],
     [0.381243776094143],
     [0.137122466804641],
     [0.178181305988802],
     [0.658964425721275],
     [0.477703623593457],
     [0.844011979744866],
     [0.699912503530463],
     [0.347859425035835],
     [0.913315553758827],
     [0.623125340012215],
     [0.401538733625183],
     [0.3876941031867],
     [0.725936893224724],
     [0.615385705417457],
     [0.591140788356122],
     [0.691407939247348],
     [0.996619614202028],
     [0.513611821434025],
     [0.656967950512642]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.58578152])],
     [array([0.68403857])],
     [array([0.86418691])],
     [array([0.29586748])],
     [array([0.67383229])],
     [array([0.99571322])],
     [array([0.17200299])],
     [array([0.54176091])],
     [array([0.46660168])],
     [array([0.3672379])],
     [array([0.64004194])],
     [array([0.702814])],
     [array([0.51346488])],
     [array([0.94282849])],
     [array([0.74450857])],
     [array([0.08015927])],
     [array([0.18097258])],
     [array([0.29752599])],
     [array([0.91135082])],
     [array([0.05065871])],
     [array([0.35747695])],
     [array([0.04042757])],
     [array([0.02509287])],
     [array([0.89988073])],
     [array([0.03794426])],
     [array([0.92788111])],
     [array([0.89959642])],
     [array([0.19237923])],
     [array([0.45545894])],
     [array([0.08857076])],
     [array([0.33163424])],
     [array([0.44901002])],
     [array([0.32183574])],
     [array([0.55269148])],
     [array([0.46435909])],
     [array([0.67175205])],
     [array([0.56889206])],
     [array([0.87532192])],
     [array([0.86278963])],
     [array([0.974368])],
     [array([0.25221238])],
     [array([0.90361802])],
     [array([0.55188859])],
     [array([0.59912681])],
     [array([0.89474164])],
     [array([0.30561978])],
     [array([0.82734039])],
     [array([0.68372928])],
     [array([0.72351264])],
     [array([0.13322672])],
     [array([0.14894511])],
     [array([0.86121108])],
     [array([0.10573003])],
     [array([0.76599088])],
     [array([0.21141906])],
     [array([0.40634996])],
     [array([0.6385548])],
     [array([0.88376292])],
     [array([0.73800308])],
     [array([0.37500994])],
     [array([0.90064526])],
     [array([0.03656698])],
     [array([0.65663304])],
     [array([0.93930818])],
     [array([0.32488402])],
     [array([0.17619812])],
     [array([0.94987251])],
     [array([0.17766321])],
     [array([0.5005373])],
     [array([0.85204306])],
     [array([0.2358244])],
     [array([0.22467036])],
     [array([0.62426739])],
     [array([0.78942457])],
     [array([0.35039869])],
     [array([0.31985904])],
     [array([0.47374829])],
     [array([0.57929996])],
     [array([0.4215719])],
     [array([0.15882751])],
     [array([0.65017797])],
     [array([0.51535701])],
     [array([0.73709214])],
     [array([0.42485452])],
     [array([0.97262736])],
     [array([0.95386959])],
     [array([0.06237483])],
     [array([0.23958439])],
     [array([0.63252422])],
     [array([0.4135544])],
     [array([0.16247503])],
     [array([0.45040456])],
     [array([0.79142311])],
     [array([0.93393026])],
     [array([0.805402])],
     [array([0.91501318])],
     [array([0.18673878])],
     [array([0.92336496])],
     [array([0.58951008])],
     [array([0.27432203])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.58578152, 0.68403857, 0.86418691, 0.29586748, 0.67383229,
           0.99571322, 0.17200299, 0.54176091, 0.46660168, 0.3672379 ,
           0.64004194, 0.702814  , 0.51346488, 0.94282849, 0.74450857,
           0.08015927, 0.18097258, 0.29752599, 0.91135082, 0.05065871,
           0.35747695, 0.04042757, 0.02509287, 0.89988073, 0.03794426,
           0.92788111, 0.89959642, 0.19237923, 0.45545894, 0.08857076,
           0.33163424, 0.44901002, 0.32183574, 0.55269148, 0.46435909,
           0.67175205, 0.56889206, 0.87532192, 0.86278963, 0.974368  ,
           0.25221238, 0.90361802, 0.55188859, 0.59912681, 0.89474164,
           0.30561978, 0.82734039, 0.68372928, 0.72351264, 0.13322672,
           0.14894511, 0.86121108, 0.10573003, 0.76599088, 0.21141906,
           0.40634996, 0.6385548 , 0.88376292, 0.73800308, 0.37500994,
           0.90064526, 0.03656698, 0.65663304, 0.93930818, 0.32488402,
           0.17619812, 0.94987251, 0.17766321, 0.5005373 , 0.85204306,
           0.2358244 , 0.22467036, 0.62426739, 0.78942457, 0.35039869,
           0.31985904, 0.47374829, 0.57929996, 0.4215719 , 0.15882751,
           0.65017797, 0.51535701, 0.73709214, 0.42485452, 0.97262736,
           0.95386959, 0.06237483, 0.23958439, 0.63252422, 0.4135544 ,
           0.16247503, 0.45040456, 0.79142311, 0.93393026, 0.805402  ,
           0.91501318, 0.18673878, 0.92336496, 0.58951008, 0.27432203])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.92139823, 0.76608638, 0.58325076, 0.53816893, 0.95556758,
              0.06035981, 0.8977306 , 0.65943743, 0.02167904, 0.74522799,
              0.28027765, 0.91471566, 0.07049732, 0.56967279, 0.67785191,
              0.8960065 , 0.28318412, 0.51354592, 0.96140283, 0.18940226,
              0.43423739, 0.80850499, 0.74899585, 0.76286926, 0.89209848,
              0.60322421, 0.11994877, 0.09166976, 0.54058919, 0.43739265,
              0.92551297, 0.81154369, 0.6770251 , 0.92411497, 0.3959292 ,
              0.67236725, 0.22459242, 0.03856264, 0.89376822, 0.92948777,
              0.19136241, 0.84394195, 0.10545251, 0.81818901, 0.4035926 ,
              0.61229661, 0.01849711, 0.21028134, 0.9078294 , 0.01365639,
              0.27848957, 0.87665644, 0.24317703, 0.68001205, 0.60201355,
              0.0790384 , 0.8081069 , 0.7711826 , 0.77141376, 0.17386543,
              0.34101062, 0.09764443, 0.84862235, 0.61061534, 0.11247202,
              0.34087988, 0.03159925, 0.49451759, 0.3572357 , 0.80506312,
              0.87709742, 0.39572117, 0.32287465, 0.76775621, 0.64270152,
              0.7903635 , 0.39668918, 0.54105139, 0.57875945, 0.84998534,
              0.42429152, 0.38124378, 0.13712247, 0.17818131, 0.65896443,
              0.47770362, 0.84401198, 0.6999125 , 0.34785943, 0.91331555,
              0.62312534, 0.40153873, 0.3876941 , 0.72593689, 0.61538571,
              0.59114079, 0.69140794, 0.99661961, 0.51361182, 0.65696795])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.56992315, 0.25932217, 0.90108988, 0.73107422, 0.73314282,
              0.13569041, 0.19784874, 0.54289624, 0.76610924, 0.96775368,
              0.45074466, 0.71673266, 0.70904469, 0.79793914, 0.94010669,
              0.87049372, 0.53211164, 0.57866249, 0.02589988, 0.12980659,
              0.63413044, 0.84692277, 0.87274927, 0.02277649, 0.83764704,
              0.14680245, 0.03367355, 0.16370566, 0.56588714, 0.16612454,
              0.99273119, 0.3483465 , 0.25746162, 0.75278322, 0.8887182 ,
              0.55866795, 0.44205619, 0.9066382 , 0.09355538, 0.28992321,
              0.95275994, 0.873728  , 0.22528596, 0.64965321, 0.6123071 ,
              0.5810789 , 0.49916895, 0.94401027, 0.27223835, 0.64019511,
              0.90737029, 0.3667862 , 0.09324967, 0.64297372, 0.99753782,
              0.66598706, 0.44750118, 0.38499258, 0.76539444, 0.17855715,
              0.7902173 , 0.32641564, 0.05001399, 0.06958239, 0.71334384,
              0.52003244, 0.90916846, 0.74553147, 0.18703836, 0.48655887,
              0.39321997, 0.75878199, 0.93721965, 0.35674883, 0.52962358,
              0.23418954, 0.65593606, 0.88539283, 0.80593521, 0.04228742,
              0.57980595, 0.24580388, 0.51894451, 0.68233058, 0.78988706,
              0.1655256 , 0.11901121, 0.93090895, 0.89259479, 0.96586809,
              0.7542171 , 0.61770584, 0.64776986, 0.9220931 , 0.72609571,
              0.03327706, 0.22018875, 0.59443443, 0.90408219, 0.28286516])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.78513338, 0.26462967, 0.6920047 , 0.65883895, 0.1933674 ,
              0.21765417, 0.42865333, 0.10468309, 0.22111819, 0.78153069,
              0.61000305, 0.68165846, 0.05983626, 0.70784737, 0.436606  ,
              0.27925854, 0.02722452, 0.97827033, 0.57311983, 0.45800017,
              0.84869634, 0.68359479, 0.30089457, 0.03866117, 0.84242153,
              0.56726395, 0.1130433 , 0.66635457, 0.8759197 , 0.522829  ,
              0.21609441, 0.61525615, 0.21805057, 0.80008724, 0.43767829,
              0.05746291, 0.75363987, 0.25132906, 0.30977574, 0.54395239,
              0.24262967, 0.37180272, 0.31037404, 0.53667581, 0.64817045,
              0.72322481, 0.94355704, 0.60797003, 0.42999018, 0.32055164,
              0.58969761, 0.10089199, 0.49632686, 0.18749996, 0.57013662,
              0.38938522, 0.52798842, 0.65804379, 0.5340184 , 0.80770261,
              0.44902624, 0.38535876, 0.01413156, 0.02440018, 0.8401388 ,
              0.03599132, 0.36824232, 0.00352938, 0.87955906, 0.74693143,
              0.23897453, 0.0767614 , 0.89682638, 0.23781712, 0.68137771,
              0.8579271 , 0.9080241 , 0.77106861, 0.85490954, 0.46676039,
              0.65831533, 0.81499825, 0.49497368, 0.85222513, 0.92329545,
              0.54768842, 0.26149144, 0.53589352, 0.48158399, 0.73357602,
              0.60321882, 0.75747176, 0.50116939, 0.63249224, 0.97482152,
              0.95531591, 0.64061763, 0.823562  , 0.53072769, 0.5818124 ])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.70462388, 0.74340463, 0.50629136, 0.76169253, 0.90833057,
              0.73789391, 0.31424026, 0.12858312, 0.90455202, 0.77137204,
              0.46713429, 0.79957715, 0.44731563, 0.69693317, 0.51759815,
              0.03608711, 0.35854899, 0.90316995, 0.04872852, 0.54780205,
              0.6865041 , 0.89512723, 0.95552343, 0.77639124, 0.92460057,
              0.40921578, 0.17767243, 0.47856351, 0.38616039, 0.80187353,
              0.88686056, 0.64828211, 0.56343146, 0.82475239, 0.90612822,
              0.13321332, 0.75941818, 0.19428468, 0.68039767, 0.86273815,
              0.78368228, 0.24351959, 0.2373477 , 0.74443622, 0.90162988,
              0.44287864, 0.75051399, 0.21557808, 0.14832114, 0.84212613,
              0.54901463, 0.00913198, 0.83066868, 0.4006938 , 0.73670477,
              0.27001027, 0.63655183, 0.26659438, 0.44926088, 0.28307437,
              0.66377897, 0.83649419, 0.6737873 , 0.63869966, 0.80742106,
              0.0101509 , 0.64223599, 0.18086582, 0.79779482, 0.14281992,
              0.97543543, 0.55658618, 0.51368305, 0.10985236, 0.59129062,
              0.87729008, 0.78330699, 0.68676119, 0.738622  , 0.31480061,
              0.53603787, 0.97646595, 0.07973634, 0.03472105, 0.75333929,
              0.64412503, 0.73469594, 0.0332621 , 0.45133842, 0.93859461,
              0.23978553, 0.71180735, 0.23442822, 0.80100544, 0.16563271,
              0.15031697, 0.5442009 , 0.51450677, 0.15922824, 0.44680574])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.92139823, 0.76608638, 0.58325076, 0.53816893, 0.95556758,
              0.06035981, 0.8977306 , 0.65943743, 0.02167904, 0.74522799,
              0.28027765, 0.91471566, 0.07049732, 0.56967279, 0.67785191,
              0.8960065 , 0.28318412, 0.51354592, 0.96140283, 0.18940226,
              0.43423739, 0.80850499, 0.74899585, 0.76286926, 0.89209848,
              0.60322421, 0.11994877, 0.09166976, 0.54058919, 0.43739265,
              0.92551297, 0.81154369, 0.6770251 , 0.92411497, 0.3959292 ,
              0.67236725, 0.22459242, 0.03856264, 0.89376822, 0.92948777,
              0.19136241, 0.84394195, 0.10545251, 0.81818901, 0.4035926 ,
              0.61229661, 0.01849711, 0.21028134, 0.9078294 , 0.01365639,
              0.27848957, 0.87665644, 0.24317703, 0.68001205, 0.60201355,
              0.0790384 , 0.8081069 , 0.7711826 , 0.77141376, 0.17386543,
              0.34101062, 0.09764443, 0.84862235, 0.61061534, 0.11247202,
              0.34087988, 0.03159925, 0.49451759, 0.3572357 , 0.80506312,
              0.87709742, 0.39572117, 0.32287465, 0.76775621, 0.64270152,
              0.7903635 , 0.39668918, 0.54105139, 0.57875945, 0.84998534,
              0.42429152, 0.38124378, 0.13712247, 0.17818131, 0.65896443,
              0.47770362, 0.84401198, 0.6999125 , 0.34785943, 0.91331555,
              0.62312534, 0.40153873, 0.3876941 , 0.72593689, 0.61538571,
              0.59114079, 0.69140794, 0.99661961, 0.51361182, 0.65696795])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.56992315, 0.25932217, 0.90108988, 0.73107422, 0.73314282,
              0.13569041, 0.19784874, 0.54289624, 0.76610924, 0.96775368,
              0.45074466, 0.71673266, 0.70904469, 0.79793914, 0.94010669,
              0.87049372, 0.53211164, 0.57866249, 0.02589988, 0.12980659,
              0.63413044, 0.84692277, 0.87274927, 0.02277649, 0.83764704,
              0.14680245, 0.03367355, 0.16370566, 0.56588714, 0.16612454,
              0.99273119, 0.3483465 , 0.25746162, 0.75278322, 0.8887182 ,
              0.55866795, 0.44205619, 0.9066382 , 0.09355538, 0.28992321,
              0.95275994, 0.873728  , 0.22528596, 0.64965321, 0.6123071 ,
              0.5810789 , 0.49916895, 0.94401027, 0.27223835, 0.64019511,
              0.90737029, 0.3667862 , 0.09324967, 0.64297372, 0.99753782,
              0.66598706, 0.44750118, 0.38499258, 0.76539444, 0.17855715,
              0.7902173 , 0.32641564, 0.05001399, 0.06958239, 0.71334384,
              0.52003244, 0.90916846, 0.74553147, 0.18703836, 0.48655887,
              0.39321997, 0.75878199, 0.93721965, 0.35674883, 0.52962358,
              0.23418954, 0.65593606, 0.88539283, 0.80593521, 0.04228742,
              0.57980595, 0.24580388, 0.51894451, 0.68233058, 0.78988706,
              0.1655256 , 0.11901121, 0.93090895, 0.89259479, 0.96586809,
              0.7542171 , 0.61770584, 0.64776986, 0.9220931 , 0.72609571,
              0.03327706, 0.22018875, 0.59443443, 0.90408219, 0.28286516])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.78513338, 0.26462967, 0.6920047 , 0.65883895, 0.1933674 ,
              0.21765417, 0.42865333, 0.10468309, 0.22111819, 0.78153069,
              0.61000305, 0.68165846, 0.05983626, 0.70784737, 0.436606  ,
              0.27925854, 0.02722452, 0.97827033, 0.57311983, 0.45800017,
              0.84869634, 0.68359479, 0.30089457, 0.03866117, 0.84242153,
              0.56726395, 0.1130433 , 0.66635457, 0.8759197 , 0.522829  ,
              0.21609441, 0.61525615, 0.21805057, 0.80008724, 0.43767829,
              0.05746291, 0.75363987, 0.25132906, 0.30977574, 0.54395239,
              0.24262967, 0.37180272, 0.31037404, 0.53667581, 0.64817045,
              0.72322481, 0.94355704, 0.60797003, 0.42999018, 0.32055164,
              0.58969761, 0.10089199, 0.49632686, 0.18749996, 0.57013662,
              0.38938522, 0.52798842, 0.65804379, 0.5340184 , 0.80770261,
              0.44902624, 0.38535876, 0.01413156, 0.02440018, 0.8401388 ,
              0.03599132, 0.36824232, 0.00352938, 0.87955906, 0.74693143,
              0.23897453, 0.0767614 , 0.89682638, 0.23781712, 0.68137771,
              0.8579271 , 0.9080241 , 0.77106861, 0.85490954, 0.46676039,
              0.65831533, 0.81499825, 0.49497368, 0.85222513, 0.92329545,
              0.54768842, 0.26149144, 0.53589352, 0.48158399, 0.73357602,
              0.60321882, 0.75747176, 0.50116939, 0.63249224, 0.97482152,
              0.95531591, 0.64061763, 0.823562  , 0.53072769, 0.5818124 ])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.71481132, 0.09266324, 0.28032313, 0.93238822, 0.66829172,
              0.74963535, 0.57914747, 0.68724984, 0.20559665, 0.07033414,
              0.24247063, 0.89776186, 0.80165801, 0.69419761, 0.83927329,
              0.79285751, 0.19102494, 0.6041642 , 0.0546044 , 0.5545076 ,
              0.6475385 , 0.13080265, 0.79918123, 0.53341119, 0.20208804,
              0.56783211, 0.89358242, 0.09434098, 0.42805026, 0.12892958,
              0.66653913, 0.86056674, 0.573758  , 0.10311707, 0.25445393,
              0.32387757, 0.35933409, 0.99226475, 0.51762696, 0.57317829,
              0.04890274, 0.28005486, 0.22149982, 0.7424875 , 0.87790344,
              0.76797384, 0.38581987, 0.67828022, 0.90744925, 0.45403975,
              0.76489744, 0.05642162, 0.07077131, 0.71777831, 0.9879329 ,
              0.39726242, 0.63294713, 0.09529113, 0.63928727, 0.17611869,
              0.8363714 , 0.30460261, 0.07212562, 0.20133257, 0.62169217,
              0.96944551, 0.0805366 , 0.82549211, 0.73333138, 0.60151208,
              0.6705394 , 0.22763593, 0.38485446, 0.6011432 , 0.72750124,
              0.24062384, 0.89725131, 0.3099211 , 0.73835529, 0.76896494,
              0.88896794, 0.04156997, 0.40390428, 0.37606994, 0.48940738,
              0.27732318, 0.67720533, 0.94035114, 0.80032807, 0.27032704,
              0.00851398, 0.42576879, 0.612311  , 0.58837322, 0.66794927,
              0.42908005, 0.10293107, 0.66107993, 0.07331648, 0.2916245 ])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.58578152, 0.68403857, 0.86418691, 0.29586748, 0.67383229,
              0.99571322, 0.17200299, 0.54176091, 0.46660168, 0.3672379 ,
              0.64004194, 0.702814  , 0.51346488, 0.94282849, 0.74450857,
              0.08015927, 0.18097258, 0.29752599, 0.91135082, 0.05065871,
              0.35747695, 0.04042757, 0.02509287, 0.89988073, 0.03794426,
              0.92788111, 0.89959642, 0.19237923, 0.45545894, 0.08857076,
              0.33163424, 0.44901002, 0.32183574, 0.55269148, 0.46435909,
              0.67175205, 0.56889206, 0.87532192, 0.86278963, 0.974368  ,
              0.25221238, 0.90361802, 0.55188859, 0.59912681, 0.89474164,
              0.30561978, 0.82734039, 0.68372928, 0.72351264, 0.13322672,
              0.14894511, 0.86121108, 0.10573003, 0.76599088, 0.21141906,
              0.40634996, 0.6385548 , 0.88376292, 0.73800308, 0.37500994,
              0.90064526, 0.03656698, 0.65663304, 0.93930818, 0.32488402,
              0.17619812, 0.94987251, 0.17766321, 0.5005373 , 0.85204306,
              0.2358244 , 0.22467036, 0.62426739, 0.78942457, 0.35039869,
              0.31985904, 0.47374829, 0.57929996, 0.4215719 , 0.15882751,
              0.65017797, 0.51535701, 0.73709214, 0.42485452, 0.97262736,
              0.95386959, 0.06237483, 0.23958439, 0.63252422, 0.4135544 ,
              0.16247503, 0.45040456, 0.79142311, 0.93393026, 0.805402  ,
              0.91501318, 0.18673878, 0.92336496, 0.58951008, 0.27432203])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.2478849 , 0.21524615, 0.78127499, 0.81218816, 0.87978243,
              0.57740389, 0.23672813, 0.66611501, 0.73356728, 0.27974234,
              0.25236368, 0.47982341, 0.99023151, 0.54331402, 0.38351895,
              0.45887672, 0.43406087, 0.01115671, 0.597924  , 0.19390009,
              0.13095455, 0.2151802 , 0.05165493, 0.69960253, 0.28339319,
              0.2376787 , 0.91244676, 0.28827314, 0.12246418, 0.8127808 ,
              0.12849641, 0.18712121, 0.76984985, 0.73132566, 0.48636698,
              0.01716055, 0.97889022, 0.00241062, 0.44358201, 0.82908851,
              0.3800777 , 0.27889686, 0.53323086, 0.40150317, 0.36015296,
              0.59606367, 0.41843621, 0.37491757, 0.19886573, 0.17961453,
              0.84500016, 0.02338431, 0.07631238, 0.90588986, 0.15255956,
              0.45783682, 0.6632184 , 0.57358936, 0.47496003, 0.13187364,
              0.49310721, 0.627966  , 0.06697948, 0.92187733, 0.18338199,
              0.30780072, 0.43582055, 0.93386143, 0.88894405, 0.31515797,
              0.2944261 , 0.47668431, 0.1005232 , 0.28560528, 0.69603117,
              0.04064191, 0.87163266, 0.62360829, 0.11634677, 0.36106289,
              0.25590924, 0.39829344, 0.54565347, 0.09734388, 0.48927594,
              0.16940161, 0.48755523, 0.5608568 , 0.26329614, 0.41646463,
              0.82325973, 0.88778535, 0.62083094, 0.52808352, 0.88774039,
              0.50159016, 0.98129298, 0.15486123, 0.37677324, 0.94031695])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.47802806, 0.74693032, 0.40259375, 0.63171577, 0.64565426,
              0.88733146, 0.37923761, 0.52085726, 0.93097128, 0.6625074 ,
              0.2213396 , 0.82735053, 0.53759607, 0.25103153, 0.74102184,
              0.92263121, 0.91786194, 0.00671663, 0.36531863, 0.90037558,
              0.5377516 , 0.17065237, 0.8449305 , 0.45651915, 0.18497143,
              0.92155237, 0.41472646, 0.54024185, 0.72949669, 0.49374561,
              0.06552298, 0.47947339, 0.88278319, 0.68589067, 0.05786092,
              0.00208947, 0.83874346, 0.72900895, 0.98546165, 0.56385506,
              0.25528727, 0.20114439, 0.12061223, 0.90518857, 0.75869927,
              0.01872572, 0.71674713, 0.08888579, 0.61809507, 0.40893745,
              0.31528332, 0.76514328, 0.17708315, 0.73664812, 0.32290587,
              0.02698415, 0.97360784, 0.64305179, 0.20006779, 0.53311115,
              0.88499151, 0.19986234, 0.83253963, 0.11232289, 0.84950484,
              0.92145719, 0.94973674, 0.36728887, 0.46540938, 0.145286  ,
              0.88405138, 0.60451831, 0.17761857, 0.46834226, 0.25096128,
              0.93550204, 0.92000751, 0.66155501, 0.274674  , 0.90475561,
              0.44169223, 0.78391284, 0.98991725, 0.89394081, 0.79317718,
              0.05441218, 0.72613319, 0.83183907, 0.61554336, 0.59862933,
              0.55426941, 0.45182286, 0.40839027, 0.452031  , 0.70503148,
              0.56724022, 0.40072152, 0.66999823, 0.26891182, 0.76731621])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.67053666, 0.59492364, 0.85692136, 0.3402075 , 0.77702265,
              0.46792148, 0.92981333, 0.63193773, 0.17578695, 0.31099666,
              0.94172753, 0.71968914, 0.31680747, 0.34624652, 0.75878304,
              0.7400584 , 0.54384297, 0.74762031, 0.25928303, 0.34360339,
              0.81397727, 0.0288161 , 0.61068446, 0.97183115, 0.1326251 ,
              0.39262781, 0.21092582, 0.22765291, 0.30839347, 0.94538374,
              0.55039102, 0.50077231, 0.01046781, 0.26164092, 0.93896825,
              0.09617246, 0.76978149, 0.84376497, 0.56100016, 0.51867307,
              0.91704712, 0.71972424, 0.70709691, 0.96899578, 0.76485386,
              0.97066887, 0.61363582, 0.39061036, 0.34192458, 0.99420212,
              0.68561253, 0.83467791, 0.04659984, 0.75440567, 0.75890075,
              0.29345923, 0.60755387, 0.77582838, 0.3940107 , 0.95923536,
              0.27413999, 0.6684339 , 0.44342483, 0.96814237, 0.7926307 ,
              0.85963035, 0.54249205, 0.26820596, 0.78611487, 0.64380669,
              0.88105673, 0.91504246, 0.80263566, 0.07686053, 0.9225146 ,
              0.82413713, 0.38353529, 0.11796722, 0.55407731, 0.144905  ,
              0.93677625, 0.9030009 , 0.60170152, 0.26300239, 0.52817381,
              0.73087986, 0.050134  , 0.71661094, 0.65804517, 0.73903131,
              0.01327378, 0.56812623, 0.0738281 , 0.67514229, 0.65879105,
              0.95934327, 0.74728812, 0.8050445 , 0.9361254 , 0.4024416 ])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.58578152, 0.68403857, 0.86418691, 0.29586748, 0.67383229,
              0.99571322, 0.17200299, 0.54176091, 0.46660168, 0.3672379 ,
              0.64004194, 0.702814  , 0.51346488, 0.94282849, 0.74450857,
              0.08015927, 0.18097258, 0.29752599, 0.91135082, 0.05065871,
              0.35747695, 0.04042757, 0.02509287, 0.89988073, 0.03794426,
              0.92788111, 0.89959642, 0.19237923, 0.45545894, 0.08857076,
              0.33163424, 0.44901002, 0.32183574, 0.55269148, 0.46435909,
              0.67175205, 0.56889206, 0.87532192, 0.86278963, 0.974368  ,
              0.25221238, 0.90361802, 0.55188859, 0.59912681, 0.89474164,
              0.30561978, 0.82734039, 0.68372928, 0.72351264, 0.13322672,
              0.14894511, 0.86121108, 0.10573003, 0.76599088, 0.21141906,
              0.40634996, 0.6385548 , 0.88376292, 0.73800308, 0.37500994,
              0.90064526, 0.03656698, 0.65663304, 0.93930818, 0.32488402,
              0.17619812, 0.94987251, 0.17766321, 0.5005373 , 0.85204306,
              0.2358244 , 0.22467036, 0.62426739, 0.78942457, 0.35039869,
              0.31985904, 0.47374829, 0.57929996, 0.4215719 , 0.15882751,
              0.65017797, 0.51535701, 0.73709214, 0.42485452, 0.97262736,
              0.95386959, 0.06237483, 0.23958439, 0.63252422, 0.4135544 ,
              0.16247503, 0.45040456, 0.79142311, 0.93393026, 0.805402  ,
              0.91501318, 0.18673878, 0.92336496, 0.58951008, 0.27432203])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.2478849 , 0.21524615, 0.78127499, 0.81218816, 0.87978243,
              0.57740389, 0.23672813, 0.66611501, 0.73356728, 0.27974234,
              0.25236368, 0.47982341, 0.99023151, 0.54331402, 0.38351895,
              0.45887672, 0.43406087, 0.01115671, 0.597924  , 0.19390009,
              0.13095455, 0.2151802 , 0.05165493, 0.69960253, 0.28339319,
              0.2376787 , 0.91244676, 0.28827314, 0.12246418, 0.8127808 ,
              0.12849641, 0.18712121, 0.76984985, 0.73132566, 0.48636698,
              0.01716055, 0.97889022, 0.00241062, 0.44358201, 0.82908851,
              0.3800777 , 0.27889686, 0.53323086, 0.40150317, 0.36015296,
              0.59606367, 0.41843621, 0.37491757, 0.19886573, 0.17961453,
              0.84500016, 0.02338431, 0.07631238, 0.90588986, 0.15255956,
              0.45783682, 0.6632184 , 0.57358936, 0.47496003, 0.13187364,
              0.49310721, 0.627966  , 0.06697948, 0.92187733, 0.18338199,
              0.30780072, 0.43582055, 0.93386143, 0.88894405, 0.31515797,
              0.2944261 , 0.47668431, 0.1005232 , 0.28560528, 0.69603117,
              0.04064191, 0.87163266, 0.62360829, 0.11634677, 0.36106289,
              0.25590924, 0.39829344, 0.54565347, 0.09734388, 0.48927594,
              0.16940161, 0.48755523, 0.5608568 , 0.26329614, 0.41646463,
              0.82325973, 0.88778535, 0.62083094, 0.52808352, 0.88774039,
              0.50159016, 0.98129298, 0.15486123, 0.37677324, 0.94031695])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.47802806, 0.74693032, 0.40259375, 0.63171577, 0.64565426,
              0.88733146, 0.37923761, 0.52085726, 0.93097128, 0.6625074 ,
              0.2213396 , 0.82735053, 0.53759607, 0.25103153, 0.74102184,
              0.92263121, 0.91786194, 0.00671663, 0.36531863, 0.90037558,
              0.5377516 , 0.17065237, 0.8449305 , 0.45651915, 0.18497143,
              0.92155237, 0.41472646, 0.54024185, 0.72949669, 0.49374561,
              0.06552298, 0.47947339, 0.88278319, 0.68589067, 0.05786092,
              0.00208947, 0.83874346, 0.72900895, 0.98546165, 0.56385506,
              0.25528727, 0.20114439, 0.12061223, 0.90518857, 0.75869927,
              0.01872572, 0.71674713, 0.08888579, 0.61809507, 0.40893745,
              0.31528332, 0.76514328, 0.17708315, 0.73664812, 0.32290587,
              0.02698415, 0.97360784, 0.64305179, 0.20006779, 0.53311115,
              0.88499151, 0.19986234, 0.83253963, 0.11232289, 0.84950484,
              0.92145719, 0.94973674, 0.36728887, 0.46540938, 0.145286  ,
              0.88405138, 0.60451831, 0.17761857, 0.46834226, 0.25096128,
              0.93550204, 0.92000751, 0.66155501, 0.274674  , 0.90475561,
              0.44169223, 0.78391284, 0.98991725, 0.89394081, 0.79317718,
              0.05441218, 0.72613319, 0.83183907, 0.61554336, 0.59862933,
              0.55426941, 0.45182286, 0.40839027, 0.452031  , 0.70503148,
              0.56724022, 0.40072152, 0.66999823, 0.26891182, 0.76731621])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.79313691, 0.09319076, 0.64957494, 0.59915407, 0.59584013,
              0.53590186, 0.87884175, 0.53341632, 0.41251779, 0.93247839,
              0.56595729, 0.25038522, 0.10738019, 0.20055684, 0.81960518,
              0.38341183, 0.65118529, 0.21997386, 0.34298798, 0.77924219,
              0.37029187, 0.11777243, 0.09199455, 0.23214579, 0.82449323,
              0.42010278, 0.03376329, 0.33685303, 0.59908263, 0.7566256 ,
              0.83768104, 0.65212232, 0.12719469, 0.18309724, 0.05741619,
              0.60038695, 0.39541571, 0.93149716, 0.03624024, 0.7994622 ,
              0.9463318 , 0.33242282, 0.75924516, 0.2346789 , 0.06605674,
              0.25634278, 0.92760985, 0.24184072, 0.6569485 , 0.24622394,
              0.73922015, 0.09090895, 0.38948728, 0.44717181, 0.36048904,
              0.32986708, 0.66529836, 0.11504749, 0.70637816, 0.14122865,
              0.6463622 , 0.37682703, 0.8352434 , 0.72952208, 0.98432238,
              0.17351671, 0.51713378, 0.58545248, 0.14201265, 0.66249147,
              0.66882664, 0.46252015, 0.98248084, 0.19500738, 0.25836679,
              0.9218418 , 0.50411126, 0.80941283, 0.69333511, 0.58372991,
              0.15183966, 0.10390843, 0.41806576, 0.27708714, 0.05140454,
              0.10647398, 0.76512035, 0.32649212, 0.32677734, 0.10954298,
              0.93457982, 0.51778647, 0.12987283, 0.82027676, 0.54600663,
              0.91556791, 0.87080401, 0.92750358, 0.38641022, 0.48254494])}]]


