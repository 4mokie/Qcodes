
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='346c1407-4d63-45f3-9869-f88ad37a46b5'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='57bfbb39-5607-460f-9b66-847c23ede5ea'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.958126491437264],
     [0.190831402785952],
     [0.358423771524181],
     [0.047065073686272],
     [0.27088923036876],
     [0.548772210037754],
     [0.11600590641592],
     [0.563605178177307],
     [0.786167176209652],
     [0.392032152711961],
     [0.426949368082808],
     [0.812291418088455],
     [0.479354632333412],
     [0.24177100518348],
     [0.712785114896566],
     [0.867767435995522],
     [0.387736039203993],
     [0.71033815321297],
     [0.203609183379514],
     [0.28387500920205],
     [0.789234756043047],
     [0.686036285547102],
     [0.501802825763621],
     [0.495574756219586],
     [0.103333669729861],
     [0.692109465789216],
     [0.995266857256913],
     [0.194093918151291],
     [0.360905038544951],
     [0.0413860862789347],
     [0.930335219383608],
     [0.527733366775137],
     [0.567445465722151],
     [0.666534517507411],
     [0.579273943523799],
     [0.924198408929217],
     [0.984585624586227],
     [0.784069839942494],
     [0.51492124435132],
     [0.892143946949132],
     [0.23812919463579],
     [0.135454312532103],
     [0.0827794725192352],
     [0.902889752193575],
     [0.433633673706113],
     [0.515582501831595],
     [0.590606336172969],
     [0.426626524038713],
     [0.013546085586545],
     [0.469170709888214],
     [0.590264431099017],
     [0.571861103634552],
     [0.118644287923271],
     [0.132834526548228],
     [0.955959851398253],
     [0.498945926883395],
     [0.889920425065896],
     [0.60578921047144],
     [0.965891469460431],
     [0.32029225326451],
     [0.0700080698347753],
     [0.687111627867898],
     [0.901700528211449],
     [0.864069455251736],
     [0.663477044017264],
     [0.821661092188361],
     [0.928286505775272],
     [0.56620111868933],
     [0.632096815296275],
     [0.313237892807402],
     [0.260295622585142],
     [0.47364686902586],
     [0.736017191600747],
     [0.7160333686807],
     [0.642651693550047],
     [0.269010792359035],
     [0.532247204952397],
     [0.773000814038],
     [0.396782328234434],
     [0.553710235532136],
     [0.856327813976103],
     [0.212754211181314],
     [0.167770096841137],
     [0.727719552881586],
     [0.811845943840909],
     [0.708910261175409],
     [0.506151058995763],
     [0.658628976930228],
     [0.903800062028135],
     [0.433334346791447],
     [0.309795716593264],
     [0.677318323425077],
     [0.255017869388689],
     [0.784503833264613],
     [0.534671277243458],
     [0.199593459087991],
     [0.654345764900402],
     [0.483322868644873],
     [0.544784648968005],
     [0.163574067224717]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.31182135])],
     [array([ 0.14034517])],
     [array([ 0.71962249])],
     [array([ 0.84431416])],
     [array([ 0.91144508])],
     [array([ 0.87958285])],
     [array([ 0.11311086])],
     [array([ 0.86936582])],
     [array([ 0.46392524])],
     [array([ 0.73857844])],
     [array([ 0.37212243])],
     [array([ 0.64127741])],
     [array([ 0.8389618])],
     [array([ 0.36093031])],
     [array([ 0.51757615])],
     [array([ 0.98917465])],
     [array([ 0.73013308])],
     [array([ 0.39984087])],
     [array([ 0.36274613])],
     [array([ 0.38848468])],
     [array([ 0.19129371])],
     [array([ 0.39353786])],
     [array([ 0.90411175])],
     [array([ 0.18871195])],
     [array([ 0.13313722])],
     [array([ 0.91915687])],
     [array([ 0.84714675])],
     [array([ 0.54879596])],
     [array([ 0.57420331])],
     [array([ 0.18455544])],
     [array([ 0.45611498])],
     [array([ 0.63937176])],
     [array([ 0.68472951])],
     [array([ 0.2688512])],
     [array([ 0.93815316])],
     [array([ 0.96903385])],
     [array([ 0.47954874])],
     [array([ 0.79193335])],
     [array([ 0.06721747])],
     [array([ 0.31751977])],
     [array([ 0.60803525])],
     [array([ 0.28032077])],
     [array([ 0.59241959])],
     [array([ 0.94707125])],
     [array([ 0.25475695])],
     [array([ 0.23717036])],
     [array([ 0.98540966])],
     [array([ 0.47670613])],
     [array([ 0.98477755])],
     [array([ 0.93285916])],
     [array([ 0.3795033])],
     [array([ 0.47589412])],
     [array([ 0.47953271])],
     [array([ 0.73068919])],
     [array([ 0.48911115])],
     [array([ 0.84437294])],
     [array([ 0.57523739])],
     [array([ 0.72352981])],
     [array([ 0.77239468])],
     [array([ 0.9510888])],
     [array([ 0.64181646])],
     [array([ 0.57967591])],
     [array([ 0.20884258])],
     [array([ 0.89908785])],
     [array([ 0.25714116])],
     [array([ 0.72194834])],
     [array([ 0.86121026])],
     [array([ 0.23657458])],
     [array([ 0.71951971])],
     [array([ 0.26725297])],
     [array([ 0.50034966])],
     [array([ 0.68688019])],
     [array([ 0.16071414])],
     [array([ 0.92240983])],
     [array([ 0.23750132])],
     [array([ 0.15339163])],
     [array([ 0.07118527])],
     [array([ 0.56231184])],
     [array([ 0.05708423])],
     [array([ 0.32006755])],
     [array([ 0.8759049])],
     [array([ 0.19740458])],
     [array([ 0.66044004])],
     [array([ 0.19589322])],
     [array([ 0.32781965])],
     [array([ 0.14449825])],
     [array([ 0.53773208])],
     [array([ 0.39990722])],
     [array([ 0.81041269])],
     [array([ 0.47661071])],
     [array([ 0.20467941])],
     [array([ 0.09280565])],
     [array([ 0.52807935])],
     [array([ 0.72215])],
     [array([ 0.46050707])],
     [array([ 0.26133348])],
     [array([ 0.61923629])],
     [array([ 0.81594439])],
     [array([ 0.0086273])],
     [array([ 0.20096017])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.31182135,  0.14034517,  0.71962249,  0.84431416,  0.91144508,
            0.87958285,  0.11311086,  0.86936582,  0.46392524,  0.73857844,
            0.37212243,  0.64127741,  0.8389618 ,  0.36093031,  0.51757615,
            0.98917465,  0.73013308,  0.39984087,  0.36274613,  0.38848468,
            0.19129371,  0.39353786,  0.90411175,  0.18871195,  0.13313722,
            0.91915687,  0.84714675,  0.54879596,  0.57420331,  0.18455544,
            0.45611498,  0.63937176,  0.68472951,  0.2688512 ,  0.93815316,
            0.96903385,  0.47954874,  0.79193335,  0.06721747,  0.31751977,
            0.60803525,  0.28032077,  0.59241959,  0.94707125,  0.25475695,
            0.23717036,  0.98540966,  0.47670613,  0.98477755,  0.93285916,
            0.3795033 ,  0.47589412,  0.47953271,  0.73068919,  0.48911115,
            0.84437294,  0.57523739,  0.72352981,  0.77239468,  0.9510888 ,
            0.64181646,  0.57967591,  0.20884258,  0.89908785,  0.25714116,
            0.72194834,  0.86121026,  0.23657458,  0.71951971,  0.26725297,
            0.50034966,  0.68688019,  0.16071414,  0.92240983,  0.23750132,
            0.15339163,  0.07118527,  0.56231184,  0.05708423,  0.32006755,
            0.8759049 ,  0.19740458,  0.66044004,  0.19589322,  0.32781965,
            0.14449825,  0.53773208,  0.39990722,  0.81041269,  0.47661071,
            0.20467941,  0.09280565,  0.52807935,  0.72215   ,  0.46050707,
            0.26133348,  0.61923629,  0.81594439,  0.0086273 ,  0.20096017])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.95812649,  0.1908314 ,  0.35842377,  0.04706507,  0.27088923,
               0.54877221,  0.11600591,  0.56360518,  0.78616718,  0.39203215,
               0.42694937,  0.81229142,  0.47935463,  0.24177101,  0.71278511,
               0.86776744,  0.38773604,  0.71033815,  0.20360918,  0.28387501,
               0.78923476,  0.68603629,  0.50180283,  0.49557476,  0.10333367,
               0.69210947,  0.99526686,  0.19409392,  0.36090504,  0.04138609,
               0.93033522,  0.52773337,  0.56744547,  0.66653452,  0.57927394,
               0.92419841,  0.98458562,  0.78406984,  0.51492124,  0.89214395,
               0.23812919,  0.13545431,  0.08277947,  0.90288975,  0.43363367,
               0.5155825 ,  0.59060634,  0.42662652,  0.01354609,  0.46917071,
               0.59026443,  0.5718611 ,  0.11864429,  0.13283453,  0.95595985,
               0.49894593,  0.88992043,  0.60578921,  0.96589147,  0.32029225,
               0.07000807,  0.68711163,  0.90170053,  0.86406946,  0.66347704,
               0.82166109,  0.92828651,  0.56620112,  0.63209682,  0.31323789,
               0.26029562,  0.47364687,  0.73601719,  0.71603337,  0.64265169,
               0.26901079,  0.5322472 ,  0.77300081,  0.39678233,  0.55371024,
               0.85632781,  0.21275421,  0.1677701 ,  0.72771955,  0.81184594,
               0.70891026,  0.50615106,  0.65862898,  0.90380006,  0.43333435,
               0.30979572,  0.67731832,  0.25501787,  0.78450383,  0.53467128,
               0.19959346,  0.65434576,  0.48332287,  0.54478465,  0.16357407])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.35410389,  0.52855455,  0.81634975,  0.61667448,  0.0468369 ,
               0.87384325,  0.15590222,  0.20602144,  0.05587992,  0.0683788 ,
               0.90414111,  0.15204427,  0.78885155,  0.16831927,  0.08577634,
               0.52575336,  0.04835794,  0.7174899 ,  0.61530776,  0.27436198,
               0.22938135,  0.40164278,  0.00597725,  0.73384979,  0.08227565,
               0.07950844,  0.54005416,  0.0636426 ,  0.4475792 ,  0.52947712,
               0.7814497 ,  0.67000177,  0.93598886,  0.74364213,  0.89078114,
               0.75417949,  0.45332599,  0.18893721,  0.78714529,  0.35348625,
               0.37339575,  0.09523841,  0.57654462,  0.87091382,  0.02075572,
               0.33429651,  0.90291292,  0.24463694,  0.9386242 ,  0.13148498,
               0.0354447 ,  0.31560126,  0.14787207,  0.69408992,  0.68655158,
               0.51632582,  0.26896371,  0.42372132,  0.26952052,  0.95576976,
               0.18152021,  0.71589786,  0.0034401 ,  0.08457492,  0.78059212,
               0.39133667,  0.6449236 ,  0.51091424,  0.06727929,  0.31362592,
               0.03059345,  0.76411795,  0.00253864,  0.17597264,  0.90665099,
               0.23784666,  0.92574226,  0.78570744,  0.60372932,  0.01190342,
               0.38267106,  0.25733852,  0.21501076,  0.42566326,  0.70580367,
               0.67136273,  0.13119723,  0.21243191,  0.92411619,  0.01034275,
               0.32366203,  0.54905037,  0.85955138,  0.40082707,  0.05231551,
               0.05771023,  0.35948792,  0.83929147,  0.25591493,  0.77830002])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.48872241,  0.76592368,  0.30095523,  0.99557798,  0.77262765,
               0.85242087,  0.74295787,  0.90262138,  0.556273  ,  0.06098404,
               0.53302852,  0.55873886,  0.60879494,  0.13380286,  0.02398102,
               0.17667957,  0.31640705,  0.90817058,  0.46811007,  0.68443096,
               0.26731106,  0.74012435,  0.79984995,  0.13610549,  0.17056525,
               0.27009027,  0.99031364,  0.15887384,  0.33441012,  0.09574705,
               0.10664189,  0.31399939,  0.46076758,  0.87536747,  0.93364042,
               0.73974101,  0.29918004,  0.09545464,  0.09394624,  0.92668904,
               0.7659517 ,  0.27664153,  0.10334589,  0.7704908 ,  0.43782192,
               0.26174328,  0.86926205,  0.1629036 ,  0.71384144,  0.21782666,
               0.29811551,  0.93706039,  0.65404788,  0.31785132,  0.12846232,
               0.80912864,  0.91299934,  0.0597506 ,  0.25210845,  0.03869543,
               0.37430343,  0.69729799,  0.61166682,  0.75198564,  0.90433198,
               0.13515339,  0.20857466,  0.65470634,  0.33674686,  0.1147621 ,
               0.21577985,  0.97498709,  0.69862503,  0.4433819 ,  0.36661264,
               0.21606312,  0.04175129,  0.68460842,  0.4690732 ,  0.42623993,
               0.37510507,  0.43123317,  0.64860517,  0.76968344,  0.11346121,
               0.33614215,  0.70197381,  0.68806164,  0.2387226 ,  0.38202624,
               0.68568772,  0.32191096,  0.99495007,  0.00475245,  0.19388321,
               0.80117113,  0.6454474 ,  0.25525714,  0.04801048,  0.9919181 ])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([  2.85549239e-01,   3.91311278e-01,   7.20920227e-01,
                5.63123165e-01,   8.26657152e-01,   8.24421797e-01,
                2.60746928e-01,   6.48663312e-01,   4.32192185e-01,
                2.77693186e-01,   5.05102979e-01,   7.11943093e-01,
                9.45249097e-01,   8.91119289e-01,   2.48689437e-01,
                3.07679075e-01,   8.73379213e-02,   7.34471288e-01,
                8.51357091e-01,   3.01185501e-01,   2.35707433e-01,
                8.86673837e-01,   6.92643959e-01,   2.49527845e-01,
                7.17722011e-01,   3.05792202e-01,   7.65190695e-01,
                5.56264437e-01,   3.19383947e-01,   2.24687142e-01,
                9.19737018e-01,   1.53195887e-01,   5.54234295e-01,
                8.50099887e-01,   7.94926758e-01,   4.73302210e-01,
                7.58070115e-01,   1.05789120e-01,   3.65538767e-02,
                2.71568862e-01,   5.91339034e-01,   8.48399308e-01,
                4.06975961e-01,   5.74017803e-01,   6.91209912e-04,
                9.09116078e-01,   9.93082189e-01,   4.78674146e-01,
                1.98556076e-01,   3.34744317e-01,   5.81636592e-01,
                8.00484909e-01,   9.31676510e-01,   3.64118250e-01,
                8.88955545e-01,   1.39389978e-01,   9.08115457e-01,
                8.57441296e-01,   8.16105831e-01,   5.88158590e-02,
                8.58003806e-01,   6.62508068e-01,   2.77295552e-02,
                6.92039628e-01,   7.87814512e-01,   7.64702235e-01,
                1.40772125e-01,   6.11887761e-01,   1.58719342e-01,
                8.67044256e-01,   8.91737287e-01,   3.93006627e-01,
                3.87075548e-01,   3.27323582e-01,   9.01505695e-01,
                5.06743153e-01,   6.22416004e-01,   5.50521411e-01,
                8.74925867e-01,   1.49029392e-01,   8.46568783e-01,
                7.24952269e-01,   7.35629771e-01,   8.16294203e-02,
                7.60384951e-01,   8.70610082e-01,   6.94237526e-02,
                5.09142868e-01,   4.09042552e-01,   4.87378764e-02,
                9.04757415e-01,   7.89330221e-01,   1.38199938e-01,
                5.81694997e-01,   4.05921624e-01,   2.74650978e-01,
                9.67711897e-01,   2.06157083e-01,   8.70396529e-01,
                3.69625024e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.95812649,  0.1908314 ,  0.35842377,  0.04706507,  0.27088923,
               0.54877221,  0.11600591,  0.56360518,  0.78616718,  0.39203215,
               0.42694937,  0.81229142,  0.47935463,  0.24177101,  0.71278511,
               0.86776744,  0.38773604,  0.71033815,  0.20360918,  0.28387501,
               0.78923476,  0.68603629,  0.50180283,  0.49557476,  0.10333367,
               0.69210947,  0.99526686,  0.19409392,  0.36090504,  0.04138609,
               0.93033522,  0.52773337,  0.56744547,  0.66653452,  0.57927394,
               0.92419841,  0.98458562,  0.78406984,  0.51492124,  0.89214395,
               0.23812919,  0.13545431,  0.08277947,  0.90288975,  0.43363367,
               0.5155825 ,  0.59060634,  0.42662652,  0.01354609,  0.46917071,
               0.59026443,  0.5718611 ,  0.11864429,  0.13283453,  0.95595985,
               0.49894593,  0.88992043,  0.60578921,  0.96589147,  0.32029225,
               0.07000807,  0.68711163,  0.90170053,  0.86406946,  0.66347704,
               0.82166109,  0.92828651,  0.56620112,  0.63209682,  0.31323789,
               0.26029562,  0.47364687,  0.73601719,  0.71603337,  0.64265169,
               0.26901079,  0.5322472 ,  0.77300081,  0.39678233,  0.55371024,
               0.85632781,  0.21275421,  0.1677701 ,  0.72771955,  0.81184594,
               0.70891026,  0.50615106,  0.65862898,  0.90380006,  0.43333435,
               0.30979572,  0.67731832,  0.25501787,  0.78450383,  0.53467128,
               0.19959346,  0.65434576,  0.48332287,  0.54478465,  0.16357407])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.35410389,  0.52855455,  0.81634975,  0.61667448,  0.0468369 ,
               0.87384325,  0.15590222,  0.20602144,  0.05587992,  0.0683788 ,
               0.90414111,  0.15204427,  0.78885155,  0.16831927,  0.08577634,
               0.52575336,  0.04835794,  0.7174899 ,  0.61530776,  0.27436198,
               0.22938135,  0.40164278,  0.00597725,  0.73384979,  0.08227565,
               0.07950844,  0.54005416,  0.0636426 ,  0.4475792 ,  0.52947712,
               0.7814497 ,  0.67000177,  0.93598886,  0.74364213,  0.89078114,
               0.75417949,  0.45332599,  0.18893721,  0.78714529,  0.35348625,
               0.37339575,  0.09523841,  0.57654462,  0.87091382,  0.02075572,
               0.33429651,  0.90291292,  0.24463694,  0.9386242 ,  0.13148498,
               0.0354447 ,  0.31560126,  0.14787207,  0.69408992,  0.68655158,
               0.51632582,  0.26896371,  0.42372132,  0.26952052,  0.95576976,
               0.18152021,  0.71589786,  0.0034401 ,  0.08457492,  0.78059212,
               0.39133667,  0.6449236 ,  0.51091424,  0.06727929,  0.31362592,
               0.03059345,  0.76411795,  0.00253864,  0.17597264,  0.90665099,
               0.23784666,  0.92574226,  0.78570744,  0.60372932,  0.01190342,
               0.38267106,  0.25733852,  0.21501076,  0.42566326,  0.70580367,
               0.67136273,  0.13119723,  0.21243191,  0.92411619,  0.01034275,
               0.32366203,  0.54905037,  0.85955138,  0.40082707,  0.05231551,
               0.05771023,  0.35948792,  0.83929147,  0.25591493,  0.77830002])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.48872241,  0.76592368,  0.30095523,  0.99557798,  0.77262765,
               0.85242087,  0.74295787,  0.90262138,  0.556273  ,  0.06098404,
               0.53302852,  0.55873886,  0.60879494,  0.13380286,  0.02398102,
               0.17667957,  0.31640705,  0.90817058,  0.46811007,  0.68443096,
               0.26731106,  0.74012435,  0.79984995,  0.13610549,  0.17056525,
               0.27009027,  0.99031364,  0.15887384,  0.33441012,  0.09574705,
               0.10664189,  0.31399939,  0.46076758,  0.87536747,  0.93364042,
               0.73974101,  0.29918004,  0.09545464,  0.09394624,  0.92668904,
               0.7659517 ,  0.27664153,  0.10334589,  0.7704908 ,  0.43782192,
               0.26174328,  0.86926205,  0.1629036 ,  0.71384144,  0.21782666,
               0.29811551,  0.93706039,  0.65404788,  0.31785132,  0.12846232,
               0.80912864,  0.91299934,  0.0597506 ,  0.25210845,  0.03869543,
               0.37430343,  0.69729799,  0.61166682,  0.75198564,  0.90433198,
               0.13515339,  0.20857466,  0.65470634,  0.33674686,  0.1147621 ,
               0.21577985,  0.97498709,  0.69862503,  0.4433819 ,  0.36661264,
               0.21606312,  0.04175129,  0.68460842,  0.4690732 ,  0.42623993,
               0.37510507,  0.43123317,  0.64860517,  0.76968344,  0.11346121,
               0.33614215,  0.70197381,  0.68806164,  0.2387226 ,  0.38202624,
               0.68568772,  0.32191096,  0.99495007,  0.00475245,  0.19388321,
               0.80117113,  0.6454474 ,  0.25525714,  0.04801048,  0.9919181 ])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.44791955,  0.33252564,  0.39825745,  0.19177598,  0.80671233,
               0.46174255,  0.67112757,  0.81157948,  0.77710109,  0.06615314,
               0.30610875,  0.90777537,  0.81370323,  0.69608993,  0.62773944,
               0.67783783,  0.76332388,  0.63759191,  0.17266607,  0.15973808,
               0.19832765,  0.98003841,  0.5694899 ,  0.1891822 ,  0.23254998,
               0.68399278,  0.80659769,  0.00280863,  0.79095495,  0.40038928,
               0.87747611,  0.90327315,  0.72969938,  0.34275245,  0.07943189,
               0.32572259,  0.84947377,  0.40246681,  0.78904502,  0.58966308,
               0.0344275 ,  0.10750701,  0.79692207,  0.99416693,  0.26031368,
               0.12391645,  0.79397803,  0.33389807,  0.36686079,  0.73521727,
               0.53501099,  0.69950739,  0.77042703,  0.36539673,  0.9451461 ,
               0.82220647,  0.16739011,  0.80126149,  0.66038024,  0.95405562,
               0.73479902,  0.23720127,  0.48911032,  0.86219435,  0.08285536,
               0.34473843,  0.6532046 ,  0.63557786,  0.07131776,  0.86487245,
               0.25721156,  0.49572159,  0.32388821,  0.38217885,  0.94344935,
               0.29903922,  0.37069116,  0.89555867,  0.17667314,  0.1231936 ,
               0.91630881,  0.38523563,  0.58448174,  0.32126502,  0.06551828,
               0.25637792,  0.4602228 ,  0.60159074,  0.42344736,  0.69988361,
               0.42736355,  0.81917692,  0.94192522,  0.66195512,  0.4163009 ,
               0.76160013,  0.29809395,  0.65269863,  0.62812001,  0.63931626])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.31182135,  0.14034517,  0.71962249,  0.84431416,  0.91144508,
               0.87958285,  0.11311086,  0.86936582,  0.46392524,  0.73857844,
               0.37212243,  0.64127741,  0.8389618 ,  0.36093031,  0.51757615,
               0.98917465,  0.73013308,  0.39984087,  0.36274613,  0.38848468,
               0.19129371,  0.39353786,  0.90411175,  0.18871195,  0.13313722,
               0.91915687,  0.84714675,  0.54879596,  0.57420331,  0.18455544,
               0.45611498,  0.63937176,  0.68472951,  0.2688512 ,  0.93815316,
               0.96903385,  0.47954874,  0.79193335,  0.06721747,  0.31751977,
               0.60803525,  0.28032077,  0.59241959,  0.94707125,  0.25475695,
               0.23717036,  0.98540966,  0.47670613,  0.98477755,  0.93285916,
               0.3795033 ,  0.47589412,  0.47953271,  0.73068919,  0.48911115,
               0.84437294,  0.57523739,  0.72352981,  0.77239468,  0.9510888 ,
               0.64181646,  0.57967591,  0.20884258,  0.89908785,  0.25714116,
               0.72194834,  0.86121026,  0.23657458,  0.71951971,  0.26725297,
               0.50034966,  0.68688019,  0.16071414,  0.92240983,  0.23750132,
               0.15339163,  0.07118527,  0.56231184,  0.05708423,  0.32006755,
               0.8759049 ,  0.19740458,  0.66044004,  0.19589322,  0.32781965,
               0.14449825,  0.53773208,  0.39990722,  0.81041269,  0.47661071,
               0.20467941,  0.09280565,  0.52807935,  0.72215   ,  0.46050707,
               0.26133348,  0.61923629,  0.81594439,  0.0086273 ,  0.20096017])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.79823567,  0.90382439,  0.37876986,  0.82198316,  0.53661591,
               0.03588837,  0.13584661,  0.5040061 ,  0.07755532,  0.74181045,
               0.31626148,  0.73502706,  0.41642678,  0.02448276,  0.30114289,
               0.44023671,  0.58309983,  0.60273363,  0.47415688,  0.32928207,
               0.12557036,  0.57021874,  0.04560599,  0.19110957,  0.62219762,
               0.31975453,  0.41758282,  0.73621361,  0.66191356,  0.04547186,
               0.00639102,  0.51095308,  0.26089199,  0.20571517,  0.23153513,
               0.38934977,  0.04000601,  0.77599209,  0.79348115,  0.93844818,
               0.23874859,  0.06381988,  0.35058518,  0.09587614,  0.75445909,
               0.38172594,  0.73774599,  0.33185294,  0.51196989,  0.81997236,
               0.86399733,  0.23718709,  0.34699561,  0.12781829,  0.92674061,
               0.23025919,  0.36275933,  0.58295115,  0.44663699,  0.36585972,
               0.21732413,  0.46542597,  0.62312219,  0.07867179,  0.04473169,
               0.56974664,  0.983766  ,  0.12759686,  0.70208643,  0.08986914,
               0.21434825,  0.65570816,  0.89795876,  0.95985449,  0.30074692,
               0.46706423,  0.14736607,  0.35911961,  0.08265423,  0.90643578,
               0.00502892,  0.36920624,  0.10399659,  0.78281734,  0.52081222,
               0.30399209,  0.52270519,  0.73811867,  0.50408554,  0.56820616,
               0.91096526,  0.02295752,  0.15807122,  0.45180333,  0.48521256,
               0.32854392,  0.53290763,  0.00616369,  0.48783051,  0.56421166])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.93553966,  0.04823784,  0.6553003 ,  0.19487885,  0.00260406,
               0.37053565,  0.78842457,  0.65257642,  0.07488569,  0.05434125,
               0.36786161,  0.07104775,  0.5108031 ,  0.55199961,  0.36651919,
               0.10878348,  0.27763737,  0.44007442,  0.5794464 ,  0.43130575,
               0.8652955 ,  0.52682548,  0.88310285,  0.39762136,  0.64599134,
               0.97413976,  0.17823565,  0.03418703,  0.97835718,  0.80806816,
               0.98806456,  0.26770688,  0.835161  ,  0.59571298,  0.58493935,
               0.72518507,  0.75751155,  0.62059038,  0.20737417,  0.38387286,
               0.06698985,  0.80760127,  0.91115123,  0.15064662,  0.19276544,
               0.98148487,  0.77710318,  0.19055724,  0.43108497,  0.56824485,
               0.85993216,  0.6209295 ,  0.12273986,  0.40486707,  0.21228005,
               0.5320486 ,  0.87671533,  0.84830511,  0.94417439,  0.41135179,
               0.84743698,  0.70633489,  0.41972689,  0.04781348,  0.20256254,
               0.44075929,  0.94274019,  0.89922872,  0.15184468,  0.78149168,
               0.01547788,  0.36075859,  0.7455198 ,  0.08236538,  0.74534209,
               0.86843894,  0.35059416,  0.30973006,  0.1080487 ,  0.44856259,
               0.78396658,  0.72880575,  0.50447322,  0.08813159,  0.87772615,
               0.44298169,  0.48542152,  0.09544631,  0.51754701,  0.90690079,
               0.38967633,  0.98465064,  0.49585163,  0.3863899 ,  0.25904822,
               0.76524605,  0.837328  ,  0.42285534,  0.80362984,  0.26122746])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.90097275,  0.01982683,  0.15034342,  0.97298894,  0.9038831 ,
               0.2326376 ,  0.723891  ,  0.54063169,  0.96297426,  0.30294189,
               0.40808466,  0.80869772,  0.68435486,  0.62482974,  0.44661091,
               0.25704714,  0.12073616,  0.45661998,  0.53271311,  0.80659221,
               0.67378129,  0.66192447,  0.26235785,  0.03769948,  0.86496765,
               0.78992112,  0.59760624,  0.79769248,  0.60142654,  0.45530289,
               0.39226098,  0.41850197,  0.64177429,  0.95435525,  0.40878961,
               0.93174304,  0.61549322,  0.16988407,  0.9969963 ,  0.37376926,
               0.4096585 ,  0.34757688,  0.83693203,  0.27696427,  0.11982856,
               0.36482683,  0.28402521,  0.39282162,  0.27882432,  0.63163694,
               0.03736934,  0.85504053,  0.17653626,  0.89790844,  0.66301464,
               0.4632069 ,  0.3716814 ,  0.99235597,  0.12236956,  0.96086647,
               0.03309955,  0.05513434,  0.29396936,  0.56793721,  0.61687845,
               0.93272529,  0.71175819,  0.02260427,  0.5174649 ,  0.14723427,
               0.64784927,  0.80301041,  0.46444297,  0.25143729,  0.88376342,
               0.45425459,  0.35440261,  0.51643294,  0.65927051,  0.63734024,
               0.34111873,  0.40147065,  0.72133297,  0.31980688,  0.8939079 ,
               0.9003739 ,  0.40747971,  0.79128884,  0.87494778,  0.20423916,
               0.45755793,  0.0908614 ,  0.0461817 ,  0.59020508,  0.19503252,
               0.34467687,  0.08491331,  0.17048757,  0.38495367,  0.64904649])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.31182135,  0.14034517,  0.71962249,  0.84431416,  0.91144508,
               0.87958285,  0.11311086,  0.86936582,  0.46392524,  0.73857844,
               0.37212243,  0.64127741,  0.8389618 ,  0.36093031,  0.51757615,
               0.98917465,  0.73013308,  0.39984087,  0.36274613,  0.38848468,
               0.19129371,  0.39353786,  0.90411175,  0.18871195,  0.13313722,
               0.91915687,  0.84714675,  0.54879596,  0.57420331,  0.18455544,
               0.45611498,  0.63937176,  0.68472951,  0.2688512 ,  0.93815316,
               0.96903385,  0.47954874,  0.79193335,  0.06721747,  0.31751977,
               0.60803525,  0.28032077,  0.59241959,  0.94707125,  0.25475695,
               0.23717036,  0.98540966,  0.47670613,  0.98477755,  0.93285916,
               0.3795033 ,  0.47589412,  0.47953271,  0.73068919,  0.48911115,
               0.84437294,  0.57523739,  0.72352981,  0.77239468,  0.9510888 ,
               0.64181646,  0.57967591,  0.20884258,  0.89908785,  0.25714116,
               0.72194834,  0.86121026,  0.23657458,  0.71951971,  0.26725297,
               0.50034966,  0.68688019,  0.16071414,  0.92240983,  0.23750132,
               0.15339163,  0.07118527,  0.56231184,  0.05708423,  0.32006755,
               0.8759049 ,  0.19740458,  0.66044004,  0.19589322,  0.32781965,
               0.14449825,  0.53773208,  0.39990722,  0.81041269,  0.47661071,
               0.20467941,  0.09280565,  0.52807935,  0.72215   ,  0.46050707,
               0.26133348,  0.61923629,  0.81594439,  0.0086273 ,  0.20096017])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.79823567,  0.90382439,  0.37876986,  0.82198316,  0.53661591,
               0.03588837,  0.13584661,  0.5040061 ,  0.07755532,  0.74181045,
               0.31626148,  0.73502706,  0.41642678,  0.02448276,  0.30114289,
               0.44023671,  0.58309983,  0.60273363,  0.47415688,  0.32928207,
               0.12557036,  0.57021874,  0.04560599,  0.19110957,  0.62219762,
               0.31975453,  0.41758282,  0.73621361,  0.66191356,  0.04547186,
               0.00639102,  0.51095308,  0.26089199,  0.20571517,  0.23153513,
               0.38934977,  0.04000601,  0.77599209,  0.79348115,  0.93844818,
               0.23874859,  0.06381988,  0.35058518,  0.09587614,  0.75445909,
               0.38172594,  0.73774599,  0.33185294,  0.51196989,  0.81997236,
               0.86399733,  0.23718709,  0.34699561,  0.12781829,  0.92674061,
               0.23025919,  0.36275933,  0.58295115,  0.44663699,  0.36585972,
               0.21732413,  0.46542597,  0.62312219,  0.07867179,  0.04473169,
               0.56974664,  0.983766  ,  0.12759686,  0.70208643,  0.08986914,
               0.21434825,  0.65570816,  0.89795876,  0.95985449,  0.30074692,
               0.46706423,  0.14736607,  0.35911961,  0.08265423,  0.90643578,
               0.00502892,  0.36920624,  0.10399659,  0.78281734,  0.52081222,
               0.30399209,  0.52270519,  0.73811867,  0.50408554,  0.56820616,
               0.91096526,  0.02295752,  0.15807122,  0.45180333,  0.48521256,
               0.32854392,  0.53290763,  0.00616369,  0.48783051,  0.56421166])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.93553966,  0.04823784,  0.6553003 ,  0.19487885,  0.00260406,
               0.37053565,  0.78842457,  0.65257642,  0.07488569,  0.05434125,
               0.36786161,  0.07104775,  0.5108031 ,  0.55199961,  0.36651919,
               0.10878348,  0.27763737,  0.44007442,  0.5794464 ,  0.43130575,
               0.8652955 ,  0.52682548,  0.88310285,  0.39762136,  0.64599134,
               0.97413976,  0.17823565,  0.03418703,  0.97835718,  0.80806816,
               0.98806456,  0.26770688,  0.835161  ,  0.59571298,  0.58493935,
               0.72518507,  0.75751155,  0.62059038,  0.20737417,  0.38387286,
               0.06698985,  0.80760127,  0.91115123,  0.15064662,  0.19276544,
               0.98148487,  0.77710318,  0.19055724,  0.43108497,  0.56824485,
               0.85993216,  0.6209295 ,  0.12273986,  0.40486707,  0.21228005,
               0.5320486 ,  0.87671533,  0.84830511,  0.94417439,  0.41135179,
               0.84743698,  0.70633489,  0.41972689,  0.04781348,  0.20256254,
               0.44075929,  0.94274019,  0.89922872,  0.15184468,  0.78149168,
               0.01547788,  0.36075859,  0.7455198 ,  0.08236538,  0.74534209,
               0.86843894,  0.35059416,  0.30973006,  0.1080487 ,  0.44856259,
               0.78396658,  0.72880575,  0.50447322,  0.08813159,  0.87772615,
               0.44298169,  0.48542152,  0.09544631,  0.51754701,  0.90690079,
               0.38967633,  0.98465064,  0.49585163,  0.3863899 ,  0.25904822,
               0.76524605,  0.837328  ,  0.42285534,  0.80362984,  0.26122746])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.59225748,  0.77548798,  0.74543332,  0.16020954,  0.15509873,
               0.79190185,  0.10146274,  0.9057365 ,  0.64640979,  0.87168983,
               0.39493023,  0.76890245,  0.85706974,  0.91717269,  0.75858956,
               0.38435754,  0.92104802,  0.83858961,  0.98222453,  0.5297555 ,
               0.12485644,  0.53142863,  0.35961403,  0.22835067,  0.27659424,
               0.67268447,  0.24620534,  0.75442321,  0.65813591,  0.80196748,
               0.79208396,  0.95178451,  0.96779342,  0.57003157,  0.40776133,
               0.49399729,  0.92557746,  0.23738937,  0.5785232 ,  0.42372789,
               0.44359444,  0.20768714,  0.73698951,  0.94720789,  0.83504103,
               0.21759003,  0.69397466,  0.18923225,  0.72007203,  0.18678718,
               0.22588113,  0.78836164,  0.10025335,  0.66479871,  0.85374356,
               0.21339644,  0.7246052 ,  0.32645168,  0.52501436,  0.48191576,
               0.07761333,  0.39652209,  0.76857118,  0.94032295,  0.19916844,
               0.46419585,  0.36785323,  0.15619985,  0.94389954,  0.851665  ,
               0.08887169,  0.03199999,  0.72308255,  0.04496042,  0.04489167,
               0.58210794,  0.79022928,  0.56818619,  0.77543764,  0.9268682 ,
               0.83681627,  0.60765226,  0.65154338,  0.33369262,  0.74138799,
               0.72174616,  0.38335584,  0.77272853,  0.17536798,  0.44304598,
               0.31183684,  0.92433915,  0.7593071 ,  0.0167873 ,  0.81295562,
               0.07901001,  0.48369272,  0.14850017,  0.76247315,  0.07522739])}]]


