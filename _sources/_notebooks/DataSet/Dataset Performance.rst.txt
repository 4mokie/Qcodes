
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='9f1dcf19-a907-4b49-b895-0f9e978ab9fc'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='c9aaa9ae-a75b-4cd6-8468-512aa25a3829'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.470125461874112],
     [0.738789901045977],
     [0.511555183184284],
     [0.446919437100424],
     [0.395614866940997],
     [0.826530150939813],
     [0.615857323051321],
     [0.724034018036143],
     [0.169507801393944],
     [0.886019654571262],
     [0.774093888982003],
     [0.94711755629307],
     [0.852766692646345],
     [0.69806511850411],
     [0.459683917177956],
     [0.014337296508534],
     [0.653074715673009],
     [0.357435752129572],
     [0.288063230576927],
     [0.433224476513207],
     [0.0033606150623311],
     [0.707075834656797],
     [0.995338953407691],
     [0.415931718342799],
     [0.621702874297373],
     [0.931454722640813],
     [0.89273166811985],
     [0.54932718729929],
     [0.315804879527793],
     [0.548241138406127],
     [0.0462948755379006],
     [0.55576221498043],
     [0.618480875213402],
     [0.797660918812882],
     [0.122321702014096],
     [0.455884056445119],
     [0.582142129516914],
     [0.323564889840578],
     [0.633667909815746],
     [0.447976495933874],
     [0.547558676759453],
     [0.925351791675106],
     [0.183946020564871],
     [0.719382239317098],
     [0.27992987344884],
     [0.467110281547589],
     [0.542366720027095],
     [0.761757198208894],
     [0.29320115271927],
     [0.911652023687407],
     [0.327602227650364],
     [0.108189159695773],
     [0.540744129212682],
     [0.692060353073454],
     [0.808287228055345],
     [0.671291766151915],
     [0.0384458299106604],
     [0.448620776391586],
     [0.62469875330628],
     [0.413811387442126],
     [0.554683677336599],
     [0.930301391941825],
     [0.701890984377598],
     [0.138055975997147],
     [0.941764632394659],
     [0.765153730022943],
     [0.280575877890718],
     [0.440163313337036],
     [0.0673368578115788],
     [0.071911363129823],
     [0.614825912719489],
     [0.122321944074442],
     [0.237259796501244],
     [0.545126020409738],
     [0.825665326344022],
     [0.111193504640407],
     [0.989593949729803],
     [0.0814319483636783],
     [0.317070436621681],
     [0.346021575612523],
     [0.882621892300628],
     [0.613425509969913],
     [0.639432244639509],
     [0.143020138387564],
     [0.670987574773658],
     [0.439047385637229],
     [0.285463681998233],
     [0.993210404249218],
     [0.920150755456363],
     [0.740991371499471],
     [0.901476350213329],
     [0.0312148714978359],
     [0.195164479866251],
     [0.972121735647201],
     [0.449441553986222],
     [0.208340450863762],
     [0.00869273659092762],
     [0.320379342971924],
     [0.795552107480526],
     [0.415875332075617]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.54894828])],
     [array([ 0.91563152])],
     [array([ 0.12231719])],
     [array([ 0.72406347])],
     [array([ 0.87798889])],
     [array([ 0.35438703])],
     [array([ 0.7734693])],
     [array([ 0.55121595])],
     [array([ 0.22056292])],
     [array([ 0.08586254])],
     [array([ 0.41512893])],
     [array([ 0.05779974])],
     [array([ 0.69101696])],
     [array([ 0.75991989])],
     [array([ 0.39251264])],
     [array([ 0.03877736])],
     [array([ 0.7332699])],
     [array([ 0.40162581])],
     [array([ 0.27757257])],
     [array([ 0.09262494])],
     [array([ 0.94033892])],
     [array([ 0.62638131])],
     [array([ 0.97593264])],
     [array([ 0.63653027])],
     [array([ 0.60240943])],
     [array([ 0.98913168])],
     [array([ 0.77144551])],
     [array([ 0.28769816])],
     [array([ 0.59213522])],
     [array([ 0.11988956])],
     [array([ 0.75029958])],
     [array([ 0.20906946])],
     [array([ 0.32492437])],
     [array([ 0.3503785])],
     [array([ 0.55719197])],
     [array([ 0.58441898])],
     [array([ 0.7086312])],
     [array([ 0.97753324])],
     [array([ 0.04437775])],
     [array([ 0.17947744])],
     [array([ 0.0926999])],
     [array([ 0.30138187])],
     [array([ 0.89870577])],
     [array([ 0.80586788])],
     [array([ 0.47734806])],
     [array([ 0.06239282])],
     [array([ 0.23084941])],
     [array([ 0.24132353])],
     [array([ 0.53620741])],
     [array([ 0.61758008])],
     [array([ 0.85612927])],
     [array([ 0.96209422])],
     [array([ 0.22420852])],
     [array([ 0.51325817])],
     [array([ 0.75898449])],
     [array([ 0.4919478])],
     [array([ 0.8827285])],
     [array([ 0.89021474])],
     [array([ 0.9312372])],
     [array([ 0.86134695])],
     [array([ 0.66778666])],
     [array([ 0.57320123])],
     [array([ 0.66033445])],
     [array([ 0.68448802])],
     [array([ 0.25342565])],
     [array([ 0.4753761])],
     [array([ 0.71257632])],
     [array([ 0.54039335])],
     [array([ 0.37219379])],
     [array([ 0.30154109])],
     [array([ 0.17872518])],
     [array([ 0.36945546])],
     [array([ 0.41519185])],
     [array([ 0.34231745])],
     [array([ 0.92068534])],
     [array([ 0.19033164])],
     [array([ 0.29703663])],
     [array([ 0.8446808])],
     [array([ 0.13688447])],
     [array([ 0.8645684])],
     [array([ 0.96030517])],
     [array([ 0.16974656])],
     [array([ 0.47256467])],
     [array([ 0.74239381])],
     [array([ 0.79908227])],
     [array([ 0.66751206])],
     [array([ 0.06153778])],
     [array([ 0.14299534])],
     [array([ 0.31895953])],
     [array([ 0.21234851])],
     [array([ 0.70731467])],
     [array([ 0.86303623])],
     [array([ 0.28484397])],
     [array([ 0.57144989])],
     [array([ 0.35318489])],
     [array([ 0.01626081])],
     [array([ 0.16839282])],
     [array([ 0.10569096])],
     [array([ 0.27953051])],
     [array([ 0.56972936])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.54894828,  0.91563152,  0.12231719,  0.72406347,  0.87798889,
            0.35438703,  0.7734693 ,  0.55121595,  0.22056292,  0.08586254,
            0.41512893,  0.05779974,  0.69101696,  0.75991989,  0.39251264,
            0.03877736,  0.7332699 ,  0.40162581,  0.27757257,  0.09262494,
            0.94033892,  0.62638131,  0.97593264,  0.63653027,  0.60240943,
            0.98913168,  0.77144551,  0.28769816,  0.59213522,  0.11988956,
            0.75029958,  0.20906946,  0.32492437,  0.3503785 ,  0.55719197,
            0.58441898,  0.7086312 ,  0.97753324,  0.04437775,  0.17947744,
            0.0926999 ,  0.30138187,  0.89870577,  0.80586788,  0.47734806,
            0.06239282,  0.23084941,  0.24132353,  0.53620741,  0.61758008,
            0.85612927,  0.96209422,  0.22420852,  0.51325817,  0.75898449,
            0.4919478 ,  0.8827285 ,  0.89021474,  0.9312372 ,  0.86134695,
            0.66778666,  0.57320123,  0.66033445,  0.68448802,  0.25342565,
            0.4753761 ,  0.71257632,  0.54039335,  0.37219379,  0.30154109,
            0.17872518,  0.36945546,  0.41519185,  0.34231745,  0.92068534,
            0.19033164,  0.29703663,  0.8446808 ,  0.13688447,  0.8645684 ,
            0.96030517,  0.16974656,  0.47256467,  0.74239381,  0.79908227,
            0.66751206,  0.06153778,  0.14299534,  0.31895953,  0.21234851,
            0.70731467,  0.86303623,  0.28484397,  0.57144989,  0.35318489,
            0.01626081,  0.16839282,  0.10569096,  0.27953051,  0.56972936])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.47012546,  0.7387899 ,  0.51155518,  0.44691944,  0.39561487,
               0.82653015,  0.61585732,  0.72403402,  0.1695078 ,  0.88601965,
               0.77409389,  0.94711756,  0.85276669,  0.69806512,  0.45968392,
               0.0143373 ,  0.65307472,  0.35743575,  0.28806323,  0.43322448,
               0.00336062,  0.70707583,  0.99533895,  0.41593172,  0.62170287,
               0.93145472,  0.89273167,  0.54932719,  0.31580488,  0.54824114,
               0.04629488,  0.55576221,  0.61848088,  0.79766092,  0.1223217 ,
               0.45588406,  0.58214213,  0.32356489,  0.63366791,  0.4479765 ,
               0.54755868,  0.92535179,  0.18394602,  0.71938224,  0.27992987,
               0.46711028,  0.54236672,  0.7617572 ,  0.29320115,  0.91165202,
               0.32760223,  0.10818916,  0.54074413,  0.69206035,  0.80828723,
               0.67129177,  0.03844583,  0.44862078,  0.62469875,  0.41381139,
               0.55468368,  0.93030139,  0.70189098,  0.13805598,  0.94176463,
               0.76515373,  0.28057588,  0.44016331,  0.06733686,  0.07191136,
               0.61482591,  0.12232194,  0.2372598 ,  0.54512602,  0.82566533,
               0.1111935 ,  0.98959395,  0.08143195,  0.31707044,  0.34602158,
               0.88262189,  0.61342551,  0.63943224,  0.14302014,  0.67098757,
               0.43904739,  0.28546368,  0.9932104 ,  0.92015076,  0.74099137,
               0.90147635,  0.03121487,  0.19516448,  0.97212174,  0.44944155,
               0.20834045,  0.00869274,  0.32037934,  0.79555211,  0.41587533])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.8003646 ,  0.88999729,  0.48359478,  0.42818798,  0.91672651,
               0.51473836,  0.86755097,  0.12745175,  0.26061799,  0.18150606,
               0.81293677,  0.66095403,  0.32659948,  0.33735474,  0.9694923 ,
               0.93713054,  0.01538047,  0.83671443,  0.43835991,  0.51527177,
               0.36291529,  0.36962897,  0.19982503,  0.53858698,  0.33622013,
               0.97726199,  0.23257715,  0.14665866,  0.12794196,  0.207642  ,
               0.66034875,  0.72582568,  0.66688181,  0.8155346 ,  0.61632297,
               0.24858824,  0.57130252,  0.04824605,  0.56901048,  0.87348808,
               0.87782109,  0.89047901,  0.66995122,  0.2841998 ,  0.52097655,
               0.29320186,  0.39227177,  0.31763683,  0.32756316,  0.65769344,
               0.00437393,  0.93367322,  0.8478989 ,  0.47984307,  0.74760883,
               0.51128671,  0.38241288,  0.97397158,  0.15693492,  0.35499682,
               0.37244624,  0.86414412,  0.10295404,  0.36870788,  0.17790566,
               0.3342202 ,  0.26488746,  0.71026741,  0.48286208,  0.20300041,
               0.25150424,  0.62113296,  0.60400892,  0.99434966,  0.27028338,
               0.60344688,  0.04271923,  0.21199187,  0.08645183,  0.21147332,
               0.70770173,  0.79527299,  0.57353031,  0.71377701,  0.7064593 ,
               0.78378287,  0.31747483,  0.54208002,  0.67278299,  0.44435166,
               0.31067443,  0.09502398,  0.33159744,  0.40720498,  0.82346088,
               0.26323696,  0.01548772,  0.52957936,  0.5814236 ,  0.69987017])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.11090484,  0.25387505,  0.65610555,  0.31125499,  0.8423    ,
               0.67682705,  0.76368018,  0.86119254,  0.05292173,  0.71840145,
               0.17704851,  0.48887652,  0.72232209,  0.36125176,  0.7068772 ,
               0.69122331,  0.91521418,  0.28154711,  0.05749999,  0.83699705,
               0.41675207,  0.83335871,  0.92243868,  0.43609277,  0.37788801,
               0.10736841,  0.90245478,  0.03664071,  0.13828686,  0.73243139,
               0.43511107,  0.02172043,  0.36376234,  0.19306258,  0.12765514,
               0.89490174,  0.02536827,  0.36325807,  0.21611689,  0.19036895,
               0.17568856,  0.61815436,  0.68109139,  0.78353258,  0.63491338,
               0.03971679,  0.9558848 ,  0.66997532,  0.51718366,  0.02951557,
               0.78432701,  0.08898764,  0.8895964 ,  0.58505992,  0.69977552,
               0.71227323,  0.00391195,  0.87098497,  0.76069003,  0.482769  ,
               0.20957286,  0.6090664 ,  0.83861837,  0.21273951,  0.64841244,
               0.67562813,  0.42365205,  0.96640826,  0.25635801,  0.09471827,
               0.80442165,  0.46984574,  0.05214985,  0.24183342,  0.47344147,
               0.59581212,  0.81487903,  0.61919595,  0.57083655,  0.00245466,
               0.85311236,  0.39169689,  0.28635772,  0.80603836,  0.55508655,
               0.90553327,  0.60195361,  0.04465867,  0.06666949,  0.20250841,
               0.13666466,  0.94790642,  0.12119616,  0.29502662,  0.13268582,
               0.48782274,  0.01087472,  0.77312689,  0.6868677 ,  0.78294066])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.37003673,  0.04224879,  0.8040454 ,  0.31270951,  0.97505855,
               0.90103694,  0.89466839,  0.12725667,  0.53468358,  0.16444075,
               0.45948056,  0.15883118,  0.20055721,  0.24559688,  0.5894926 ,
               0.20289509,  0.57581014,  0.28103795,  0.64646608,  0.94553561,
               0.10664322,  0.36200163,  0.74081592,  0.98686474,  0.30643972,
               0.10793323,  0.93115725,  0.04198368,  0.70648563,  0.91995476,
               0.19085635,  0.5182249 ,  0.1032947 ,  0.64447246,  0.46956156,
               0.35583963,  0.8898689 ,  0.05013393,  0.88907408,  0.77113228,
               0.7370075 ,  0.2764418 ,  0.50770773,  0.58690738,  0.48031055,
               0.66284503,  0.50992731,  0.71883236,  0.12261718,  0.92725987,
               0.96657901,  0.11164984,  0.77935597,  0.17312273,  0.69316213,
               0.63900118,  0.63629235,  0.76272658,  0.7034767 ,  0.0379922 ,
               0.59107001,  0.23034631,  0.51377369,  0.12279252,  0.31326328,
               0.83162214,  0.92216258,  0.81334965,  0.15837762,  0.86733723,
               0.04557655,  0.10510821,  0.27163948,  0.15762254,  0.75778817,
               0.91591447,  0.39376441,  0.52346025,  0.77377594,  0.88934278,
               0.33634507,  0.51623305,  0.71579681,  0.88933574,  0.9828647 ,
               0.5240268 ,  0.20756358,  0.330585  ,  0.51479156,  0.79095415,
               0.57056509,  0.78926194,  0.1181016 ,  0.43970224,  0.46643359,
               0.08510351,  0.10845064,  0.02044918,  0.50251401,  0.67892906])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.47012546,  0.7387899 ,  0.51155518,  0.44691944,  0.39561487,
               0.82653015,  0.61585732,  0.72403402,  0.1695078 ,  0.88601965,
               0.77409389,  0.94711756,  0.85276669,  0.69806512,  0.45968392,
               0.0143373 ,  0.65307472,  0.35743575,  0.28806323,  0.43322448,
               0.00336062,  0.70707583,  0.99533895,  0.41593172,  0.62170287,
               0.93145472,  0.89273167,  0.54932719,  0.31580488,  0.54824114,
               0.04629488,  0.55576221,  0.61848088,  0.79766092,  0.1223217 ,
               0.45588406,  0.58214213,  0.32356489,  0.63366791,  0.4479765 ,
               0.54755868,  0.92535179,  0.18394602,  0.71938224,  0.27992987,
               0.46711028,  0.54236672,  0.7617572 ,  0.29320115,  0.91165202,
               0.32760223,  0.10818916,  0.54074413,  0.69206035,  0.80828723,
               0.67129177,  0.03844583,  0.44862078,  0.62469875,  0.41381139,
               0.55468368,  0.93030139,  0.70189098,  0.13805598,  0.94176463,
               0.76515373,  0.28057588,  0.44016331,  0.06733686,  0.07191136,
               0.61482591,  0.12232194,  0.2372598 ,  0.54512602,  0.82566533,
               0.1111935 ,  0.98959395,  0.08143195,  0.31707044,  0.34602158,
               0.88262189,  0.61342551,  0.63943224,  0.14302014,  0.67098757,
               0.43904739,  0.28546368,  0.9932104 ,  0.92015076,  0.74099137,
               0.90147635,  0.03121487,  0.19516448,  0.97212174,  0.44944155,
               0.20834045,  0.00869274,  0.32037934,  0.79555211,  0.41587533])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.8003646 ,  0.88999729,  0.48359478,  0.42818798,  0.91672651,
               0.51473836,  0.86755097,  0.12745175,  0.26061799,  0.18150606,
               0.81293677,  0.66095403,  0.32659948,  0.33735474,  0.9694923 ,
               0.93713054,  0.01538047,  0.83671443,  0.43835991,  0.51527177,
               0.36291529,  0.36962897,  0.19982503,  0.53858698,  0.33622013,
               0.97726199,  0.23257715,  0.14665866,  0.12794196,  0.207642  ,
               0.66034875,  0.72582568,  0.66688181,  0.8155346 ,  0.61632297,
               0.24858824,  0.57130252,  0.04824605,  0.56901048,  0.87348808,
               0.87782109,  0.89047901,  0.66995122,  0.2841998 ,  0.52097655,
               0.29320186,  0.39227177,  0.31763683,  0.32756316,  0.65769344,
               0.00437393,  0.93367322,  0.8478989 ,  0.47984307,  0.74760883,
               0.51128671,  0.38241288,  0.97397158,  0.15693492,  0.35499682,
               0.37244624,  0.86414412,  0.10295404,  0.36870788,  0.17790566,
               0.3342202 ,  0.26488746,  0.71026741,  0.48286208,  0.20300041,
               0.25150424,  0.62113296,  0.60400892,  0.99434966,  0.27028338,
               0.60344688,  0.04271923,  0.21199187,  0.08645183,  0.21147332,
               0.70770173,  0.79527299,  0.57353031,  0.71377701,  0.7064593 ,
               0.78378287,  0.31747483,  0.54208002,  0.67278299,  0.44435166,
               0.31067443,  0.09502398,  0.33159744,  0.40720498,  0.82346088,
               0.26323696,  0.01548772,  0.52957936,  0.5814236 ,  0.69987017])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.11090484,  0.25387505,  0.65610555,  0.31125499,  0.8423    ,
               0.67682705,  0.76368018,  0.86119254,  0.05292173,  0.71840145,
               0.17704851,  0.48887652,  0.72232209,  0.36125176,  0.7068772 ,
               0.69122331,  0.91521418,  0.28154711,  0.05749999,  0.83699705,
               0.41675207,  0.83335871,  0.92243868,  0.43609277,  0.37788801,
               0.10736841,  0.90245478,  0.03664071,  0.13828686,  0.73243139,
               0.43511107,  0.02172043,  0.36376234,  0.19306258,  0.12765514,
               0.89490174,  0.02536827,  0.36325807,  0.21611689,  0.19036895,
               0.17568856,  0.61815436,  0.68109139,  0.78353258,  0.63491338,
               0.03971679,  0.9558848 ,  0.66997532,  0.51718366,  0.02951557,
               0.78432701,  0.08898764,  0.8895964 ,  0.58505992,  0.69977552,
               0.71227323,  0.00391195,  0.87098497,  0.76069003,  0.482769  ,
               0.20957286,  0.6090664 ,  0.83861837,  0.21273951,  0.64841244,
               0.67562813,  0.42365205,  0.96640826,  0.25635801,  0.09471827,
               0.80442165,  0.46984574,  0.05214985,  0.24183342,  0.47344147,
               0.59581212,  0.81487903,  0.61919595,  0.57083655,  0.00245466,
               0.85311236,  0.39169689,  0.28635772,  0.80603836,  0.55508655,
               0.90553327,  0.60195361,  0.04465867,  0.06666949,  0.20250841,
               0.13666466,  0.94790642,  0.12119616,  0.29502662,  0.13268582,
               0.48782274,  0.01087472,  0.77312689,  0.6868677 ,  0.78294066])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.25081623,  0.52861118,  0.25609923,  0.69355399,  0.44934862,
               0.26312069,  0.65991814,  0.24192422,  0.68995578,  0.71025885,
               0.06898037,  0.08679642,  0.63332211,  0.91940405,  0.39683092,
               0.9895893 ,  0.50522318,  0.63381417,  0.67358159,  0.10143132,
               0.72536546,  0.76058579,  0.65733238,  0.09650206,  0.75723035,
               0.6894262 ,  0.54506869,  0.27704758,  0.7980074 ,  0.55557368,
               0.91252495,  0.73000415,  0.23757102,  0.7997603 ,  0.85255544,
               0.65005006,  0.33310317,  0.19726563,  0.21837998,  0.018844  ,
               0.10656021,  0.79003283,  0.56046275,  0.81131274,  0.42992691,
               0.80236333,  0.48642574,  0.14923159,  0.21351421,  0.84275822,
               0.64605728,  0.14249126,  0.35022539,  0.16320605,  0.898406  ,
               0.61444021,  0.83652543,  0.0922496 ,  0.7584159 ,  0.46912264,
               0.1954929 ,  0.87033342,  0.61690727,  0.25110004,  0.54966196,
               0.00838464,  0.62298107,  0.54654123,  0.46405929,  0.96788954,
               0.30519815,  0.0765816 ,  0.1672961 ,  0.92951486,  0.59351832,
               0.91684029,  0.34512145,  0.15115118,  0.29727968,  0.26317815,
               0.19128274,  0.36769329,  0.3679942 ,  0.4551022 ,  0.60718734,
               0.26465587,  0.21645396,  0.05092304,  0.2278438 ,  0.48956313,
               0.0487295 ,  0.19612014,  0.48257977,  0.7814111 ,  0.72535807,
               0.49072496,  0.02504851,  0.15882895,  0.21584354,  0.05552021])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.54894828,  0.91563152,  0.12231719,  0.72406347,  0.87798889,
               0.35438703,  0.7734693 ,  0.55121595,  0.22056292,  0.08586254,
               0.41512893,  0.05779974,  0.69101696,  0.75991989,  0.39251264,
               0.03877736,  0.7332699 ,  0.40162581,  0.27757257,  0.09262494,
               0.94033892,  0.62638131,  0.97593264,  0.63653027,  0.60240943,
               0.98913168,  0.77144551,  0.28769816,  0.59213522,  0.11988956,
               0.75029958,  0.20906946,  0.32492437,  0.3503785 ,  0.55719197,
               0.58441898,  0.7086312 ,  0.97753324,  0.04437775,  0.17947744,
               0.0926999 ,  0.30138187,  0.89870577,  0.80586788,  0.47734806,
               0.06239282,  0.23084941,  0.24132353,  0.53620741,  0.61758008,
               0.85612927,  0.96209422,  0.22420852,  0.51325817,  0.75898449,
               0.4919478 ,  0.8827285 ,  0.89021474,  0.9312372 ,  0.86134695,
               0.66778666,  0.57320123,  0.66033445,  0.68448802,  0.25342565,
               0.4753761 ,  0.71257632,  0.54039335,  0.37219379,  0.30154109,
               0.17872518,  0.36945546,  0.41519185,  0.34231745,  0.92068534,
               0.19033164,  0.29703663,  0.8446808 ,  0.13688447,  0.8645684 ,
               0.96030517,  0.16974656,  0.47256467,  0.74239381,  0.79908227,
               0.66751206,  0.06153778,  0.14299534,  0.31895953,  0.21234851,
               0.70731467,  0.86303623,  0.28484397,  0.57144989,  0.35318489,
               0.01626081,  0.16839282,  0.10569096,  0.27953051,  0.56972936])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.65835235,  0.69711961,  0.57597501,  0.67737962,  0.89675608,
               0.12255382,  0.73976046,  0.49519444,  0.49607588,  0.80582472,
               0.7787685 ,  0.89393106,  0.33541581,  0.94767715,  0.96725723,
               0.88914528,  0.07367162,  0.0266669 ,  0.17634265,  0.41382595,
               0.42743275,  0.33277445,  0.4147578 ,  0.76455833,  0.6820506 ,
               0.95785027,  0.85365136,  0.98750245,  0.83415757,  0.49617838,
               0.10215766,  0.45196938,  0.58036899,  0.206823  ,  0.42531262,
               0.09545354,  0.10992098,  0.0675021 ,  0.70385735,  0.18666967,
               0.48261415,  0.2116871 ,  0.18259113,  0.14620474,  0.97032607,
               0.53097684,  0.37665659,  0.66727557,  0.97896494,  0.02219735,
               0.20649144,  0.72044104,  0.69894371,  0.79767785,  0.65856204,
               0.25215508,  0.82548653,  0.47573763,  0.69096812,  0.63191726,
               0.84261132,  0.88105648,  0.24457146,  0.87364231,  0.46767881,
               0.31753932,  0.29316702,  0.6353786 ,  0.6189129 ,  0.54802708,
               0.06825881,  0.71495161,  0.80303074,  0.04524851,  0.65757064,
               0.31062045,  0.91705673,  0.87587948,  0.85194216,  0.59820866,
               0.22199814,  0.4941933 ,  0.86315146,  0.68389406,  0.20917929,
               0.16689709,  0.27641224,  0.63822363,  0.59159299,  0.90543623,
               0.21082264,  0.04364257,  0.15502204,  0.88545632,  0.88199105,
               0.89671322,  0.0057669 ,  0.92615594,  0.56892034,  0.17125186])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.4338646 ,  0.39434476,  0.92094792,  0.7468597 ,  0.87840265,
               0.8519034 ,  0.58339109,  0.20272354,  0.96379645,  0.45372302,
               0.75551744,  0.62808218,  0.05556372,  0.43792276,  0.76512247,
               0.56932763,  0.46513814,  0.30449739,  0.17911794,  0.88770626,
               0.86288659,  0.50922328,  0.53072426,  0.72675693,  0.95608579,
               0.90690359,  0.32510086,  0.96509476,  0.90098105,  0.38494119,
               0.74591056,  0.79990509,  0.35490963,  0.57241564,  0.4321954 ,
               0.31566113,  0.48945605,  0.79863183,  0.25565001,  0.28108515,
               0.2067745 ,  0.78422344,  0.39233799,  0.82864652,  0.15436973,
               0.29676918,  0.29510166,  0.0120405 ,  0.81947645,  0.95378562,
               0.39886262,  0.88637779,  0.65499507,  0.32283109,  0.18410126,
               0.63968392,  0.95314748,  0.68172381,  0.47394459,  0.7462164 ,
               0.88093287,  0.58065072,  0.84047117,  0.11830921,  0.29417764,
               0.38177672,  0.13558596,  0.3729792 ,  0.33093395,  0.27127249,
               0.78984555,  0.51084123,  0.79882396,  0.2377839 ,  0.15702142,
               0.52743081,  0.43333938,  0.64912978,  0.91513809,  0.17031023,
               0.02185423,  0.19404728,  0.81806553,  0.59283631,  0.95249589,
               0.83031834,  0.36038271,  0.708324  ,  0.45830892,  0.75250209,
               0.79370586,  0.00842471,  0.18944481,  0.41007805,  0.0832999 ,
               0.62539765,  0.26373838,  0.21966945,  0.25124947,  0.00499508])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.05600131,  0.69404833,  0.85977636,  0.4041994 ,  0.21625069,
               0.87062076,  0.02663024,  0.91167639,  0.34635338,  0.20310597,
               0.99470395,  0.11470127,  0.94547947,  0.97634763,  0.01149672,
               0.84914742,  0.02289244,  0.59350982,  0.91657115,  0.86779231,
               0.12428391,  0.22078368,  0.60365042,  0.98342214,  0.88760593,
               0.07464635,  0.77020412,  0.32529875,  0.92262374,  0.70017324,
               0.68658225,  0.12829352,  0.02900462,  0.95192823,  0.36470054,
               0.33999313,  0.30497026,  0.28670231,  0.01637867,  0.59517557,
               0.37577108,  0.92158568,  0.86529385,  0.82582529,  0.93540556,
               0.89084233,  0.44344968,  0.26727087,  0.78637679,  0.82237564,
               0.9899036 ,  0.63751701,  0.90971882,  0.56885977,  0.10711762,
               0.13619571,  0.4421873 ,  0.84870684,  0.48020741,  0.84132428,
               0.67739123,  0.31483421,  0.81240897,  0.38627172,  0.55557091,
               0.26131158,  0.37566376,  0.67023467,  0.65270233,  0.42487385,
               0.29851411,  0.52629652,  0.69668843,  0.44326324,  0.88558678,
               0.31629262,  0.85207963,  0.66244496,  0.26153864,  0.21340855,
               0.41134829,  0.10775607,  0.95578609,  0.2842894 ,  0.56106195,
               0.1599897 ,  0.9547848 ,  0.53023176,  0.09116269,  0.78815918,
               0.77073261,  0.55541631,  0.80153983,  0.44048255,  0.81707033,
               0.8648893 ,  0.27555432,  0.86804429,  0.57192496,  0.85722008])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.54894828,  0.91563152,  0.12231719,  0.72406347,  0.87798889,
               0.35438703,  0.7734693 ,  0.55121595,  0.22056292,  0.08586254,
               0.41512893,  0.05779974,  0.69101696,  0.75991989,  0.39251264,
               0.03877736,  0.7332699 ,  0.40162581,  0.27757257,  0.09262494,
               0.94033892,  0.62638131,  0.97593264,  0.63653027,  0.60240943,
               0.98913168,  0.77144551,  0.28769816,  0.59213522,  0.11988956,
               0.75029958,  0.20906946,  0.32492437,  0.3503785 ,  0.55719197,
               0.58441898,  0.7086312 ,  0.97753324,  0.04437775,  0.17947744,
               0.0926999 ,  0.30138187,  0.89870577,  0.80586788,  0.47734806,
               0.06239282,  0.23084941,  0.24132353,  0.53620741,  0.61758008,
               0.85612927,  0.96209422,  0.22420852,  0.51325817,  0.75898449,
               0.4919478 ,  0.8827285 ,  0.89021474,  0.9312372 ,  0.86134695,
               0.66778666,  0.57320123,  0.66033445,  0.68448802,  0.25342565,
               0.4753761 ,  0.71257632,  0.54039335,  0.37219379,  0.30154109,
               0.17872518,  0.36945546,  0.41519185,  0.34231745,  0.92068534,
               0.19033164,  0.29703663,  0.8446808 ,  0.13688447,  0.8645684 ,
               0.96030517,  0.16974656,  0.47256467,  0.74239381,  0.79908227,
               0.66751206,  0.06153778,  0.14299534,  0.31895953,  0.21234851,
               0.70731467,  0.86303623,  0.28484397,  0.57144989,  0.35318489,
               0.01626081,  0.16839282,  0.10569096,  0.27953051,  0.56972936])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.65835235,  0.69711961,  0.57597501,  0.67737962,  0.89675608,
               0.12255382,  0.73976046,  0.49519444,  0.49607588,  0.80582472,
               0.7787685 ,  0.89393106,  0.33541581,  0.94767715,  0.96725723,
               0.88914528,  0.07367162,  0.0266669 ,  0.17634265,  0.41382595,
               0.42743275,  0.33277445,  0.4147578 ,  0.76455833,  0.6820506 ,
               0.95785027,  0.85365136,  0.98750245,  0.83415757,  0.49617838,
               0.10215766,  0.45196938,  0.58036899,  0.206823  ,  0.42531262,
               0.09545354,  0.10992098,  0.0675021 ,  0.70385735,  0.18666967,
               0.48261415,  0.2116871 ,  0.18259113,  0.14620474,  0.97032607,
               0.53097684,  0.37665659,  0.66727557,  0.97896494,  0.02219735,
               0.20649144,  0.72044104,  0.69894371,  0.79767785,  0.65856204,
               0.25215508,  0.82548653,  0.47573763,  0.69096812,  0.63191726,
               0.84261132,  0.88105648,  0.24457146,  0.87364231,  0.46767881,
               0.31753932,  0.29316702,  0.6353786 ,  0.6189129 ,  0.54802708,
               0.06825881,  0.71495161,  0.80303074,  0.04524851,  0.65757064,
               0.31062045,  0.91705673,  0.87587948,  0.85194216,  0.59820866,
               0.22199814,  0.4941933 ,  0.86315146,  0.68389406,  0.20917929,
               0.16689709,  0.27641224,  0.63822363,  0.59159299,  0.90543623,
               0.21082264,  0.04364257,  0.15502204,  0.88545632,  0.88199105,
               0.89671322,  0.0057669 ,  0.92615594,  0.56892034,  0.17125186])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.4338646 ,  0.39434476,  0.92094792,  0.7468597 ,  0.87840265,
               0.8519034 ,  0.58339109,  0.20272354,  0.96379645,  0.45372302,
               0.75551744,  0.62808218,  0.05556372,  0.43792276,  0.76512247,
               0.56932763,  0.46513814,  0.30449739,  0.17911794,  0.88770626,
               0.86288659,  0.50922328,  0.53072426,  0.72675693,  0.95608579,
               0.90690359,  0.32510086,  0.96509476,  0.90098105,  0.38494119,
               0.74591056,  0.79990509,  0.35490963,  0.57241564,  0.4321954 ,
               0.31566113,  0.48945605,  0.79863183,  0.25565001,  0.28108515,
               0.2067745 ,  0.78422344,  0.39233799,  0.82864652,  0.15436973,
               0.29676918,  0.29510166,  0.0120405 ,  0.81947645,  0.95378562,
               0.39886262,  0.88637779,  0.65499507,  0.32283109,  0.18410126,
               0.63968392,  0.95314748,  0.68172381,  0.47394459,  0.7462164 ,
               0.88093287,  0.58065072,  0.84047117,  0.11830921,  0.29417764,
               0.38177672,  0.13558596,  0.3729792 ,  0.33093395,  0.27127249,
               0.78984555,  0.51084123,  0.79882396,  0.2377839 ,  0.15702142,
               0.52743081,  0.43333938,  0.64912978,  0.91513809,  0.17031023,
               0.02185423,  0.19404728,  0.81806553,  0.59283631,  0.95249589,
               0.83031834,  0.36038271,  0.708324  ,  0.45830892,  0.75250209,
               0.79370586,  0.00842471,  0.18944481,  0.41007805,  0.0832999 ,
               0.62539765,  0.26373838,  0.21966945,  0.25124947,  0.00499508])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.66832633,  0.42388422,  0.9112689 ,  0.74304884,  0.66853113,
               0.4281908 ,  0.62487726,  0.82116352,  0.95146317,  0.63867   ,
               0.344813  ,  0.81534389,  0.70397984,  0.76744626,  0.43618161,
               0.22663123,  0.98078012,  0.97845092,  0.8630121 ,  0.84024913,
               0.0478649 ,  0.52739592,  0.46687841,  0.79770651,  0.83652984,
               0.45222231,  0.13082942,  0.2568711 ,  0.68513701,  0.02702605,
               0.97669943,  0.90409925,  0.41473365,  0.03640056,  0.07811176,
               0.490176  ,  0.36898837,  0.60947673,  0.87808031,  0.92901156,
               0.80180569,  0.16681702,  0.5498567 ,  0.15896789,  0.96662186,
               0.50700604,  0.41334838,  0.52294166,  0.00990227,  0.55406627,
               0.77570039,  0.0250735 ,  0.45486875,  0.63726151,  0.1956261 ,
               0.34493784,  0.25187289,  0.96143332,  0.97021515,  0.03492728,
               0.34571007,  0.12266144,  0.18056338,  0.76963252,  0.75195044,
               0.77152863,  0.00211178,  0.6516283 ,  0.44229373,  0.23776831,
               0.65591327,  0.60795006,  0.21723943,  0.14139515,  0.57832841,
               0.07358941,  0.13280993,  0.43557291,  0.26702845,  0.71282337,
               0.94176374,  0.55948391,  0.03061159,  0.90564669,  0.09961739,
               0.99797421,  0.94872005,  0.69326543,  0.13949   ,  0.15699439,
               0.11855987,  0.66686882,  0.09992154,  0.36155218,  0.32373519,
               0.68224409,  0.6335396 ,  0.46132296,  0.00783173,  0.27424742])}]]


