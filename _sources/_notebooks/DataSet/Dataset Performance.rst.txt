
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='6c11cc0b-9c84-4fd6-b821-77215dda2cb7'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='2cc1cf87-0dba-4100-aec5-10d2915cecf3'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.101030154517208],
     [0.72660430723774],
     [0.922782230525411],
     [0.693713065876172],
     [0.740167107495859],
     [0.224085886854564],
     [0.558704704777104],
     [0.478338127204233],
     [0.350594863073261],
     [0.200889148764514],
     [0.215332968634275],
     [0.800610144215477],
     [0.367378359673709],
     [0.469509236839696],
     [0.157129003485303],
     [0.771950018138354],
     [0.75579125313452],
     [0.545736879155754],
     [0.298544369724836],
     [0.239002589889117],
     [0.582776544655841],
     [0.864329825962383],
     [0.675407414463756],
     [0.208789908456449],
     [0.978060112893578],
     [0.623795033210074],
     [0.511592237231739],
     [0.712873332223271],
     [0.527142703637635],
     [0.42762995264218],
     [0.368240617954475],
     [0.926965132813405],
     [0.977704748399285],
     [0.974772351287084],
     [0.334084830278107],
     [0.977201408308954],
     [0.876943536342304],
     [0.394044241294764],
     [0.938931421697452],
     [0.70256795273235],
     [0.312810391075639],
     [0.411049429899754],
     [0.341275691016929],
     [0.0275569405097794],
     [0.949901255391338],
     [0.164900410836828],
     [0.718811201628358],
     [0.505883563368098],
     [0.880373945068862],
     [0.321589366062389],
     [0.874032928481726],
     [0.875486249780865],
     [0.756252229515457],
     [0.230810016017866],
     [0.4791174932018],
     [0.850861239790978],
     [0.208391733877393],
     [0.221966201092711],
     [0.457535308430126],
     [0.880049660397069],
     [0.322954226352066],
     [0.978507979912722],
     [0.222038600277482],
     [0.54289246344619],
     [0.289059079619953],
     [0.460328246688925],
     [0.584660860653342],
     [0.725869184227223],
     [0.11087063939977],
     [0.671388613949003],
     [0.757504428130154],
     [0.860099815102781],
     [0.898611511126807],
     [0.980289045458232],
     [0.456388738150346],
     [0.478530085565607],
     [0.591289337552714],
     [0.876678627522827],
     [0.559994922442441],
     [0.941691306087711],
     [0.149820001994735],
     [0.423206863676242],
     [0.0531010127062589],
     [0.673076916711111],
     [0.760599342530013],
     [0.791955482599769],
     [0.00203240940521576],
     [0.540390257250321],
     [0.814797231363146],
     [0.148531428948587],
     [0.662618281550811],
     [0.214144865859019],
     [0.885115007580808],
     [0.15584120555945],
     [0.586670595618051],
     [0.941571773028212],
     [0.261015260532012],
     [0.555786791374554],
     [0.839240098556947],
     [0.992068125712056]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.16823104])],
     [array([0.67033159])],
     [array([0.45661279])],
     [array([0.99494198])],
     [array([0.93547302])],
     [array([0.62466707])],
     [array([0.55858641])],
     [array([0.10843947])],
     [array([0.72716937])],
     [array([0.63463906])],
     [array([0.33269271])],
     [array([0.70759947])],
     [array([0.28697926])],
     [array([0.33709305])],
     [array([0.32342549])],
     [array([0.89742801])],
     [array([0.17849839])],
     [array([0.41347697])],
     [array([0.69769086])],
     [array([0.78363071])],
     [array([0.4713308])],
     [array([0.27962874])],
     [array([0.5125557])],
     [array([0.35855768])],
     [array([0.9698643])],
     [array([0.43813029])],
     [array([0.84688629])],
     [array([0.2177925])],
     [array([0.30611559])],
     [array([0.84477967])],
     [array([0.94307481])],
     [array([0.59374761])],
     [array([0.16513286])],
     [array([0.75958151])],
     [array([0.56371495])],
     [array([0.30677028])],
     [array([0.97444591])],
     [array([0.14713314])],
     [array([0.57924582])],
     [array([0.32457639])],
     [array([0.43343138])],
     [array([0.81772661])],
     [array([0.31798182])],
     [array([0.76477788])],
     [array([0.73559696])],
     [array([0.68559999])],
     [array([0.93582537])],
     [array([0.55390207])],
     [array([0.92826162])],
     [array([0.85376409])],
     [array([0.07604725])],
     [array([0.64636393])],
     [array([0.74069488])],
     [array([0.58555002])],
     [array([0.91881508])],
     [array([0.71458669])],
     [array([0.71669441])],
     [array([0.41736042])],
     [array([0.21886566])],
     [array([0.4196953])],
     [array([0.26777297])],
     [array([0.37354055])],
     [array([0.53632229])],
     [array([0.79558549])],
     [array([0.49371374])],
     [array([0.00496153])],
     [array([0.62159147])],
     [array([0.37303913])],
     [array([0.00643578])],
     [array([0.00105775])],
     [array([0.46365348])],
     [array([0.26552467])],
     [array([0.75254785])],
     [array([0.95504249])],
     [array([0.23708898])],
     [array([0.07752622])],
     [array([0.94612902])],
     [array([0.4580975])],
     [array([0.99337528])],
     [array([0.40152917])],
     [array([0.0109719])],
     [array([0.28862198])],
     [array([0.2510715])],
     [array([0.443158])],
     [array([0.24939694])],
     [array([0.92456244])],
     [array([0.29442492])],
     [array([0.75097893])],
     [array([0.03966373])],
     [array([0.94372979])],
     [array([0.63975874])],
     [array([0.1667222])],
     [array([0.62586402])],
     [array([0.37330472])],
     [array([0.56728838])],
     [array([0.57336301])],
     [array([0.30764748])],
     [array([0.14337648])],
     [array([0.79611573])],
     [array([0.03394728])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.16823104, 0.67033159, 0.45661279, 0.99494198, 0.93547302,
           0.62466707, 0.55858641, 0.10843947, 0.72716937, 0.63463906,
           0.33269271, 0.70759947, 0.28697926, 0.33709305, 0.32342549,
           0.89742801, 0.17849839, 0.41347697, 0.69769086, 0.78363071,
           0.4713308 , 0.27962874, 0.5125557 , 0.35855768, 0.9698643 ,
           0.43813029, 0.84688629, 0.2177925 , 0.30611559, 0.84477967,
           0.94307481, 0.59374761, 0.16513286, 0.75958151, 0.56371495,
           0.30677028, 0.97444591, 0.14713314, 0.57924582, 0.32457639,
           0.43343138, 0.81772661, 0.31798182, 0.76477788, 0.73559696,
           0.68559999, 0.93582537, 0.55390207, 0.92826162, 0.85376409,
           0.07604725, 0.64636393, 0.74069488, 0.58555002, 0.91881508,
           0.71458669, 0.71669441, 0.41736042, 0.21886566, 0.4196953 ,
           0.26777297, 0.37354055, 0.53632229, 0.79558549, 0.49371374,
           0.00496153, 0.62159147, 0.37303913, 0.00643578, 0.00105775,
           0.46365348, 0.26552467, 0.75254785, 0.95504249, 0.23708898,
           0.07752622, 0.94612902, 0.4580975 , 0.99337528, 0.40152917,
           0.0109719 , 0.28862198, 0.2510715 , 0.443158  , 0.24939694,
           0.92456244, 0.29442492, 0.75097893, 0.03966373, 0.94372979,
           0.63975874, 0.1667222 , 0.62586402, 0.37330472, 0.56728838,
           0.57336301, 0.30764748, 0.14337648, 0.79611573, 0.03394728])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.10103015, 0.72660431, 0.92278223, 0.69371307, 0.74016711,
              0.22408589, 0.5587047 , 0.47833813, 0.35059486, 0.20088915,
              0.21533297, 0.80061014, 0.36737836, 0.46950924, 0.157129  ,
              0.77195002, 0.75579125, 0.54573688, 0.29854437, 0.23900259,
              0.58277654, 0.86432983, 0.67540741, 0.20878991, 0.97806011,
              0.62379503, 0.51159224, 0.71287333, 0.5271427 , 0.42762995,
              0.36824062, 0.92696513, 0.97770475, 0.97477235, 0.33408483,
              0.97720141, 0.87694354, 0.39404424, 0.93893142, 0.70256795,
              0.31281039, 0.41104943, 0.34127569, 0.02755694, 0.94990126,
              0.16490041, 0.7188112 , 0.50588356, 0.88037395, 0.32158937,
              0.87403293, 0.87548625, 0.75625223, 0.23081002, 0.47911749,
              0.85086124, 0.20839173, 0.2219662 , 0.45753531, 0.88004966,
              0.32295423, 0.97850798, 0.2220386 , 0.54289246, 0.28905908,
              0.46032825, 0.58466086, 0.72586918, 0.11087064, 0.67138861,
              0.75750443, 0.86009982, 0.89861151, 0.98028905, 0.45638874,
              0.47853009, 0.59128934, 0.87667863, 0.55999492, 0.94169131,
              0.14982   , 0.42320686, 0.05310101, 0.67307692, 0.76059934,
              0.79195548, 0.00203241, 0.54039026, 0.81479723, 0.14853143,
              0.66261828, 0.21414487, 0.88511501, 0.15584121, 0.5866706 ,
              0.94157177, 0.26101526, 0.55578679, 0.8392401 , 0.99206813])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.84097971, 0.97689492, 0.75142479, 0.79608028, 0.62509484,
              0.65543878, 0.14674076, 0.53005526, 0.43647198, 0.45241462,
              0.33703232, 0.80460858, 0.49404921, 0.51473959, 0.05738339,
              0.35988357, 0.14527629, 0.3630973 , 0.94813828, 0.63808721,
              0.38408727, 0.38682134, 0.40979783, 0.47983776, 0.1820653 ,
              0.14495778, 0.19673319, 0.01660194, 0.1971165 , 0.09160052,
              0.63396663, 0.32341134, 0.61613581, 0.82562393, 0.63861839,
              0.93922229, 0.58340769, 0.0430977 , 0.92338288, 0.12409486,
              0.76213807, 0.25017248, 0.97981801, 0.77061309, 0.54441169,
              0.88025885, 0.98749056, 0.00233701, 0.18023204, 0.24807453,
              0.93761733, 0.43012822, 0.96915081, 0.201877  , 0.11638308,
              0.94111136, 0.92424261, 0.0480251 , 0.95911542, 0.80665128,
              0.62725849, 0.48156615, 0.43995609, 0.63569945, 0.70066902,
              0.70119212, 0.33522494, 0.68840977, 0.09792898, 0.45219793,
              0.64956652, 0.72968877, 0.49835474, 0.24011337, 0.66466846,
              0.3857813 , 0.88450486, 0.75329149, 0.26734828, 0.16750633,
              0.97354186, 0.44016596, 0.53375506, 0.59609141, 0.33970994,
              0.94412829, 0.62025681, 0.33474976, 0.80272466, 0.12598218,
              0.42648573, 0.39303347, 0.96569576, 0.03066309, 0.29976211,
              0.42634182, 0.48742799, 0.87863214, 0.53936784, 0.77212828])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.46504011, 0.35613029, 0.87280385, 0.89324719, 0.87791924,
              0.78051121, 0.09777389, 0.27668119, 0.80096443, 0.15816386,
              0.73501121, 0.51916518, 0.74355804, 0.85536647, 0.53550406,
              0.63623694, 0.99188369, 0.48059775, 0.35484416, 0.94468429,
              0.65523177, 0.79974611, 0.83290121, 0.27090895, 0.60135152,
              0.840724  , 0.07453932, 0.85174884, 0.80890846, 0.89404413,
              0.37497162, 0.21092006, 0.44879639, 0.63110474, 0.09950955,
              0.38402985, 0.08929813, 0.16802557, 0.94768545, 0.81133284,
              0.68201653, 0.96291761, 0.86795844, 0.57123266, 0.65603671,
              0.07084825, 0.35259915, 0.921017  , 0.70465738, 0.64132594,
              0.45877394, 0.81122693, 0.0277208 , 0.09093766, 0.9952835 ,
              0.69270593, 0.0715912 , 0.49647725, 0.1474049 , 0.12435969,
              0.05556566, 0.46534376, 0.44077244, 0.49019226, 0.59945696,
              0.50245652, 0.00963896, 0.27111332, 0.13843115, 0.66264314,
              0.63028437, 0.13439759, 0.04884552, 0.14697365, 0.58574487,
              0.15560988, 0.67891777, 0.88780887, 0.33619923, 0.04689198,
              0.84114699, 0.19940078, 0.94648962, 0.78075354, 0.20244462,
              0.79785691, 0.19821802, 0.28422022, 0.94153512, 0.88085678,
              0.50789611, 0.01655663, 0.05458028, 0.11932567, 0.99123232,
              0.56913395, 0.87565414, 0.93673591, 0.47537022, 0.92589298])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.63164716, 0.80750639, 0.29025008, 0.96764537, 0.28432165,
              0.24202183, 0.21166569, 0.04365117, 0.11273199, 0.91603626,
              0.35075576, 0.23500874, 0.40830649, 0.45970272, 0.39156111,
              0.67239954, 0.27140102, 0.42471726, 0.42556028, 0.43076925,
              0.11405086, 0.42967547, 0.49302698, 0.91978685, 0.02371493,
              0.64761193, 0.5406064 , 0.24322644, 0.42990733, 0.29373462,
              0.162589  , 0.04745131, 0.92058796, 0.57034188, 0.11881941,
              0.3781203 , 0.36923779, 0.84722516, 0.12752926, 0.61696058,
              0.14587055, 0.5604898 , 0.58188676, 0.04959968, 0.96733595,
              0.70661637, 0.13675792, 0.39937817, 0.71327884, 0.50703564,
              0.78446798, 0.07781479, 0.27795646, 0.23399874, 0.52663742,
              0.43849444, 0.8743834 , 0.92535694, 0.10594457, 0.74432553,
              0.99440251, 0.64745636, 0.67925416, 0.8148757 , 0.79395121,
              0.52866971, 0.96093888, 0.33589835, 0.27152476, 0.93538219,
              0.10869339, 0.12662255, 0.19144311, 0.72957654, 0.48193006,
              0.29386653, 0.20220833, 0.77964396, 0.69813797, 0.87966169,
              0.93169858, 0.14120329, 0.67287074, 0.52158171, 0.87609745,
              0.96878016, 0.92740523, 0.3343486 , 0.48002915, 0.52941747,
              0.70914509, 0.93124035, 0.44500781, 0.66171079, 0.87424311,
              0.81498726, 0.27489496, 0.42760883, 0.56378422, 0.7560826 ])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.10103015, 0.72660431, 0.92278223, 0.69371307, 0.74016711,
              0.22408589, 0.5587047 , 0.47833813, 0.35059486, 0.20088915,
              0.21533297, 0.80061014, 0.36737836, 0.46950924, 0.157129  ,
              0.77195002, 0.75579125, 0.54573688, 0.29854437, 0.23900259,
              0.58277654, 0.86432983, 0.67540741, 0.20878991, 0.97806011,
              0.62379503, 0.51159224, 0.71287333, 0.5271427 , 0.42762995,
              0.36824062, 0.92696513, 0.97770475, 0.97477235, 0.33408483,
              0.97720141, 0.87694354, 0.39404424, 0.93893142, 0.70256795,
              0.31281039, 0.41104943, 0.34127569, 0.02755694, 0.94990126,
              0.16490041, 0.7188112 , 0.50588356, 0.88037395, 0.32158937,
              0.87403293, 0.87548625, 0.75625223, 0.23081002, 0.47911749,
              0.85086124, 0.20839173, 0.2219662 , 0.45753531, 0.88004966,
              0.32295423, 0.97850798, 0.2220386 , 0.54289246, 0.28905908,
              0.46032825, 0.58466086, 0.72586918, 0.11087064, 0.67138861,
              0.75750443, 0.86009982, 0.89861151, 0.98028905, 0.45638874,
              0.47853009, 0.59128934, 0.87667863, 0.55999492, 0.94169131,
              0.14982   , 0.42320686, 0.05310101, 0.67307692, 0.76059934,
              0.79195548, 0.00203241, 0.54039026, 0.81479723, 0.14853143,
              0.66261828, 0.21414487, 0.88511501, 0.15584121, 0.5866706 ,
              0.94157177, 0.26101526, 0.55578679, 0.8392401 , 0.99206813])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.84097971, 0.97689492, 0.75142479, 0.79608028, 0.62509484,
              0.65543878, 0.14674076, 0.53005526, 0.43647198, 0.45241462,
              0.33703232, 0.80460858, 0.49404921, 0.51473959, 0.05738339,
              0.35988357, 0.14527629, 0.3630973 , 0.94813828, 0.63808721,
              0.38408727, 0.38682134, 0.40979783, 0.47983776, 0.1820653 ,
              0.14495778, 0.19673319, 0.01660194, 0.1971165 , 0.09160052,
              0.63396663, 0.32341134, 0.61613581, 0.82562393, 0.63861839,
              0.93922229, 0.58340769, 0.0430977 , 0.92338288, 0.12409486,
              0.76213807, 0.25017248, 0.97981801, 0.77061309, 0.54441169,
              0.88025885, 0.98749056, 0.00233701, 0.18023204, 0.24807453,
              0.93761733, 0.43012822, 0.96915081, 0.201877  , 0.11638308,
              0.94111136, 0.92424261, 0.0480251 , 0.95911542, 0.80665128,
              0.62725849, 0.48156615, 0.43995609, 0.63569945, 0.70066902,
              0.70119212, 0.33522494, 0.68840977, 0.09792898, 0.45219793,
              0.64956652, 0.72968877, 0.49835474, 0.24011337, 0.66466846,
              0.3857813 , 0.88450486, 0.75329149, 0.26734828, 0.16750633,
              0.97354186, 0.44016596, 0.53375506, 0.59609141, 0.33970994,
              0.94412829, 0.62025681, 0.33474976, 0.80272466, 0.12598218,
              0.42648573, 0.39303347, 0.96569576, 0.03066309, 0.29976211,
              0.42634182, 0.48742799, 0.87863214, 0.53936784, 0.77212828])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.46504011, 0.35613029, 0.87280385, 0.89324719, 0.87791924,
              0.78051121, 0.09777389, 0.27668119, 0.80096443, 0.15816386,
              0.73501121, 0.51916518, 0.74355804, 0.85536647, 0.53550406,
              0.63623694, 0.99188369, 0.48059775, 0.35484416, 0.94468429,
              0.65523177, 0.79974611, 0.83290121, 0.27090895, 0.60135152,
              0.840724  , 0.07453932, 0.85174884, 0.80890846, 0.89404413,
              0.37497162, 0.21092006, 0.44879639, 0.63110474, 0.09950955,
              0.38402985, 0.08929813, 0.16802557, 0.94768545, 0.81133284,
              0.68201653, 0.96291761, 0.86795844, 0.57123266, 0.65603671,
              0.07084825, 0.35259915, 0.921017  , 0.70465738, 0.64132594,
              0.45877394, 0.81122693, 0.0277208 , 0.09093766, 0.9952835 ,
              0.69270593, 0.0715912 , 0.49647725, 0.1474049 , 0.12435969,
              0.05556566, 0.46534376, 0.44077244, 0.49019226, 0.59945696,
              0.50245652, 0.00963896, 0.27111332, 0.13843115, 0.66264314,
              0.63028437, 0.13439759, 0.04884552, 0.14697365, 0.58574487,
              0.15560988, 0.67891777, 0.88780887, 0.33619923, 0.04689198,
              0.84114699, 0.19940078, 0.94648962, 0.78075354, 0.20244462,
              0.79785691, 0.19821802, 0.28422022, 0.94153512, 0.88085678,
              0.50789611, 0.01655663, 0.05458028, 0.11932567, 0.99123232,
              0.56913395, 0.87565414, 0.93673591, 0.47537022, 0.92589298])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([5.53526132e-01, 8.01049534e-01, 1.83454447e-01, 3.18292365e-01,
              6.93783284e-02, 7.96701180e-04, 4.00226186e-01, 7.81557553e-01,
              7.67798099e-01, 2.08959942e-01, 1.16285101e-02, 9.06929711e-01,
              8.86634999e-01, 8.62710246e-01, 6.62470438e-01, 4.29215711e-01,
              3.11173248e-01, 5.37411249e-01, 3.76742952e-01, 2.01662975e-01,
              3.34646314e-01, 7.44841046e-01, 7.58467007e-01, 2.97235064e-01,
              5.70090087e-01, 1.36926111e-01, 8.51771635e-01, 3.88008827e-01,
              4.37517495e-01, 5.11643384e-01, 7.15251779e-01, 4.69620702e-02,
              8.24667118e-01, 8.59667972e-01, 1.62463600e-01, 3.20217738e-01,
              7.10913188e-01, 9.70369235e-01, 7.19515646e-01, 5.79049927e-01,
              8.47840186e-01, 9.01304219e-01, 7.30769733e-01, 3.99961423e-01,
              1.68382498e-01, 3.67362819e-01, 9.11702507e-02, 9.26747929e-01,
              1.90261424e-01, 6.23446386e-01, 4.85934187e-01, 4.11503935e-01,
              9.46845199e-01, 4.40744509e-01, 7.23428491e-01, 8.90811634e-01,
              7.13240218e-01, 6.10968124e-01, 8.19182570e-01, 6.15060541e-01,
              9.39597229e-01, 4.66707378e-02, 3.07247562e-01, 6.70187830e-01,
              1.02105521e-01, 8.30446978e-01, 6.19354757e-01, 9.09373437e-01,
              5.41226449e-01, 7.26110590e-01, 6.76373185e-02, 2.44237885e-01,
              3.73978579e-01, 6.06678438e-01, 3.66491617e-01, 6.86732280e-01,
              8.42348071e-01, 4.98097471e-01, 9.69144030e-01, 7.95523411e-01,
              6.82313566e-01, 1.82184535e-01, 9.36445515e-01, 1.86133221e-01,
              2.99814941e-01, 2.11348448e-01, 5.34924329e-01, 9.40398877e-01,
              8.86466145e-01, 2.76264205e-01, 1.73335498e-01, 9.12904168e-01,
              8.45501795e-01, 3.51725633e-01, 8.18496501e-01, 7.78877728e-01,
              8.99310949e-02, 6.52921226e-02, 4.52620120e-01, 4.42863096e-01])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.16823104, 0.67033159, 0.45661279, 0.99494198, 0.93547302,
              0.62466707, 0.55858641, 0.10843947, 0.72716937, 0.63463906,
              0.33269271, 0.70759947, 0.28697926, 0.33709305, 0.32342549,
              0.89742801, 0.17849839, 0.41347697, 0.69769086, 0.78363071,
              0.4713308 , 0.27962874, 0.5125557 , 0.35855768, 0.9698643 ,
              0.43813029, 0.84688629, 0.2177925 , 0.30611559, 0.84477967,
              0.94307481, 0.59374761, 0.16513286, 0.75958151, 0.56371495,
              0.30677028, 0.97444591, 0.14713314, 0.57924582, 0.32457639,
              0.43343138, 0.81772661, 0.31798182, 0.76477788, 0.73559696,
              0.68559999, 0.93582537, 0.55390207, 0.92826162, 0.85376409,
              0.07604725, 0.64636393, 0.74069488, 0.58555002, 0.91881508,
              0.71458669, 0.71669441, 0.41736042, 0.21886566, 0.4196953 ,
              0.26777297, 0.37354055, 0.53632229, 0.79558549, 0.49371374,
              0.00496153, 0.62159147, 0.37303913, 0.00643578, 0.00105775,
              0.46365348, 0.26552467, 0.75254785, 0.95504249, 0.23708898,
              0.07752622, 0.94612902, 0.4580975 , 0.99337528, 0.40152917,
              0.0109719 , 0.28862198, 0.2510715 , 0.443158  , 0.24939694,
              0.92456244, 0.29442492, 0.75097893, 0.03966373, 0.94372979,
              0.63975874, 0.1667222 , 0.62586402, 0.37330472, 0.56728838,
              0.57336301, 0.30764748, 0.14337648, 0.79611573, 0.03394728])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.91654505, 0.26384552, 0.25945117, 0.91174292, 0.18077268,
              0.95726533, 0.05060848, 0.84035994, 0.27773723, 0.50841901,
              0.92057248, 0.2160309 , 0.56655872, 0.48542157, 0.174467  ,
              0.75004636, 0.464919  , 0.47138177, 0.11570056, 0.68933434,
              0.05406627, 0.52281368, 0.46872583, 0.34594612, 0.54984002,
              0.9521607 , 0.80190212, 0.04743609, 0.63411067, 0.96942269,
              0.76771349, 0.63785542, 0.61550057, 0.8236182 , 0.73168469,
              0.72366626, 0.86482471, 0.211808  , 0.88419798, 0.47937391,
              0.05727921, 0.63145419, 0.25242947, 0.75880386, 0.97752193,
              0.63615432, 0.28405487, 0.02289229, 0.29506199, 0.02081372,
              0.26792909, 0.60303294, 0.06449379, 0.98503714, 0.41576879,
              0.30220753, 0.65987473, 0.57496451, 0.7045615 , 0.40500162,
              0.3900963 , 0.95165869, 0.54265243, 0.14362186, 0.20068018,
              0.90586533, 0.02201071, 0.3462187 , 0.7005382 , 0.00406077,
              0.62860151, 0.86349084, 0.1119738 , 0.27038418, 0.31310357,
              0.96900589, 0.87499036, 0.6031683 , 0.18277853, 0.42780981,
              0.34995037, 0.13771965, 0.1826568 , 0.11080718, 0.66691201,
              0.54714166, 0.78671289, 0.49529581, 0.29198292, 0.54410938,
              0.33907682, 0.1785998 , 0.47214082, 0.64813892, 0.33378236,
              0.3508377 , 0.99513393, 0.58149135, 0.56533551, 0.39219678])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.78163802, 0.82647178, 0.88412719, 0.17004618, 0.53119621,
              0.15032435, 0.7731639 , 0.12723685, 0.29024017, 0.98106328,
              0.49631197, 0.1203337 , 0.09930918, 0.94866892, 0.44307459,
              0.22969905, 0.66027477, 0.86947539, 0.08337567, 0.5953798 ,
              0.50559513, 0.58881314, 0.76454815, 0.48606023, 0.35407859,
              0.61346913, 0.8408357 , 0.09684313, 0.39479465, 0.36828497,
              0.32377481, 0.50525045, 0.72212991, 0.16363885, 0.54312681,
              0.23070496, 0.00355646, 0.66844695, 0.93854738, 0.65143435,
              0.05633384, 0.3298362 , 0.48901003, 0.63350203, 0.34486147,
              0.81035326, 0.44752937, 0.3129911 , 0.3617898 , 0.74111076,
              0.22261706, 0.29819613, 0.44889603, 0.63099691, 0.16017334,
              0.54506785, 0.85872755, 0.03204264, 0.00995184, 0.98882538,
              0.39538321, 0.70404742, 0.47761439, 0.16786531, 0.34299923,
              0.32420725, 0.40207687, 0.16844265, 0.33606748, 0.01563246,
              0.56795311, 0.69867234, 0.12412927, 0.08034501, 0.78019256,
              0.60405874, 0.00929472, 0.45273182, 0.32149373, 0.2975138 ,
              0.71262521, 0.6236378 , 0.50264665, 0.58116632, 0.23795749,
              0.49236761, 0.77281791, 0.67914758, 0.55865675, 0.02930476,
              0.51404764, 0.21794766, 0.57091334, 0.84169233, 0.66362033,
              0.31114798, 0.35442981, 0.29533774, 0.60132724, 0.61311309])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.67017056, 0.17447609, 0.14152507, 0.15444842, 0.15775273,
              0.69169298, 0.2376725 , 0.42710899, 0.20834519, 0.87510166,
              0.31130682, 0.37068793, 0.44241372, 0.17626417, 0.68975158,
              0.9834811 , 0.41632443, 0.62401652, 0.07368394, 0.78053171,
              0.28743004, 0.14902621, 0.29974757, 0.46473352, 0.75617994,
              0.75769695, 0.4603498 , 0.9304301 , 0.80386452, 0.55461433,
              0.17788873, 0.75985529, 0.82604082, 0.42586   , 0.15919295,
              0.81862602, 0.24616606, 0.59501206, 0.3326524 , 0.95332672,
              0.96316807, 0.77584292, 0.86892709, 0.08002358, 0.9939461 ,
              0.94185007, 0.68333655, 0.60403154, 0.91490789, 0.73440168,
              0.85092479, 0.72713082, 0.42067386, 0.77806846, 0.37521131,
              0.25992869, 0.60218105, 0.93231613, 0.44815269, 0.74249051,
              0.39932444, 0.1733694 , 0.56139341, 0.24096092, 0.1787505 ,
              0.04603775, 0.68843028, 0.40874902, 0.9163163 , 0.99943508,
              0.68510992, 0.30774631, 0.022667  , 0.37019062, 0.33445745,
              0.16311331, 0.37806653, 0.96813889, 0.09131006, 0.64643745,
              0.14209432, 0.94287156, 0.59054001, 0.573931  , 0.74841458,
              0.30702979, 0.22038491, 0.8158356 , 0.7008864 , 0.21762881,
              0.35847054, 0.19813046, 0.94610171, 0.21163102, 0.53391001,
              0.53388697, 0.41432127, 0.83921522, 0.76813663, 0.08355218])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.16823104, 0.67033159, 0.45661279, 0.99494198, 0.93547302,
              0.62466707, 0.55858641, 0.10843947, 0.72716937, 0.63463906,
              0.33269271, 0.70759947, 0.28697926, 0.33709305, 0.32342549,
              0.89742801, 0.17849839, 0.41347697, 0.69769086, 0.78363071,
              0.4713308 , 0.27962874, 0.5125557 , 0.35855768, 0.9698643 ,
              0.43813029, 0.84688629, 0.2177925 , 0.30611559, 0.84477967,
              0.94307481, 0.59374761, 0.16513286, 0.75958151, 0.56371495,
              0.30677028, 0.97444591, 0.14713314, 0.57924582, 0.32457639,
              0.43343138, 0.81772661, 0.31798182, 0.76477788, 0.73559696,
              0.68559999, 0.93582537, 0.55390207, 0.92826162, 0.85376409,
              0.07604725, 0.64636393, 0.74069488, 0.58555002, 0.91881508,
              0.71458669, 0.71669441, 0.41736042, 0.21886566, 0.4196953 ,
              0.26777297, 0.37354055, 0.53632229, 0.79558549, 0.49371374,
              0.00496153, 0.62159147, 0.37303913, 0.00643578, 0.00105775,
              0.46365348, 0.26552467, 0.75254785, 0.95504249, 0.23708898,
              0.07752622, 0.94612902, 0.4580975 , 0.99337528, 0.40152917,
              0.0109719 , 0.28862198, 0.2510715 , 0.443158  , 0.24939694,
              0.92456244, 0.29442492, 0.75097893, 0.03966373, 0.94372979,
              0.63975874, 0.1667222 , 0.62586402, 0.37330472, 0.56728838,
              0.57336301, 0.30764748, 0.14337648, 0.79611573, 0.03394728])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.91654505, 0.26384552, 0.25945117, 0.91174292, 0.18077268,
              0.95726533, 0.05060848, 0.84035994, 0.27773723, 0.50841901,
              0.92057248, 0.2160309 , 0.56655872, 0.48542157, 0.174467  ,
              0.75004636, 0.464919  , 0.47138177, 0.11570056, 0.68933434,
              0.05406627, 0.52281368, 0.46872583, 0.34594612, 0.54984002,
              0.9521607 , 0.80190212, 0.04743609, 0.63411067, 0.96942269,
              0.76771349, 0.63785542, 0.61550057, 0.8236182 , 0.73168469,
              0.72366626, 0.86482471, 0.211808  , 0.88419798, 0.47937391,
              0.05727921, 0.63145419, 0.25242947, 0.75880386, 0.97752193,
              0.63615432, 0.28405487, 0.02289229, 0.29506199, 0.02081372,
              0.26792909, 0.60303294, 0.06449379, 0.98503714, 0.41576879,
              0.30220753, 0.65987473, 0.57496451, 0.7045615 , 0.40500162,
              0.3900963 , 0.95165869, 0.54265243, 0.14362186, 0.20068018,
              0.90586533, 0.02201071, 0.3462187 , 0.7005382 , 0.00406077,
              0.62860151, 0.86349084, 0.1119738 , 0.27038418, 0.31310357,
              0.96900589, 0.87499036, 0.6031683 , 0.18277853, 0.42780981,
              0.34995037, 0.13771965, 0.1826568 , 0.11080718, 0.66691201,
              0.54714166, 0.78671289, 0.49529581, 0.29198292, 0.54410938,
              0.33907682, 0.1785998 , 0.47214082, 0.64813892, 0.33378236,
              0.3508377 , 0.99513393, 0.58149135, 0.56533551, 0.39219678])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.78163802, 0.82647178, 0.88412719, 0.17004618, 0.53119621,
              0.15032435, 0.7731639 , 0.12723685, 0.29024017, 0.98106328,
              0.49631197, 0.1203337 , 0.09930918, 0.94866892, 0.44307459,
              0.22969905, 0.66027477, 0.86947539, 0.08337567, 0.5953798 ,
              0.50559513, 0.58881314, 0.76454815, 0.48606023, 0.35407859,
              0.61346913, 0.8408357 , 0.09684313, 0.39479465, 0.36828497,
              0.32377481, 0.50525045, 0.72212991, 0.16363885, 0.54312681,
              0.23070496, 0.00355646, 0.66844695, 0.93854738, 0.65143435,
              0.05633384, 0.3298362 , 0.48901003, 0.63350203, 0.34486147,
              0.81035326, 0.44752937, 0.3129911 , 0.3617898 , 0.74111076,
              0.22261706, 0.29819613, 0.44889603, 0.63099691, 0.16017334,
              0.54506785, 0.85872755, 0.03204264, 0.00995184, 0.98882538,
              0.39538321, 0.70404742, 0.47761439, 0.16786531, 0.34299923,
              0.32420725, 0.40207687, 0.16844265, 0.33606748, 0.01563246,
              0.56795311, 0.69867234, 0.12412927, 0.08034501, 0.78019256,
              0.60405874, 0.00929472, 0.45273182, 0.32149373, 0.2975138 ,
              0.71262521, 0.6236378 , 0.50264665, 0.58116632, 0.23795749,
              0.49236761, 0.77281791, 0.67914758, 0.55865675, 0.02930476,
              0.51404764, 0.21794766, 0.57091334, 0.84169233, 0.66362033,
              0.31114798, 0.35442981, 0.29533774, 0.60132724, 0.61311309])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.72173909, 0.75198283, 0.74997078, 0.54888011, 0.35573399,
              0.26447148, 0.72028446, 0.98140151, 0.52518426, 0.78072108,
              0.63657747, 0.94162185, 0.01785108, 0.32374687, 0.35432179,
              0.6606746 , 0.48156056, 0.05571858, 0.53471357, 0.09977369,
              0.20367358, 0.89832327, 0.49191101, 0.81330581, 0.1631373 ,
              0.36323502, 0.28462588, 0.7169317 , 0.85436562, 0.32685931,
              0.51193444, 0.67978136, 0.14615275, 0.24184884, 0.91811639,
              0.33851557, 0.33651467, 0.59743029, 0.41373082, 0.49665523,
              0.15480578, 0.81308991, 0.77214419, 0.2083012 , 0.57434326,
              0.97080328, 0.44776152, 0.76320389, 0.05413946, 0.95068815,
              0.36704547, 0.98576923, 0.56180557, 0.14102779, 0.16357311,
              0.47468194, 0.88322457, 0.84670095, 0.29536986, 0.88650995,
              0.15780719, 0.66219459, 0.71531849, 0.10946506, 0.32411861,
              0.28172399, 0.8975295 , 0.85903962, 0.10260063, 0.81140047,
              0.29286154, 0.96142672, 0.72297638, 0.45371221, 0.71406064,
              0.6153869 , 0.30848242, 0.46369034, 0.8604779 , 0.08792128,
              0.12095155, 0.43954552, 0.93977735, 0.42272841, 0.4121531 ,
              0.58276353, 0.07337353, 0.99116803, 0.50957708, 0.95998335,
              0.2483775 , 0.47357918, 0.6505456 , 0.5441424 , 0.96611205,
              0.59123924, 0.84221573, 0.48159818, 0.95246369, 0.33460066])}]]


