
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='5e8ebfc7-2bf6-4c99-b258-fafb53a991a8'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='72105d7d-71b6-40d6-ad04-8d4fca9d7d59'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.749417327537991],
     [0.984281255120959],
     [0.155106097134918],
     [0.203809686203168],
     [0.0328056077218973],
     [0.761533666967117],
     [0.697308810268845],
     [0.503335289050442],
     [0.682934268799937],
     [0.243012193517372],
     [0.644456042349913],
     [0.613983452586265],
     [0.509861470205835],
     [0.0292564760035308],
     [0.0152495183159609],
     [0.0197500547326966],
     [0.503078039298524],
     [0.933671481636378],
     [0.695881959409377],
     [0.914892498905463],
     [0.819876951720512],
     [0.0661270089639859],
     [0.468430565279003],
     [0.244070882629293],
     [0.369002832860834],
     [0.264881483501774],
     [0.608076841184834],
     [0.922578385653087],
     [0.904815274987687],
     [0.198857283862129],
     [0.104600577110325],
     [0.67627470874337],
     [0.834851478700727],
     [0.480770281413141],
     [0.759926363757722],
     [0.431962811052822],
     [0.476299940861179],
     [0.417740798624903],
     [0.978549244995369],
     [0.940563647071447],
     [0.405133388902039],
     [0.318878044195023],
     [0.32391619448708],
     [0.469270175175934],
     [0.257283781424398],
     [0.718626717421204],
     [0.596863566125385],
     [0.916635519703389],
     [0.941956209990353],
     [0.953025920342845],
     [0.787275514508265],
     [0.42667550380899],
     [0.883005551820573],
     [0.123224709395784],
     [0.581147902062617],
     [0.0860219265892003],
     [0.584450431014284],
     [0.16045307608433],
     [0.343730863347458],
     [0.327328692199413],
     [0.727703086079263],
     [0.936796336990549],
     [0.760371951349578],
     [0.932567479886615],
     [0.98432480955997],
     [0.778321201700459],
     [0.109792784024013],
     [0.528470826693939],
     [0.279262757038041],
     [0.18828530834094],
     [0.29144596507676],
     [0.138062881175113],
     [0.699315202148231],
     [0.102443120889155],
     [0.995506526314433],
     [0.133730757802478],
     [0.207285934997874],
     [0.184209178337593],
     [0.70381315035243],
     [0.293066505395037],
     [0.754658599950906],
     [0.0946022555505218],
     [0.535180627829966],
     [0.902537294165615],
     [0.285132972088429],
     [0.842175167771241],
     [0.851616744651756],
     [0.874029630099251],
     [0.898927971691186],
     [0.718444847268771],
     [0.825853739702776],
     [0.730553128154909],
     [0.419001353603042],
     [0.550219163629867],
     [0.952908183899234],
     [0.74142364626605],
     [0.151819886982277],
     [0.921951127253004],
     [0.925000111468839],
     [0.825712199528195]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.49138355])],
     [array([ 0.0395451])],
     [array([ 0.35473061])],
     [array([ 0.54446282])],
     [array([ 0.79706778])],
     [array([ 0.31075408])],
     [array([ 0.57435617])],
     [array([ 0.07630107])],
     [array([ 0.33919911])],
     [array([ 0.41129649])],
     [array([ 0.33843633])],
     [array([ 0.36605502])],
     [array([ 0.20583536])],
     [array([ 0.49525664])],
     [array([ 0.5951786])],
     [array([ 0.22669693])],
     [array([ 0.15035558])],
     [array([ 0.25247219])],
     [array([ 0.53370928])],
     [array([ 0.16988977])],
     [array([ 0.96425276])],
     [array([ 0.5913461])],
     [array([ 0.0417502])],
     [array([ 0.82595006])],
     [array([ 0.60427441])],
     [array([ 0.56922725])],
     [array([ 0.64691597])],
     [array([ 0.55118928])],
     [array([ 0.22673384])],
     [array([ 0.21545244])],
     [array([ 0.7312446])],
     [array([ 0.83212857])],
     [array([ 0.26572655])],
     [array([ 0.0002419])],
     [array([ 0.80636482])],
     [array([ 0.51406075])],
     [array([ 0.31416401])],
     [array([ 0.47289237])],
     [array([ 0.27759303])],
     [array([ 0.48483641])],
     [array([ 0.85706518])],
     [array([ 0.83760662])],
     [array([ 0.29832481])],
     [array([ 0.08930873])],
     [array([ 0.33908274])],
     [array([ 0.34637056])],
     [array([ 0.5315224])],
     [array([ 0.85801085])],
     [array([ 0.81695954])],
     [array([ 0.99575369])],
     [array([ 0.74672104])],
     [array([ 0.88650586])],
     [array([ 0.13009665])],
     [array([ 0.86524379])],
     [array([ 0.83567891])],
     [array([ 0.9894834])],
     [array([ 0.86332916])],
     [array([ 0.24583618])],
     [array([ 0.64749195])],
     [array([ 0.67155272])],
     [array([ 0.74822201])],
     [array([ 0.94125425])],
     [array([ 0.23294947])],
     [array([ 0.75158593])],
     [array([ 0.65372303])],
     [array([ 0.26490897])],
     [array([ 0.30972053])],
     [array([ 0.66482457])],
     [array([ 0.58946518])],
     [array([ 0.90124494])],
     [array([ 0.81593198])],
     [array([ 0.78471239])],
     [array([ 0.56765402])],
     [array([ 0.83916021])],
     [array([ 0.07749267])],
     [array([ 0.06143331])],
     [array([ 0.20717083])],
     [array([ 0.56649803])],
     [array([ 0.64896735])],
     [array([ 0.92198387])],
     [array([ 0.49127186])],
     [array([ 0.24505731])],
     [array([ 0.66733909])],
     [array([ 0.11063269])],
     [array([ 0.52342039])],
     [array([ 0.35038808])],
     [array([ 0.86547697])],
     [array([ 0.55851558])],
     [array([ 0.46859945])],
     [array([ 0.04125951])],
     [array([ 0.84343566])],
     [array([ 0.20001913])],
     [array([ 0.60439142])],
     [array([ 0.30381611])],
     [array([ 0.22404088])],
     [array([ 0.51101291])],
     [array([ 0.44325394])],
     [array([ 0.40528003])],
     [array([ 0.2546819])],
     [array([ 0.5596197])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([  4.91383551e-01,   3.95450980e-02,   3.54730607e-01,
             5.44462821e-01,   7.97067781e-01,   3.10754077e-01,
             5.74356174e-01,   7.63010712e-02,   3.39199106e-01,
             4.11296485e-01,   3.38436331e-01,   3.66055016e-01,
             2.05835355e-01,   4.95256644e-01,   5.95178604e-01,
             2.26696933e-01,   1.50355583e-01,   2.52472187e-01,
             5.33709278e-01,   1.69889775e-01,   9.64252763e-01,
             5.91346103e-01,   4.17501963e-02,   8.25950063e-01,
             6.04274415e-01,   5.69227254e-01,   6.46915973e-01,
             5.51189276e-01,   2.26733836e-01,   2.15452436e-01,
             7.31244602e-01,   8.32128573e-01,   2.65726549e-01,
             2.41899943e-04,   8.06364821e-01,   5.14060751e-01,
             3.14164011e-01,   4.72892374e-01,   2.77593029e-01,
             4.84836411e-01,   8.57065184e-01,   8.37606621e-01,
             2.98324806e-01,   8.93087327e-02,   3.39082745e-01,
             3.46370562e-01,   5.31522403e-01,   8.58010854e-01,
             8.16959543e-01,   9.95753690e-01,   7.46721039e-01,
             8.86505864e-01,   1.30096645e-01,   8.65243787e-01,
             8.35678914e-01,   9.89483401e-01,   8.63329158e-01,
             2.45836182e-01,   6.47491946e-01,   6.71552721e-01,
             7.48222014e-01,   9.41254249e-01,   2.32949468e-01,
             7.51585930e-01,   6.53723026e-01,   2.64908973e-01,
             3.09720529e-01,   6.64824568e-01,   5.89465184e-01,
             9.01244942e-01,   8.15931976e-01,   7.84712391e-01,
             5.67654018e-01,   8.39160207e-01,   7.74926714e-02,
             6.14333072e-02,   2.07170828e-01,   5.66498031e-01,
             6.48967353e-01,   9.21983867e-01,   4.91271860e-01,
             2.45057308e-01,   6.67339085e-01,   1.10632686e-01,
             5.23420391e-01,   3.50388076e-01,   8.65476974e-01,
             5.58515583e-01,   4.68599445e-01,   4.12595145e-02,
             8.43435663e-01,   2.00019133e-01,   6.04391424e-01,
             3.03816113e-01,   2.24040879e-01,   5.11012907e-01,
             4.43253940e-01,   4.05280031e-01,   2.54681897e-01,
             5.59619696e-01])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.74941733,  0.98428126,  0.1551061 ,  0.20380969,  0.03280561,
               0.76153367,  0.69730881,  0.50333529,  0.68293427,  0.24301219,
               0.64445604,  0.61398345,  0.50986147,  0.02925648,  0.01524952,
               0.01975005,  0.50307804,  0.93367148,  0.69588196,  0.9148925 ,
               0.81987695,  0.06612701,  0.46843057,  0.24407088,  0.36900283,
               0.26488148,  0.60807684,  0.92257839,  0.90481527,  0.19885728,
               0.10460058,  0.67627471,  0.83485148,  0.48077028,  0.75992636,
               0.43196281,  0.47629994,  0.4177408 ,  0.97854924,  0.94056365,
               0.40513339,  0.31887804,  0.32391619,  0.46927018,  0.25728378,
               0.71862672,  0.59686357,  0.91663552,  0.94195621,  0.95302592,
               0.78727551,  0.4266755 ,  0.88300555,  0.12322471,  0.5811479 ,
               0.08602193,  0.58445043,  0.16045308,  0.34373086,  0.32732869,
               0.72770309,  0.93679634,  0.76037195,  0.93256748,  0.98432481,
               0.7783212 ,  0.10979278,  0.52847083,  0.27926276,  0.18828531,
               0.29144597,  0.13806288,  0.6993152 ,  0.10244312,  0.99550653,
               0.13373076,  0.20728593,  0.18420918,  0.70381315,  0.29306651,
               0.7546586 ,  0.09460226,  0.53518063,  0.90253729,  0.28513297,
               0.84217517,  0.85161674,  0.87402963,  0.89892797,  0.71844485,
               0.82585374,  0.73055313,  0.41900135,  0.55021916,  0.95290818,
               0.74142365,  0.15181989,  0.92195113,  0.92500011,  0.8257122 ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.06178815,  0.19504702,  0.5341072 ,  0.38982132,  0.02980423,
               0.21354622,  0.76315774,  0.1890279 ,  0.31283232,  0.07219224,
               0.82353555,  0.18855444,  0.14657653,  0.62689311,  0.70295348,
               0.37429083,  0.78884527,  0.95627016,  0.25610597,  0.95653205,
               0.37432129,  0.06530967,  0.98274117,  0.06815066,  0.52859606,
               0.46718573,  0.8045567 ,  0.74037149,  0.91685004,  0.11732161,
               0.96509169,  0.06132551,  0.19336102,  0.38318754,  0.09352905,
               0.75722438,  0.58922962,  0.98955002,  0.87459695,  0.46521884,
               0.07775612,  0.34553278,  0.79925622,  0.32250276,  0.32325006,
               0.83800826,  0.40563591,  0.7349382 ,  0.05977262,  0.78541869,
               0.79003642,  0.84539669,  0.34412755,  0.79606105,  0.10465992,
               0.25327167,  0.61721024,  0.18235188,  0.53900622,  0.07053912,
               0.70071465,  0.91770471,  0.91457157,  0.51110456,  0.20393383,
               0.35960636,  0.0527771 ,  0.44416725,  0.07437252,  0.15364608,
               0.97906086,  0.0310629 ,  0.16727126,  0.6015873 ,  0.91001017,
               0.02663232,  0.27424861,  0.24742631,  0.18805119,  0.1023759 ,
               0.83057998,  0.72086833,  0.01342781,  0.60163127,  0.13429929,
               0.15385623,  0.91653088,  0.3117142 ,  0.33991847,  0.34897432,
               0.6129118 ,  0.77937418,  0.55488166,  0.14062348,  0.32282074,
               0.10940473,  0.55450812,  0.87320533,  0.77634582,  0.40061724])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.24043243,  0.97778882,  0.43418756,  0.23748548,  0.38080922,
               0.56429857,  0.89453008,  0.27802196,  0.80469036,  0.78999293,
               0.81210609,  0.64363053,  0.68833441,  0.2158256 ,  0.19255377,
               0.51265246,  0.33173993,  0.16988057,  0.50046803,  0.15868645,
               0.6127294 ,  0.71549262,  0.90857734,  0.05936261,  0.26049997,
               0.12767171,  0.49312592,  0.80441782,  0.11872993,  0.26641447,
               0.77248706,  0.07863565,  0.97998129,  0.40079731,  0.12826309,
               0.26110811,  0.84868016,  0.51836287,  0.57390169,  0.59518739,
               0.58088159,  0.94745768,  0.72922889,  0.39797856,  0.72008084,
               0.38134507,  0.35902331,  0.91520926,  0.73829314,  0.12006298,
               0.76874323,  0.6931505 ,  0.45232811,  0.09893651,  0.57462331,
               0.80283102,  0.71732554,  0.36447973,  0.72142846,  0.50938116,
               0.80019486,  0.36534397,  0.66025181,  0.15173169,  0.41529866,
               0.85788524,  0.57072885,  0.89391635,  0.90869222,  0.89802312,
               0.51976613,  0.45033961,  0.04464456,  0.37058279,  0.40947577,
               0.10455109,  0.42532425,  0.80727659,  0.43520596,  0.69232841,
               0.00267825,  0.36729639,  0.75620652,  0.02472533,  0.92662825,
               0.14341996,  0.70524618,  0.43678442,  0.76306417,  0.20258101,
               0.21829849,  0.97014483,  0.02261741,  0.29356904,  0.45460879,
               0.66118115,  0.48765762,  0.82614182,  0.89007735,  0.16131905])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.27805834,  0.72045971,  0.16621996,  0.01953589,  0.79522695,
               0.35399036,  0.88040551,  0.43504559,  0.58759589,  0.46337794,
               0.76086552,  0.54127046,  0.06587758,  0.51195678,  0.44550781,
               0.3772731 ,  0.79483155,  0.56614715,  0.99596501,  0.73001285,
               0.08681008,  0.54430329,  0.92246341,  0.91241651,  0.83010784,
               0.23083046,  0.32527828,  0.85376323,  0.51556227,  0.62027308,
               0.88997027,  0.38025312,  0.28699072,  0.77785907,  0.63529163,
               0.16975696,  0.36689693,  0.83097403,  0.94053447,  0.2437582 ,
               0.54998114,  0.63146591,  0.51250158,  0.93585444,  0.90390813,
               0.17765424,  0.2369377 ,  0.03539143,  0.27790512,  0.90204243,
               0.37132433,  0.86729424,  0.38247442,  0.3419326 ,  0.51549019,
               0.26029305,  0.70358337,  0.11236069,  0.7884735 ,  0.26100503,
               0.25396081,  0.98702015,  0.07656878,  0.14536076,  0.94655473,
               0.59092511,  0.7145785 ,  0.0062755 ,  0.21277986,  0.54600906,
               0.72531745,  0.00978596,  0.2131833 ,  0.0347603 ,  0.94675556,
               0.10040703,  0.90181744,  0.79863014,  0.89178889,  0.84455651,
               0.6117151 ,  0.02030876,  0.51535307,  0.09932733,  0.70119007,
               0.1955751 ,  0.05401163,  0.43906509,  0.15259543,  0.76901927,
               0.35261083,  0.69986601,  0.55009438,  0.38523055,  0.50761493,
               0.03259113,  0.08186127,  0.37357814,  0.92397232,  0.16901502])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.74941733,  0.98428126,  0.1551061 ,  0.20380969,  0.03280561,
               0.76153367,  0.69730881,  0.50333529,  0.68293427,  0.24301219,
               0.64445604,  0.61398345,  0.50986147,  0.02925648,  0.01524952,
               0.01975005,  0.50307804,  0.93367148,  0.69588196,  0.9148925 ,
               0.81987695,  0.06612701,  0.46843057,  0.24407088,  0.36900283,
               0.26488148,  0.60807684,  0.92257839,  0.90481527,  0.19885728,
               0.10460058,  0.67627471,  0.83485148,  0.48077028,  0.75992636,
               0.43196281,  0.47629994,  0.4177408 ,  0.97854924,  0.94056365,
               0.40513339,  0.31887804,  0.32391619,  0.46927018,  0.25728378,
               0.71862672,  0.59686357,  0.91663552,  0.94195621,  0.95302592,
               0.78727551,  0.4266755 ,  0.88300555,  0.12322471,  0.5811479 ,
               0.08602193,  0.58445043,  0.16045308,  0.34373086,  0.32732869,
               0.72770309,  0.93679634,  0.76037195,  0.93256748,  0.98432481,
               0.7783212 ,  0.10979278,  0.52847083,  0.27926276,  0.18828531,
               0.29144597,  0.13806288,  0.6993152 ,  0.10244312,  0.99550653,
               0.13373076,  0.20728593,  0.18420918,  0.70381315,  0.29306651,
               0.7546586 ,  0.09460226,  0.53518063,  0.90253729,  0.28513297,
               0.84217517,  0.85161674,  0.87402963,  0.89892797,  0.71844485,
               0.82585374,  0.73055313,  0.41900135,  0.55021916,  0.95290818,
               0.74142365,  0.15181989,  0.92195113,  0.92500011,  0.8257122 ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.06178815,  0.19504702,  0.5341072 ,  0.38982132,  0.02980423,
               0.21354622,  0.76315774,  0.1890279 ,  0.31283232,  0.07219224,
               0.82353555,  0.18855444,  0.14657653,  0.62689311,  0.70295348,
               0.37429083,  0.78884527,  0.95627016,  0.25610597,  0.95653205,
               0.37432129,  0.06530967,  0.98274117,  0.06815066,  0.52859606,
               0.46718573,  0.8045567 ,  0.74037149,  0.91685004,  0.11732161,
               0.96509169,  0.06132551,  0.19336102,  0.38318754,  0.09352905,
               0.75722438,  0.58922962,  0.98955002,  0.87459695,  0.46521884,
               0.07775612,  0.34553278,  0.79925622,  0.32250276,  0.32325006,
               0.83800826,  0.40563591,  0.7349382 ,  0.05977262,  0.78541869,
               0.79003642,  0.84539669,  0.34412755,  0.79606105,  0.10465992,
               0.25327167,  0.61721024,  0.18235188,  0.53900622,  0.07053912,
               0.70071465,  0.91770471,  0.91457157,  0.51110456,  0.20393383,
               0.35960636,  0.0527771 ,  0.44416725,  0.07437252,  0.15364608,
               0.97906086,  0.0310629 ,  0.16727126,  0.6015873 ,  0.91001017,
               0.02663232,  0.27424861,  0.24742631,  0.18805119,  0.1023759 ,
               0.83057998,  0.72086833,  0.01342781,  0.60163127,  0.13429929,
               0.15385623,  0.91653088,  0.3117142 ,  0.33991847,  0.34897432,
               0.6129118 ,  0.77937418,  0.55488166,  0.14062348,  0.32282074,
               0.10940473,  0.55450812,  0.87320533,  0.77634582,  0.40061724])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.24043243,  0.97778882,  0.43418756,  0.23748548,  0.38080922,
               0.56429857,  0.89453008,  0.27802196,  0.80469036,  0.78999293,
               0.81210609,  0.64363053,  0.68833441,  0.2158256 ,  0.19255377,
               0.51265246,  0.33173993,  0.16988057,  0.50046803,  0.15868645,
               0.6127294 ,  0.71549262,  0.90857734,  0.05936261,  0.26049997,
               0.12767171,  0.49312592,  0.80441782,  0.11872993,  0.26641447,
               0.77248706,  0.07863565,  0.97998129,  0.40079731,  0.12826309,
               0.26110811,  0.84868016,  0.51836287,  0.57390169,  0.59518739,
               0.58088159,  0.94745768,  0.72922889,  0.39797856,  0.72008084,
               0.38134507,  0.35902331,  0.91520926,  0.73829314,  0.12006298,
               0.76874323,  0.6931505 ,  0.45232811,  0.09893651,  0.57462331,
               0.80283102,  0.71732554,  0.36447973,  0.72142846,  0.50938116,
               0.80019486,  0.36534397,  0.66025181,  0.15173169,  0.41529866,
               0.85788524,  0.57072885,  0.89391635,  0.90869222,  0.89802312,
               0.51976613,  0.45033961,  0.04464456,  0.37058279,  0.40947577,
               0.10455109,  0.42532425,  0.80727659,  0.43520596,  0.69232841,
               0.00267825,  0.36729639,  0.75620652,  0.02472533,  0.92662825,
               0.14341996,  0.70524618,  0.43678442,  0.76306417,  0.20258101,
               0.21829849,  0.97014483,  0.02261741,  0.29356904,  0.45460879,
               0.66118115,  0.48765762,  0.82614182,  0.89007735,  0.16131905])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.51319617,  0.21119357,  0.97741338,  0.33595737,  0.48124559,
               0.45593959,  0.61454716,  0.92812456,  0.72476347,  0.00268491,
               0.55650275,  0.4780831 ,  0.52217556,  0.39710648,  0.06201545,
               0.64043379,  0.90994509,  0.51821011,  0.88110896,  0.39440785,
               0.53554031,  0.56349879,  0.74633454,  0.06339489,  0.0402868 ,
               0.84238073,  0.12705901,  0.78426658,  0.26535308,  0.41211776,
               0.4970182 ,  0.44333902,  0.3301183 ,  0.57471025,  0.24314995,
               0.39581467,  0.67136497,  0.39090656,  0.31614108,  0.07007626,
               0.71567875,  0.87115829,  0.55383945,  0.25460461,  0.16719567,
               0.30236641,  0.76223727,  0.94027075,  0.04948385,  0.86285233,
               0.65497119,  0.11096371,  0.67637436,  0.66368859,  0.75756462,
               0.86102133,  0.61809306,  0.95299246,  0.32995281,  0.42623927,
               0.83346054,  0.19928872,  0.68908986,  0.28024563,  0.88932987,
               0.31926927,  0.27041578,  0.77095553,  0.53254265,  0.22707841,
               0.77972987,  0.7544199 ,  0.68385332,  0.82048009,  0.64764849,
               0.39421263,  0.5356112 ,  0.20368008,  0.95969865,  0.6504362 ,
               0.69543089,  0.37289832,  0.51245627,  0.45509172,  0.40683159,
               0.62462383,  0.42331638,  0.57827472,  0.21354464,  0.71506639,
               0.27656827,  0.33461639,  0.67893512,  0.05906749,  0.36491375,
               0.17603429,  0.80412825,  0.64881986,  0.75383878,  0.02627255])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  4.91383551e-01,   3.95450980e-02,   3.54730607e-01,
                5.44462821e-01,   7.97067781e-01,   3.10754077e-01,
                5.74356174e-01,   7.63010712e-02,   3.39199106e-01,
                4.11296485e-01,   3.38436331e-01,   3.66055016e-01,
                2.05835355e-01,   4.95256644e-01,   5.95178604e-01,
                2.26696933e-01,   1.50355583e-01,   2.52472187e-01,
                5.33709278e-01,   1.69889775e-01,   9.64252763e-01,
                5.91346103e-01,   4.17501963e-02,   8.25950063e-01,
                6.04274415e-01,   5.69227254e-01,   6.46915973e-01,
                5.51189276e-01,   2.26733836e-01,   2.15452436e-01,
                7.31244602e-01,   8.32128573e-01,   2.65726549e-01,
                2.41899943e-04,   8.06364821e-01,   5.14060751e-01,
                3.14164011e-01,   4.72892374e-01,   2.77593029e-01,
                4.84836411e-01,   8.57065184e-01,   8.37606621e-01,
                2.98324806e-01,   8.93087327e-02,   3.39082745e-01,
                3.46370562e-01,   5.31522403e-01,   8.58010854e-01,
                8.16959543e-01,   9.95753690e-01,   7.46721039e-01,
                8.86505864e-01,   1.30096645e-01,   8.65243787e-01,
                8.35678914e-01,   9.89483401e-01,   8.63329158e-01,
                2.45836182e-01,   6.47491946e-01,   6.71552721e-01,
                7.48222014e-01,   9.41254249e-01,   2.32949468e-01,
                7.51585930e-01,   6.53723026e-01,   2.64908973e-01,
                3.09720529e-01,   6.64824568e-01,   5.89465184e-01,
                9.01244942e-01,   8.15931976e-01,   7.84712391e-01,
                5.67654018e-01,   8.39160207e-01,   7.74926714e-02,
                6.14333072e-02,   2.07170828e-01,   5.66498031e-01,
                6.48967353e-01,   9.21983867e-01,   4.91271860e-01,
                2.45057308e-01,   6.67339085e-01,   1.10632686e-01,
                5.23420391e-01,   3.50388076e-01,   8.65476974e-01,
                5.58515583e-01,   4.68599445e-01,   4.12595145e-02,
                8.43435663e-01,   2.00019133e-01,   6.04391424e-01,
                3.03816113e-01,   2.24040879e-01,   5.11012907e-01,
                4.43253940e-01,   4.05280031e-01,   2.54681897e-01,
                5.59619696e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.06219483,  0.30945577,  0.89287705,  0.93662831,  0.2204171 ,
               0.38693064,  0.72576017,  0.52216208,  0.85646432,  0.53961958,
               0.88073663,  0.1809858 ,  0.62817071,  0.06905072,  0.12808331,
               0.92509018,  0.70408713,  0.6521791 ,  0.88552968,  0.45100161,
               0.0031507 ,  0.53411606,  0.35028153,  0.47228755,  0.43252155,
               0.16106763,  0.42598602,  0.04995866,  0.20932231,  0.66349622,
               0.20148889,  0.60437561,  0.72042559,  0.51872894,  0.46460958,
               0.5288245 ,  0.39608089,  0.08462097,  0.57255982,  0.49046236,
               0.14995586,  0.29372846,  0.86652121,  0.06547587,  0.1687493 ,
               0.71524422,  0.64407245,  0.12103122,  0.67594164,  0.5443471 ,
               0.60866192,  0.32931618,  0.76025159,  0.37578627,  0.09148353,
               0.79104575,  0.59059449,  0.23957319,  0.8801591 ,  0.15195225,
               0.19133346,  0.33654737,  0.43006185,  0.16205598,  0.6696066 ,
               0.04009413,  0.66201643,  0.1133749 ,  0.40186606,  0.24969695,
               0.08058545,  0.33656752,  0.71283823,  0.9310743 ,  0.25510349,
               0.72324601,  0.75779956,  0.75102467,  0.62844661,  0.25031737,
               0.65566703,  0.88087146,  0.42693243,  0.74973994,  0.24265864,
               0.10586881,  0.17816125,  0.93082897,  0.5860375 ,  0.57161083,
               0.61687101,  0.61444235,  0.41799417,  0.63747164,  0.95148797,
               0.20276457,  0.7154383 ,  0.22919411,  0.94999758,  0.12430843])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.56262424,  0.95370023,  0.89514781,  0.67630217,  0.87604633,
               0.0360654 ,  0.26103712,  0.23924819,  0.53284103,  0.61847262,
               0.52817094,  0.00343779,  0.16692462,  0.59419138,  0.61637448,
               0.24608702,  0.53313054,  0.01868105,  0.6207567 ,  0.83620313,
               0.43269385,  0.72187783,  0.85988375,  0.85212663,  0.47312559,
               0.13471779,  0.01990087,  0.47257997,  0.26722363,  0.1154682 ,
               0.97058263,  0.03621311,  0.70223315,  0.57551168,  0.51131318,
               0.98174065,  0.49257374,  0.29593502,  0.19332794,  0.25968915,
               0.59554496,  0.05458323,  0.52331857,  0.71345288,  0.69911473,
               0.64838614,  0.18862483,  0.76855704,  0.25438598,  0.44952519,
               0.27721468,  0.10498993,  0.56468466,  0.43710491,  0.62604724,
               0.52288971,  0.4785838 ,  0.6952732 ,  0.54199994,  0.98886493,
               0.02807361,  0.01870152,  0.03184293,  0.37576593,  0.50308494,
               0.09697729,  0.08315407,  0.73430728,  0.90635461,  0.1521119 ,
               0.75925546,  0.1002319 ,  0.0610651 ,  0.38506488,  0.49266523,
               0.93702033,  0.93946668,  0.89873372,  0.896278  ,  0.60986768,
               0.1857599 ,  0.00638622,  0.6611039 ,  0.38179657,  0.05914607,
               0.24138275,  0.48259617,  0.99093506,  0.4177194 ,  0.60075503,
               0.29697422,  0.27409471,  0.2542785 ,  0.23670004,  0.93435412,
               0.74958599,  0.98062459,  0.36438882,  0.67641748,  0.6551914 ])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.84129975,  0.96998083,  0.0969916 ,  0.31104806,  0.51635519,
               0.24936498,  0.91844481,  0.6740118 ,  0.45270281,  0.03967289,
               0.15164645,  0.69929878,  0.95685953,  0.58212827,  0.13366614,
               0.95874484,  0.75189968,  0.2243932 ,  0.99321631,  0.28524661,
               0.4999961 ,  0.47725188,  0.28671591,  0.24305418,  0.3874812 ,
               0.84575419,  0.75460207,  0.13150658,  0.58668773,  0.0244378 ,
               0.56285641,  0.71678068,  0.92138342,  0.13661528,  0.74285641,
               0.64088832,  0.39795631,  0.65425357,  0.82517645,  0.79274042,
               0.14932392,  0.31118805,  0.1373651 ,  0.15145061,  0.00985832,
               0.46364835,  0.62785408,  0.85495845,  0.64681579,  0.13171446,
               0.50552236,  0.37803412,  0.44478596,  0.62399143,  0.46899232,
               0.15861589,  0.06989495,  0.92888576,  0.74841107,  0.14095806,
               0.82465493,  0.26713445,  0.22840295,  0.10969349,  0.94404264,
               0.95235379,  0.55841921,  0.66099537,  0.43082051,  0.57320991,
               0.14223839,  0.2274949 ,  0.1116542 ,  0.44685895,  0.93386123,
               0.74248152,  0.28668362,  0.26844875,  0.04145866,  0.5008993 ,
               0.37762835,  0.2897385 ,  0.89525944,  0.13720087,  0.97945727,
               0.57850721,  0.42378166,  0.77858954,  0.41424077,  0.97193193,
               0.94611301,  0.56257049,  0.05945371,  0.15804593,  0.86956095,
               0.9741899 ,  0.18834393,  0.85168331,  0.96193859,  0.67211261])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([  4.91383551e-01,   3.95450980e-02,   3.54730607e-01,
                5.44462821e-01,   7.97067781e-01,   3.10754077e-01,
                5.74356174e-01,   7.63010712e-02,   3.39199106e-01,
                4.11296485e-01,   3.38436331e-01,   3.66055016e-01,
                2.05835355e-01,   4.95256644e-01,   5.95178604e-01,
                2.26696933e-01,   1.50355583e-01,   2.52472187e-01,
                5.33709278e-01,   1.69889775e-01,   9.64252763e-01,
                5.91346103e-01,   4.17501963e-02,   8.25950063e-01,
                6.04274415e-01,   5.69227254e-01,   6.46915973e-01,
                5.51189276e-01,   2.26733836e-01,   2.15452436e-01,
                7.31244602e-01,   8.32128573e-01,   2.65726549e-01,
                2.41899943e-04,   8.06364821e-01,   5.14060751e-01,
                3.14164011e-01,   4.72892374e-01,   2.77593029e-01,
                4.84836411e-01,   8.57065184e-01,   8.37606621e-01,
                2.98324806e-01,   8.93087327e-02,   3.39082745e-01,
                3.46370562e-01,   5.31522403e-01,   8.58010854e-01,
                8.16959543e-01,   9.95753690e-01,   7.46721039e-01,
                8.86505864e-01,   1.30096645e-01,   8.65243787e-01,
                8.35678914e-01,   9.89483401e-01,   8.63329158e-01,
                2.45836182e-01,   6.47491946e-01,   6.71552721e-01,
                7.48222014e-01,   9.41254249e-01,   2.32949468e-01,
                7.51585930e-01,   6.53723026e-01,   2.64908973e-01,
                3.09720529e-01,   6.64824568e-01,   5.89465184e-01,
                9.01244942e-01,   8.15931976e-01,   7.84712391e-01,
                5.67654018e-01,   8.39160207e-01,   7.74926714e-02,
                6.14333072e-02,   2.07170828e-01,   5.66498031e-01,
                6.48967353e-01,   9.21983867e-01,   4.91271860e-01,
                2.45057308e-01,   6.67339085e-01,   1.10632686e-01,
                5.23420391e-01,   3.50388076e-01,   8.65476974e-01,
                5.58515583e-01,   4.68599445e-01,   4.12595145e-02,
                8.43435663e-01,   2.00019133e-01,   6.04391424e-01,
                3.03816113e-01,   2.24040879e-01,   5.11012907e-01,
                4.43253940e-01,   4.05280031e-01,   2.54681897e-01,
                5.59619696e-01])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.06219483,  0.30945577,  0.89287705,  0.93662831,  0.2204171 ,
               0.38693064,  0.72576017,  0.52216208,  0.85646432,  0.53961958,
               0.88073663,  0.1809858 ,  0.62817071,  0.06905072,  0.12808331,
               0.92509018,  0.70408713,  0.6521791 ,  0.88552968,  0.45100161,
               0.0031507 ,  0.53411606,  0.35028153,  0.47228755,  0.43252155,
               0.16106763,  0.42598602,  0.04995866,  0.20932231,  0.66349622,
               0.20148889,  0.60437561,  0.72042559,  0.51872894,  0.46460958,
               0.5288245 ,  0.39608089,  0.08462097,  0.57255982,  0.49046236,
               0.14995586,  0.29372846,  0.86652121,  0.06547587,  0.1687493 ,
               0.71524422,  0.64407245,  0.12103122,  0.67594164,  0.5443471 ,
               0.60866192,  0.32931618,  0.76025159,  0.37578627,  0.09148353,
               0.79104575,  0.59059449,  0.23957319,  0.8801591 ,  0.15195225,
               0.19133346,  0.33654737,  0.43006185,  0.16205598,  0.6696066 ,
               0.04009413,  0.66201643,  0.1133749 ,  0.40186606,  0.24969695,
               0.08058545,  0.33656752,  0.71283823,  0.9310743 ,  0.25510349,
               0.72324601,  0.75779956,  0.75102467,  0.62844661,  0.25031737,
               0.65566703,  0.88087146,  0.42693243,  0.74973994,  0.24265864,
               0.10586881,  0.17816125,  0.93082897,  0.5860375 ,  0.57161083,
               0.61687101,  0.61444235,  0.41799417,  0.63747164,  0.95148797,
               0.20276457,  0.7154383 ,  0.22919411,  0.94999758,  0.12430843])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.56262424,  0.95370023,  0.89514781,  0.67630217,  0.87604633,
               0.0360654 ,  0.26103712,  0.23924819,  0.53284103,  0.61847262,
               0.52817094,  0.00343779,  0.16692462,  0.59419138,  0.61637448,
               0.24608702,  0.53313054,  0.01868105,  0.6207567 ,  0.83620313,
               0.43269385,  0.72187783,  0.85988375,  0.85212663,  0.47312559,
               0.13471779,  0.01990087,  0.47257997,  0.26722363,  0.1154682 ,
               0.97058263,  0.03621311,  0.70223315,  0.57551168,  0.51131318,
               0.98174065,  0.49257374,  0.29593502,  0.19332794,  0.25968915,
               0.59554496,  0.05458323,  0.52331857,  0.71345288,  0.69911473,
               0.64838614,  0.18862483,  0.76855704,  0.25438598,  0.44952519,
               0.27721468,  0.10498993,  0.56468466,  0.43710491,  0.62604724,
               0.52288971,  0.4785838 ,  0.6952732 ,  0.54199994,  0.98886493,
               0.02807361,  0.01870152,  0.03184293,  0.37576593,  0.50308494,
               0.09697729,  0.08315407,  0.73430728,  0.90635461,  0.1521119 ,
               0.75925546,  0.1002319 ,  0.0610651 ,  0.38506488,  0.49266523,
               0.93702033,  0.93946668,  0.89873372,  0.896278  ,  0.60986768,
               0.1857599 ,  0.00638622,  0.6611039 ,  0.38179657,  0.05914607,
               0.24138275,  0.48259617,  0.99093506,  0.4177194 ,  0.60075503,
               0.29697422,  0.27409471,  0.2542785 ,  0.23670004,  0.93435412,
               0.74958599,  0.98062459,  0.36438882,  0.67641748,  0.6551914 ])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([  4.85657971e-01,   1.13972312e-01,   9.13876797e-01,
                3.98944215e-02,   7.78247656e-01,   8.92749577e-01,
                9.34216704e-01,   2.33115832e-01,   9.83265308e-01,
                2.89361895e-01,   4.52263950e-01,   6.68232558e-01,
                7.51342226e-01,   5.00400432e-01,   9.25119149e-01,
                1.76243881e-01,   1.78176100e-02,   8.68851892e-01,
                7.20537870e-01,   6.91822058e-01,   1.55605049e-01,
                6.96095938e-02,   6.78871819e-01,   7.32715087e-01,
                3.53623314e-01,   6.22696475e-01,   7.01496363e-01,
                9.24717109e-01,   9.58757398e-01,   8.42594018e-01,
                3.39331643e-01,   7.83891191e-01,   2.35766986e-01,
                8.42623720e-01,   2.18575374e-01,   7.27574184e-01,
                5.78436883e-01,   6.78229403e-01,   2.65700128e-01,
                9.54725461e-01,   1.98703703e-01,   2.36398824e-01,
                4.82165808e-01,   3.88259046e-01,   4.87465246e-01,
                9.02991417e-01,   6.56818979e-01,   8.34003270e-01,
                2.52873993e-01,   6.66997633e-01,   3.80954891e-01,
                2.77480423e-01,   1.15786786e-01,   4.69949555e-01,
                1.02292522e-01,   1.45775855e-01,   8.81732225e-01,
                8.23574297e-01,   5.16805494e-01,   6.17430039e-01,
                6.20896389e-01,   9.76755827e-01,   3.45988864e-01,
                2.55069540e-01,   8.86689229e-01,   9.74237293e-01,
                5.50033344e-01,   2.24459588e-02,   4.33714989e-01,
                4.07473051e-01,   7.41974628e-01,   7.61302476e-01,
                6.84393269e-01,   6.44187801e-01,   2.18100875e-01,
                2.30350795e-01,   8.39134794e-01,   3.96633540e-01,
                6.71070461e-01,   3.10993742e-01,   2.62229270e-01,
                4.49580531e-04,   8.57260823e-02,   8.77090492e-02,
                6.44643480e-01,   8.62996866e-01,   3.23070419e-01,
                5.00947809e-01,   4.54135440e-02,   4.47620816e-01,
                6.19381348e-01,   4.47067601e-01,   1.84368970e-01,
                7.61413835e-01,   2.22953694e-01,   5.97397363e-01,
                2.80484835e-01,   3.12392783e-01,   7.49023113e-01,
                6.33047317e-01])}]]


