
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='51635b67-4cb5-40e8-881f-f77f46eb64fd'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='1a8191ab-34cc-477d-ba58-4a118b4d1849'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.351371576409874],
     [0.0552901498963265],
     [0.294136176514638],
     [0.857383989450735],
     [0.0130351195397588],
     [0.574302674672511],
     [0.352910390453707],
     [0.308546172751577],
     [0.678948416845344],
     [0.771149155439698],
     [0.891048226830427],
     [0.44727386443756],
     [0.769966897912147],
     [0.677072605555534],
     [0.537740300637334],
     [0.640565729121852],
     [0.817083063384833],
     [0.442163617470932],
     [0.774867201305416],
     [0.482323217421344],
     [0.116957284920593],
     [0.689608179436503],
     [0.296983685717045],
     [0.878185140937525],
     [0.201210774808427],
     [0.0721009230403469],
     [0.298563608339069],
     [0.143748064856534],
     [0.62667147263169],
     [0.399807021520318],
     [0.72449337007854],
     [0.726918343589361],
     [0.688018091090167],
     [0.391204995784698],
     [0.588868431409254],
     [0.704776318269319],
     [0.802122872566067],
     [0.111443461232927],
     [0.594694687865495],
     [0.237728022823279],
     [0.956438754783242],
     [0.0504409525599208],
     [0.589556526495308],
     [0.670389840639266],
     [0.48508333744152],
     [0.915931185049663],
     [0.743265793456152],
     [0.676181498049353],
     [0.0321491466594472],
     [0.366876427608904],
     [0.751087550687869],
     [0.551894216829789],
     [0.785354914867863],
     [0.320417086973083],
     [0.748277707937884],
     [0.649228330904472],
     [0.882927963345323],
     [0.701547266693042],
     [0.871933059240867],
     [0.772814685778386],
     [0.0109773890218142],
     [0.819191514517247],
     [0.157707707001984],
     [0.706524527692056],
     [0.148877700563896],
     [0.690163233050585],
     [0.329263101223189],
     [0.478822727030036],
     [0.715137855816492],
     [0.836329010603815],
     [0.664491277424397],
     [0.563484349988245],
     [0.925189518128352],
     [0.658334584232198],
     [0.731762165532022],
     [0.63027832849361],
     [0.493105450856514],
     [0.993517295776191],
     [0.667784755348097],
     [0.698309205621514],
     [0.799763697466673],
     [0.0432622254346378],
     [0.969059780805216],
     [0.0366982104292687],
     [0.071030182704083],
     [0.376298053841012],
     [0.90967985761262],
     [0.85434899275948],
     [0.276755520334003],
     [0.457510627660603],
     [0.157376841492398],
     [0.0323101517128256],
     [0.157825088011777],
     [0.159945579502109],
     [0.890168731500517],
     [0.73808185894101],
     [0.416883469533307],
     [0.583884629169348],
     [0.874780140672674],
     [0.216961261832797]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.53344244])],
     [array([0.27798974])],
     [array([0.65101191])],
     [array([0.37693764])],
     [array([0.80579544])],
     [array([0.91207193])],
     [array([0.59143786])],
     [array([0.62486566])],
     [array([0.77931471])],
     [array([0.34655])],
     [array([0.16314037])],
     [array([0.2138963])],
     [array([0.20943014])],
     [array([0.40935055])],
     [array([0.81809666])],
     [array([0.36452723])],
     [array([0.60546179])],
     [array([0.92849004])],
     [array([0.85405161])],
     [array([0.21739014])],
     [array([0.63902603])],
     [array([0.97563851])],
     [array([0.45537341])],
     [array([0.80018136])],
     [array([0.35226599])],
     [array([0.18947385])],
     [array([0.12257901])],
     [array([0.54364719])],
     [array([0.53582595])],
     [array([0.54670426])],
     [array([0.10915533])],
     [array([0.89373988])],
     [array([0.83333078])],
     [array([0.26377289])],
     [array([0.14975893])],
     [array([0.61812847])],
     [array([0.72511892])],
     [array([0.8248145])],
     [array([0.64474638])],
     [array([0.00811244])],
     [array([0.80288174])],
     [array([0.71589583])],
     [array([0.71823589])],
     [array([0.94251582])],
     [array([0.16482016])],
     [array([0.7068986])],
     [array([0.85016242])],
     [array([0.97649959])],
     [array([0.67888446])],
     [array([0.03082842])],
     [array([0.07566819])],
     [array([0.05656825])],
     [array([0.64356694])],
     [array([0.88123355])],
     [array([0.30074496])],
     [array([0.55474916])],
     [array([0.63646345])],
     [array([0.40994158])],
     [array([0.96700048])],
     [array([0.14250595])],
     [array([0.85250027])],
     [array([0.30101582])],
     [array([0.7277431])],
     [array([0.07984482])],
     [array([0.50271891])],
     [array([0.37818779])],
     [array([0.0263207])],
     [array([0.60447255])],
     [array([0.06396273])],
     [array([0.68296896])],
     [array([0.10118081])],
     [array([0.20493307])],
     [array([0.01174154])],
     [array([0.70194366])],
     [array([0.21471368])],
     [array([0.6494205])],
     [array([0.59152588])],
     [array([0.37658867])],
     [array([0.27836759])],
     [array([0.20208968])],
     [array([0.50934122])],
     [array([0.41741969])],
     [array([0.30794731])],
     [array([0.56581027])],
     [array([0.83131979])],
     [array([0.3905784])],
     [array([0.21795228])],
     [array([0.81232272])],
     [array([0.31453862])],
     [array([0.08165971])],
     [array([0.05313614])],
     [array([0.0601998])],
     [array([0.48397062])],
     [array([0.8733459])],
     [array([0.26355094])],
     [array([0.39189333])],
     [array([0.2852427])],
     [array([0.40995844])],
     [array([0.15452687])],
     [array([0.56115922])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.53344244, 0.27798974, 0.65101191, 0.37693764, 0.80579544,
           0.91207193, 0.59143786, 0.62486566, 0.77931471, 0.34655   ,
           0.16314037, 0.2138963 , 0.20943014, 0.40935055, 0.81809666,
           0.36452723, 0.60546179, 0.92849004, 0.85405161, 0.21739014,
           0.63902603, 0.97563851, 0.45537341, 0.80018136, 0.35226599,
           0.18947385, 0.12257901, 0.54364719, 0.53582595, 0.54670426,
           0.10915533, 0.89373988, 0.83333078, 0.26377289, 0.14975893,
           0.61812847, 0.72511892, 0.8248145 , 0.64474638, 0.00811244,
           0.80288174, 0.71589583, 0.71823589, 0.94251582, 0.16482016,
           0.7068986 , 0.85016242, 0.97649959, 0.67888446, 0.03082842,
           0.07566819, 0.05656825, 0.64356694, 0.88123355, 0.30074496,
           0.55474916, 0.63646345, 0.40994158, 0.96700048, 0.14250595,
           0.85250027, 0.30101582, 0.7277431 , 0.07984482, 0.50271891,
           0.37818779, 0.0263207 , 0.60447255, 0.06396273, 0.68296896,
           0.10118081, 0.20493307, 0.01174154, 0.70194366, 0.21471368,
           0.6494205 , 0.59152588, 0.37658867, 0.27836759, 0.20208968,
           0.50934122, 0.41741969, 0.30794731, 0.56581027, 0.83131979,
           0.3905784 , 0.21795228, 0.81232272, 0.31453862, 0.08165971,
           0.05313614, 0.0601998 , 0.48397062, 0.8733459 , 0.26355094,
           0.39189333, 0.2852427 , 0.40995844, 0.15452687, 0.56115922])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.35137158, 0.05529015, 0.29413618, 0.85738399, 0.01303512,
              0.57430267, 0.35291039, 0.30854617, 0.67894842, 0.77114916,
              0.89104823, 0.44727386, 0.7699669 , 0.67707261, 0.5377403 ,
              0.64056573, 0.81708306, 0.44216362, 0.7748672 , 0.48232322,
              0.11695728, 0.68960818, 0.29698369, 0.87818514, 0.20121077,
              0.07210092, 0.29856361, 0.14374806, 0.62667147, 0.39980702,
              0.72449337, 0.72691834, 0.68801809, 0.391205  , 0.58886843,
              0.70477632, 0.80212287, 0.11144346, 0.59469469, 0.23772802,
              0.95643875, 0.05044095, 0.58955653, 0.67038984, 0.48508334,
              0.91593119, 0.74326579, 0.6761815 , 0.03214915, 0.36687643,
              0.75108755, 0.55189422, 0.78535491, 0.32041709, 0.74827771,
              0.64922833, 0.88292796, 0.70154727, 0.87193306, 0.77281469,
              0.01097739, 0.81919151, 0.15770771, 0.70652453, 0.1488777 ,
              0.69016323, 0.3292631 , 0.47882273, 0.71513786, 0.83632901,
              0.66449128, 0.56348435, 0.92518952, 0.65833458, 0.73176217,
              0.63027833, 0.49310545, 0.9935173 , 0.66778476, 0.69830921,
              0.7997637 , 0.04326223, 0.96905978, 0.03669821, 0.07103018,
              0.37629805, 0.90967986, 0.85434899, 0.27675552, 0.45751063,
              0.15737684, 0.03231015, 0.15782509, 0.15994558, 0.89016873,
              0.73808186, 0.41688347, 0.58388463, 0.87478014, 0.21696126])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.00376004, 0.86714431, 0.4755653 , 0.63797885, 0.93458162,
              0.14971036, 0.74460313, 0.38053722, 0.62035145, 0.90290004,
              0.90520335, 0.76093064, 0.76158849, 0.34426578, 0.29714958,
              0.25344254, 0.39877133, 0.78787073, 0.27940687, 0.88119206,
              0.31217218, 0.834828  , 0.04854063, 0.9747512 , 0.97307276,
              0.47292818, 0.38844601, 0.69545054, 0.88940876, 0.72560816,
              0.01211584, 0.95518809, 0.9349198 , 0.0850678 , 0.14138197,
              0.84516879, 0.37265835, 0.86072484, 0.27779979, 0.40842477,
              0.49622865, 0.7124482 , 0.0921035 , 0.18530795, 0.99327776,
              0.90494876, 0.62425091, 0.76752687, 0.0417045 , 0.07350616,
              0.73495337, 0.70960003, 0.06972988, 0.54824531, 0.34041001,
              0.68391417, 0.03136027, 0.46456797, 0.44232802, 0.22994579,
              0.19997911, 0.6828372 , 0.20352772, 0.81008522, 0.09077809,
              0.53355263, 0.16399611, 0.1229114 , 0.21158445, 0.33431863,
              0.53278259, 0.05303385, 0.84298001, 0.0444721 , 0.90509725,
              0.69662455, 0.08242823, 0.40792673, 0.86687264, 0.36989179,
              0.80358171, 0.37790247, 0.29874991, 0.98746276, 0.44470863,
              0.60559251, 0.11421646, 0.51916938, 0.95318674, 0.2025709 ,
              0.45969439, 0.13499985, 0.64829075, 0.19013869, 0.96339148,
              0.91056511, 0.5971676 , 0.21553387, 0.7036456 , 0.92838315])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.12585817, 0.26884193, 0.55148463, 0.31353042, 0.30848844,
              0.64760625, 0.08233801, 0.60411358, 0.52072675, 0.83852781,
              0.17037794, 0.95221473, 0.20807426, 0.10660698, 0.06947179,
              0.97765885, 0.12450434, 0.84807071, 0.6324757 , 0.18718842,
              0.98714548, 0.41725099, 0.22314886, 0.99794368, 0.20723225,
              0.66029269, 0.85364488, 0.41676387, 0.8916911 , 0.7507673 ,
              0.13360455, 0.24133038, 0.46989761, 0.95444038, 0.58868773,
              0.83296082, 0.02808477, 0.20584791, 0.99689757, 0.38775562,
              0.52772271, 0.70228321, 0.56394499, 0.40459974, 0.17432194,
              0.68625034, 0.17850255, 0.22395046, 0.70075159, 0.54785882,
              0.39964508, 0.19944211, 0.0179681 , 0.92397077, 0.18147404,
              0.2951378 , 0.72138954, 0.3512442 , 0.18952852, 0.44043134,
              0.51590541, 0.52259842, 0.49917056, 0.31038639, 0.40072583,
              0.87767785, 0.19913279, 0.30507001, 0.06186694, 0.87258311,
              0.52086558, 0.69769379, 0.94139755, 0.83306951, 0.26886046,
              0.36058671, 0.10776434, 0.19060962, 0.43625323, 0.85605311,
              0.72078777, 0.83245113, 0.29779965, 0.14097214, 0.02033671,
              0.45583968, 0.71870813, 0.52834886, 0.85512548, 0.47264894,
              0.46582487, 0.60363973, 0.05708484, 0.49325878, 0.12185075,
              0.36906903, 0.91258869, 0.68715561, 0.66310353, 0.65030738])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.16044762, 0.86562529, 0.80015547, 0.37849732, 0.2873859 ,
              0.60361791, 0.68886236, 0.55071397, 0.05936019, 0.02993594,
              0.20057536, 0.23796874, 0.65997615, 0.77567233, 0.37497045,
              0.31097936, 0.27841493, 0.27391711, 0.63284919, 0.29105239,
              0.45764722, 0.08454754, 0.79129554, 0.65482305, 0.24409655,
              0.69716918, 0.50007182, 0.94521154, 0.7142466 , 0.51192425,
              0.41345817, 0.11135775, 0.05524689, 0.62778338, 0.04742625,
              0.99818362, 0.63851175, 0.84922095, 0.55124438, 0.00568992,
              0.85207749, 0.02257066, 0.19171151, 0.0627559 , 0.41876385,
              0.982704  , 0.37082996, 0.78548231, 0.79059417, 0.45537573,
              0.6935387 , 0.30604241, 0.36947741, 0.31912999, 0.15930236,
              0.39170693, 0.95244072, 0.73470133, 0.37428218, 0.4630192 ,
              0.39270179, 0.00811784, 0.9232    , 0.62382967, 0.2115881 ,
              0.05020111, 0.08568872, 0.73685556, 0.95264003, 0.92917358,
              0.9540051 , 0.01249026, 0.38123439, 0.91414265, 0.97828743,
              0.17373681, 0.95008899, 0.36750375, 0.63267851, 0.90421486,
              0.25581613, 0.16606555, 0.14008912, 0.91841591, 0.03867932,
              0.25635683, 0.17011358, 0.56082449, 0.43382542, 0.13662185,
              0.08216231, 0.5809786 , 0.20041051, 0.14531842, 0.61853072,
              0.84910243, 0.67297512, 0.25080732, 0.63414323, 0.3179629 ])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.35137158, 0.05529015, 0.29413618, 0.85738399, 0.01303512,
              0.57430267, 0.35291039, 0.30854617, 0.67894842, 0.77114916,
              0.89104823, 0.44727386, 0.7699669 , 0.67707261, 0.5377403 ,
              0.64056573, 0.81708306, 0.44216362, 0.7748672 , 0.48232322,
              0.11695728, 0.68960818, 0.29698369, 0.87818514, 0.20121077,
              0.07210092, 0.29856361, 0.14374806, 0.62667147, 0.39980702,
              0.72449337, 0.72691834, 0.68801809, 0.391205  , 0.58886843,
              0.70477632, 0.80212287, 0.11144346, 0.59469469, 0.23772802,
              0.95643875, 0.05044095, 0.58955653, 0.67038984, 0.48508334,
              0.91593119, 0.74326579, 0.6761815 , 0.03214915, 0.36687643,
              0.75108755, 0.55189422, 0.78535491, 0.32041709, 0.74827771,
              0.64922833, 0.88292796, 0.70154727, 0.87193306, 0.77281469,
              0.01097739, 0.81919151, 0.15770771, 0.70652453, 0.1488777 ,
              0.69016323, 0.3292631 , 0.47882273, 0.71513786, 0.83632901,
              0.66449128, 0.56348435, 0.92518952, 0.65833458, 0.73176217,
              0.63027833, 0.49310545, 0.9935173 , 0.66778476, 0.69830921,
              0.7997637 , 0.04326223, 0.96905978, 0.03669821, 0.07103018,
              0.37629805, 0.90967986, 0.85434899, 0.27675552, 0.45751063,
              0.15737684, 0.03231015, 0.15782509, 0.15994558, 0.89016873,
              0.73808186, 0.41688347, 0.58388463, 0.87478014, 0.21696126])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.00376004, 0.86714431, 0.4755653 , 0.63797885, 0.93458162,
              0.14971036, 0.74460313, 0.38053722, 0.62035145, 0.90290004,
              0.90520335, 0.76093064, 0.76158849, 0.34426578, 0.29714958,
              0.25344254, 0.39877133, 0.78787073, 0.27940687, 0.88119206,
              0.31217218, 0.834828  , 0.04854063, 0.9747512 , 0.97307276,
              0.47292818, 0.38844601, 0.69545054, 0.88940876, 0.72560816,
              0.01211584, 0.95518809, 0.9349198 , 0.0850678 , 0.14138197,
              0.84516879, 0.37265835, 0.86072484, 0.27779979, 0.40842477,
              0.49622865, 0.7124482 , 0.0921035 , 0.18530795, 0.99327776,
              0.90494876, 0.62425091, 0.76752687, 0.0417045 , 0.07350616,
              0.73495337, 0.70960003, 0.06972988, 0.54824531, 0.34041001,
              0.68391417, 0.03136027, 0.46456797, 0.44232802, 0.22994579,
              0.19997911, 0.6828372 , 0.20352772, 0.81008522, 0.09077809,
              0.53355263, 0.16399611, 0.1229114 , 0.21158445, 0.33431863,
              0.53278259, 0.05303385, 0.84298001, 0.0444721 , 0.90509725,
              0.69662455, 0.08242823, 0.40792673, 0.86687264, 0.36989179,
              0.80358171, 0.37790247, 0.29874991, 0.98746276, 0.44470863,
              0.60559251, 0.11421646, 0.51916938, 0.95318674, 0.2025709 ,
              0.45969439, 0.13499985, 0.64829075, 0.19013869, 0.96339148,
              0.91056511, 0.5971676 , 0.21553387, 0.7036456 , 0.92838315])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.12585817, 0.26884193, 0.55148463, 0.31353042, 0.30848844,
              0.64760625, 0.08233801, 0.60411358, 0.52072675, 0.83852781,
              0.17037794, 0.95221473, 0.20807426, 0.10660698, 0.06947179,
              0.97765885, 0.12450434, 0.84807071, 0.6324757 , 0.18718842,
              0.98714548, 0.41725099, 0.22314886, 0.99794368, 0.20723225,
              0.66029269, 0.85364488, 0.41676387, 0.8916911 , 0.7507673 ,
              0.13360455, 0.24133038, 0.46989761, 0.95444038, 0.58868773,
              0.83296082, 0.02808477, 0.20584791, 0.99689757, 0.38775562,
              0.52772271, 0.70228321, 0.56394499, 0.40459974, 0.17432194,
              0.68625034, 0.17850255, 0.22395046, 0.70075159, 0.54785882,
              0.39964508, 0.19944211, 0.0179681 , 0.92397077, 0.18147404,
              0.2951378 , 0.72138954, 0.3512442 , 0.18952852, 0.44043134,
              0.51590541, 0.52259842, 0.49917056, 0.31038639, 0.40072583,
              0.87767785, 0.19913279, 0.30507001, 0.06186694, 0.87258311,
              0.52086558, 0.69769379, 0.94139755, 0.83306951, 0.26886046,
              0.36058671, 0.10776434, 0.19060962, 0.43625323, 0.85605311,
              0.72078777, 0.83245113, 0.29779965, 0.14097214, 0.02033671,
              0.45583968, 0.71870813, 0.52834886, 0.85512548, 0.47264894,
              0.46582487, 0.60363973, 0.05708484, 0.49325878, 0.12185075,
              0.36906903, 0.91258869, 0.68715561, 0.66310353, 0.65030738])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.17623817, 0.07747334, 0.70438391, 0.57629205, 0.98595805,
              0.46824341, 0.76395996, 0.02927511, 0.40621135, 0.53259738,
              0.68257418, 0.01937307, 0.52401875, 0.84322784, 0.72420576,
              0.26899146, 0.78670901, 0.95968341, 0.43450118, 0.25105377,
              0.17210092, 0.07089017, 0.34496845, 0.21107571, 0.54108713,
              0.68847908, 0.36327691, 0.91082998, 0.10996582, 0.15434405,
              0.72814493, 0.40408722, 0.8663307 , 0.87520465, 0.51631237,
              0.1461353 , 0.62503891, 0.22911052, 0.01778942, 0.42767979,
              0.48740506, 0.39313606, 0.27375474, 0.2121118 , 0.60378627,
              0.92435327, 0.14907654, 0.90237257, 0.50034563, 0.81879706,
              0.6516716 , 0.64388335, 0.66150039, 0.26671403, 0.12759366,
              0.80599502, 0.42594609, 0.51379124, 0.94810146, 0.12431588,
              0.74407459, 0.9338383 , 0.55688381, 0.34831707, 0.82866607,
              0.56225279, 0.03085813, 0.74449667, 0.2964683 , 0.65907106,
              0.74873545, 0.34999513, 0.43386158, 0.068199  , 0.70335507,
              0.63387693, 0.02089762, 0.06667788, 0.24085949, 0.76312169,
              0.75450597, 0.45681569, 0.69889829, 0.11570008, 0.39030337,
              0.35390673, 0.51624085, 0.77202052, 0.65646834, 0.12138749,
              0.43727492, 0.51579546, 0.63519138, 0.81944137, 0.91936842,
              0.12134163, 0.44603251, 0.81256978, 0.25858721, 0.14470818])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.53344244, 0.27798974, 0.65101191, 0.37693764, 0.80579544,
              0.91207193, 0.59143786, 0.62486566, 0.77931471, 0.34655   ,
              0.16314037, 0.2138963 , 0.20943014, 0.40935055, 0.81809666,
              0.36452723, 0.60546179, 0.92849004, 0.85405161, 0.21739014,
              0.63902603, 0.97563851, 0.45537341, 0.80018136, 0.35226599,
              0.18947385, 0.12257901, 0.54364719, 0.53582595, 0.54670426,
              0.10915533, 0.89373988, 0.83333078, 0.26377289, 0.14975893,
              0.61812847, 0.72511892, 0.8248145 , 0.64474638, 0.00811244,
              0.80288174, 0.71589583, 0.71823589, 0.94251582, 0.16482016,
              0.7068986 , 0.85016242, 0.97649959, 0.67888446, 0.03082842,
              0.07566819, 0.05656825, 0.64356694, 0.88123355, 0.30074496,
              0.55474916, 0.63646345, 0.40994158, 0.96700048, 0.14250595,
              0.85250027, 0.30101582, 0.7277431 , 0.07984482, 0.50271891,
              0.37818779, 0.0263207 , 0.60447255, 0.06396273, 0.68296896,
              0.10118081, 0.20493307, 0.01174154, 0.70194366, 0.21471368,
              0.6494205 , 0.59152588, 0.37658867, 0.27836759, 0.20208968,
              0.50934122, 0.41741969, 0.30794731, 0.56581027, 0.83131979,
              0.3905784 , 0.21795228, 0.81232272, 0.31453862, 0.08165971,
              0.05313614, 0.0601998 , 0.48397062, 0.8733459 , 0.26355094,
              0.39189333, 0.2852427 , 0.40995844, 0.15452687, 0.56115922])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.87686806, 0.16429376, 0.20585837, 0.04717373, 0.05576051,
              0.9212787 , 0.62943004, 0.38902278, 0.73180556, 0.5082129 ,
              0.09802596, 0.31480209, 0.04528751, 0.09624888, 0.04845191,
              0.39614574, 0.02859379, 0.92852368, 0.8499446 , 0.11138332,
              0.97694961, 0.78874577, 0.59080501, 0.63688259, 0.41533765,
              0.41448619, 0.75153341, 0.83777297, 0.09435388, 0.07292999,
              0.92033242, 0.45825826, 0.30369964, 0.20613586, 0.03191411,
              0.0169447 , 0.04150448, 0.33382963, 0.85123355, 0.24740248,
              0.54097666, 0.66922141, 0.76481734, 0.4642013 , 0.64575398,
              0.28126968, 0.89298452, 0.97498948, 0.56191571, 0.28031876,
              0.07874428, 0.8844491 , 0.58151637, 0.53882009, 0.7343392 ,
              0.64831556, 0.13370728, 0.42882375, 0.77781992, 0.58497346,
              0.3835793 , 0.50415459, 0.2300109 , 0.22797118, 0.56052211,
              0.40044632, 0.4700756 , 0.00367936, 0.45088462, 0.23161847,
              0.64795484, 0.92259192, 0.12329576, 0.01074196, 0.21980282,
              0.57026675, 0.72687342, 0.49585847, 0.97848721, 0.72971756,
              0.38447868, 0.65373859, 0.2337054 , 0.05545217, 0.49101667,
              0.71337587, 0.34722369, 0.74483337, 0.38176121, 0.85354935,
              0.790688  , 0.21691409, 0.59067708, 0.43160278, 0.65022866,
              0.52529194, 0.6376725 , 0.0349416 , 0.0476461 , 0.25122837])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.50744922, 0.80107324, 0.89279891, 0.81216667, 0.79791392,
              0.92320182, 0.7889654 , 0.4759148 , 0.24387146, 0.43843247,
              0.7346133 , 0.71432551, 0.41527919, 0.68586835, 0.18055265,
              0.82981615, 0.72471559, 0.31347597, 0.77685159, 0.60519819,
              0.45983701, 0.06186631, 0.91091757, 0.26141204, 0.86445395,
              0.84733869, 0.29032797, 0.79492448, 0.85555296, 0.93278509,
              0.27739603, 0.2605224 , 0.68114389, 0.26924056, 0.71524884,
              0.23385724, 0.82408757, 0.44717347, 0.92269768, 0.91604457,
              0.91736762, 0.54915462, 0.11805323, 0.12305673, 0.89605296,
              0.77785949, 0.61603552, 0.19730313, 0.00950928, 0.1120006 ,
              0.6577735 , 0.56451594, 0.93457389, 0.35736398, 0.61820184,
              0.62298358, 0.56617857, 0.56221345, 0.89064818, 0.35378917,
              0.30673443, 0.31778516, 0.73588386, 0.84637219, 0.15732467,
              0.85005307, 0.27556491, 0.4172164 , 0.16526022, 0.10605141,
              0.48457024, 0.54235898, 0.42040603, 0.90778805, 0.59050726,
              0.67155596, 0.21861644, 0.86712262, 0.36698183, 0.67178135,
              0.06608199, 0.10530815, 0.30272706, 0.63860696, 0.27683888,
              0.14322913, 0.37641175, 0.83823291, 0.92185057, 0.09248166,
              0.58394529, 0.78876045, 0.78831345, 0.98800797, 0.69953299,
              0.18862048, 0.90997891, 0.87743591, 0.75720261, 0.78128353])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.86954993, 0.2325721 , 0.42616925, 0.2447067 , 0.76520795,
              0.32669512, 0.23745296, 0.67031053, 0.45905837, 0.97064107,
              0.0775615 , 0.01444223, 0.56437381, 0.12128525, 0.04427691,
              0.65511343, 0.48630016, 0.15006701, 0.3070704 , 0.45065426,
              0.48414362, 0.33938148, 0.86561654, 0.54997746, 0.64307082,
              0.50303312, 0.36342356, 0.1590836 , 0.9452838 , 0.8205816 ,
              0.95000217, 0.74542297, 0.92402519, 0.88003559, 0.47887474,
              0.02224216, 0.09846074, 0.80804945, 0.67374186, 0.82890458,
              0.78687433, 0.86782497, 0.75056687, 0.5697661 , 0.20250123,
              0.80419136, 0.65379775, 0.12655755, 0.35415566, 0.73108125,
              0.95470449, 0.20584671, 0.75316911, 0.09214539, 0.75351969,
              0.2413133 , 0.15850731, 0.58347473, 0.80480114, 0.56951112,
              0.54578147, 0.39450921, 0.30006755, 0.28716538, 0.28905872,
              0.84005284, 0.3439599 , 0.1367213 , 0.70648415, 0.59574432,
              0.42444841, 0.84313125, 0.69613559, 0.96994439, 0.94203769,
              0.12520177, 0.0735282 , 0.33760652, 0.24918414, 0.67471873,
              0.29583806, 0.83698316, 0.53324326, 0.66525144, 0.68254292,
              0.44053475, 0.26935697, 0.59593192, 0.98272559, 0.55645454,
              0.44477823, 0.97994463, 0.83048522, 0.20512757, 0.11882978,
              0.62143429, 0.58727064, 0.75796465, 0.8406485 , 0.41905111])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.53344244, 0.27798974, 0.65101191, 0.37693764, 0.80579544,
              0.91207193, 0.59143786, 0.62486566, 0.77931471, 0.34655   ,
              0.16314037, 0.2138963 , 0.20943014, 0.40935055, 0.81809666,
              0.36452723, 0.60546179, 0.92849004, 0.85405161, 0.21739014,
              0.63902603, 0.97563851, 0.45537341, 0.80018136, 0.35226599,
              0.18947385, 0.12257901, 0.54364719, 0.53582595, 0.54670426,
              0.10915533, 0.89373988, 0.83333078, 0.26377289, 0.14975893,
              0.61812847, 0.72511892, 0.8248145 , 0.64474638, 0.00811244,
              0.80288174, 0.71589583, 0.71823589, 0.94251582, 0.16482016,
              0.7068986 , 0.85016242, 0.97649959, 0.67888446, 0.03082842,
              0.07566819, 0.05656825, 0.64356694, 0.88123355, 0.30074496,
              0.55474916, 0.63646345, 0.40994158, 0.96700048, 0.14250595,
              0.85250027, 0.30101582, 0.7277431 , 0.07984482, 0.50271891,
              0.37818779, 0.0263207 , 0.60447255, 0.06396273, 0.68296896,
              0.10118081, 0.20493307, 0.01174154, 0.70194366, 0.21471368,
              0.6494205 , 0.59152588, 0.37658867, 0.27836759, 0.20208968,
              0.50934122, 0.41741969, 0.30794731, 0.56581027, 0.83131979,
              0.3905784 , 0.21795228, 0.81232272, 0.31453862, 0.08165971,
              0.05313614, 0.0601998 , 0.48397062, 0.8733459 , 0.26355094,
              0.39189333, 0.2852427 , 0.40995844, 0.15452687, 0.56115922])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.87686806, 0.16429376, 0.20585837, 0.04717373, 0.05576051,
              0.9212787 , 0.62943004, 0.38902278, 0.73180556, 0.5082129 ,
              0.09802596, 0.31480209, 0.04528751, 0.09624888, 0.04845191,
              0.39614574, 0.02859379, 0.92852368, 0.8499446 , 0.11138332,
              0.97694961, 0.78874577, 0.59080501, 0.63688259, 0.41533765,
              0.41448619, 0.75153341, 0.83777297, 0.09435388, 0.07292999,
              0.92033242, 0.45825826, 0.30369964, 0.20613586, 0.03191411,
              0.0169447 , 0.04150448, 0.33382963, 0.85123355, 0.24740248,
              0.54097666, 0.66922141, 0.76481734, 0.4642013 , 0.64575398,
              0.28126968, 0.89298452, 0.97498948, 0.56191571, 0.28031876,
              0.07874428, 0.8844491 , 0.58151637, 0.53882009, 0.7343392 ,
              0.64831556, 0.13370728, 0.42882375, 0.77781992, 0.58497346,
              0.3835793 , 0.50415459, 0.2300109 , 0.22797118, 0.56052211,
              0.40044632, 0.4700756 , 0.00367936, 0.45088462, 0.23161847,
              0.64795484, 0.92259192, 0.12329576, 0.01074196, 0.21980282,
              0.57026675, 0.72687342, 0.49585847, 0.97848721, 0.72971756,
              0.38447868, 0.65373859, 0.2337054 , 0.05545217, 0.49101667,
              0.71337587, 0.34722369, 0.74483337, 0.38176121, 0.85354935,
              0.790688  , 0.21691409, 0.59067708, 0.43160278, 0.65022866,
              0.52529194, 0.6376725 , 0.0349416 , 0.0476461 , 0.25122837])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.50744922, 0.80107324, 0.89279891, 0.81216667, 0.79791392,
              0.92320182, 0.7889654 , 0.4759148 , 0.24387146, 0.43843247,
              0.7346133 , 0.71432551, 0.41527919, 0.68586835, 0.18055265,
              0.82981615, 0.72471559, 0.31347597, 0.77685159, 0.60519819,
              0.45983701, 0.06186631, 0.91091757, 0.26141204, 0.86445395,
              0.84733869, 0.29032797, 0.79492448, 0.85555296, 0.93278509,
              0.27739603, 0.2605224 , 0.68114389, 0.26924056, 0.71524884,
              0.23385724, 0.82408757, 0.44717347, 0.92269768, 0.91604457,
              0.91736762, 0.54915462, 0.11805323, 0.12305673, 0.89605296,
              0.77785949, 0.61603552, 0.19730313, 0.00950928, 0.1120006 ,
              0.6577735 , 0.56451594, 0.93457389, 0.35736398, 0.61820184,
              0.62298358, 0.56617857, 0.56221345, 0.89064818, 0.35378917,
              0.30673443, 0.31778516, 0.73588386, 0.84637219, 0.15732467,
              0.85005307, 0.27556491, 0.4172164 , 0.16526022, 0.10605141,
              0.48457024, 0.54235898, 0.42040603, 0.90778805, 0.59050726,
              0.67155596, 0.21861644, 0.86712262, 0.36698183, 0.67178135,
              0.06608199, 0.10530815, 0.30272706, 0.63860696, 0.27683888,
              0.14322913, 0.37641175, 0.83823291, 0.92185057, 0.09248166,
              0.58394529, 0.78876045, 0.78831345, 0.98800797, 0.69953299,
              0.18862048, 0.90997891, 0.87743591, 0.75720261, 0.78128353])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.82989213, 0.68487045, 0.59256963, 0.78817799, 0.32594532,
              0.10203191, 0.79721959, 0.19482193, 0.33467652, 0.18690792,
              0.74720697, 0.29756617, 0.40766223, 0.40536485, 0.76718665,
              0.22556015, 0.13174133, 0.41821684, 0.25100185, 0.03794117,
              0.6169765 , 0.35786765, 0.16937056, 0.96350718, 0.16665232,
              0.79268409, 0.78988474, 0.25716371, 0.61473306, 0.92172536,
              0.96751576, 0.40106301, 0.88007373, 0.41054411, 0.6690582 ,
              0.79430347, 0.6870146 , 0.13690129, 0.22282862, 0.59568458,
              0.48154768, 0.08744365, 0.52860968, 0.30838976, 0.87073749,
              0.91921511, 0.60935446, 0.24623926, 0.2100569 , 0.75401673,
              0.72966687, 0.45972092, 0.57310344, 0.77154818, 0.89690347,
              0.34007521, 0.85581047, 0.69180337, 0.01164311, 0.96731455,
              0.89365679, 0.60074554, 0.89195542, 0.33560175, 0.13444987,
              0.26489169, 0.23093632, 0.20000947, 0.04070142, 0.56898415,
              0.16799014, 0.69357946, 0.99611871, 0.87369313, 0.4178699 ,
              0.36830423, 0.59928143, 0.73867952, 0.58790652, 0.93869769,
              0.4823267 , 0.08560178, 0.12331374, 0.50481601, 0.58079988,
              0.82842055, 0.95009048, 0.77011347, 0.71933383, 0.23862294,
              0.02672655, 0.36112877, 0.98646276, 0.9010602 , 0.5051603 ,
              0.26252792, 0.45188943, 0.86590625, 0.67447055, 0.44601653])}]]


