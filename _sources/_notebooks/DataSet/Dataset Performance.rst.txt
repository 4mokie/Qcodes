
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='f7405aae-0836-4912-b770-2a6ca137fd95'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='49aa9cab-33b9-4d06-a519-d8b5cdc395e0'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.837914704770222],
     [0.981037919218017],
     [0.542380963081472],
     [0.420739367960893],
     [0.893218798981477],
     [0.329514350210927],
     [0.923511256672123],
     [0.288213817725899],
     [0.0543758580171207],
     [0.859654883050941],
     [0.867400493531088],
     [0.766845088687771],
     [0.148353834124882],
     [0.285197412728342],
     [0.474153216733859],
     [0.588439259291812],
     [0.0864802809850344],
     [0.118670140047934],
     [0.509926536806797],
     [0.83240032841507],
     [0.282688745134183],
     [0.760895399691493],
     [0.0451856615926783],
     [0.963700132778283],
     [0.957050809160993],
     [0.0344871248132694],
     [0.0639126394735812],
     [0.919926745914462],
     [0.858657116055885],
     [0.428891420623085],
     [0.136995142290946],
     [0.314089560746492],
     [0.488883619333884],
     [0.782495446288601],
     [0.257559631346465],
     [0.82718300468065],
     [0.74674897362676],
     [0.12693902986666],
     [0.656457137739328],
     [0.930172092947496],
     [0.341829831794433],
     [0.387316346571723],
     [0.00953883699692526],
     [0.0652979545639734],
     [0.67815161437586],
     [0.325763917683759],
     [0.908134743537977],
     [0.0878159813849118],
     [0.755377426242501],
     [0.65104029646042],
     [0.13041409216526],
     [0.630997351496228],
     [0.324653362224891],
     [0.36618308633988],
     [0.723363879450097],
     [0.957486978811118],
     [0.0539665862361792],
     [0.504631492773114],
     [0.685279238324792],
     [0.339063290785547],
     [0.484360302287988],
     [0.990391282724978],
     [0.24400636379513],
     [0.206147683149792],
     [0.326230151406284],
     [0.00909206363333526],
     [0.481886168508075],
     [0.369481973627642],
     [0.969544300845331],
     [0.386837781033921],
     [0.694100181344367],
     [0.0978572394126965],
     [0.38418369687205],
     [0.608584255047101],
     [0.27772363933779],
     [0.303288406218465],
     [0.00250157585349442],
     [0.440904099229289],
     [0.467315376279884],
     [0.296904166203261],
     [0.658871871001804],
     [0.747209854440289],
     [0.933498752509878],
     [0.585460438144431],
     [0.429985499725764],
     [0.976674666518998],
     [0.906961183062145],
     [0.464908169407229],
     [0.642371831695489],
     [0.366995072088722],
     [0.0515787152310732],
     [0.306648197676072],
     [0.405423974774617],
     [0.80267272034405],
     [0.314520754020437],
     [0.0634111269167787],
     [0.0285916726842321],
     [0.11170098872161],
     [0.0587364763518069],
     [0.485513957598864]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.50233487])],
     [array([ 0.02300333])],
     [array([ 0.69218832])],
     [array([ 0.54851629])],
     [array([ 0.61802936])],
     [array([ 0.97015052])],
     [array([ 0.80631797])],
     [array([ 0.49139902])],
     [array([ 0.37071004])],
     [array([ 0.45758085])],
     [array([ 0.28834078])],
     [array([ 0.55888737])],
     [array([ 0.63260736])],
     [array([ 0.07987085])],
     [array([ 0.11915495])],
     [array([ 0.17635695])],
     [array([ 0.72150599])],
     [array([ 0.26060837])],
     [array([ 0.93570164])],
     [array([ 0.57211686])],
     [array([ 0.58808326])],
     [array([ 0.09360216])],
     [array([ 0.64184976])],
     [array([ 0.76387422])],
     [array([ 0.39295257])],
     [array([ 0.33743774])],
     [array([ 0.89888206])],
     [array([ 0.40967599])],
     [array([ 0.03108795])],
     [array([ 0.63564348])],
     [array([ 0.74364882])],
     [array([ 0.5400844])],
     [array([ 0.6716918])],
     [array([ 0.17662927])],
     [array([ 0.72753113])],
     [array([ 0.61545754])],
     [array([ 0.87820044])],
     [array([ 0.90804112])],
     [array([ 0.67992209])],
     [array([ 0.18154913])],
     [array([ 0.23131638])],
     [array([ 0.0532297])],
     [array([ 0.73654084])],
     [array([ 0.5265308])],
     [array([ 0.11146508])],
     [array([ 0.27361877])],
     [array([ 0.295361])],
     [array([ 0.87147971])],
     [array([ 0.26353437])],
     [array([ 0.49959048])],
     [array([ 0.86258622])],
     [array([ 0.27873456])],
     [array([ 0.55376208])],
     [array([ 0.26429149])],
     [array([ 0.91444632])],
     [array([ 0.92939558])],
     [array([ 0.60249099])],
     [array([ 0.76065968])],
     [array([ 0.09403998])],
     [array([ 0.23695608])],
     [array([ 0.29360023])],
     [array([ 0.68236495])],
     [array([ 0.6912426])],
     [array([ 0.70950812])],
     [array([ 0.35919368])],
     [array([ 0.4958929])],
     [array([ 0.57813975])],
     [array([ 0.13495197])],
     [array([ 0.52702712])],
     [array([ 0.39424562])],
     [array([ 0.62759641])],
     [array([ 0.00183409])],
     [array([ 0.55238341])],
     [array([ 0.1321506])],
     [array([ 0.83702059])],
     [array([ 0.05369257])],
     [array([ 0.79803367])],
     [array([ 0.04203132])],
     [array([ 0.55638142])],
     [array([ 0.74731866])],
     [array([ 0.77167593])],
     [array([ 0.87151638])],
     [array([ 0.20328053])],
     [array([ 0.38695988])],
     [array([ 0.27255464])],
     [array([ 0.71954793])],
     [array([ 0.48531214])],
     [array([ 0.0254194])],
     [array([ 0.34952592])],
     [array([ 0.99490444])],
     [array([ 0.86114169])],
     [array([ 0.34369732])],
     [array([ 0.42049823])],
     [array([ 0.85673479])],
     [array([ 0.95820367])],
     [array([ 0.00997923])],
     [array([ 0.53206991])],
     [array([ 0.21018944])],
     [array([ 0.42326481])],
     [array([ 0.73987246])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.50233487,  0.02300333,  0.69218832,  0.54851629,  0.61802936,
            0.97015052,  0.80631797,  0.49139902,  0.37071004,  0.45758085,
            0.28834078,  0.55888737,  0.63260736,  0.07987085,  0.11915495,
            0.17635695,  0.72150599,  0.26060837,  0.93570164,  0.57211686,
            0.58808326,  0.09360216,  0.64184976,  0.76387422,  0.39295257,
            0.33743774,  0.89888206,  0.40967599,  0.03108795,  0.63564348,
            0.74364882,  0.5400844 ,  0.6716918 ,  0.17662927,  0.72753113,
            0.61545754,  0.87820044,  0.90804112,  0.67992209,  0.18154913,
            0.23131638,  0.0532297 ,  0.73654084,  0.5265308 ,  0.11146508,
            0.27361877,  0.295361  ,  0.87147971,  0.26353437,  0.49959048,
            0.86258622,  0.27873456,  0.55376208,  0.26429149,  0.91444632,
            0.92939558,  0.60249099,  0.76065968,  0.09403998,  0.23695608,
            0.29360023,  0.68236495,  0.6912426 ,  0.70950812,  0.35919368,
            0.4958929 ,  0.57813975,  0.13495197,  0.52702712,  0.39424562,
            0.62759641,  0.00183409,  0.55238341,  0.1321506 ,  0.83702059,
            0.05369257,  0.79803367,  0.04203132,  0.55638142,  0.74731866,
            0.77167593,  0.87151638,  0.20328053,  0.38695988,  0.27255464,
            0.71954793,  0.48531214,  0.0254194 ,  0.34952592,  0.99490444,
            0.86114169,  0.34369732,  0.42049823,  0.85673479,  0.95820367,
            0.00997923,  0.53206991,  0.21018944,  0.42326481,  0.73987246])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.8379147 ,  0.98103792,  0.54238096,  0.42073937,  0.8932188 ,
               0.32951435,  0.92351126,  0.28821382,  0.05437586,  0.85965488,
               0.86740049,  0.76684509,  0.14835383,  0.28519741,  0.47415322,
               0.58843926,  0.08648028,  0.11867014,  0.50992654,  0.83240033,
               0.28268875,  0.7608954 ,  0.04518566,  0.96370013,  0.95705081,
               0.03448712,  0.06391264,  0.91992675,  0.85865712,  0.42889142,
               0.13699514,  0.31408956,  0.48888362,  0.78249545,  0.25755963,
               0.827183  ,  0.74674897,  0.12693903,  0.65645714,  0.93017209,
               0.34182983,  0.38731635,  0.00953884,  0.06529795,  0.67815161,
               0.32576392,  0.90813474,  0.08781598,  0.75537743,  0.6510403 ,
               0.13041409,  0.63099735,  0.32465336,  0.36618309,  0.72336388,
               0.95748698,  0.05396659,  0.50463149,  0.68527924,  0.33906329,
               0.4843603 ,  0.99039128,  0.24400636,  0.20614768,  0.32623015,
               0.00909206,  0.48188617,  0.36948197,  0.9695443 ,  0.38683778,
               0.69410018,  0.09785724,  0.3841837 ,  0.60858426,  0.27772364,
               0.30328841,  0.00250158,  0.4409041 ,  0.46731538,  0.29690417,
               0.65887187,  0.74720985,  0.93349875,  0.58546044,  0.4299855 ,
               0.97667467,  0.90696118,  0.46490817,  0.64237183,  0.36699507,
               0.05157872,  0.3066482 ,  0.40542397,  0.80267272,  0.31452075,
               0.06341113,  0.02859167,  0.11170099,  0.05873648,  0.48551396])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.96456293,  0.76585545,  0.37508199,  0.61176892,  0.25972153,
               0.94760561,  0.82188843,  0.08668109,  0.50574794,  0.05224847,
               0.15893475,  0.65078334,  0.2438823 ,  0.32010501,  0.07258947,
               0.38615003,  0.86401444,  0.45490054,  0.09758863,  0.13725703,
               0.31120996,  0.57520417,  0.57593936,  0.65318097,  0.46258759,
               0.66612965,  0.93359931,  0.76367151,  0.94774171,  0.62102622,
               0.24150395,  0.97110484,  0.62978941,  0.2637285 ,  0.03120235,
               0.64033898,  0.78080704,  0.2442869 ,  0.54190041,  0.36037795,
               0.37171814,  0.93970435,  0.45425233,  0.39166166,  0.12442058,
               0.64483596,  0.43206156,  0.29536897,  0.60946196,  0.77741497,
               0.92023926,  0.36326868,  0.1914812 ,  0.43351548,  0.37299486,
               0.61978774,  0.60356627,  0.23115764,  0.02476924,  0.03926149,
               0.74010291,  0.83101861,  0.59826873,  0.18211069,  0.34736908,
               0.99177778,  0.44823085,  0.51117963,  0.87427526,  0.78693723,
               0.24223697,  0.07303431,  0.96444702,  0.81599522,  0.43857286,
               0.34307493,  0.59498181,  0.35118316,  0.14319845,  0.72657101,
               0.70994848,  0.31779566,  0.02115314,  0.13299574,  0.98083157,
               0.33465436,  0.50428762,  0.19039504,  0.67088027,  0.45445948,
               0.99254565,  0.18321464,  0.97785033,  0.59417844,  0.53266927,
               0.93843279,  0.11309788,  0.34276175,  0.75258207,  0.81247936])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.4710637 ,  0.11672902,  0.94033923,  0.35343996,  0.15907078,
               0.08138279,  0.38209336,  0.29515608,  0.11174631,  0.43534985,
               0.18254296,  0.27282556,  0.39882477,  0.9036157 ,  0.49691327,
               0.95681563,  0.55735857,  0.09324036,  0.73027607,  0.39109752,
               0.737699  ,  0.58432938,  0.7666444 ,  0.50506529,  0.11944389,
               0.8723094 ,  0.95836262,  0.54381052,  0.28417345,  0.81267736,
               0.27330279,  0.84248346,  0.07118148,  0.05204015,  0.50224746,
               0.53230645,  0.02230104,  0.91569577,  0.42674058,  0.43249138,
               0.7291073 ,  0.80456898,  0.14653164,  0.44907447,  0.82739279,
               0.23767814,  0.70501681,  0.33130528,  0.7626285 ,  0.18003449,
               0.04297678,  0.08958213,  0.50836275,  0.85575206,  0.57052757,
               0.97182935,  0.76789317,  0.37131566,  0.02280563,  0.38361271,
               0.01273629,  0.90408891,  0.09247117,  0.43739438,  0.86281924,
               0.07494776,  0.6840046 ,  0.46575342,  0.21466639,  0.99602444,
               0.00904165,  0.74676372,  0.32495671,  0.83093739,  0.48737466,
               0.18974076,  0.7594081 ,  0.3656262 ,  0.1251536 ,  0.7223052 ,
               0.58656121,  0.63377569,  0.15842902,  0.42488393,  0.05997171,
               0.30154643,  0.0355368 ,  0.24171475,  0.42503398,  0.37417301,
               0.67535261,  0.29906505,  0.64831238,  0.20424638,  0.03899977,
               0.3999171 ,  0.25736954,  0.95710937,  0.07117109,  0.5833177 ])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.81077813,  0.57484613,  0.34802999,  0.7619603 ,  0.17646523,
               0.68190166,  0.55045932,  0.00287519,  0.68993116,  0.22628999,
               0.86756181,  0.23451526,  0.29734367,  0.13769866,  0.26941663,
               0.94818499,  0.49054401,  0.23215069,  0.50137193,  0.40237871,
               0.03883686,  0.77609877,  0.56001636,  0.61466567,  0.82540753,
               0.26540569,  0.97172381,  0.26831706,  0.63648723,  0.27081497,
               0.08276863,  0.28927874,  0.60555447,  0.93364534,  0.36980025,
               0.61690304,  0.50042726,  0.05191726,  0.17620131,  0.12313453,
               0.98901749,  0.45135002,  0.2385465 ,  0.21524437,  0.65321513,
               0.22964604,  0.5699852 ,  0.9249216 ,  0.15003609,  0.50176362,
               0.01085096,  0.05457345,  0.6962622 ,  0.44471879,  0.38559568,
               0.39852681,  0.34729975,  0.28801776,  0.8289937 ,  0.55377038,
               0.30369394,  0.54650395,  0.98624275,  0.18468799,  0.21642067,
               0.62588476,  0.38393215,  0.03119056,  0.60661985,  0.37910917,
               0.9769811 ,  0.24993015,  0.03466334,  0.66261686,  0.05930065,
               0.04959806,  0.64798774,  0.13607163,  0.41420322,  0.49710407,
               0.86833996,  0.48681047,  0.99565141,  0.1559034 ,  0.65809072,
               0.45719797,  0.43052783,  0.16970232,  0.11933585,  0.06226502,
               0.14833066,  0.26941844,  0.1401663 ,  0.33582263,  0.16417528,
               0.54997738,  0.3376722 ,  0.81108796,  0.49497231,  0.64978631])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.8379147 ,  0.98103792,  0.54238096,  0.42073937,  0.8932188 ,
               0.32951435,  0.92351126,  0.28821382,  0.05437586,  0.85965488,
               0.86740049,  0.76684509,  0.14835383,  0.28519741,  0.47415322,
               0.58843926,  0.08648028,  0.11867014,  0.50992654,  0.83240033,
               0.28268875,  0.7608954 ,  0.04518566,  0.96370013,  0.95705081,
               0.03448712,  0.06391264,  0.91992675,  0.85865712,  0.42889142,
               0.13699514,  0.31408956,  0.48888362,  0.78249545,  0.25755963,
               0.827183  ,  0.74674897,  0.12693903,  0.65645714,  0.93017209,
               0.34182983,  0.38731635,  0.00953884,  0.06529795,  0.67815161,
               0.32576392,  0.90813474,  0.08781598,  0.75537743,  0.6510403 ,
               0.13041409,  0.63099735,  0.32465336,  0.36618309,  0.72336388,
               0.95748698,  0.05396659,  0.50463149,  0.68527924,  0.33906329,
               0.4843603 ,  0.99039128,  0.24400636,  0.20614768,  0.32623015,
               0.00909206,  0.48188617,  0.36948197,  0.9695443 ,  0.38683778,
               0.69410018,  0.09785724,  0.3841837 ,  0.60858426,  0.27772364,
               0.30328841,  0.00250158,  0.4409041 ,  0.46731538,  0.29690417,
               0.65887187,  0.74720985,  0.93349875,  0.58546044,  0.4299855 ,
               0.97667467,  0.90696118,  0.46490817,  0.64237183,  0.36699507,
               0.05157872,  0.3066482 ,  0.40542397,  0.80267272,  0.31452075,
               0.06341113,  0.02859167,  0.11170099,  0.05873648,  0.48551396])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.96456293,  0.76585545,  0.37508199,  0.61176892,  0.25972153,
               0.94760561,  0.82188843,  0.08668109,  0.50574794,  0.05224847,
               0.15893475,  0.65078334,  0.2438823 ,  0.32010501,  0.07258947,
               0.38615003,  0.86401444,  0.45490054,  0.09758863,  0.13725703,
               0.31120996,  0.57520417,  0.57593936,  0.65318097,  0.46258759,
               0.66612965,  0.93359931,  0.76367151,  0.94774171,  0.62102622,
               0.24150395,  0.97110484,  0.62978941,  0.2637285 ,  0.03120235,
               0.64033898,  0.78080704,  0.2442869 ,  0.54190041,  0.36037795,
               0.37171814,  0.93970435,  0.45425233,  0.39166166,  0.12442058,
               0.64483596,  0.43206156,  0.29536897,  0.60946196,  0.77741497,
               0.92023926,  0.36326868,  0.1914812 ,  0.43351548,  0.37299486,
               0.61978774,  0.60356627,  0.23115764,  0.02476924,  0.03926149,
               0.74010291,  0.83101861,  0.59826873,  0.18211069,  0.34736908,
               0.99177778,  0.44823085,  0.51117963,  0.87427526,  0.78693723,
               0.24223697,  0.07303431,  0.96444702,  0.81599522,  0.43857286,
               0.34307493,  0.59498181,  0.35118316,  0.14319845,  0.72657101,
               0.70994848,  0.31779566,  0.02115314,  0.13299574,  0.98083157,
               0.33465436,  0.50428762,  0.19039504,  0.67088027,  0.45445948,
               0.99254565,  0.18321464,  0.97785033,  0.59417844,  0.53266927,
               0.93843279,  0.11309788,  0.34276175,  0.75258207,  0.81247936])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.4710637 ,  0.11672902,  0.94033923,  0.35343996,  0.15907078,
               0.08138279,  0.38209336,  0.29515608,  0.11174631,  0.43534985,
               0.18254296,  0.27282556,  0.39882477,  0.9036157 ,  0.49691327,
               0.95681563,  0.55735857,  0.09324036,  0.73027607,  0.39109752,
               0.737699  ,  0.58432938,  0.7666444 ,  0.50506529,  0.11944389,
               0.8723094 ,  0.95836262,  0.54381052,  0.28417345,  0.81267736,
               0.27330279,  0.84248346,  0.07118148,  0.05204015,  0.50224746,
               0.53230645,  0.02230104,  0.91569577,  0.42674058,  0.43249138,
               0.7291073 ,  0.80456898,  0.14653164,  0.44907447,  0.82739279,
               0.23767814,  0.70501681,  0.33130528,  0.7626285 ,  0.18003449,
               0.04297678,  0.08958213,  0.50836275,  0.85575206,  0.57052757,
               0.97182935,  0.76789317,  0.37131566,  0.02280563,  0.38361271,
               0.01273629,  0.90408891,  0.09247117,  0.43739438,  0.86281924,
               0.07494776,  0.6840046 ,  0.46575342,  0.21466639,  0.99602444,
               0.00904165,  0.74676372,  0.32495671,  0.83093739,  0.48737466,
               0.18974076,  0.7594081 ,  0.3656262 ,  0.1251536 ,  0.7223052 ,
               0.58656121,  0.63377569,  0.15842902,  0.42488393,  0.05997171,
               0.30154643,  0.0355368 ,  0.24171475,  0.42503398,  0.37417301,
               0.67535261,  0.29906505,  0.64831238,  0.20424638,  0.03899977,
               0.3999171 ,  0.25736954,  0.95710937,  0.07117109,  0.5833177 ])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.59878005,  0.0416973 ,  0.43493847,  0.97705723,  0.9454738 ,
               0.59960032,  0.6069151 ,  0.68578222,  0.85131779,  0.44751303,
               0.77897836,  0.95520204,  0.58304918,  0.21494903,  0.63336984,
               0.9568231 ,  0.81970834,  0.47808691,  0.8227725 ,  0.04785002,
               0.53218179,  0.55619598,  0.47206388,  0.42530759,  0.8016464 ,
               0.38566697,  0.97023528,  0.98614788,  0.95794834,  0.21441068,
               0.75477042,  0.34883246,  0.69203723,  0.89786438,  0.8203736 ,
               0.65070489,  0.07854965,  0.97424345,  0.52278004,  0.12783722,
               0.95863768,  0.22764568,  0.56315706,  0.19024606,  0.28933326,
               0.49534274,  0.57331959,  0.14033705,  0.49249798,  0.61139445,
               0.09415824,  0.04385662,  0.91480791,  0.35301433,  0.06892841,
               0.74115844,  0.88659137,  0.24616715,  0.59454578,  0.96251598,
               0.02781263,  0.48057419,  0.28052647,  0.0651973 ,  0.87867693,
               0.86195875,  0.18507203,  0.52301759,  0.22079637,  0.17619346,
               0.61146206,  0.07860499,  0.91087137,  0.64748276,  0.27893363,
               0.40693427,  0.60937903,  0.05614282,  0.39102538,  0.47758748,
               0.38486253,  0.24578569,  0.217178  ,  0.48549998,  0.10581948,
               0.99789966,  0.92981058,  0.74288728,  0.77710479,  0.39726953,
               0.93555821,  0.94536849,  0.17753618,  0.56425421,  0.57708221,
               0.32212546,  0.53412428,  0.74672378,  0.93965033,  0.34346694])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.50233487,  0.02300333,  0.69218832,  0.54851629,  0.61802936,
               0.97015052,  0.80631797,  0.49139902,  0.37071004,  0.45758085,
               0.28834078,  0.55888737,  0.63260736,  0.07987085,  0.11915495,
               0.17635695,  0.72150599,  0.26060837,  0.93570164,  0.57211686,
               0.58808326,  0.09360216,  0.64184976,  0.76387422,  0.39295257,
               0.33743774,  0.89888206,  0.40967599,  0.03108795,  0.63564348,
               0.74364882,  0.5400844 ,  0.6716918 ,  0.17662927,  0.72753113,
               0.61545754,  0.87820044,  0.90804112,  0.67992209,  0.18154913,
               0.23131638,  0.0532297 ,  0.73654084,  0.5265308 ,  0.11146508,
               0.27361877,  0.295361  ,  0.87147971,  0.26353437,  0.49959048,
               0.86258622,  0.27873456,  0.55376208,  0.26429149,  0.91444632,
               0.92939558,  0.60249099,  0.76065968,  0.09403998,  0.23695608,
               0.29360023,  0.68236495,  0.6912426 ,  0.70950812,  0.35919368,
               0.4958929 ,  0.57813975,  0.13495197,  0.52702712,  0.39424562,
               0.62759641,  0.00183409,  0.55238341,  0.1321506 ,  0.83702059,
               0.05369257,  0.79803367,  0.04203132,  0.55638142,  0.74731866,
               0.77167593,  0.87151638,  0.20328053,  0.38695988,  0.27255464,
               0.71954793,  0.48531214,  0.0254194 ,  0.34952592,  0.99490444,
               0.86114169,  0.34369732,  0.42049823,  0.85673479,  0.95820367,
               0.00997923,  0.53206991,  0.21018944,  0.42326481,  0.73987246])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.64323973,  0.49832903,  0.21455088,  0.81651033,  0.42326495,
               0.06438895,  0.23596059,  0.71358207,  0.39038674,  0.66160382,
               0.88685956,  0.70724215,  0.0974281 ,  0.24127534,  0.51572149,
               0.88354916,  0.74655997,  0.00125009,  0.00387375,  0.35890023,
               0.83658736,  0.89010191,  0.41487303,  0.74266653,  0.10304646,
               0.25875341,  0.32336585,  0.94230944,  0.58868649,  0.76526231,
               0.58099545,  0.07391008,  0.14736006,  0.52213761,  0.80498571,
               0.39340744,  0.64166615,  0.957643  ,  0.76599779,  0.36576532,
               0.81598269,  0.09840414,  0.86043619,  0.91474888,  0.97041275,
               0.91482653,  0.97610206,  0.01410803,  0.00542524,  0.70481824,
               0.0881714 ,  0.64995149,  0.76726134,  0.34272686,  0.12430417,
               0.40402268,  0.11386201,  0.92951508,  0.63161323,  0.13350506,
               0.00461214,  0.40769362,  0.29500918,  0.13813993,  0.05792798,
               0.6632485 ,  0.27641921,  0.72558134,  0.34921756,  0.48255454,
               0.82758398,  0.07383318,  0.0838551 ,  0.40157803,  0.44673996,
               0.16895485,  0.42021359,  0.62625748,  0.08257961,  0.4133383 ,
               0.80293489,  0.25542615,  0.13548889,  0.04119879,  0.9419014 ,
               0.49241129,  0.49750194,  0.30357269,  0.70386225,  0.77733884,
               0.48425388,  0.55319208,  0.41048818,  0.1283548 ,  0.17064609,
               0.55584006,  0.83223632,  0.81877572,  0.56238533,  0.55331298])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.37547568,  0.00148235,  0.74832963,  0.86291298,  0.17584963,
               0.68861622,  0.97514449,  0.49164272,  0.96171701,  0.10340403,
               0.99676151,  0.01727249,  0.26270157,  0.52265819,  0.45321752,
               0.54094032,  0.32600192,  0.8518156 ,  0.03839101,  0.35666406,
               0.77159653,  0.62060215,  0.06141223,  0.52692481,  0.35258109,
               0.28235429,  0.01119891,  0.1676199 ,  0.01116322,  0.08592208,
               0.94957851,  0.50238766,  0.80782765,  0.02282978,  0.42937718,
               0.29978318,  0.74791833,  0.70331198,  0.32615128,  0.67347169,
               0.50607865,  0.56479995,  0.74036686,  0.35897156,  0.47614696,
               0.07406956,  0.22388347,  0.32394758,  0.8791335 ,  0.72159263,
               0.85889967,  0.5403026 ,  0.2294166 ,  0.71010454,  0.03828031,
               0.33567223,  0.44789596,  0.41006818,  0.54676621,  0.80245779,
               0.51863009,  0.26684333,  0.2381351 ,  0.33767591,  0.19336773,
               0.38465497,  0.64561501,  0.63710174,  0.36292803,  0.24236263,
               0.01024239,  0.76832074,  0.36371769,  0.34146348,  0.90735343,
               0.0158018 ,  0.23445206,  0.21621141,  0.37098438,  0.73971409,
               0.08350618,  0.28442614,  0.72725334,  0.90323008,  0.54011732,
               0.54137576,  0.75739982,  0.6640825 ,  0.93806539,  0.34598286,
               0.71002756,  0.08229687,  0.63441483,  0.98813705,  0.76774323,
               0.00739528,  0.01552808,  0.24788752,  0.51407579,  0.17476376])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.6106814 ,  0.70719728,  0.48545123,  0.10596873,  0.98274263,
               0.788826  ,  0.15780183,  0.23856264,  0.03689926,  0.93843477,
               0.88984237,  0.54752543,  0.14851963,  0.44070646,  0.7568073 ,
               0.08930544,  0.83614415,  0.12017613,  0.67016301,  0.54458803,
               0.07977053,  0.36246694,  0.05340551,  0.48174439,  0.79015304,
               0.33800613,  0.92823688,  0.22949511,  0.77632577,  0.38249425,
               0.95358405,  0.86783115,  0.21376594,  0.1737616 ,  0.85304909,
               0.75106868,  0.61169741,  0.18690753,  0.38473812,  0.76273592,
               0.38843477,  0.22500545,  0.77519175,  0.7809972 ,  0.32036295,
               0.23278272,  0.22995214,  0.06023171,  0.13368215,  0.03368418,
               0.56924202,  0.86412598,  0.61800642,  0.24641139,  0.12070397,
               0.10679306,  0.01952243,  0.39307738,  0.90792568,  0.74003765,
               0.83692424,  0.22812878,  0.43046574,  0.18486635,  0.20732462,
               0.90520179,  0.94031042,  0.47798302,  0.4482236 ,  0.32260315,
               0.66453531,  0.61213193,  0.15829153,  0.74546527,  0.51110262,
               0.37514801,  0.16823236,  0.13555103,  0.55734425,  0.44611801,
               0.16370223,  0.80153012,  0.44576603,  0.11788401,  0.12708009,
               0.91411522,  0.57935994,  0.27396629,  0.07842832,  0.09304705,
               0.64988941,  0.42530282,  0.7715986 ,  0.94270503,  0.16369188,
               0.45588235,  0.87640913,  0.91833776,  0.26303517,  0.84791718])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.50233487,  0.02300333,  0.69218832,  0.54851629,  0.61802936,
               0.97015052,  0.80631797,  0.49139902,  0.37071004,  0.45758085,
               0.28834078,  0.55888737,  0.63260736,  0.07987085,  0.11915495,
               0.17635695,  0.72150599,  0.26060837,  0.93570164,  0.57211686,
               0.58808326,  0.09360216,  0.64184976,  0.76387422,  0.39295257,
               0.33743774,  0.89888206,  0.40967599,  0.03108795,  0.63564348,
               0.74364882,  0.5400844 ,  0.6716918 ,  0.17662927,  0.72753113,
               0.61545754,  0.87820044,  0.90804112,  0.67992209,  0.18154913,
               0.23131638,  0.0532297 ,  0.73654084,  0.5265308 ,  0.11146508,
               0.27361877,  0.295361  ,  0.87147971,  0.26353437,  0.49959048,
               0.86258622,  0.27873456,  0.55376208,  0.26429149,  0.91444632,
               0.92939558,  0.60249099,  0.76065968,  0.09403998,  0.23695608,
               0.29360023,  0.68236495,  0.6912426 ,  0.70950812,  0.35919368,
               0.4958929 ,  0.57813975,  0.13495197,  0.52702712,  0.39424562,
               0.62759641,  0.00183409,  0.55238341,  0.1321506 ,  0.83702059,
               0.05369257,  0.79803367,  0.04203132,  0.55638142,  0.74731866,
               0.77167593,  0.87151638,  0.20328053,  0.38695988,  0.27255464,
               0.71954793,  0.48531214,  0.0254194 ,  0.34952592,  0.99490444,
               0.86114169,  0.34369732,  0.42049823,  0.85673479,  0.95820367,
               0.00997923,  0.53206991,  0.21018944,  0.42326481,  0.73987246])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.64323973,  0.49832903,  0.21455088,  0.81651033,  0.42326495,
               0.06438895,  0.23596059,  0.71358207,  0.39038674,  0.66160382,
               0.88685956,  0.70724215,  0.0974281 ,  0.24127534,  0.51572149,
               0.88354916,  0.74655997,  0.00125009,  0.00387375,  0.35890023,
               0.83658736,  0.89010191,  0.41487303,  0.74266653,  0.10304646,
               0.25875341,  0.32336585,  0.94230944,  0.58868649,  0.76526231,
               0.58099545,  0.07391008,  0.14736006,  0.52213761,  0.80498571,
               0.39340744,  0.64166615,  0.957643  ,  0.76599779,  0.36576532,
               0.81598269,  0.09840414,  0.86043619,  0.91474888,  0.97041275,
               0.91482653,  0.97610206,  0.01410803,  0.00542524,  0.70481824,
               0.0881714 ,  0.64995149,  0.76726134,  0.34272686,  0.12430417,
               0.40402268,  0.11386201,  0.92951508,  0.63161323,  0.13350506,
               0.00461214,  0.40769362,  0.29500918,  0.13813993,  0.05792798,
               0.6632485 ,  0.27641921,  0.72558134,  0.34921756,  0.48255454,
               0.82758398,  0.07383318,  0.0838551 ,  0.40157803,  0.44673996,
               0.16895485,  0.42021359,  0.62625748,  0.08257961,  0.4133383 ,
               0.80293489,  0.25542615,  0.13548889,  0.04119879,  0.9419014 ,
               0.49241129,  0.49750194,  0.30357269,  0.70386225,  0.77733884,
               0.48425388,  0.55319208,  0.41048818,  0.1283548 ,  0.17064609,
               0.55584006,  0.83223632,  0.81877572,  0.56238533,  0.55331298])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.37547568,  0.00148235,  0.74832963,  0.86291298,  0.17584963,
               0.68861622,  0.97514449,  0.49164272,  0.96171701,  0.10340403,
               0.99676151,  0.01727249,  0.26270157,  0.52265819,  0.45321752,
               0.54094032,  0.32600192,  0.8518156 ,  0.03839101,  0.35666406,
               0.77159653,  0.62060215,  0.06141223,  0.52692481,  0.35258109,
               0.28235429,  0.01119891,  0.1676199 ,  0.01116322,  0.08592208,
               0.94957851,  0.50238766,  0.80782765,  0.02282978,  0.42937718,
               0.29978318,  0.74791833,  0.70331198,  0.32615128,  0.67347169,
               0.50607865,  0.56479995,  0.74036686,  0.35897156,  0.47614696,
               0.07406956,  0.22388347,  0.32394758,  0.8791335 ,  0.72159263,
               0.85889967,  0.5403026 ,  0.2294166 ,  0.71010454,  0.03828031,
               0.33567223,  0.44789596,  0.41006818,  0.54676621,  0.80245779,
               0.51863009,  0.26684333,  0.2381351 ,  0.33767591,  0.19336773,
               0.38465497,  0.64561501,  0.63710174,  0.36292803,  0.24236263,
               0.01024239,  0.76832074,  0.36371769,  0.34146348,  0.90735343,
               0.0158018 ,  0.23445206,  0.21621141,  0.37098438,  0.73971409,
               0.08350618,  0.28442614,  0.72725334,  0.90323008,  0.54011732,
               0.54137576,  0.75739982,  0.6640825 ,  0.93806539,  0.34598286,
               0.71002756,  0.08229687,  0.63441483,  0.98813705,  0.76774323,
               0.00739528,  0.01552808,  0.24788752,  0.51407579,  0.17476376])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.09369526,  0.0112235 ,  0.12346243,  0.41970787,  0.44611157,
               0.20944083,  0.85152686,  0.99788969,  0.64370007,  0.87290061,
               0.0028196 ,  0.03149713,  0.35381788,  0.82875151,  0.46449286,
               0.7913281 ,  0.38173615,  0.87995143,  0.99203191,  0.12287535,
               0.37827063,  0.73007566,  0.98191375,  0.52802398,  0.90576246,
               0.80167247,  0.97436612,  0.82125981,  0.98107276,  0.41165232,
               0.60830072,  0.45271458,  0.02386785,  0.45631597,  0.00843302,
               0.32198963,  0.95127388,  0.72385801,  0.25707437,  0.07260221,
               0.18308117,  0.31678744,  0.12203345,  0.14317842,  0.4845829 ,
               0.40132598,  0.40440796,  0.77725894,  0.71338843,  0.28786821,
               0.09730691,  0.63569584,  0.66428577,  0.44471829,  0.73801602,
               0.41531604,  0.59206662,  0.11667034,  0.77151599,  0.22525951,
               0.83057613,  0.63056734,  0.96631148,  0.87523998,  0.1346469 ,
               0.26004702,  0.24382952,  0.50612068,  0.70856975,  0.05936323,
               0.79713096,  0.37679991,  0.12067587,  0.33866735,  0.574241  ,
               0.37769253,  0.69881605,  0.69098154,  0.76604059,  0.54552083,
               0.56265506,  0.26700196,  0.81902338,  0.48888344,  0.34546373,
               0.43143473,  0.69037865,  0.5472691 ,  0.043499  ,  0.58309449,
               0.42861429,  0.95612971,  0.01975726,  0.93050863,  0.80865496,
               0.14191804,  0.17206121,  0.9503161 ,  0.90620026,  0.70540495])}]]


