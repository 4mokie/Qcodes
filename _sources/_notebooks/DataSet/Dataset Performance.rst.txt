
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='2ff6e587-60a8-46de-8fa7-b1e8e614a199'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='ab80e63b-1262-4931-836e-9d2fba1f347c'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.916319352736277],
     [0.695526236713547],
     [0.779881151891776],
     [0.49971275340962],
     [0.747177408061599],
     [0.267913832738412],
     [0.850549630484875],
     [0.290173594867654],
     [0.388176564056639],
     [0.796981621413599],
     [0.650507387091704],
     [0.0964271241938778],
     [0.672302379776667],
     [0.0721312914204046],
     [0.289549483820643],
     [0.454652771430161],
     [0.669085305877957],
     [0.0491105922670557],
     [0.365266126142027],
     [0.533884539961486],
     [0.409370957494171],
     [0.142389204089172],
     [0.00389889046679626],
     [0.203788124504951],
     [0.507540569902818],
     [0.514678716099168],
     [0.594724067138232],
     [0.130566622674614],
     [0.26727639145876],
     [0.786682604575532],
     [0.962051376180741],
     [0.063557074678075],
     [0.958356470193288],
     [0.620269277116924],
     [0.110030221690974],
     [0.684632201481564],
     [0.192147827458439],
     [0.846104708623631],
     [0.193594808258242],
     [0.210164374985443],
     [0.272380858856533],
     [0.444805069879652],
     [0.851898188531034],
     [0.353174871628964],
     [0.135637782127159],
     [0.724752566491015],
     [0.0507810716615099],
     [0.219829142138295],
     [0.418920507509878],
     [0.438076059412421],
     [0.361428827615911],
     [0.718747478144394],
     [0.135298218485779],
     [0.422136786948989],
     [0.869225404823024],
     [0.399028526482613],
     [0.892476598684906],
     [0.532364038726527],
     [0.815310636218905],
     [0.0585490860955632],
     [0.0199701294456246],
     [0.148541169002808],
     [0.875840004445297],
     [0.578790946018253],
     [0.0827993406297692],
     [0.790563178303694],
     [0.885458501556421],
     [0.324657717265926],
     [0.605330390003273],
     [0.0622947673867935],
     [0.642184718809111],
     [0.428951929766071],
     [0.814117194619618],
     [0.564874543393548],
     [0.617334829390568],
     [0.120937214040204],
     [0.356126672245143],
     [0.547583894159607],
     [0.972931405343921],
     [0.675221412076402],
     [0.271119351576238],
     [0.320420248250165],
     [0.967577280371884],
     [0.256236258330396],
     [0.668722972752105],
     [0.87600579847373],
     [0.722775791856233],
     [0.919888731774601],
     [0.545894907643116],
     [0.0997553200149407],
     [0.316449461074707],
     [0.371880328070874],
     [0.461730722676343],
     [0.123411719813043],
     [0.901232749414327],
     [0.597480500995663],
     [0.557484543078681],
     [0.462208229818177],
     [0.190224289517804],
     [0.938404952121619]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.89622625])],
     [array([0.68832868])],
     [array([0.68227883])],
     [array([0.4313895])],
     [array([0.67464468])],
     [array([0.18805833])],
     [array([0.76865824])],
     [array([0.17802407])],
     [array([0.52036052])],
     [array([0.09601045])],
     [array([0.11087173])],
     [array([0.443333])],
     [array([0.67912347])],
     [array([0.06941997])],
     [array([0.65374446])],
     [array([0.09434618])],
     [array([0.41601621])],
     [array([0.63516779])],
     [array([0.1837041])],
     [array([0.70845457])],
     [array([0.46548975])],
     [array([0.23238094])],
     [array([0.82351081])],
     [array([0.50181181])],
     [array([0.46200881])],
     [array([0.36548244])],
     [array([0.15021421])],
     [array([0.3265588])],
     [array([0.44633246])],
     [array([0.02879783])],
     [array([0.09282204])],
     [array([0.42327927])],
     [array([0.42958789])],
     [array([0.3598144])],
     [array([0.89615139])],
     [array([0.16142846])],
     [array([0.35857139])],
     [array([0.2557326])],
     [array([0.59303033])],
     [array([0.0013206])],
     [array([0.56926585])],
     [array([0.58331253])],
     [array([0.06703314])],
     [array([0.78718032])],
     [array([0.21153551])],
     [array([0.99684562])],
     [array([0.63309079])],
     [array([0.72344971])],
     [array([0.57912979])],
     [array([0.83681497])],
     [array([0.15448484])],
     [array([0.33452334])],
     [array([0.32036519])],
     [array([0.88823586])],
     [array([0.77378827])],
     [array([0.56195178])],
     [array([0.66043036])],
     [array([0.06453182])],
     [array([0.1460183])],
     [array([0.91323123])],
     [array([0.71872408])],
     [array([0.62705379])],
     [array([0.03693768])],
     [array([0.80355206])],
     [array([0.75595069])],
     [array([0.02810901])],
     [array([0.76481091])],
     [array([0.73181236])],
     [array([0.6137871])],
     [array([0.78800619])],
     [array([0.59735918])],
     [array([0.85054043])],
     [array([0.57306668])],
     [array([0.59897995])],
     [array([0.2185716])],
     [array([0.60120713])],
     [array([0.38062037])],
     [array([0.78286622])],
     [array([0.29485566])],
     [array([0.04701153])],
     [array([0.75687465])],
     [array([0.60278102])],
     [array([0.23844964])],
     [array([0.36736623])],
     [array([0.34503702])],
     [array([0.86814304])],
     [array([0.64681379])],
     [array([0.64719158])],
     [array([0.39522913])],
     [array([0.11054004])],
     [array([0.72282187])],
     [array([0.89739219])],
     [array([0.95714748])],
     [array([0.69583206])],
     [array([0.07405949])],
     [array([0.21008551])],
     [array([0.17847339])],
     [array([0.18750774])],
     [array([0.3183468])],
     [array([0.23270724])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.89622625, 0.68832868, 0.68227883, 0.4313895 , 0.67464468,
           0.18805833, 0.76865824, 0.17802407, 0.52036052, 0.09601045,
           0.11087173, 0.443333  , 0.67912347, 0.06941997, 0.65374446,
           0.09434618, 0.41601621, 0.63516779, 0.1837041 , 0.70845457,
           0.46548975, 0.23238094, 0.82351081, 0.50181181, 0.46200881,
           0.36548244, 0.15021421, 0.3265588 , 0.44633246, 0.02879783,
           0.09282204, 0.42327927, 0.42958789, 0.3598144 , 0.89615139,
           0.16142846, 0.35857139, 0.2557326 , 0.59303033, 0.0013206 ,
           0.56926585, 0.58331253, 0.06703314, 0.78718032, 0.21153551,
           0.99684562, 0.63309079, 0.72344971, 0.57912979, 0.83681497,
           0.15448484, 0.33452334, 0.32036519, 0.88823586, 0.77378827,
           0.56195178, 0.66043036, 0.06453182, 0.1460183 , 0.91323123,
           0.71872408, 0.62705379, 0.03693768, 0.80355206, 0.75595069,
           0.02810901, 0.76481091, 0.73181236, 0.6137871 , 0.78800619,
           0.59735918, 0.85054043, 0.57306668, 0.59897995, 0.2185716 ,
           0.60120713, 0.38062037, 0.78286622, 0.29485566, 0.04701153,
           0.75687465, 0.60278102, 0.23844964, 0.36736623, 0.34503702,
           0.86814304, 0.64681379, 0.64719158, 0.39522913, 0.11054004,
           0.72282187, 0.89739219, 0.95714748, 0.69583206, 0.07405949,
           0.21008551, 0.17847339, 0.18750774, 0.3183468 , 0.23270724])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.91631935, 0.69552624, 0.77988115, 0.49971275, 0.74717741,
              0.26791383, 0.85054963, 0.29017359, 0.38817656, 0.79698162,
              0.65050739, 0.09642712, 0.67230238, 0.07213129, 0.28954948,
              0.45465277, 0.66908531, 0.04911059, 0.36526613, 0.53388454,
              0.40937096, 0.1423892 , 0.00389889, 0.20378812, 0.50754057,
              0.51467872, 0.59472407, 0.13056662, 0.26727639, 0.7866826 ,
              0.96205138, 0.06355707, 0.95835647, 0.62026928, 0.11003022,
              0.6846322 , 0.19214783, 0.84610471, 0.19359481, 0.21016437,
              0.27238086, 0.44480507, 0.85189819, 0.35317487, 0.13563778,
              0.72475257, 0.05078107, 0.21982914, 0.41892051, 0.43807606,
              0.36142883, 0.71874748, 0.13529822, 0.42213679, 0.8692254 ,
              0.39902853, 0.8924766 , 0.53236404, 0.81531064, 0.05854909,
              0.01997013, 0.14854117, 0.87584   , 0.57879095, 0.08279934,
              0.79056318, 0.8854585 , 0.32465772, 0.60533039, 0.06229477,
              0.64218472, 0.42895193, 0.81411719, 0.56487454, 0.61733483,
              0.12093721, 0.35612667, 0.54758389, 0.97293141, 0.67522141,
              0.27111935, 0.32042025, 0.96757728, 0.25623626, 0.66872297,
              0.8760058 , 0.72277579, 0.91988873, 0.54589491, 0.09975532,
              0.31644946, 0.37188033, 0.46173072, 0.12341172, 0.90123275,
              0.5974805 , 0.55748454, 0.46220823, 0.19022429, 0.93840495])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.28470138, 0.31204874, 0.31112954, 0.13872914, 0.0151662 ,
              0.81607555, 0.43455756, 0.97001906, 0.29083652, 0.59757261,
              0.89359086, 0.4288313 , 0.96785058, 0.39605925, 0.76161928,
              0.91789933, 0.66482544, 0.99481866, 0.97587941, 0.96844029,
              0.07408188, 0.62305576, 0.79151667, 0.02812257, 0.13699435,
              0.61230332, 0.47683329, 0.48156319, 0.02470534, 0.45136682,
              0.3212646 , 0.51491345, 0.7132437 , 0.31500542, 0.56642028,
              0.75729541, 0.17206135, 0.45953566, 0.07689398, 0.39066232,
              0.12059985, 0.76099631, 0.77405594, 0.49607556, 0.75906763,
              0.71324161, 0.56101388, 0.47989266, 0.27767764, 0.84983578,
              0.8679003 , 0.53850602, 0.86270037, 0.19812807, 0.64000954,
              0.4324952 , 0.41820376, 0.36501128, 0.94290193, 0.34215225,
              0.98087476, 0.19347861, 0.79574996, 0.04244015, 0.63928028,
              0.31368819, 0.94739959, 0.11400203, 0.65675693, 0.47587678,
              0.64340348, 0.80024217, 0.01062465, 0.31785542, 0.67573002,
              0.89407095, 0.24413587, 0.49854524, 0.09983531, 0.69091163,
              0.17165794, 0.31386658, 0.32794296, 0.97164786, 0.61814681,
              0.31094006, 0.90372059, 0.22688842, 0.8470099 , 0.52926581,
              0.25805819, 0.06609046, 0.51713081, 0.88955052, 0.13035649,
              0.66830679, 0.82278732, 0.76634643, 0.90271892, 0.51713241])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.45988396, 0.44371408, 0.87017082, 0.59125214, 0.84669893,
              0.58752324, 0.49941374, 0.79995434, 0.47347402, 0.87896131,
              0.48576195, 0.84706724, 0.95994129, 0.0674618 , 0.833025  ,
              0.3769521 , 0.535929  , 0.47455462, 0.7910073 , 0.19886275,
              0.18044527, 0.26504044, 0.3312463 , 0.09630977, 0.08159015,
              0.09820136, 0.05278086, 0.07422547, 0.33212805, 0.30955872,
              0.08355815, 0.65965312, 0.53239776, 0.93953335, 0.90551871,
              0.61959222, 0.65075677, 0.85117233, 0.49214998, 0.75844175,
              0.20524013, 0.40395387, 0.53277361, 0.24697465, 0.319197  ,
              0.74558663, 0.41656194, 0.51087019, 0.51028378, 0.79746234,
              0.39467899, 0.74170734, 0.50088222, 0.18707821, 0.68099001,
              0.8331025 , 0.31476959, 0.81749349, 0.9267098 , 0.8988523 ,
              0.81624793, 0.86017749, 0.36142244, 0.05364132, 0.50943649,
              0.01028198, 0.26395956, 0.43019297, 0.21053616, 0.13138267,
              0.93494317, 0.92365004, 0.96549212, 0.03489689, 0.25397626,
              0.17552559, 0.25149021, 0.16430423, 0.26053486, 0.10566426,
              0.1844881 , 0.90227236, 0.98211807, 0.53961184, 0.38372392,
              0.39421475, 0.23652903, 0.82828499, 0.13640062, 0.85165301,
              0.56082679, 0.63758485, 0.22984826, 0.34786872, 0.76293378,
              0.79651242, 0.97086702, 0.16020342, 0.95218067, 0.97012057])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.67544296, 0.9586323 , 0.95394917, 0.12028239, 0.23582941,
              0.67318667, 0.32651027, 0.39128745, 0.62469353, 0.03168165,
              0.4659147 , 0.73779192, 0.30652023, 0.98852505, 0.99987536,
              0.07773334, 0.31655428, 0.41644532, 0.23075429, 0.76499064,
              0.32208394, 0.7032505 , 0.99288198, 0.90096237, 0.39251314,
              0.81513081, 0.35443819, 0.01970487, 0.90544627, 0.41218927,
              0.72810126, 0.53112079, 0.66479948, 0.18595265, 0.40621542,
              0.61507491, 0.41908829, 0.89230277, 0.85654593, 0.67509709,
              0.03058858, 0.5382039 , 0.62089901, 0.76183833, 0.25133754,
              0.46981383, 0.9559564 , 0.74455745, 0.97500887, 0.48837809,
              0.57495001, 0.03560938, 0.69851755, 0.69628827, 0.32582462,
              0.25304616, 0.23944116, 0.59300336, 0.33337151, 0.19889098,
              0.67069524, 0.56768166, 0.25406317, 0.54006609, 0.75404733,
              0.76642363, 0.64668198, 0.29894463, 0.64853945, 0.89276062,
              0.99076501, 0.86903604, 0.39867689, 0.16002567, 0.70942312,
              0.74604567, 0.42631635, 0.15603091, 0.22702084, 0.62377268,
              0.24510072, 0.7114198 , 0.28788451, 0.98359657, 0.44991492,
              0.25094875, 0.93005219, 0.16070837, 0.17091719, 0.71706285,
              0.41658872, 0.5417881 , 0.31518757, 0.54737415, 0.11944892,
              0.94966245, 0.83004964, 0.60940129, 0.95440895, 0.43975219])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.91631935, 0.69552624, 0.77988115, 0.49971275, 0.74717741,
              0.26791383, 0.85054963, 0.29017359, 0.38817656, 0.79698162,
              0.65050739, 0.09642712, 0.67230238, 0.07213129, 0.28954948,
              0.45465277, 0.66908531, 0.04911059, 0.36526613, 0.53388454,
              0.40937096, 0.1423892 , 0.00389889, 0.20378812, 0.50754057,
              0.51467872, 0.59472407, 0.13056662, 0.26727639, 0.7866826 ,
              0.96205138, 0.06355707, 0.95835647, 0.62026928, 0.11003022,
              0.6846322 , 0.19214783, 0.84610471, 0.19359481, 0.21016437,
              0.27238086, 0.44480507, 0.85189819, 0.35317487, 0.13563778,
              0.72475257, 0.05078107, 0.21982914, 0.41892051, 0.43807606,
              0.36142883, 0.71874748, 0.13529822, 0.42213679, 0.8692254 ,
              0.39902853, 0.8924766 , 0.53236404, 0.81531064, 0.05854909,
              0.01997013, 0.14854117, 0.87584   , 0.57879095, 0.08279934,
              0.79056318, 0.8854585 , 0.32465772, 0.60533039, 0.06229477,
              0.64218472, 0.42895193, 0.81411719, 0.56487454, 0.61733483,
              0.12093721, 0.35612667, 0.54758389, 0.97293141, 0.67522141,
              0.27111935, 0.32042025, 0.96757728, 0.25623626, 0.66872297,
              0.8760058 , 0.72277579, 0.91988873, 0.54589491, 0.09975532,
              0.31644946, 0.37188033, 0.46173072, 0.12341172, 0.90123275,
              0.5974805 , 0.55748454, 0.46220823, 0.19022429, 0.93840495])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.28470138, 0.31204874, 0.31112954, 0.13872914, 0.0151662 ,
              0.81607555, 0.43455756, 0.97001906, 0.29083652, 0.59757261,
              0.89359086, 0.4288313 , 0.96785058, 0.39605925, 0.76161928,
              0.91789933, 0.66482544, 0.99481866, 0.97587941, 0.96844029,
              0.07408188, 0.62305576, 0.79151667, 0.02812257, 0.13699435,
              0.61230332, 0.47683329, 0.48156319, 0.02470534, 0.45136682,
              0.3212646 , 0.51491345, 0.7132437 , 0.31500542, 0.56642028,
              0.75729541, 0.17206135, 0.45953566, 0.07689398, 0.39066232,
              0.12059985, 0.76099631, 0.77405594, 0.49607556, 0.75906763,
              0.71324161, 0.56101388, 0.47989266, 0.27767764, 0.84983578,
              0.8679003 , 0.53850602, 0.86270037, 0.19812807, 0.64000954,
              0.4324952 , 0.41820376, 0.36501128, 0.94290193, 0.34215225,
              0.98087476, 0.19347861, 0.79574996, 0.04244015, 0.63928028,
              0.31368819, 0.94739959, 0.11400203, 0.65675693, 0.47587678,
              0.64340348, 0.80024217, 0.01062465, 0.31785542, 0.67573002,
              0.89407095, 0.24413587, 0.49854524, 0.09983531, 0.69091163,
              0.17165794, 0.31386658, 0.32794296, 0.97164786, 0.61814681,
              0.31094006, 0.90372059, 0.22688842, 0.8470099 , 0.52926581,
              0.25805819, 0.06609046, 0.51713081, 0.88955052, 0.13035649,
              0.66830679, 0.82278732, 0.76634643, 0.90271892, 0.51713241])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.45988396, 0.44371408, 0.87017082, 0.59125214, 0.84669893,
              0.58752324, 0.49941374, 0.79995434, 0.47347402, 0.87896131,
              0.48576195, 0.84706724, 0.95994129, 0.0674618 , 0.833025  ,
              0.3769521 , 0.535929  , 0.47455462, 0.7910073 , 0.19886275,
              0.18044527, 0.26504044, 0.3312463 , 0.09630977, 0.08159015,
              0.09820136, 0.05278086, 0.07422547, 0.33212805, 0.30955872,
              0.08355815, 0.65965312, 0.53239776, 0.93953335, 0.90551871,
              0.61959222, 0.65075677, 0.85117233, 0.49214998, 0.75844175,
              0.20524013, 0.40395387, 0.53277361, 0.24697465, 0.319197  ,
              0.74558663, 0.41656194, 0.51087019, 0.51028378, 0.79746234,
              0.39467899, 0.74170734, 0.50088222, 0.18707821, 0.68099001,
              0.8331025 , 0.31476959, 0.81749349, 0.9267098 , 0.8988523 ,
              0.81624793, 0.86017749, 0.36142244, 0.05364132, 0.50943649,
              0.01028198, 0.26395956, 0.43019297, 0.21053616, 0.13138267,
              0.93494317, 0.92365004, 0.96549212, 0.03489689, 0.25397626,
              0.17552559, 0.25149021, 0.16430423, 0.26053486, 0.10566426,
              0.1844881 , 0.90227236, 0.98211807, 0.53961184, 0.38372392,
              0.39421475, 0.23652903, 0.82828499, 0.13640062, 0.85165301,
              0.56082679, 0.63758485, 0.22984826, 0.34786872, 0.76293378,
              0.79651242, 0.97086702, 0.16020342, 0.95218067, 0.97012057])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.95067765, 0.27217328, 0.5980729 , 0.95275947, 0.36068761,
              0.52180006, 0.30300974, 0.80482628, 0.18554662, 0.49032331,
              0.90653243, 0.30435356, 0.73120617, 0.94169089, 0.1985503 ,
              0.08161911, 0.56810256, 0.41187228, 0.92001015, 0.39392906,
              0.01504224, 0.29991625, 0.64849489, 0.35127757, 0.20816326,
              0.57009659, 0.55010113, 0.58519649, 0.04705974, 0.22507725,
              0.07116005, 0.15977699, 0.92572461, 0.87336709, 0.81185894,
              0.34597101, 0.53868868, 0.46266523, 0.063591  , 0.18217534,
              0.1351771 , 0.78406218, 0.05023288, 0.36883621, 0.58900964,
              0.74393774, 0.30140943, 0.63851747, 0.04934672, 0.96403601,
              0.4269393 , 0.79779194, 0.88701184, 0.32469687, 0.67685627,
              0.52516242, 0.97041521, 0.53293234, 0.79926523, 0.79957414,
              0.02057859, 0.00625528, 0.33217998, 0.19626175, 0.10569083,
              0.70361405, 0.59952777, 0.89721376, 0.2365501 , 0.67136243,
              0.74939034, 0.10037741, 0.84824435, 0.78257202, 0.65550177,
              0.45484865, 0.67033502, 0.49747175, 0.34953162, 0.91037864,
              0.63124569, 0.05578382, 0.42132899, 0.72980487, 0.03635468,
              0.54401676, 0.46743232, 0.85923571, 0.7254333 , 0.00107288,
              0.68802977, 0.2997097 , 0.71684623, 0.13840677, 0.03464318,
              0.61620398, 0.74182364, 0.62992183, 0.80896196, 0.69115853])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.89622625, 0.68832868, 0.68227883, 0.4313895 , 0.67464468,
              0.18805833, 0.76865824, 0.17802407, 0.52036052, 0.09601045,
              0.11087173, 0.443333  , 0.67912347, 0.06941997, 0.65374446,
              0.09434618, 0.41601621, 0.63516779, 0.1837041 , 0.70845457,
              0.46548975, 0.23238094, 0.82351081, 0.50181181, 0.46200881,
              0.36548244, 0.15021421, 0.3265588 , 0.44633246, 0.02879783,
              0.09282204, 0.42327927, 0.42958789, 0.3598144 , 0.89615139,
              0.16142846, 0.35857139, 0.2557326 , 0.59303033, 0.0013206 ,
              0.56926585, 0.58331253, 0.06703314, 0.78718032, 0.21153551,
              0.99684562, 0.63309079, 0.72344971, 0.57912979, 0.83681497,
              0.15448484, 0.33452334, 0.32036519, 0.88823586, 0.77378827,
              0.56195178, 0.66043036, 0.06453182, 0.1460183 , 0.91323123,
              0.71872408, 0.62705379, 0.03693768, 0.80355206, 0.75595069,
              0.02810901, 0.76481091, 0.73181236, 0.6137871 , 0.78800619,
              0.59735918, 0.85054043, 0.57306668, 0.59897995, 0.2185716 ,
              0.60120713, 0.38062037, 0.78286622, 0.29485566, 0.04701153,
              0.75687465, 0.60278102, 0.23844964, 0.36736623, 0.34503702,
              0.86814304, 0.64681379, 0.64719158, 0.39522913, 0.11054004,
              0.72282187, 0.89739219, 0.95714748, 0.69583206, 0.07405949,
              0.21008551, 0.17847339, 0.18750774, 0.3183468 , 0.23270724])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.19062981, 0.69460112, 0.38920273, 0.35580892, 0.70644286,
              0.02669228, 0.73909929, 0.28389677, 0.92081065, 0.36274393,
              0.11560195, 0.87074104, 0.68233496, 0.79620864, 0.41532962,
              0.28617677, 0.5116757 , 0.97674174, 0.09941671, 0.56405944,
              0.49687211, 0.82402437, 0.85081063, 0.90976828, 0.55695057,
              0.89276333, 0.11903036, 0.07925141, 0.9939377 , 0.64842188,
              0.91304588, 0.41957977, 0.23148252, 0.15655235, 0.75488966,
              0.1826686 , 0.89437912, 0.5501322 , 0.34303111, 0.89047915,
              0.6722277 , 0.84231021, 0.84145578, 0.98502619, 0.23925509,
              0.24938415, 0.72935437, 0.4969646 , 0.02171622, 0.70002813,
              0.29521588, 0.43855492, 0.79896885, 0.84313994, 0.03846116,
              0.4497168 , 0.17853179, 0.74754124, 0.49220531, 0.75273931,
              0.56080544, 0.61756666, 0.61481612, 0.93008186, 0.47832315,
              0.54715016, 0.3746173 , 0.11892179, 0.48997382, 0.43046035,
              0.89623279, 0.67153256, 0.91445284, 0.72754588, 0.64611394,
              0.04013895, 0.16555395, 0.38260649, 0.83582026, 0.15856233,
              0.74646774, 0.69488902, 0.69392843, 0.62693863, 0.43066086,
              0.0739363 , 0.61992882, 0.58216342, 0.25406607, 0.89625067,
              0.77999169, 0.07277597, 0.44411119, 0.06613538, 0.31551251,
              0.92517341, 0.56359748, 0.2159732 , 0.70932184, 0.036388  ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.29024051, 0.88182778, 0.61482533, 0.00500527, 0.67105032,
              0.93555946, 0.92169564, 0.79487391, 0.00795643, 0.17523723,
              0.52441747, 0.70975433, 0.53875563, 0.81152575, 0.04572024,
              0.59555068, 0.4987408 , 0.97760502, 0.46256673, 0.29225377,
              0.34576809, 0.55781379, 0.05290817, 0.50281178, 0.10538984,
              0.69178507, 0.75654857, 0.42548504, 0.65187512, 0.38143233,
              0.44980926, 0.3056662 , 0.74445354, 0.6445236 , 0.53359673,
              0.64986523, 0.67183284, 0.93819514, 0.0509846 , 0.7885236 ,
              0.22063014, 0.1575723 , 0.84990888, 0.42420527, 0.50733017,
              0.58502909, 0.03538478, 0.39902649, 0.02426601, 0.12074959,
              0.97099012, 0.43814356, 0.47301441, 0.09525191, 0.03616396,
              0.30003242, 0.66339003, 0.12163438, 0.15254455, 0.20537289,
              0.80380032, 0.87534349, 0.48230227, 0.27289453, 0.98677453,
              0.14290087, 0.54874687, 0.27383651, 0.30537907, 0.0593862 ,
              0.08081748, 0.95925972, 0.90435895, 0.71099242, 0.7516425 ,
              0.53520894, 0.16893499, 0.43371789, 0.46487536, 0.08580495,
              0.5580155 , 0.80859332, 0.74873439, 0.15554454, 0.39782561,
              0.21802751, 0.58735693, 0.68602033, 0.16147792, 0.95478024,
              0.44086413, 0.78235734, 0.3658847 , 0.08283356, 0.99000678,
              0.34022327, 0.85963428, 0.2414553 , 0.05056369, 0.65748644])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.97183623, 0.26030811, 0.5679092 , 0.27870896, 0.39705987,
              0.45479664, 0.95019927, 0.50804376, 0.74519269, 0.01181361,
              0.69089083, 0.48226494, 0.94522513, 0.73320776, 0.76100913,
              0.24333676, 0.63253153, 0.5498793 , 0.71312653, 0.73326385,
              0.16509064, 0.7191726 , 0.69934601, 0.29626102, 0.48560763,
              0.17383741, 0.75192544, 0.26908113, 0.54360176, 0.30220364,
              0.03253794, 0.68926034, 0.94413425, 0.8896752 , 0.73320018,
              0.11526608, 0.57071593, 0.25886262, 0.41748163, 0.09852407,
              0.94766994, 0.57771069, 0.87387852, 0.74726386, 0.89350856,
              0.16178814, 0.20306739, 0.17112758, 0.00255299, 0.80053101,
              0.91137357, 0.19773525, 0.51006713, 0.58615461, 0.59784371,
              0.59612256, 0.0559827 , 0.74574134, 0.98220366, 0.55632293,
              0.05803389, 0.46852179, 0.38240569, 0.33926909, 0.88040634,
              0.0159754 , 0.0301327 , 0.95348809, 0.47881166, 0.70946979,
              0.79824195, 0.90513009, 0.86095335, 0.2432702 , 0.97676162,
              0.80538416, 0.14713528, 0.5769012 , 0.88778811, 0.41025849,
              0.47683743, 0.2901519 , 0.64897135, 0.00581959, 0.70549474,
              0.39982653, 0.00775177, 0.62449348, 0.29010906, 0.50650657,
              0.03580808, 0.2254963 , 0.40717955, 0.38431585, 0.77022978,
              0.11633916, 0.75849011, 0.20881884, 0.49870834, 0.52171861])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.89622625, 0.68832868, 0.68227883, 0.4313895 , 0.67464468,
              0.18805833, 0.76865824, 0.17802407, 0.52036052, 0.09601045,
              0.11087173, 0.443333  , 0.67912347, 0.06941997, 0.65374446,
              0.09434618, 0.41601621, 0.63516779, 0.1837041 , 0.70845457,
              0.46548975, 0.23238094, 0.82351081, 0.50181181, 0.46200881,
              0.36548244, 0.15021421, 0.3265588 , 0.44633246, 0.02879783,
              0.09282204, 0.42327927, 0.42958789, 0.3598144 , 0.89615139,
              0.16142846, 0.35857139, 0.2557326 , 0.59303033, 0.0013206 ,
              0.56926585, 0.58331253, 0.06703314, 0.78718032, 0.21153551,
              0.99684562, 0.63309079, 0.72344971, 0.57912979, 0.83681497,
              0.15448484, 0.33452334, 0.32036519, 0.88823586, 0.77378827,
              0.56195178, 0.66043036, 0.06453182, 0.1460183 , 0.91323123,
              0.71872408, 0.62705379, 0.03693768, 0.80355206, 0.75595069,
              0.02810901, 0.76481091, 0.73181236, 0.6137871 , 0.78800619,
              0.59735918, 0.85054043, 0.57306668, 0.59897995, 0.2185716 ,
              0.60120713, 0.38062037, 0.78286622, 0.29485566, 0.04701153,
              0.75687465, 0.60278102, 0.23844964, 0.36736623, 0.34503702,
              0.86814304, 0.64681379, 0.64719158, 0.39522913, 0.11054004,
              0.72282187, 0.89739219, 0.95714748, 0.69583206, 0.07405949,
              0.21008551, 0.17847339, 0.18750774, 0.3183468 , 0.23270724])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.19062981, 0.69460112, 0.38920273, 0.35580892, 0.70644286,
              0.02669228, 0.73909929, 0.28389677, 0.92081065, 0.36274393,
              0.11560195, 0.87074104, 0.68233496, 0.79620864, 0.41532962,
              0.28617677, 0.5116757 , 0.97674174, 0.09941671, 0.56405944,
              0.49687211, 0.82402437, 0.85081063, 0.90976828, 0.55695057,
              0.89276333, 0.11903036, 0.07925141, 0.9939377 , 0.64842188,
              0.91304588, 0.41957977, 0.23148252, 0.15655235, 0.75488966,
              0.1826686 , 0.89437912, 0.5501322 , 0.34303111, 0.89047915,
              0.6722277 , 0.84231021, 0.84145578, 0.98502619, 0.23925509,
              0.24938415, 0.72935437, 0.4969646 , 0.02171622, 0.70002813,
              0.29521588, 0.43855492, 0.79896885, 0.84313994, 0.03846116,
              0.4497168 , 0.17853179, 0.74754124, 0.49220531, 0.75273931,
              0.56080544, 0.61756666, 0.61481612, 0.93008186, 0.47832315,
              0.54715016, 0.3746173 , 0.11892179, 0.48997382, 0.43046035,
              0.89623279, 0.67153256, 0.91445284, 0.72754588, 0.64611394,
              0.04013895, 0.16555395, 0.38260649, 0.83582026, 0.15856233,
              0.74646774, 0.69488902, 0.69392843, 0.62693863, 0.43066086,
              0.0739363 , 0.61992882, 0.58216342, 0.25406607, 0.89625067,
              0.77999169, 0.07277597, 0.44411119, 0.06613538, 0.31551251,
              0.92517341, 0.56359748, 0.2159732 , 0.70932184, 0.036388  ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.29024051, 0.88182778, 0.61482533, 0.00500527, 0.67105032,
              0.93555946, 0.92169564, 0.79487391, 0.00795643, 0.17523723,
              0.52441747, 0.70975433, 0.53875563, 0.81152575, 0.04572024,
              0.59555068, 0.4987408 , 0.97760502, 0.46256673, 0.29225377,
              0.34576809, 0.55781379, 0.05290817, 0.50281178, 0.10538984,
              0.69178507, 0.75654857, 0.42548504, 0.65187512, 0.38143233,
              0.44980926, 0.3056662 , 0.74445354, 0.6445236 , 0.53359673,
              0.64986523, 0.67183284, 0.93819514, 0.0509846 , 0.7885236 ,
              0.22063014, 0.1575723 , 0.84990888, 0.42420527, 0.50733017,
              0.58502909, 0.03538478, 0.39902649, 0.02426601, 0.12074959,
              0.97099012, 0.43814356, 0.47301441, 0.09525191, 0.03616396,
              0.30003242, 0.66339003, 0.12163438, 0.15254455, 0.20537289,
              0.80380032, 0.87534349, 0.48230227, 0.27289453, 0.98677453,
              0.14290087, 0.54874687, 0.27383651, 0.30537907, 0.0593862 ,
              0.08081748, 0.95925972, 0.90435895, 0.71099242, 0.7516425 ,
              0.53520894, 0.16893499, 0.43371789, 0.46487536, 0.08580495,
              0.5580155 , 0.80859332, 0.74873439, 0.15554454, 0.39782561,
              0.21802751, 0.58735693, 0.68602033, 0.16147792, 0.95478024,
              0.44086413, 0.78235734, 0.3658847 , 0.08283356, 0.99000678,
              0.34022327, 0.85963428, 0.2414553 , 0.05056369, 0.65748644])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.75423245, 0.85073226, 0.29301439, 0.51138895, 0.82382097,
              0.27367375, 0.30877811, 0.54929529, 0.63658427, 0.80034182,
              0.97890645, 0.02177045, 0.9276388 , 0.41304888, 0.95363673,
              0.65629753, 0.67577987, 0.46778891, 0.65379792, 0.8060634 ,
              0.35314195, 0.17859931, 0.81296904, 0.74243784, 0.0262914 ,
              0.71153128, 0.87919789, 0.07194307, 0.09784423, 0.44997624,
              0.39591741, 0.24000104, 0.20665839, 0.63437598, 0.1495215 ,
              0.01557605, 0.23046407, 0.40375979, 0.70923286, 0.23100743,
              0.98855648, 0.21632924, 0.81413522, 0.09586434, 0.07786049,
              0.7295101 , 0.26798535, 0.18182412, 0.99223913, 0.30669396,
              0.25301408, 0.38959696, 0.95320188, 0.24922637, 0.83272056,
              0.19143727, 0.68300867, 0.08051051, 0.20344384, 0.03751909,
              0.98508236, 0.92374976, 0.68085975, 0.73310022, 0.52460456,
              0.87275112, 0.43725488, 0.92867216, 0.44375531, 0.78962164,
              0.77237291, 0.99921371, 0.43311215, 0.58404919, 0.57035543,
              0.90333171, 0.88801809, 0.04980934, 0.29370349, 0.79749478,
              0.52851538, 0.79964765, 0.20457371, 0.82517916, 0.42045941,
              0.93265495, 0.28795907, 0.95482253, 0.47617799, 0.34250124,
              0.31125567, 0.2024494 , 0.14642466, 0.74505607, 0.7299729 ,
              0.94600278, 0.92515692, 0.48912185, 0.24694942, 0.59841623])}]]


