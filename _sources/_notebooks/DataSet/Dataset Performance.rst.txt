
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='77ed0c2c-da69-4b82-bab8-0c3f38fc02cc'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='9e0fd523-fc51-46a6-b46b-e0882d146ac7'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.907948464920921],
     [0.0050367853723623],
     [0.627429426725316],
     [0.523123557915631],
     [0.824729977566096],
     [0.667344258874532],
     [0.338995019103567],
     [0.576144873128655],
     [0.824809923937784],
     [0.378491323744533],
     [0.228498764026678],
     [0.433206678560752],
     [0.184595064259003],
     [0.513949795354697],
     [0.819230180162751],
     [0.982067341523955],
     [0.957836966631099],
     [0.867088515104246],
     [0.385595684204109],
     [0.625097992827029],
     [0.966167256209443],
     [0.957235251112396],
     [0.0441523226122623],
     [0.928789081365094],
     [0.785427611076041],
     [0.249771038138782],
     [0.458479066030454],
     [0.0849464352741645],
     [0.68569015634999],
     [0.843193210921686],
     [0.584008221345262],
     [0.305003310610274],
     [0.841749153641752],
     [0.109143531652928],
     [0.253824312708569],
     [0.541118863022725],
     [0.215100368347263],
     [0.30094697415742],
     [0.124891705694389],
     [0.95160191793835],
     [0.122995441162031],
     [0.371560687760594],
     [0.498361786980485],
     [0.386869493621205],
     [0.914889550447523],
     [0.549982122116114],
     [0.169231697337467],
     [0.27723228012112],
     [0.0403788799050041],
     [0.728129450917736],
     [0.565621141558351],
     [0.37304872022865],
     [0.29085597364271],
     [0.623828000904499],
     [0.781114095491108],
     [0.45115536985053],
     [0.840619753174396],
     [0.779528952521661],
     [0.763890826433342],
     [0.144202176231522],
     [0.739039125343762],
     [0.314433418546579],
     [0.922082078104494],
     [0.305086360621727],
     [0.906567200321731],
     [0.927637439427602],
     [0.48040412579711],
     [0.113333901662879],
     [0.200899835192891],
     [0.640881630154377],
     [0.654280386580999],
     [0.484934531437895],
     [0.442472631843796],
     [0.319612794140275],
     [0.601135621445454],
     [0.542992919845704],
     [0.079528466715405],
     [0.628525054299146],
     [0.248598141333419],
     [0.0464025871546216],
     [0.576936492551326],
     [0.79541715624279],
     [0.767938405584141],
     [0.463561410503381],
     [0.277375379327134],
     [0.983036390741992],
     [0.687727830430475],
     [0.170263606402586],
     [0.0389560342235268],
     [0.790429771032387],
     [0.309231273289787],
     [0.480701361083179],
     [0.0932871604628215],
     [0.630573909079671],
     [0.395500702715789],
     [0.784751084788699],
     [0.627624849064217],
     [0.915629292753131],
     [0.734520007700944],
     [0.287962604067138]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.43222192])],
     [array([0.44577984])],
     [array([0.44752405])],
     [array([0.4165089])],
     [array([0.73846527])],
     [array([0.22506009])],
     [array([0.19928453])],
     [array([0.6562829])],
     [array([0.77376606])],
     [array([0.3603578])],
     [array([0.74007432])],
     [array([0.22460976])],
     [array([0.55976005])],
     [array([0.61196759])],
     [array([0.62132114])],
     [array([0.21607293])],
     [array([0.55432213])],
     [array([0.47494978])],
     [array([0.33607211])],
     [array([0.00361413])],
     [array([0.60563465])],
     [array([0.76343975])],
     [array([0.50901873])],
     [array([0.85383948])],
     [array([0.21919231])],
     [array([0.88392458])],
     [array([0.76501948])],
     [array([0.87741746])],
     [array([0.39056722])],
     [array([0.32737136])],
     [array([0.41210447])],
     [array([0.47832382])],
     [array([0.750156])],
     [array([0.16351004])],
     [array([0.7590457])],
     [array([0.21644764])],
     [array([0.20566281])],
     [array([0.68140929])],
     [array([0.3497617])],
     [array([0.87780739])],
     [array([0.83782801])],
     [array([0.4845686])],
     [array([0.4248771])],
     [array([0.24310685])],
     [array([0.89405401])],
     [array([0.0315076])],
     [array([0.30963529])],
     [array([0.53867057])],
     [array([0.35639945])],
     [array([0.59461537])],
     [array([0.91460867])],
     [array([0.56611305])],
     [array([0.05085282])],
     [array([0.8882688])],
     [array([0.69569788])],
     [array([0.85236565])],
     [array([0.26151472])],
     [array([0.74655362])],
     [array([0.68997095])],
     [array([0.30861168])],
     [array([0.63087756])],
     [array([0.22878419])],
     [array([0.46845345])],
     [array([0.82603786])],
     [array([0.88978068])],
     [array([0.77919529])],
     [array([0.35570831])],
     [array([0.57846229])],
     [array([0.27844525])],
     [array([0.75868255])],
     [array([0.99498746])],
     [array([0.20684615])],
     [array([0.05768896])],
     [array([0.61753417])],
     [array([0.12604724])],
     [array([0.96926135])],
     [array([0.95798042])],
     [array([0.30257758])],
     [array([0.6167471])],
     [array([0.02698055])],
     [array([0.05269292])],
     [array([0.21824304])],
     [array([0.05267669])],
     [array([0.27445985])],
     [array([0.82282769])],
     [array([0.06629461])],
     [array([0.26152495])],
     [array([0.50310875])],
     [array([0.98325929])],
     [array([0.96359024])],
     [array([0.35332623])],
     [array([0.23255928])],
     [array([0.11530655])],
     [array([0.02483653])],
     [array([0.55349929])],
     [array([0.01621799])],
     [array([0.89019609])],
     [array([0.39458311])],
     [array([0.7837193])],
     [array([0.51787301])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.43222192, 0.44577984, 0.44752405, 0.4165089 , 0.73846527,
           0.22506009, 0.19928453, 0.6562829 , 0.77376606, 0.3603578 ,
           0.74007432, 0.22460976, 0.55976005, 0.61196759, 0.62132114,
           0.21607293, 0.55432213, 0.47494978, 0.33607211, 0.00361413,
           0.60563465, 0.76343975, 0.50901873, 0.85383948, 0.21919231,
           0.88392458, 0.76501948, 0.87741746, 0.39056722, 0.32737136,
           0.41210447, 0.47832382, 0.750156  , 0.16351004, 0.7590457 ,
           0.21644764, 0.20566281, 0.68140929, 0.3497617 , 0.87780739,
           0.83782801, 0.4845686 , 0.4248771 , 0.24310685, 0.89405401,
           0.0315076 , 0.30963529, 0.53867057, 0.35639945, 0.59461537,
           0.91460867, 0.56611305, 0.05085282, 0.8882688 , 0.69569788,
           0.85236565, 0.26151472, 0.74655362, 0.68997095, 0.30861168,
           0.63087756, 0.22878419, 0.46845345, 0.82603786, 0.88978068,
           0.77919529, 0.35570831, 0.57846229, 0.27844525, 0.75868255,
           0.99498746, 0.20684615, 0.05768896, 0.61753417, 0.12604724,
           0.96926135, 0.95798042, 0.30257758, 0.6167471 , 0.02698055,
           0.05269292, 0.21824304, 0.05267669, 0.27445985, 0.82282769,
           0.06629461, 0.26152495, 0.50310875, 0.98325929, 0.96359024,
           0.35332623, 0.23255928, 0.11530655, 0.02483653, 0.55349929,
           0.01621799, 0.89019609, 0.39458311, 0.7837193 , 0.51787301])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.90794846, 0.00503679, 0.62742943, 0.52312356, 0.82472998,
              0.66734426, 0.33899502, 0.57614487, 0.82480992, 0.37849132,
              0.22849876, 0.43320668, 0.18459506, 0.5139498 , 0.81923018,
              0.98206734, 0.95783697, 0.86708852, 0.38559568, 0.62509799,
              0.96616726, 0.95723525, 0.04415232, 0.92878908, 0.78542761,
              0.24977104, 0.45847907, 0.08494644, 0.68569016, 0.84319321,
              0.58400822, 0.30500331, 0.84174915, 0.10914353, 0.25382431,
              0.54111886, 0.21510037, 0.30094697, 0.12489171, 0.95160192,
              0.12299544, 0.37156069, 0.49836179, 0.38686949, 0.91488955,
              0.54998212, 0.1692317 , 0.27723228, 0.04037888, 0.72812945,
              0.56562114, 0.37304872, 0.29085597, 0.623828  , 0.7811141 ,
              0.45115537, 0.84061975, 0.77952895, 0.76389083, 0.14420218,
              0.73903913, 0.31443342, 0.92208208, 0.30508636, 0.9065672 ,
              0.92763744, 0.48040413, 0.1133339 , 0.20089984, 0.64088163,
              0.65428039, 0.48493453, 0.44247263, 0.31961279, 0.60113562,
              0.54299292, 0.07952847, 0.62852505, 0.24859814, 0.04640259,
              0.57693649, 0.79541716, 0.76793841, 0.46356141, 0.27737538,
              0.98303639, 0.68772783, 0.17026361, 0.03895603, 0.79042977,
              0.30923127, 0.48070136, 0.09328716, 0.63057391, 0.3955007 ,
              0.78475108, 0.62762485, 0.91562929, 0.73452001, 0.2879626 ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.31947514, 0.93807609, 0.71887849, 0.23987645, 0.20844129,
              0.48994945, 0.70982258, 0.44476971, 0.17854732, 0.63534472,
              0.20831974, 0.53145665, 0.23424662, 0.35545223, 0.47415044,
              0.93054767, 0.0762625 , 0.92966208, 0.35565571, 0.03550431,
              0.64218128, 0.11775935, 0.01480465, 0.25524702, 0.42878345,
              0.94010306, 0.90968753, 0.00675578, 0.30420503, 0.35222864,
              0.52000996, 0.35315356, 0.94563963, 0.50629141, 0.06715653,
              0.02141113, 0.84327501, 0.81973785, 0.6488907 , 0.18952195,
              0.82708028, 0.21448981, 0.58368942, 0.26730627, 0.71310967,
              0.9551002 , 0.38587254, 0.13643279, 0.43766167, 0.23554839,
              0.45665084, 0.3552787 , 0.24985537, 0.11924488, 0.79249409,
              0.59695549, 0.8494842 , 0.30884722, 0.291891  , 0.24232528,
              0.31371145, 0.76009157, 0.42654398, 0.2159222 , 0.02188542,
              0.15760781, 0.68201507, 0.45570745, 0.81193218, 0.76801169,
              0.8951203 , 0.6659908 , 0.1202405 , 0.30254417, 0.89382174,
              0.74476672, 0.9990294 , 0.45581   , 0.40976326, 0.45827038,
              0.34391573, 0.40484866, 0.10537477, 0.92055281, 0.25548405,
              0.24567241, 0.58106963, 0.22423071, 0.41198465, 0.33546747,
              0.33377825, 0.87958609, 0.87293596, 0.02189923, 0.6983755 ,
              0.11306125, 0.78188947, 0.14348108, 0.25894292, 0.80051795])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.86585536, 0.42839834, 0.28608548, 0.89568497, 0.01375712,
              0.13288218, 0.83159506, 0.59697181, 0.27462217, 0.61809028,
              0.79177981, 0.14277967, 0.03474285, 0.60221503, 0.13913424,
              0.19285504, 0.48149342, 0.87054323, 0.97350163, 0.41264634,
              0.2489728 , 0.8266733 , 0.44145623, 0.84179435, 0.56100448,
              0.23974329, 0.80488512, 0.62108692, 0.18987719, 0.63013318,
              0.19885574, 0.61435693, 0.29620711, 0.46447655, 0.09376855,
              0.5563534 , 0.02405274, 0.15458421, 0.31571279, 0.25825371,
              0.2536504 , 0.69677977, 0.80722348, 0.05505862, 0.39536492,
              0.10819784, 0.83606421, 0.84812049, 0.59877106, 0.41532504,
              0.037753  , 0.79247878, 0.51772879, 0.27790846, 0.90965646,
              0.70877526, 0.64088684, 0.22117591, 0.04334066, 0.47378745,
              0.10642195, 0.76359001, 0.20252944, 0.57166941, 0.39039503,
              0.34252398, 0.70559145, 0.36502475, 0.63916313, 0.03209371,
              0.80016692, 0.12865717, 0.37024307, 0.0340033 , 0.25814248,
              0.3519298 , 0.38252752, 0.95318191, 0.03996877, 0.98714564,
              0.24988391, 0.7718402 , 0.06344869, 0.7303537 , 0.32741777,
              0.52724087, 0.40565677, 0.2759819 , 0.07461433, 0.74173181,
              0.65661646, 0.62657441, 0.46939501, 0.89442858, 0.22685553,
              0.59803014, 0.93588455, 0.22707213, 0.48006834, 0.41208984])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.53712692, 0.12355721, 0.8570964 , 0.72968578, 0.94191198,
              0.30585951, 0.15102573, 0.16546995, 0.97233693, 0.06052447,
              0.34314421, 0.28771485, 0.41749946, 0.63568938, 0.73845286,
              0.72271309, 0.10271667, 0.38334735, 0.86453357, 0.79227903,
              0.03373364, 0.54530829, 0.24054354, 0.75952772, 0.74502287,
              0.27835021, 0.60073059, 0.70951011, 0.56598952, 0.40315896,
              0.67171861, 0.81421884, 0.60995818, 0.56691005, 0.84335114,
              0.39812886, 0.39846471, 0.87300486, 0.7213079 , 0.04585894,
              0.67977754, 0.47542329, 0.64086734, 0.77231441, 0.50123928,
              0.12626936, 0.50056732, 0.93078113, 0.90483542, 0.42592676,
              0.16132463, 0.90059924, 0.41993118, 0.91989094, 0.94608937,
              0.17658868, 0.96792131, 0.93341967, 0.16636317, 0.30186762,
              0.65347518, 0.64040725, 0.76350246, 0.43168075, 0.79894   ,
              0.9361613 , 0.50946321, 0.49141098, 0.99746242, 0.28911929,
              0.75768927, 0.00487635, 0.21124516, 0.73602546, 0.5886976 ,
              0.75695507, 0.0076603 , 0.50428957, 0.49661365, 0.74405816,
              0.84793774, 0.13462773, 0.82380602, 0.61991596, 0.82547665,
              0.37561668, 0.67526211, 0.78697001, 0.6173405 , 0.67212133,
              0.08717873, 0.26661056, 0.63027867, 0.84755648, 0.09284431,
              0.80455194, 0.921572  , 0.83977397, 0.01509583, 0.00912645])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.90794846, 0.00503679, 0.62742943, 0.52312356, 0.82472998,
              0.66734426, 0.33899502, 0.57614487, 0.82480992, 0.37849132,
              0.22849876, 0.43320668, 0.18459506, 0.5139498 , 0.81923018,
              0.98206734, 0.95783697, 0.86708852, 0.38559568, 0.62509799,
              0.96616726, 0.95723525, 0.04415232, 0.92878908, 0.78542761,
              0.24977104, 0.45847907, 0.08494644, 0.68569016, 0.84319321,
              0.58400822, 0.30500331, 0.84174915, 0.10914353, 0.25382431,
              0.54111886, 0.21510037, 0.30094697, 0.12489171, 0.95160192,
              0.12299544, 0.37156069, 0.49836179, 0.38686949, 0.91488955,
              0.54998212, 0.1692317 , 0.27723228, 0.04037888, 0.72812945,
              0.56562114, 0.37304872, 0.29085597, 0.623828  , 0.7811141 ,
              0.45115537, 0.84061975, 0.77952895, 0.76389083, 0.14420218,
              0.73903913, 0.31443342, 0.92208208, 0.30508636, 0.9065672 ,
              0.92763744, 0.48040413, 0.1133339 , 0.20089984, 0.64088163,
              0.65428039, 0.48493453, 0.44247263, 0.31961279, 0.60113562,
              0.54299292, 0.07952847, 0.62852505, 0.24859814, 0.04640259,
              0.57693649, 0.79541716, 0.76793841, 0.46356141, 0.27737538,
              0.98303639, 0.68772783, 0.17026361, 0.03895603, 0.79042977,
              0.30923127, 0.48070136, 0.09328716, 0.63057391, 0.3955007 ,
              0.78475108, 0.62762485, 0.91562929, 0.73452001, 0.2879626 ])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.31947514, 0.93807609, 0.71887849, 0.23987645, 0.20844129,
              0.48994945, 0.70982258, 0.44476971, 0.17854732, 0.63534472,
              0.20831974, 0.53145665, 0.23424662, 0.35545223, 0.47415044,
              0.93054767, 0.0762625 , 0.92966208, 0.35565571, 0.03550431,
              0.64218128, 0.11775935, 0.01480465, 0.25524702, 0.42878345,
              0.94010306, 0.90968753, 0.00675578, 0.30420503, 0.35222864,
              0.52000996, 0.35315356, 0.94563963, 0.50629141, 0.06715653,
              0.02141113, 0.84327501, 0.81973785, 0.6488907 , 0.18952195,
              0.82708028, 0.21448981, 0.58368942, 0.26730627, 0.71310967,
              0.9551002 , 0.38587254, 0.13643279, 0.43766167, 0.23554839,
              0.45665084, 0.3552787 , 0.24985537, 0.11924488, 0.79249409,
              0.59695549, 0.8494842 , 0.30884722, 0.291891  , 0.24232528,
              0.31371145, 0.76009157, 0.42654398, 0.2159222 , 0.02188542,
              0.15760781, 0.68201507, 0.45570745, 0.81193218, 0.76801169,
              0.8951203 , 0.6659908 , 0.1202405 , 0.30254417, 0.89382174,
              0.74476672, 0.9990294 , 0.45581   , 0.40976326, 0.45827038,
              0.34391573, 0.40484866, 0.10537477, 0.92055281, 0.25548405,
              0.24567241, 0.58106963, 0.22423071, 0.41198465, 0.33546747,
              0.33377825, 0.87958609, 0.87293596, 0.02189923, 0.6983755 ,
              0.11306125, 0.78188947, 0.14348108, 0.25894292, 0.80051795])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.86585536, 0.42839834, 0.28608548, 0.89568497, 0.01375712,
              0.13288218, 0.83159506, 0.59697181, 0.27462217, 0.61809028,
              0.79177981, 0.14277967, 0.03474285, 0.60221503, 0.13913424,
              0.19285504, 0.48149342, 0.87054323, 0.97350163, 0.41264634,
              0.2489728 , 0.8266733 , 0.44145623, 0.84179435, 0.56100448,
              0.23974329, 0.80488512, 0.62108692, 0.18987719, 0.63013318,
              0.19885574, 0.61435693, 0.29620711, 0.46447655, 0.09376855,
              0.5563534 , 0.02405274, 0.15458421, 0.31571279, 0.25825371,
              0.2536504 , 0.69677977, 0.80722348, 0.05505862, 0.39536492,
              0.10819784, 0.83606421, 0.84812049, 0.59877106, 0.41532504,
              0.037753  , 0.79247878, 0.51772879, 0.27790846, 0.90965646,
              0.70877526, 0.64088684, 0.22117591, 0.04334066, 0.47378745,
              0.10642195, 0.76359001, 0.20252944, 0.57166941, 0.39039503,
              0.34252398, 0.70559145, 0.36502475, 0.63916313, 0.03209371,
              0.80016692, 0.12865717, 0.37024307, 0.0340033 , 0.25814248,
              0.3519298 , 0.38252752, 0.95318191, 0.03996877, 0.98714564,
              0.24988391, 0.7718402 , 0.06344869, 0.7303537 , 0.32741777,
              0.52724087, 0.40565677, 0.2759819 , 0.07461433, 0.74173181,
              0.65661646, 0.62657441, 0.46939501, 0.89442858, 0.22685553,
              0.59803014, 0.93588455, 0.22707213, 0.48006834, 0.41208984])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.93196329, 0.20732688, 0.24453837, 0.29752397, 0.43271638,
              0.54602859, 0.59247921, 0.82587978, 0.07971471, 0.30981974,
              0.10426799, 0.45891015, 0.5838587 , 0.67946985, 0.12078095,
              0.0181942 , 0.60181866, 0.08645665, 0.11126135, 0.17756416,
              0.10149731, 0.15685527, 0.35351687, 0.2502879 , 0.11531262,
              0.48612598, 0.19249307, 0.67065402, 0.57769524, 0.9567803 ,
              0.17156978, 0.92280536, 0.01906011, 0.80225337, 0.86407071,
              0.35047029, 0.58809194, 0.37216442, 0.44679558, 0.18979406,
              0.43052103, 0.10763087, 0.12644156, 0.48062394, 0.76941846,
              0.61921648, 0.94514607, 0.93404603, 0.32201729, 0.32585768,
              0.55848636, 0.10102943, 0.69199461, 0.52872057, 0.88262055,
              0.7326094 , 0.83696234, 0.51452149, 0.12764522, 0.2969758 ,
              0.09801502, 0.93922275, 0.55311469, 0.73666825, 0.61040728,
              0.69066296, 0.38814117, 0.49254711, 0.4546969 , 0.02779024,
              0.29384045, 0.05337998, 0.57582671, 0.33593108, 0.87652078,
              0.29499193, 0.45922294, 0.51476481, 0.03263504, 0.31281184,
              0.33348625, 0.40069298, 0.03448433, 0.85606561, 0.74251743,
              0.21298039, 0.74974266, 0.73584917, 0.61306063, 0.83370447,
              0.61782337, 0.04247941, 0.45341234, 0.87019742, 0.45495016,
              0.04263796, 0.1616944 , 0.20994318, 0.23483467, 0.6889304 ])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.43222192, 0.44577984, 0.44752405, 0.4165089 , 0.73846527,
              0.22506009, 0.19928453, 0.6562829 , 0.77376606, 0.3603578 ,
              0.74007432, 0.22460976, 0.55976005, 0.61196759, 0.62132114,
              0.21607293, 0.55432213, 0.47494978, 0.33607211, 0.00361413,
              0.60563465, 0.76343975, 0.50901873, 0.85383948, 0.21919231,
              0.88392458, 0.76501948, 0.87741746, 0.39056722, 0.32737136,
              0.41210447, 0.47832382, 0.750156  , 0.16351004, 0.7590457 ,
              0.21644764, 0.20566281, 0.68140929, 0.3497617 , 0.87780739,
              0.83782801, 0.4845686 , 0.4248771 , 0.24310685, 0.89405401,
              0.0315076 , 0.30963529, 0.53867057, 0.35639945, 0.59461537,
              0.91460867, 0.56611305, 0.05085282, 0.8882688 , 0.69569788,
              0.85236565, 0.26151472, 0.74655362, 0.68997095, 0.30861168,
              0.63087756, 0.22878419, 0.46845345, 0.82603786, 0.88978068,
              0.77919529, 0.35570831, 0.57846229, 0.27844525, 0.75868255,
              0.99498746, 0.20684615, 0.05768896, 0.61753417, 0.12604724,
              0.96926135, 0.95798042, 0.30257758, 0.6167471 , 0.02698055,
              0.05269292, 0.21824304, 0.05267669, 0.27445985, 0.82282769,
              0.06629461, 0.26152495, 0.50310875, 0.98325929, 0.96359024,
              0.35332623, 0.23255928, 0.11530655, 0.02483653, 0.55349929,
              0.01621799, 0.89019609, 0.39458311, 0.7837193 , 0.51787301])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.11048869, 0.4045538 , 0.5347839 , 0.69115218, 0.46569113,
              0.85932797, 0.23475249, 0.42072169, 0.14107857, 0.07386014,
              0.70571679, 0.88961482, 0.6232617 , 0.45225599, 0.10959111,
              0.50444224, 0.73961491, 0.01348211, 0.81103558, 0.59209614,
              0.41060281, 0.99182037, 0.87106515, 0.46377402, 0.11294978,
              0.61242346, 0.14645462, 0.68469298, 0.89060457, 0.20755276,
              0.12806822, 0.91272731, 0.13979014, 0.9076395 , 0.59747622,
              0.3169446 , 0.79857777, 0.80322337, 0.46065828, 0.93146309,
              0.82433384, 0.01984996, 0.03846129, 0.2212528 , 0.92463805,
              0.62132452, 0.80513875, 0.73683357, 0.69898918, 0.27745344,
              0.91706228, 0.17976793, 0.02740698, 0.02577323, 0.68420545,
              0.80738554, 0.43866946, 0.14407028, 0.31179603, 0.62735576,
              0.78830322, 0.61498222, 0.09171052, 0.28830344, 0.21700759,
              0.04479714, 0.41459499, 0.03036646, 0.92580057, 0.36735055,
              0.78106044, 0.5248903 , 0.57214574, 0.72679866, 0.31837827,
              0.7503774 , 0.7186021 , 0.47084307, 0.50244734, 0.33145892,
              0.71715972, 0.9402016 , 0.56451679, 0.54730496, 0.69739452,
              0.78512234, 0.82745426, 0.52958313, 0.11767328, 0.10552195,
              0.25699746, 0.55591041, 0.58972728, 0.1686923 , 0.45198942,
              0.06467869, 0.79886681, 0.17021851, 0.03121704, 0.40708286])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.66056688, 0.7793165 , 0.3145507 , 0.87038625, 0.39647463,
              0.10439357, 0.55227568, 0.87953804, 0.53357949, 0.77103783,
              0.58981857, 0.6017044 , 0.38717713, 0.22222395, 0.46272639,
              0.77185564, 0.33627663, 0.66790771, 0.35929899, 0.16756918,
              0.5172815 , 0.4326676 , 0.50402846, 0.22073303, 0.17778021,
              0.84245357, 0.83709644, 0.20968094, 0.1126567 , 0.79938217,
              0.99760019, 0.82000081, 0.62607884, 0.15290893, 0.51092912,
              0.23389106, 0.71013271, 0.21101464, 0.81617617, 0.94762878,
              0.70060684, 0.12523451, 0.3133826 , 0.58768809, 0.45045899,
              0.47326882, 0.25511358, 0.69378311, 0.07214994, 0.4652357 ,
              0.00332891, 0.45827527, 0.39613297, 0.38176796, 0.24638796,
              0.34873316, 0.82568904, 0.14257526, 0.94862197, 0.51299291,
              0.93791906, 0.5644119 , 0.70125818, 0.66862331, 0.89934095,
              0.54442497, 0.92306838, 0.81378342, 0.07957639, 0.81454676,
              0.95824543, 0.88880719, 0.07080285, 0.72909407, 0.91485115,
              0.38978708, 0.83074323, 0.32217224, 0.6664722 , 0.60969229,
              0.85174428, 0.32346109, 0.98134561, 0.07879634, 0.1012528 ,
              0.16317306, 0.20221081, 0.44130432, 0.90692106, 0.34514192,
              0.6201869 , 0.20921787, 0.054524  , 0.50024816, 0.29339661,
              0.60703285, 0.47062585, 0.38360148, 0.5748314 , 0.66110167])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.24330131, 0.96963886, 0.79099169, 0.69310823, 0.73670815,
              0.28154762, 0.42351311, 0.24679227, 0.4420468 , 0.38164261,
              0.68138903, 0.53308033, 0.05422195, 0.40516509, 0.48925518,
              0.47242419, 0.92651006, 0.79552094, 0.05364175, 0.57058395,
              0.75695044, 0.00910545, 0.64070607, 0.55513279, 0.36992982,
              0.77035885, 0.58781603, 0.49845679, 0.55977139, 0.91612318,
              0.26558495, 0.39714527, 0.70595055, 0.03907253, 0.01363472,
              0.99248707, 0.76850391, 0.46686177, 0.62403906, 0.39541173,
              0.25632013, 0.3111068 , 0.24198118, 0.81817526, 0.10344604,
              0.27647243, 0.75428938, 0.67998521, 0.22390024, 0.77460863,
              0.71377969, 0.17806957, 0.41764722, 0.08334855, 0.47447612,
              0.0485882 , 0.50659817, 0.83777528, 0.49017689, 0.53184322,
              0.08766481, 0.70571159, 0.52666149, 0.12505688, 0.25910569,
              0.07342022, 0.34195152, 0.93120685, 0.87188477, 0.82026058,
              0.33762384, 0.88125631, 0.75722586, 0.92756396, 0.73861918,
              0.91111242, 0.6400609 , 0.38093252, 0.97250449, 0.76118242,
              0.76579413, 0.70203192, 0.04555432, 0.01703976, 0.32464714,
              0.59248584, 0.627189  , 0.9744064 , 0.96797733, 0.99958387,
              0.2288567 , 0.28738729, 0.59334836, 0.85527075, 0.61594662,
              0.12247198, 0.34751428, 0.86813789, 0.39933918, 0.29980996])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.43222192, 0.44577984, 0.44752405, 0.4165089 , 0.73846527,
              0.22506009, 0.19928453, 0.6562829 , 0.77376606, 0.3603578 ,
              0.74007432, 0.22460976, 0.55976005, 0.61196759, 0.62132114,
              0.21607293, 0.55432213, 0.47494978, 0.33607211, 0.00361413,
              0.60563465, 0.76343975, 0.50901873, 0.85383948, 0.21919231,
              0.88392458, 0.76501948, 0.87741746, 0.39056722, 0.32737136,
              0.41210447, 0.47832382, 0.750156  , 0.16351004, 0.7590457 ,
              0.21644764, 0.20566281, 0.68140929, 0.3497617 , 0.87780739,
              0.83782801, 0.4845686 , 0.4248771 , 0.24310685, 0.89405401,
              0.0315076 , 0.30963529, 0.53867057, 0.35639945, 0.59461537,
              0.91460867, 0.56611305, 0.05085282, 0.8882688 , 0.69569788,
              0.85236565, 0.26151472, 0.74655362, 0.68997095, 0.30861168,
              0.63087756, 0.22878419, 0.46845345, 0.82603786, 0.88978068,
              0.77919529, 0.35570831, 0.57846229, 0.27844525, 0.75868255,
              0.99498746, 0.20684615, 0.05768896, 0.61753417, 0.12604724,
              0.96926135, 0.95798042, 0.30257758, 0.6167471 , 0.02698055,
              0.05269292, 0.21824304, 0.05267669, 0.27445985, 0.82282769,
              0.06629461, 0.26152495, 0.50310875, 0.98325929, 0.96359024,
              0.35332623, 0.23255928, 0.11530655, 0.02483653, 0.55349929,
              0.01621799, 0.89019609, 0.39458311, 0.7837193 , 0.51787301])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.11048869, 0.4045538 , 0.5347839 , 0.69115218, 0.46569113,
              0.85932797, 0.23475249, 0.42072169, 0.14107857, 0.07386014,
              0.70571679, 0.88961482, 0.6232617 , 0.45225599, 0.10959111,
              0.50444224, 0.73961491, 0.01348211, 0.81103558, 0.59209614,
              0.41060281, 0.99182037, 0.87106515, 0.46377402, 0.11294978,
              0.61242346, 0.14645462, 0.68469298, 0.89060457, 0.20755276,
              0.12806822, 0.91272731, 0.13979014, 0.9076395 , 0.59747622,
              0.3169446 , 0.79857777, 0.80322337, 0.46065828, 0.93146309,
              0.82433384, 0.01984996, 0.03846129, 0.2212528 , 0.92463805,
              0.62132452, 0.80513875, 0.73683357, 0.69898918, 0.27745344,
              0.91706228, 0.17976793, 0.02740698, 0.02577323, 0.68420545,
              0.80738554, 0.43866946, 0.14407028, 0.31179603, 0.62735576,
              0.78830322, 0.61498222, 0.09171052, 0.28830344, 0.21700759,
              0.04479714, 0.41459499, 0.03036646, 0.92580057, 0.36735055,
              0.78106044, 0.5248903 , 0.57214574, 0.72679866, 0.31837827,
              0.7503774 , 0.7186021 , 0.47084307, 0.50244734, 0.33145892,
              0.71715972, 0.9402016 , 0.56451679, 0.54730496, 0.69739452,
              0.78512234, 0.82745426, 0.52958313, 0.11767328, 0.10552195,
              0.25699746, 0.55591041, 0.58972728, 0.1686923 , 0.45198942,
              0.06467869, 0.79886681, 0.17021851, 0.03121704, 0.40708286])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.66056688, 0.7793165 , 0.3145507 , 0.87038625, 0.39647463,
              0.10439357, 0.55227568, 0.87953804, 0.53357949, 0.77103783,
              0.58981857, 0.6017044 , 0.38717713, 0.22222395, 0.46272639,
              0.77185564, 0.33627663, 0.66790771, 0.35929899, 0.16756918,
              0.5172815 , 0.4326676 , 0.50402846, 0.22073303, 0.17778021,
              0.84245357, 0.83709644, 0.20968094, 0.1126567 , 0.79938217,
              0.99760019, 0.82000081, 0.62607884, 0.15290893, 0.51092912,
              0.23389106, 0.71013271, 0.21101464, 0.81617617, 0.94762878,
              0.70060684, 0.12523451, 0.3133826 , 0.58768809, 0.45045899,
              0.47326882, 0.25511358, 0.69378311, 0.07214994, 0.4652357 ,
              0.00332891, 0.45827527, 0.39613297, 0.38176796, 0.24638796,
              0.34873316, 0.82568904, 0.14257526, 0.94862197, 0.51299291,
              0.93791906, 0.5644119 , 0.70125818, 0.66862331, 0.89934095,
              0.54442497, 0.92306838, 0.81378342, 0.07957639, 0.81454676,
              0.95824543, 0.88880719, 0.07080285, 0.72909407, 0.91485115,
              0.38978708, 0.83074323, 0.32217224, 0.6664722 , 0.60969229,
              0.85174428, 0.32346109, 0.98134561, 0.07879634, 0.1012528 ,
              0.16317306, 0.20221081, 0.44130432, 0.90692106, 0.34514192,
              0.6201869 , 0.20921787, 0.054524  , 0.50024816, 0.29339661,
              0.60703285, 0.47062585, 0.38360148, 0.5748314 , 0.66110167])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.89711832, 0.5259578 , 0.57594659, 0.0578135 , 0.85064212,
              0.0280814 , 0.33539875, 0.79452179, 0.25007491, 0.40456173,
              0.16590253, 0.7168451 , 0.4425787 , 0.89251771, 0.56745717,
              0.39124981, 0.09583679, 0.11372961, 0.11954148, 0.39840278,
              0.59051628, 0.34069811, 0.72431673, 0.28280963, 0.14371726,
              0.0126012 , 0.34104899, 0.73136509, 0.86734978, 0.80118613,
              0.66836493, 0.20482713, 0.35549089, 0.92170932, 0.50538861,
              0.04622684, 0.91070708, 0.25466055, 0.8844433 , 0.91852198,
              0.70958609, 0.63523389, 0.29893063, 0.37740157, 0.82564048,
              0.68302051, 0.89505165, 0.26767528, 0.6833119 , 0.00933285,
              0.65526467, 0.60559868, 0.70720245, 0.50657718, 0.74055737,
              0.56105457, 0.16344695, 0.44216649, 0.11637724, 0.9747669 ,
              0.18231212, 0.56826895, 0.01348106, 0.00138324, 0.56933323,
              0.85761625, 0.51803225, 0.86454539, 0.92138349, 0.33217382,
              0.01692331, 0.66520687, 0.51012261, 0.76844857, 0.74900084,
              0.73108049, 0.33282154, 0.20868632, 0.56994318, 0.43147938,
              0.71035919, 0.2429326 , 0.00357231, 0.62608932, 0.24033241,
              0.89879808, 0.11476429, 0.21448424, 0.55537749, 0.09948239,
              0.96729997, 0.65411333, 0.32759558, 0.85024781, 0.38428511,
              0.02853364, 0.12465684, 0.42115519, 0.73620023, 0.72367827])}]]


