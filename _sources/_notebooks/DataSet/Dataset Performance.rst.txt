
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='fbb64a62-bcda-440c-b93e-c7ece0f81d33'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='b0a5c3d6-a81b-4751-b7e4-6a454ca3eacb'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.08041829028624],
     [0.532304834957544],
     [0.0669102367117477],
     [0.204701454029115],
     [0.790392857035014],
     [0.213704013842518],
     [0.0759142409894327],
     [0.903327081871623],
     [0.273791856153118],
     [0.973029696616603],
     [0.499640238870976],
     [0.814898515581871],
     [0.703512763967223],
     [0.869964456412688],
     [0.268183819287918],
     [0.778034608145708],
     [0.237140302592375],
     [0.376719300024554],
     [0.867526415452147],
     [0.995693238534203],
     [0.147815487204748],
     [0.410627373674482],
     [0.616825521348445],
     [0.0756559439375125],
     [0.0747446763471268],
     [0.316590982728755],
     [0.894031239978762],
     [0.33513308739205],
     [0.892602108696593],
     [0.036405184431368],
     [0.514192279888157],
     [0.233974796510329],
     [0.844531109986944],
     [0.725679657542435],
     [0.779926096377219],
     [0.457886334230454],
     [0.817373109570669],
     [0.132845039048275],
     [0.943315242371918],
     [0.824354355574504],
     [0.807919341438404],
     [0.468742315876591],
     [0.105950232431036],
     [0.964159986922787],
     [0.408357532703885],
     [0.654069016573992],
     [0.453627880355703],
     [0.504998053915346],
     [0.49269983880124],
     [0.59304474121071],
     [0.172871935004531],
     [0.984815007360736],
     [0.16014406287596],
     [0.661580930806153],
     [0.654270706071071],
     [0.326250515353107],
     [0.572854415377827],
     [0.723812089009719],
     [0.502815737423993],
     [0.621732947665199],
     [0.737999903183036],
     [0.20088676110669],
     [0.811772797907174],
     [0.266529622095364],
     [0.046684066959482],
     [0.0826118866985713],
     [0.620567758111897],
     [0.701924895663289],
     [0.359578318104721],
     [0.0782278113816275],
     [0.5252947231969],
     [0.834027260012789],
     [0.379551971387383],
     [0.999591688117491],
     [0.583308452754737],
     [0.951534358182006],
     [0.281602735115957],
     [0.455505733174191],
     [0.714614115726192],
     [0.825973069754011],
     [0.851373144141198],
     [0.0977889482063121],
     [0.523122202874749],
     [0.126898873420122],
     [0.659819812238188],
     [0.49191609305033],
     [0.932529174970669],
     [0.645352609793456],
     [0.201868070936298],
     [0.800800467445278],
     [0.605079905663279],
     [0.276385716506631],
     [0.0940838503884486],
     [0.35923948397233],
     [0.678080897821934],
     [0.0824833545980527],
     [0.858429380224654],
     [0.892318031242307],
     [0.60643495761978],
     [0.0609073905411414]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.26065799])],
     [array([0.26301113])],
     [array([0.02554656])],
     [array([0.23194166])],
     [array([0.38885633])],
     [array([0.15610255])],
     [array([0.92299937])],
     [array([0.22169901])],
     [array([0.09520303])],
     [array([0.34778543])],
     [array([0.2706791])],
     [array([0.87216883])],
     [array([0.68043916])],
     [array([0.56115554])],
     [array([0.62428797])],
     [array([0.36780219])],
     [array([0.45889275])],
     [array([0.12509619])],
     [array([0.18295477])],
     [array([0.83080424])],
     [array([0.59110701])],
     [array([0.33967012])],
     [array([0.05253662])],
     [array([0.72166379])],
     [array([0.25700584])],
     [array([0.897735])],
     [array([0.85925959])],
     [array([0.02732332])],
     [array([0.6617129])],
     [array([0.27409106])],
     [array([0.47935154])],
     [array([0.52404539])],
     [array([0.33713762])],
     [array([0.00228845])],
     [array([0.4775796])],
     [array([0.496494])],
     [array([0.98554432])],
     [array([0.00299223])],
     [array([0.11712526])],
     [array([0.88398116])],
     [array([0.71713632])],
     [array([0.68883521])],
     [array([0.30234816])],
     [array([0.36157541])],
     [array([0.69325719])],
     [array([0.58226138])],
     [array([0.90530773])],
     [array([0.7742245])],
     [array([0.18516461])],
     [array([0.60319907])],
     [array([0.58584106])],
     [array([0.39371324])],
     [array([0.20583858])],
     [array([0.04704521])],
     [array([0.83409309])],
     [array([0.5757822])],
     [array([0.19340028])],
     [array([0.98732656])],
     [array([0.94584058])],
     [array([0.37607402])],
     [array([0.57626305])],
     [array([0.48564568])],
     [array([0.4682578])],
     [array([0.67190596])],
     [array([0.56527749])],
     [array([0.65282942])],
     [array([0.33050479])],
     [array([0.74654555])],
     [array([0.05633864])],
     [array([0.29621142])],
     [array([0.94065331])],
     [array([0.33187248])],
     [array([0.1322111])],
     [array([0.15758681])],
     [array([0.57496264])],
     [array([0.11422513])],
     [array([0.39857835])],
     [array([0.72030886])],
     [array([0.91578946])],
     [array([0.8843912])],
     [array([0.71593513])],
     [array([0.06139143])],
     [array([0.58802122])],
     [array([0.86810318])],
     [array([0.13269813])],
     [array([0.59091538])],
     [array([0.13295133])],
     [array([0.04287536])],
     [array([0.39909309])],
     [array([0.25788415])],
     [array([0.0507911])],
     [array([0.36452379])],
     [array([0.88321439])],
     [array([0.59010627])],
     [array([0.89510943])],
     [array([0.28966851])],
     [array([0.70264243])],
     [array([0.57125591])],
     [array([0.4079539])],
     [array([0.33758788])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.26065799, 0.26301113, 0.02554656, 0.23194166, 0.38885633,
           0.15610255, 0.92299937, 0.22169901, 0.09520303, 0.34778543,
           0.2706791 , 0.87216883, 0.68043916, 0.56115554, 0.62428797,
           0.36780219, 0.45889275, 0.12509619, 0.18295477, 0.83080424,
           0.59110701, 0.33967012, 0.05253662, 0.72166379, 0.25700584,
           0.897735  , 0.85925959, 0.02732332, 0.6617129 , 0.27409106,
           0.47935154, 0.52404539, 0.33713762, 0.00228845, 0.4775796 ,
           0.496494  , 0.98554432, 0.00299223, 0.11712526, 0.88398116,
           0.71713632, 0.68883521, 0.30234816, 0.36157541, 0.69325719,
           0.58226138, 0.90530773, 0.7742245 , 0.18516461, 0.60319907,
           0.58584106, 0.39371324, 0.20583858, 0.04704521, 0.83409309,
           0.5757822 , 0.19340028, 0.98732656, 0.94584058, 0.37607402,
           0.57626305, 0.48564568, 0.4682578 , 0.67190596, 0.56527749,
           0.65282942, 0.33050479, 0.74654555, 0.05633864, 0.29621142,
           0.94065331, 0.33187248, 0.1322111 , 0.15758681, 0.57496264,
           0.11422513, 0.39857835, 0.72030886, 0.91578946, 0.8843912 ,
           0.71593513, 0.06139143, 0.58802122, 0.86810318, 0.13269813,
           0.59091538, 0.13295133, 0.04287536, 0.39909309, 0.25788415,
           0.0507911 , 0.36452379, 0.88321439, 0.59010627, 0.89510943,
           0.28966851, 0.70264243, 0.57125591, 0.4079539 , 0.33758788])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.08041829, 0.53230483, 0.06691024, 0.20470145, 0.79039286,
              0.21370401, 0.07591424, 0.90332708, 0.27379186, 0.9730297 ,
              0.49964024, 0.81489852, 0.70351276, 0.86996446, 0.26818382,
              0.77803461, 0.2371403 , 0.3767193 , 0.86752642, 0.99569324,
              0.14781549, 0.41062737, 0.61682552, 0.07565594, 0.07474468,
              0.31659098, 0.89403124, 0.33513309, 0.89260211, 0.03640518,
              0.51419228, 0.2339748 , 0.84453111, 0.72567966, 0.7799261 ,
              0.45788633, 0.81737311, 0.13284504, 0.94331524, 0.82435436,
              0.80791934, 0.46874232, 0.10595023, 0.96415999, 0.40835753,
              0.65406902, 0.45362788, 0.50499805, 0.49269984, 0.59304474,
              0.17287194, 0.98481501, 0.16014406, 0.66158093, 0.65427071,
              0.32625052, 0.57285442, 0.72381209, 0.50281574, 0.62173295,
              0.7379999 , 0.20088676, 0.8117728 , 0.26652962, 0.04668407,
              0.08261189, 0.62056776, 0.7019249 , 0.35957832, 0.07822781,
              0.52529472, 0.83402726, 0.37955197, 0.99959169, 0.58330845,
              0.95153436, 0.28160274, 0.45550573, 0.71461412, 0.82597307,
              0.85137314, 0.09778895, 0.5231222 , 0.12689887, 0.65981981,
              0.49191609, 0.93252917, 0.64535261, 0.20186807, 0.80080047,
              0.60507991, 0.27638572, 0.09408385, 0.35923948, 0.6780809 ,
              0.08248335, 0.85842938, 0.89231803, 0.60643496, 0.06090739])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.95966667, 0.97982912, 0.97895893, 0.55294789, 0.76666828,
              0.53994173, 0.70259548, 0.40580951, 0.16665224, 0.29223718,
              0.61948472, 0.50890089, 0.32760619, 0.57360492, 0.24606846,
              0.77608862, 0.60087158, 0.22776978, 0.81793664, 0.18592216,
              0.23077419, 0.68584647, 0.43031376, 0.14701361, 0.82532294,
              0.6012641 , 0.98916665, 0.07450295, 0.12208274, 0.15588052,
              0.22914113, 0.85837274, 0.89176029, 0.98784267, 0.81635322,
              0.40400895, 0.44292023, 0.30190622, 0.35316223, 0.37180043,
              0.83573602, 0.4189221 , 0.80551325, 0.44736054, 0.72022801,
              0.87552141, 0.12151217, 0.89552663, 0.27995306, 0.3155854 ,
              0.9836819 , 0.07075328, 0.27831194, 0.12957879, 0.54805037,
              0.34723355, 0.85454332, 0.83972184, 0.50847112, 0.49656664,
              0.22042458, 0.48748764, 0.94517302, 0.94619491, 0.86271087,
              0.87407634, 0.52395583, 0.84045553, 0.67262407, 0.70752173,
              0.84486701, 0.98527021, 0.11646432, 0.32916818, 0.48134834,
              0.36187254, 0.16725353, 0.56108   , 0.29468537, 0.6239844 ,
              0.01831462, 0.87944353, 0.2682305 , 0.13689474, 0.55434623,
              0.95216053, 0.63656245, 0.85863102, 0.16491564, 0.05822366,
              0.73229712, 0.06888828, 0.05786789, 0.12498583, 0.30396537,
              0.47801307, 0.33121616, 0.08628562, 0.10191011, 0.51101083])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.03837287, 0.29975077, 0.82561532, 0.25327487, 0.43572774,
              0.69447691, 0.83598444, 0.20342282, 0.02549538, 0.0257448 ,
              0.80673116, 0.34893973, 0.98867134, 0.2673502 , 0.99870447,
              0.31183107, 0.75241421, 0.91444188, 0.47726051, 0.81466051,
              0.61486648, 0.4709228 , 0.58860707, 0.96043167, 0.08095629,
              0.0442166 , 0.34860958, 0.72629737, 0.20113989, 0.4881223 ,
              0.94798653, 0.90393675, 0.6002945 , 0.71045132, 0.83584741,
              0.7742546 , 0.35736031, 0.14112114, 0.93333998, 0.45671258,
              0.52463774, 0.05520372, 0.0542621 , 0.80771835, 0.79721038,
              0.10060572, 0.58828795, 0.90832784, 0.64506584, 0.15001769,
              0.82968619, 0.80527005, 0.9674011 , 0.72342394, 0.72182546,
              0.82388591, 0.84044761, 0.21760618, 0.29856742, 0.13587231,
              0.00538336, 0.63420477, 0.16113325, 0.90845837, 0.13681449,
              0.92105578, 0.82179472, 0.12582813, 0.78868944, 0.6368061 ,
              0.92856871, 0.29719596, 0.9038211 , 0.94206659, 0.34440637,
              0.49602169, 0.07188756, 0.8940285 , 0.92189735, 0.32971471,
              0.00510806, 0.07170584, 0.28611921, 0.16474682, 0.02905659,
              0.87340998, 0.2365069 , 0.9388387 , 0.05076754, 0.19126968,
              0.13115973, 0.62640115, 0.82690885, 0.3962248 , 0.25772633,
              0.35809951, 0.70660277, 0.90094366, 0.35568755, 0.26262207])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.40710718, 0.82557257, 0.47196002, 0.80957281, 0.84414037,
              0.16110403, 0.0367285 , 0.438172  , 0.27360482, 0.36193333,
              0.17438943, 0.53893658, 0.19933596, 0.65384042, 0.70203024,
              0.46855239, 0.61937506, 0.89530111, 0.93491583, 0.88354714,
              0.80856465, 0.95425668, 0.58689433, 0.47080646, 0.96275121,
              0.83316589, 0.75958788, 0.05058995, 0.49346264, 0.53033163,
              0.38132299, 0.32892166, 0.57801125, 0.53420139, 0.01901283,
              0.01648409, 0.003239  , 0.4525841 , 0.68954799, 0.05370079,
              0.87699914, 0.00389157, 0.07064582, 0.93081262, 0.30392774,
              0.03989938, 0.06090968, 0.90348368, 0.75189593, 0.2962728 ,
              0.29732836, 0.46881697, 0.69670461, 0.68840868, 0.19010871,
              0.27432494, 0.07515343, 0.28158584, 0.62221772, 0.10228844,
              0.87299861, 0.67536467, 0.54117245, 0.25245422, 0.16858463,
              0.03724306, 0.65386041, 0.21050897, 0.44544741, 0.37217556,
              0.69738749, 0.41433536, 0.93343363, 0.88009447, 0.91975596,
              0.26536541, 0.77298617, 0.38746793, 0.46791496, 0.45397523,
              0.60342777, 0.54755774, 0.84787691, 0.39838729, 0.60708514,
              0.94550331, 0.80726507, 0.00423951, 0.66943389, 0.84693887,
              0.79306611, 0.81573133, 0.28253473, 0.61195008, 0.92922507,
              0.6927542 , 0.1039822 , 0.96531951, 0.0827764 , 0.02993407])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.08041829, 0.53230483, 0.06691024, 0.20470145, 0.79039286,
              0.21370401, 0.07591424, 0.90332708, 0.27379186, 0.9730297 ,
              0.49964024, 0.81489852, 0.70351276, 0.86996446, 0.26818382,
              0.77803461, 0.2371403 , 0.3767193 , 0.86752642, 0.99569324,
              0.14781549, 0.41062737, 0.61682552, 0.07565594, 0.07474468,
              0.31659098, 0.89403124, 0.33513309, 0.89260211, 0.03640518,
              0.51419228, 0.2339748 , 0.84453111, 0.72567966, 0.7799261 ,
              0.45788633, 0.81737311, 0.13284504, 0.94331524, 0.82435436,
              0.80791934, 0.46874232, 0.10595023, 0.96415999, 0.40835753,
              0.65406902, 0.45362788, 0.50499805, 0.49269984, 0.59304474,
              0.17287194, 0.98481501, 0.16014406, 0.66158093, 0.65427071,
              0.32625052, 0.57285442, 0.72381209, 0.50281574, 0.62173295,
              0.7379999 , 0.20088676, 0.8117728 , 0.26652962, 0.04668407,
              0.08261189, 0.62056776, 0.7019249 , 0.35957832, 0.07822781,
              0.52529472, 0.83402726, 0.37955197, 0.99959169, 0.58330845,
              0.95153436, 0.28160274, 0.45550573, 0.71461412, 0.82597307,
              0.85137314, 0.09778895, 0.5231222 , 0.12689887, 0.65981981,
              0.49191609, 0.93252917, 0.64535261, 0.20186807, 0.80080047,
              0.60507991, 0.27638572, 0.09408385, 0.35923948, 0.6780809 ,
              0.08248335, 0.85842938, 0.89231803, 0.60643496, 0.06090739])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.95966667, 0.97982912, 0.97895893, 0.55294789, 0.76666828,
              0.53994173, 0.70259548, 0.40580951, 0.16665224, 0.29223718,
              0.61948472, 0.50890089, 0.32760619, 0.57360492, 0.24606846,
              0.77608862, 0.60087158, 0.22776978, 0.81793664, 0.18592216,
              0.23077419, 0.68584647, 0.43031376, 0.14701361, 0.82532294,
              0.6012641 , 0.98916665, 0.07450295, 0.12208274, 0.15588052,
              0.22914113, 0.85837274, 0.89176029, 0.98784267, 0.81635322,
              0.40400895, 0.44292023, 0.30190622, 0.35316223, 0.37180043,
              0.83573602, 0.4189221 , 0.80551325, 0.44736054, 0.72022801,
              0.87552141, 0.12151217, 0.89552663, 0.27995306, 0.3155854 ,
              0.9836819 , 0.07075328, 0.27831194, 0.12957879, 0.54805037,
              0.34723355, 0.85454332, 0.83972184, 0.50847112, 0.49656664,
              0.22042458, 0.48748764, 0.94517302, 0.94619491, 0.86271087,
              0.87407634, 0.52395583, 0.84045553, 0.67262407, 0.70752173,
              0.84486701, 0.98527021, 0.11646432, 0.32916818, 0.48134834,
              0.36187254, 0.16725353, 0.56108   , 0.29468537, 0.6239844 ,
              0.01831462, 0.87944353, 0.2682305 , 0.13689474, 0.55434623,
              0.95216053, 0.63656245, 0.85863102, 0.16491564, 0.05822366,
              0.73229712, 0.06888828, 0.05786789, 0.12498583, 0.30396537,
              0.47801307, 0.33121616, 0.08628562, 0.10191011, 0.51101083])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.03837287, 0.29975077, 0.82561532, 0.25327487, 0.43572774,
              0.69447691, 0.83598444, 0.20342282, 0.02549538, 0.0257448 ,
              0.80673116, 0.34893973, 0.98867134, 0.2673502 , 0.99870447,
              0.31183107, 0.75241421, 0.91444188, 0.47726051, 0.81466051,
              0.61486648, 0.4709228 , 0.58860707, 0.96043167, 0.08095629,
              0.0442166 , 0.34860958, 0.72629737, 0.20113989, 0.4881223 ,
              0.94798653, 0.90393675, 0.6002945 , 0.71045132, 0.83584741,
              0.7742546 , 0.35736031, 0.14112114, 0.93333998, 0.45671258,
              0.52463774, 0.05520372, 0.0542621 , 0.80771835, 0.79721038,
              0.10060572, 0.58828795, 0.90832784, 0.64506584, 0.15001769,
              0.82968619, 0.80527005, 0.9674011 , 0.72342394, 0.72182546,
              0.82388591, 0.84044761, 0.21760618, 0.29856742, 0.13587231,
              0.00538336, 0.63420477, 0.16113325, 0.90845837, 0.13681449,
              0.92105578, 0.82179472, 0.12582813, 0.78868944, 0.6368061 ,
              0.92856871, 0.29719596, 0.9038211 , 0.94206659, 0.34440637,
              0.49602169, 0.07188756, 0.8940285 , 0.92189735, 0.32971471,
              0.00510806, 0.07170584, 0.28611921, 0.16474682, 0.02905659,
              0.87340998, 0.2365069 , 0.9388387 , 0.05076754, 0.19126968,
              0.13115973, 0.62640115, 0.82690885, 0.3962248 , 0.25772633,
              0.35809951, 0.70660277, 0.90094366, 0.35568755, 0.26262207])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.37408948, 0.04315302, 0.17684392, 0.36070685, 0.58836322,
              0.73633508, 0.10204258, 0.45303179, 0.52763025, 0.25475669,
              0.86027171, 0.73316702, 0.21502499, 0.85592162, 0.19546388,
              0.43376657, 0.8489876 , 0.63241072, 0.66942492, 0.47757616,
              0.79788791, 0.81868821, 0.73759048, 0.13611654, 0.2627125 ,
              0.65368385, 0.74451693, 0.77853648, 0.31458557, 0.34559655,
              0.71400434, 0.68167769, 0.54539128, 0.54559268, 0.95991986,
              0.11461176, 0.13286926, 0.88593484, 0.68765356, 0.37667915,
              0.38298085, 0.41606478, 0.4990581 , 0.11681471, 0.62550987,
              0.85852763, 0.65318917, 0.32031964, 0.89418276, 0.90449283,
              0.29881464, 0.59580829, 0.31768932, 0.00265369, 0.35945124,
              0.64316263, 0.03321208, 0.50993175, 0.39233083, 0.18370947,
              0.49609075, 0.28254505, 0.47208586, 0.69668809, 0.7300382 ,
              0.86267422, 0.220731  , 0.56848224, 0.96100306, 0.45095394,
              0.57049246, 0.58853563, 0.83428689, 0.43460936, 0.04303144,
              0.44325078, 0.4992982 , 0.89229185, 0.5725517 , 0.6185157 ,
              0.59761677, 0.97016876, 0.86356236, 0.48507017, 0.15789657,
              0.95158929, 0.22172014, 0.21506472, 0.40516177, 0.21482557,
              0.39564978, 0.01148805, 0.16070459, 0.28999124, 0.26670452,
              0.80304647, 0.73052155, 0.16119197, 0.67152612, 0.48349212])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.26065799, 0.26301113, 0.02554656, 0.23194166, 0.38885633,
              0.15610255, 0.92299937, 0.22169901, 0.09520303, 0.34778543,
              0.2706791 , 0.87216883, 0.68043916, 0.56115554, 0.62428797,
              0.36780219, 0.45889275, 0.12509619, 0.18295477, 0.83080424,
              0.59110701, 0.33967012, 0.05253662, 0.72166379, 0.25700584,
              0.897735  , 0.85925959, 0.02732332, 0.6617129 , 0.27409106,
              0.47935154, 0.52404539, 0.33713762, 0.00228845, 0.4775796 ,
              0.496494  , 0.98554432, 0.00299223, 0.11712526, 0.88398116,
              0.71713632, 0.68883521, 0.30234816, 0.36157541, 0.69325719,
              0.58226138, 0.90530773, 0.7742245 , 0.18516461, 0.60319907,
              0.58584106, 0.39371324, 0.20583858, 0.04704521, 0.83409309,
              0.5757822 , 0.19340028, 0.98732656, 0.94584058, 0.37607402,
              0.57626305, 0.48564568, 0.4682578 , 0.67190596, 0.56527749,
              0.65282942, 0.33050479, 0.74654555, 0.05633864, 0.29621142,
              0.94065331, 0.33187248, 0.1322111 , 0.15758681, 0.57496264,
              0.11422513, 0.39857835, 0.72030886, 0.91578946, 0.8843912 ,
              0.71593513, 0.06139143, 0.58802122, 0.86810318, 0.13269813,
              0.59091538, 0.13295133, 0.04287536, 0.39909309, 0.25788415,
              0.0507911 , 0.36452379, 0.88321439, 0.59010627, 0.89510943,
              0.28966851, 0.70264243, 0.57125591, 0.4079539 , 0.33758788])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.3491333 , 0.81081913, 0.85471523, 0.56668865, 0.64357975,
              0.99183715, 0.31412523, 0.94519386, 0.142796  , 0.75216809,
              0.40318335, 0.28350641, 0.66782158, 0.94137467, 0.78230941,
              0.30584895, 0.13084379, 0.25428155, 0.26239056, 0.75467311,
              0.49440444, 0.75925608, 0.29408942, 0.23078271, 0.59973359,
              0.42936218, 0.58403962, 0.28322266, 0.65490244, 0.71218639,
              0.18957388, 0.72920633, 0.48184422, 0.22697834, 0.9051852 ,
              0.86356005, 0.34566735, 0.9135535 , 0.28689168, 0.18460134,
              0.94579771, 0.33652243, 0.81200725, 0.85094263, 0.53299659,
              0.55331803, 0.12561986, 0.60862424, 0.3437294 , 0.3393821 ,
              0.18697921, 0.88489615, 0.17795119, 0.00712117, 0.83440553,
              0.06340488, 0.66430698, 0.19969817, 0.17147963, 0.25167776,
              0.07830993, 0.1482999 , 0.40171746, 0.5246105 , 0.0454132 ,
              0.30801247, 0.41591402, 0.71051157, 0.42477273, 0.18033478,
              0.9728289 , 0.79258009, 0.71615354, 0.27060614, 0.68325227,
              0.24720873, 0.90578482, 0.58145146, 0.91797917, 0.16282522,
              0.8693663 , 0.37525544, 0.99663886, 0.74463731, 0.11732963,
              0.13990907, 0.20272807, 0.75953909, 0.76923828, 0.25031099,
              0.54881147, 0.09343419, 0.88731191, 0.46336306, 0.25597439,
              0.38487933, 0.7028746 , 0.33345529, 0.78357937, 0.64210582])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.44297315, 0.77395093, 0.54221447, 0.4310949 , 0.69566645,
              0.19047284, 0.49994687, 0.22175308, 0.06660223, 0.71528071,
              0.15814444, 0.9705052 , 0.59033887, 0.56979965, 0.20769567,
              0.63444006, 0.10047571, 0.61876913, 0.11906648, 0.83921651,
              0.74479498, 0.41955762, 0.12629824, 0.82525099, 0.80318922,
              0.95579683, 0.7956125 , 0.56333434, 0.60814081, 0.74967195,
              0.3699594 , 0.50789239, 0.75360709, 0.07976972, 0.28864319,
              0.58248414, 0.19810569, 0.17157525, 0.45721046, 0.25628224,
              0.20605795, 0.36041582, 0.83239525, 0.79852058, 0.20345978,
              0.79351192, 0.2197266 , 0.2517549 , 0.40530992, 0.90720261,
              0.64993699, 0.16104496, 0.18517037, 0.42555686, 0.52868757,
              0.58528492, 0.25653845, 0.57137188, 0.12917166, 0.4685425 ,
              0.38508322, 0.75314317, 0.11107861, 0.59775413, 0.68277884,
              0.55793096, 0.15538438, 0.45388115, 0.77218029, 0.66219436,
              0.03246741, 0.04603763, 0.8507548 , 0.53514534, 0.75175478,
              0.20523536, 0.85294945, 0.28803605, 0.59675958, 0.23997271,
              0.09022873, 0.87740799, 0.11417706, 0.02728392, 0.44228868,
              0.09847918, 0.07364025, 0.98865106, 0.14677425, 0.45122703,
              0.17066836, 0.05770862, 0.3496695 , 0.58701858, 0.59083784,
              0.98507776, 0.77851256, 0.09376397, 0.24000182, 0.88354244])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.56970573, 0.48995617, 0.9369915 , 0.86335249, 0.34574444,
              0.30950519, 0.93916883, 0.35140274, 0.5058395 , 0.62271433,
              0.77486098, 0.87409675, 0.3889807 , 0.12648725, 0.99782957,
              0.45032373, 0.24109659, 0.44848169, 0.73918225, 0.56124487,
              0.34060065, 0.77607431, 0.47366416, 0.19542217, 0.78312585,
              0.37728597, 0.58030232, 0.09483876, 0.31357601, 0.91431304,
              0.06000064, 0.83806732, 0.99374253, 0.76164021, 0.79341691,
              0.65402611, 0.65734504, 0.13185896, 0.64022966, 0.07768109,
              0.41175159, 0.59586757, 0.38277587, 0.23785708, 0.25460289,
              0.06050036, 0.81250481, 0.73637078, 0.49524173, 0.02111893,
              0.99412986, 0.58697048, 0.86127095, 0.97791406, 0.667768  ,
              0.83410409, 0.16640024, 0.38705047, 0.62315964, 0.02246563,
              0.55186399, 0.76142927, 0.921736  , 0.12855372, 0.18987059,
              0.83534583, 0.23731722, 0.68443851, 0.47030643, 0.69788562,
              0.52753797, 0.01339892, 0.65400502, 0.67563753, 0.35156188,
              0.8426398 , 0.44989222, 0.12987873, 0.84077781, 0.88178196,
              0.04531582, 0.54985011, 0.80601295, 0.7681792 , 0.26580396,
              0.05370634, 0.62294234, 0.01129557, 0.51928248, 0.92522759,
              0.21326508, 0.1710016 , 0.46319458, 0.87545685, 0.14328177,
              0.6446426 , 0.58522498, 0.05899045, 0.92493642, 0.59053743])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.26065799, 0.26301113, 0.02554656, 0.23194166, 0.38885633,
              0.15610255, 0.92299937, 0.22169901, 0.09520303, 0.34778543,
              0.2706791 , 0.87216883, 0.68043916, 0.56115554, 0.62428797,
              0.36780219, 0.45889275, 0.12509619, 0.18295477, 0.83080424,
              0.59110701, 0.33967012, 0.05253662, 0.72166379, 0.25700584,
              0.897735  , 0.85925959, 0.02732332, 0.6617129 , 0.27409106,
              0.47935154, 0.52404539, 0.33713762, 0.00228845, 0.4775796 ,
              0.496494  , 0.98554432, 0.00299223, 0.11712526, 0.88398116,
              0.71713632, 0.68883521, 0.30234816, 0.36157541, 0.69325719,
              0.58226138, 0.90530773, 0.7742245 , 0.18516461, 0.60319907,
              0.58584106, 0.39371324, 0.20583858, 0.04704521, 0.83409309,
              0.5757822 , 0.19340028, 0.98732656, 0.94584058, 0.37607402,
              0.57626305, 0.48564568, 0.4682578 , 0.67190596, 0.56527749,
              0.65282942, 0.33050479, 0.74654555, 0.05633864, 0.29621142,
              0.94065331, 0.33187248, 0.1322111 , 0.15758681, 0.57496264,
              0.11422513, 0.39857835, 0.72030886, 0.91578946, 0.8843912 ,
              0.71593513, 0.06139143, 0.58802122, 0.86810318, 0.13269813,
              0.59091538, 0.13295133, 0.04287536, 0.39909309, 0.25788415,
              0.0507911 , 0.36452379, 0.88321439, 0.59010627, 0.89510943,
              0.28966851, 0.70264243, 0.57125591, 0.4079539 , 0.33758788])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.3491333 , 0.81081913, 0.85471523, 0.56668865, 0.64357975,
              0.99183715, 0.31412523, 0.94519386, 0.142796  , 0.75216809,
              0.40318335, 0.28350641, 0.66782158, 0.94137467, 0.78230941,
              0.30584895, 0.13084379, 0.25428155, 0.26239056, 0.75467311,
              0.49440444, 0.75925608, 0.29408942, 0.23078271, 0.59973359,
              0.42936218, 0.58403962, 0.28322266, 0.65490244, 0.71218639,
              0.18957388, 0.72920633, 0.48184422, 0.22697834, 0.9051852 ,
              0.86356005, 0.34566735, 0.9135535 , 0.28689168, 0.18460134,
              0.94579771, 0.33652243, 0.81200725, 0.85094263, 0.53299659,
              0.55331803, 0.12561986, 0.60862424, 0.3437294 , 0.3393821 ,
              0.18697921, 0.88489615, 0.17795119, 0.00712117, 0.83440553,
              0.06340488, 0.66430698, 0.19969817, 0.17147963, 0.25167776,
              0.07830993, 0.1482999 , 0.40171746, 0.5246105 , 0.0454132 ,
              0.30801247, 0.41591402, 0.71051157, 0.42477273, 0.18033478,
              0.9728289 , 0.79258009, 0.71615354, 0.27060614, 0.68325227,
              0.24720873, 0.90578482, 0.58145146, 0.91797917, 0.16282522,
              0.8693663 , 0.37525544, 0.99663886, 0.74463731, 0.11732963,
              0.13990907, 0.20272807, 0.75953909, 0.76923828, 0.25031099,
              0.54881147, 0.09343419, 0.88731191, 0.46336306, 0.25597439,
              0.38487933, 0.7028746 , 0.33345529, 0.78357937, 0.64210582])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.44297315, 0.77395093, 0.54221447, 0.4310949 , 0.69566645,
              0.19047284, 0.49994687, 0.22175308, 0.06660223, 0.71528071,
              0.15814444, 0.9705052 , 0.59033887, 0.56979965, 0.20769567,
              0.63444006, 0.10047571, 0.61876913, 0.11906648, 0.83921651,
              0.74479498, 0.41955762, 0.12629824, 0.82525099, 0.80318922,
              0.95579683, 0.7956125 , 0.56333434, 0.60814081, 0.74967195,
              0.3699594 , 0.50789239, 0.75360709, 0.07976972, 0.28864319,
              0.58248414, 0.19810569, 0.17157525, 0.45721046, 0.25628224,
              0.20605795, 0.36041582, 0.83239525, 0.79852058, 0.20345978,
              0.79351192, 0.2197266 , 0.2517549 , 0.40530992, 0.90720261,
              0.64993699, 0.16104496, 0.18517037, 0.42555686, 0.52868757,
              0.58528492, 0.25653845, 0.57137188, 0.12917166, 0.4685425 ,
              0.38508322, 0.75314317, 0.11107861, 0.59775413, 0.68277884,
              0.55793096, 0.15538438, 0.45388115, 0.77218029, 0.66219436,
              0.03246741, 0.04603763, 0.8507548 , 0.53514534, 0.75175478,
              0.20523536, 0.85294945, 0.28803605, 0.59675958, 0.23997271,
              0.09022873, 0.87740799, 0.11417706, 0.02728392, 0.44228868,
              0.09847918, 0.07364025, 0.98865106, 0.14677425, 0.45122703,
              0.17066836, 0.05770862, 0.3496695 , 0.58701858, 0.59083784,
              0.98507776, 0.77851256, 0.09376397, 0.24000182, 0.88354244])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.74812938, 0.61286406, 0.9340812 , 0.87524659, 0.01077404,
              0.32381718, 0.71859886, 0.2972007 , 0.48345951, 0.39067618,
              0.08503552, 0.15967355, 0.54656943, 0.43390511, 0.03300888,
              0.9152605 , 0.2834908 , 0.72615577, 0.16360046, 0.5126229 ,
              0.84189494, 0.79180742, 0.07457733, 0.85748733, 0.21561964,
              0.99963591, 0.27839774, 0.99694603, 0.66381402, 0.78928413,
              0.11934977, 0.01097689, 0.75065372, 0.04831107, 0.1011422 ,
              0.76739939, 0.03968442, 0.45154628, 0.93371003, 0.05188614,
              0.33928383, 0.53874867, 0.25842001, 0.81550244, 0.61411019,
              0.27293953, 0.71853505, 0.52549554, 0.43257368, 0.04360998,
              0.18525023, 0.48240619, 0.89204037, 0.73499037, 0.70369894,
              0.58891327, 0.0411565 , 0.09475083, 0.29303939, 0.57753342,
              0.21434432, 0.50455502, 0.19902335, 0.54390884, 0.14788044,
              0.60974118, 0.4976376 , 0.99737385, 0.69609912, 0.0726234 ,
              0.16593521, 0.82196216, 0.74285773, 0.67346328, 0.62621517,
              0.18358624, 0.43191626, 0.52810267, 0.11749652, 0.36430381,
              0.07887285, 0.07697469, 0.87984464, 0.40216156, 0.13002866,
              0.59773924, 0.41400623, 0.32327431, 0.53869069, 0.73003536,
              0.52761312, 0.91370998, 0.80416007, 0.03622742, 0.03359245,
              0.79559291, 0.75151792, 0.12882375, 0.76502996, 0.63940767])}]]


