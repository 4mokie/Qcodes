
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='763cac43-adb1-4f6a-a512-f965aef7eb10'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='d7458527-e663-441e-9b8e-0bbef8dbf03c'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.161187862819888],
     [0.286007149927141],
     [0.77869571933443],
     [0.857920627219969],
     [0.913830305069585],
     [0.596793926573809],
     [0.901404794011646],
     [0.395247635070521],
     [0.0431963023994691],
     [0.637966114613973],
     [0.0607618317245003],
     [0.617668475760045],
     [0.509360603601556],
     [0.20496876323194],
     [0.697794854881327],
     [0.0579860375076474],
     [0.392321316704754],
     [0.489278526440541],
     [0.208859064492871],
     [0.311243927486228],
     [0.136683832693157],
     [0.374908489091925],
     [0.901912782372505],
     [0.498137503992659],
     [0.470548079489038],
     [0.85692798891941],
     [0.6578797858598],
     [0.223454009249495],
     [0.638418476891777],
     [0.376187777916834],
     [0.188650681789086],
     [0.329161597762996],
     [0.154078663314446],
     [0.0110729848213273],
     [0.549161757356244],
     [0.182083042431453],
     [0.0387044000054126],
     [0.345853283640774],
     [0.564577446969654],
     [0.605079154845403],
     [0.0823199657651648],
     [0.91953383581728],
     [0.0971857420473913],
     [0.888953933827366],
     [0.37995470041596],
     [0.595874602816185],
     [0.286516773864339],
     [0.887183180881423],
     [0.198055384575776],
     [0.649026406643349],
     [0.695094035944805],
     [0.985430556428761],
     [0.50841429766424],
     [0.424371697019348],
     [0.626149097708639],
     [0.807270048572301],
     [0.457754150582753],
     [0.516899577049328],
     [0.603545531308863],
     [0.956971450112702],
     [0.286691583109318],
     [0.577948197757089],
     [0.30452699063607],
     [0.776144175320647],
     [0.44542237652981],
     [0.759120884157862],
     [0.737078790388255],
     [0.970281540012119],
     [0.84198110727195],
     [0.291027640832636],
     [0.785147936424552],
     [0.934787048979946],
     [0.265410284243266],
     [0.550736563837165],
     [0.481595547748646],
     [0.246276543186144],
     [0.294658009512073],
     [0.778740890576947],
     [0.584739430703712],
     [0.259001601129985],
     [0.292917033196215],
     [0.886844759196469],
     [0.245619537245229],
     [0.625716386996485],
     [0.740065053782972],
     [0.169351373443863],
     [0.904503981893554],
     [0.451995839639458],
     [0.160853948263755],
     [0.909453811246233],
     [0.350956186426634],
     [0.492909885970936],
     [0.213862416366829],
     [0.598814216733458],
     [0.158572274271192],
     [0.477984843191079],
     [0.540366135553732],
     [0.238100669874424],
     [0.188752892139365],
     [0.152297744896035]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.43452014])],
     [array([0.32394211])],
     [array([0.98920989])],
     [array([0.71802788])],
     [array([0.87588059])],
     [array([0.45796494])],
     [array([0.03618269])],
     [array([0.51964507])],
     [array([0.98195573])],
     [array([0.40824673])],
     [array([0.70585382])],
     [array([0.84246991])],
     [array([0.36238864])],
     [array([0.53708804])],
     [array([0.68240567])],
     [array([0.37440163])],
     [array([0.50882824])],
     [array([0.02972302])],
     [array([0.9942126])],
     [array([0.87852731])],
     [array([0.82889277])],
     [array([0.71400508])],
     [array([0.51594151])],
     [array([0.31178208])],
     [array([0.8174437])],
     [array([0.78174409])],
     [array([0.07398434])],
     [array([0.69610873])],
     [array([0.30119439])],
     [array([0.43685956])],
     [array([0.41976145])],
     [array([0.74670145])],
     [array([0.74861937])],
     [array([0.49035636])],
     [array([0.88196252])],
     [array([0.43955288])],
     [array([0.75420337])],
     [array([0.73181755])],
     [array([0.80144779])],
     [array([0.93552117])],
     [array([0.57895804])],
     [array([0.69642562])],
     [array([0.73713915])],
     [array([0.14818823])],
     [array([0.2993124])],
     [array([0.60833555])],
     [array([0.65435165])],
     [array([0.79823399])],
     [array([0.16566759])],
     [array([0.42089312])],
     [array([0.41431388])],
     [array([0.07248179])],
     [array([0.73432159])],
     [array([0.79953102])],
     [array([0.40642685])],
     [array([0.17050664])],
     [array([0.43658445])],
     [array([0.97205086])],
     [array([0.79455517])],
     [array([0.54608989])],
     [array([0.5434945])],
     [array([0.25694583])],
     [array([0.08211946])],
     [array([0.12081943])],
     [array([0.52050318])],
     [array([0.91739291])],
     [array([0.80266836])],
     [array([0.71697107])],
     [array([0.95995609])],
     [array([0.17778873])],
     [array([0.29343907])],
     [array([0.34687604])],
     [array([0.33583154])],
     [array([0.99230265])],
     [array([0.02190397])],
     [array([0.95011618])],
     [array([0.30325153])],
     [array([0.63778896])],
     [array([0.34551219])],
     [array([0.6431487])],
     [array([0.75686662])],
     [array([0.99397092])],
     [array([0.83880032])],
     [array([0.76543643])],
     [array([0.07914795])],
     [array([0.71724577])],
     [array([0.73526744])],
     [array([0.97378572])],
     [array([0.33038584])],
     [array([0.22411144])],
     [array([0.32095797])],
     [array([0.31355056])],
     [array([0.04952833])],
     [array([0.36266035])],
     [array([0.32627033])],
     [array([0.62399645])],
     [array([0.52860348])],
     [array([0.42963984])],
     [array([0.64716252])],
     [array([0.40178683])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.43452014, 0.32394211, 0.98920989, 0.71802788, 0.87588059,
           0.45796494, 0.03618269, 0.51964507, 0.98195573, 0.40824673,
           0.70585382, 0.84246991, 0.36238864, 0.53708804, 0.68240567,
           0.37440163, 0.50882824, 0.02972302, 0.9942126 , 0.87852731,
           0.82889277, 0.71400508, 0.51594151, 0.31178208, 0.8174437 ,
           0.78174409, 0.07398434, 0.69610873, 0.30119439, 0.43685956,
           0.41976145, 0.74670145, 0.74861937, 0.49035636, 0.88196252,
           0.43955288, 0.75420337, 0.73181755, 0.80144779, 0.93552117,
           0.57895804, 0.69642562, 0.73713915, 0.14818823, 0.2993124 ,
           0.60833555, 0.65435165, 0.79823399, 0.16566759, 0.42089312,
           0.41431388, 0.07248179, 0.73432159, 0.79953102, 0.40642685,
           0.17050664, 0.43658445, 0.97205086, 0.79455517, 0.54608989,
           0.5434945 , 0.25694583, 0.08211946, 0.12081943, 0.52050318,
           0.91739291, 0.80266836, 0.71697107, 0.95995609, 0.17778873,
           0.29343907, 0.34687604, 0.33583154, 0.99230265, 0.02190397,
           0.95011618, 0.30325153, 0.63778896, 0.34551219, 0.6431487 ,
           0.75686662, 0.99397092, 0.83880032, 0.76543643, 0.07914795,
           0.71724577, 0.73526744, 0.97378572, 0.33038584, 0.22411144,
           0.32095797, 0.31355056, 0.04952833, 0.36266035, 0.32627033,
           0.62399645, 0.52860348, 0.42963984, 0.64716252, 0.40178683])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.16118786, 0.28600715, 0.77869572, 0.85792063, 0.91383031,
              0.59679393, 0.90140479, 0.39524764, 0.0431963 , 0.63796611,
              0.06076183, 0.61766848, 0.5093606 , 0.20496876, 0.69779485,
              0.05798604, 0.39232132, 0.48927853, 0.20885906, 0.31124393,
              0.13668383, 0.37490849, 0.90191278, 0.4981375 , 0.47054808,
              0.85692799, 0.65787979, 0.22345401, 0.63841848, 0.37618778,
              0.18865068, 0.3291616 , 0.15407866, 0.01107298, 0.54916176,
              0.18208304, 0.0387044 , 0.34585328, 0.56457745, 0.60507915,
              0.08231997, 0.91953384, 0.09718574, 0.88895393, 0.3799547 ,
              0.5958746 , 0.28651677, 0.88718318, 0.19805538, 0.64902641,
              0.69509404, 0.98543056, 0.5084143 , 0.4243717 , 0.6261491 ,
              0.80727005, 0.45775415, 0.51689958, 0.60354553, 0.95697145,
              0.28669158, 0.5779482 , 0.30452699, 0.77614418, 0.44542238,
              0.75912088, 0.73707879, 0.97028154, 0.84198111, 0.29102764,
              0.78514794, 0.93478705, 0.26541028, 0.55073656, 0.48159555,
              0.24627654, 0.29465801, 0.77874089, 0.58473943, 0.2590016 ,
              0.29291703, 0.88684476, 0.24561954, 0.62571639, 0.74006505,
              0.16935137, 0.90450398, 0.45199584, 0.16085395, 0.90945381,
              0.35095619, 0.49290989, 0.21386242, 0.59881422, 0.15857227,
              0.47798484, 0.54036614, 0.23810067, 0.18875289, 0.15229774])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.75545227, 0.76600425, 0.69899195, 0.82453866, 0.32780643,
              0.78208942, 0.27717915, 0.1749835 , 0.47503402, 0.59822187,
              0.67470052, 0.04439638, 0.91215267, 0.35769952, 0.60874176,
              0.15737032, 0.25400666, 0.42967325, 0.99499275, 0.94548353,
              0.86216422, 0.70116858, 0.98313108, 0.82923136, 0.43809599,
              0.77620328, 0.63191672, 0.00344612, 0.96744746, 0.61217723,
              0.7647297 , 0.53783385, 0.94966985, 0.34613995, 0.20337302,
              0.95002472, 0.77346301, 0.49626575, 0.10554832, 0.80297195,
              0.0214711 , 0.29726588, 0.3954859 , 0.59308334, 0.8504902 ,
              0.9456028 , 0.50384968, 0.31016603, 0.57700237, 0.11034   ,
              0.69658772, 0.66980301, 0.0065433 , 0.61605514, 0.64841919,
              0.18635367, 0.79628887, 0.31308039, 0.22823801, 0.68830907,
              0.53665406, 0.03785725, 0.80133555, 0.94316683, 0.8718453 ,
              0.69927325, 0.9891507 , 0.55443679, 0.89788793, 0.50718082,
              0.23419823, 0.38781741, 0.60407398, 0.86615441, 0.83945113,
              0.81433379, 0.55443254, 0.53680136, 0.00802213, 0.92662926,
              0.97901938, 0.84495101, 0.10919253, 0.82349112, 0.31015351,
              0.12926107, 0.41025162, 0.04657581, 0.20820402, 0.55715837,
              0.00384003, 0.05305722, 0.35643821, 0.12034943, 0.9416177 ,
              0.62281824, 0.72085372, 0.920785  , 0.67525202, 0.06734374])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.48250704, 0.62949749, 0.79464981, 0.08745061, 0.27545711,
              0.00615298, 0.58040751, 0.67716657, 0.12437634, 0.39955484,
              0.5638671 , 0.30903245, 0.55801044, 0.69011285, 0.99483537,
              0.65735086, 0.70009781, 0.11253425, 0.83341644, 0.66907727,
              0.30759002, 0.62780659, 0.37364524, 0.05897995, 0.12152353,
              0.54677037, 0.66784577, 0.81106802, 0.52784433, 0.33805208,
              0.00677496, 0.74808107, 0.84495456, 0.06887415, 0.81022049,
              0.44343299, 0.56085513, 0.88221066, 0.7067457 , 0.18902523,
              0.25828925, 0.0548601 , 0.60065997, 0.29100461, 0.89589665,
              0.68232927, 0.5126843 , 0.04070526, 0.96670917, 0.68652181,
              0.77929943, 0.19859127, 0.02585358, 0.41062604, 0.14691079,
              0.14390343, 0.212211  , 0.92423052, 0.30082546, 0.75926319,
              0.40756093, 0.9990487 , 0.72386407, 0.57378687, 0.10912264,
              0.28248723, 0.25132416, 0.02231567, 0.57845027, 0.08425054,
              0.85905121, 0.21162258, 0.27728579, 0.30704596, 0.35847401,
              0.15142125, 0.71026052, 0.79441989, 0.8075176 , 0.4183843 ,
              0.87500894, 0.89026133, 0.58617027, 0.10575895, 0.79394493,
              0.53397593, 0.01628823, 0.80940496, 0.41125288, 0.86242162,
              0.50238743, 0.32994422, 0.77848687, 0.54653972, 0.76477394,
              0.19244009, 0.57659011, 0.2200457 , 0.62082591, 0.25537866])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.68805543, 0.55627989, 0.69267616, 0.89689489, 0.36352647,
              0.96171398, 0.01316044, 0.77674616, 0.06900367, 0.37640387,
              0.35339816, 0.2718607 , 0.34684218, 0.4703406 , 0.37826007,
              0.55114451, 0.45001379, 0.02067198, 0.16288286, 0.24385164,
              0.1473022 , 0.59339342, 0.10437898, 0.34144517, 0.88316965,
              0.23636936, 0.2408068 , 0.60120348, 0.72942341, 0.86436221,
              0.49972466, 0.2519791 , 0.12485772, 0.89181804, 0.05621678,
              0.26721596, 0.26039801, 0.16382224, 0.26310718, 0.61964124,
              0.87363378, 0.36846372, 0.03616554, 0.59433963, 0.55025107,
              0.56454772, 0.98978976, 0.32503069, 0.93519732, 0.50790126,
              0.5726537 , 0.69466857, 0.31345097, 0.00488073, 0.68074761,
              0.45037929, 0.6540568 , 0.1754685 , 0.43200267, 0.1890545 ,
              0.84946695, 0.09496913, 0.03199474, 0.34705262, 0.72803095,
              0.49002055, 0.65560257, 0.70882471, 0.94468895, 0.95592585,
              0.82498153, 0.38607802, 0.68448711, 0.154446  , 0.56482392,
              0.53876407, 0.23524013, 0.40782138, 0.10919511, 0.80460482,
              0.74938105, 0.05876641, 0.35531676, 0.60137555, 0.72690684,
              0.15735022, 0.3500029 , 0.54643808, 0.06059972, 0.18406174,
              0.2737027 , 0.6795477 , 0.93490503, 0.58085444, 0.99165099,
              0.13166392, 0.40053228, 0.22058895, 0.20786805, 0.15436744])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.16118786, 0.28600715, 0.77869572, 0.85792063, 0.91383031,
              0.59679393, 0.90140479, 0.39524764, 0.0431963 , 0.63796611,
              0.06076183, 0.61766848, 0.5093606 , 0.20496876, 0.69779485,
              0.05798604, 0.39232132, 0.48927853, 0.20885906, 0.31124393,
              0.13668383, 0.37490849, 0.90191278, 0.4981375 , 0.47054808,
              0.85692799, 0.65787979, 0.22345401, 0.63841848, 0.37618778,
              0.18865068, 0.3291616 , 0.15407866, 0.01107298, 0.54916176,
              0.18208304, 0.0387044 , 0.34585328, 0.56457745, 0.60507915,
              0.08231997, 0.91953384, 0.09718574, 0.88895393, 0.3799547 ,
              0.5958746 , 0.28651677, 0.88718318, 0.19805538, 0.64902641,
              0.69509404, 0.98543056, 0.5084143 , 0.4243717 , 0.6261491 ,
              0.80727005, 0.45775415, 0.51689958, 0.60354553, 0.95697145,
              0.28669158, 0.5779482 , 0.30452699, 0.77614418, 0.44542238,
              0.75912088, 0.73707879, 0.97028154, 0.84198111, 0.29102764,
              0.78514794, 0.93478705, 0.26541028, 0.55073656, 0.48159555,
              0.24627654, 0.29465801, 0.77874089, 0.58473943, 0.2590016 ,
              0.29291703, 0.88684476, 0.24561954, 0.62571639, 0.74006505,
              0.16935137, 0.90450398, 0.45199584, 0.16085395, 0.90945381,
              0.35095619, 0.49290989, 0.21386242, 0.59881422, 0.15857227,
              0.47798484, 0.54036614, 0.23810067, 0.18875289, 0.15229774])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.75545227, 0.76600425, 0.69899195, 0.82453866, 0.32780643,
              0.78208942, 0.27717915, 0.1749835 , 0.47503402, 0.59822187,
              0.67470052, 0.04439638, 0.91215267, 0.35769952, 0.60874176,
              0.15737032, 0.25400666, 0.42967325, 0.99499275, 0.94548353,
              0.86216422, 0.70116858, 0.98313108, 0.82923136, 0.43809599,
              0.77620328, 0.63191672, 0.00344612, 0.96744746, 0.61217723,
              0.7647297 , 0.53783385, 0.94966985, 0.34613995, 0.20337302,
              0.95002472, 0.77346301, 0.49626575, 0.10554832, 0.80297195,
              0.0214711 , 0.29726588, 0.3954859 , 0.59308334, 0.8504902 ,
              0.9456028 , 0.50384968, 0.31016603, 0.57700237, 0.11034   ,
              0.69658772, 0.66980301, 0.0065433 , 0.61605514, 0.64841919,
              0.18635367, 0.79628887, 0.31308039, 0.22823801, 0.68830907,
              0.53665406, 0.03785725, 0.80133555, 0.94316683, 0.8718453 ,
              0.69927325, 0.9891507 , 0.55443679, 0.89788793, 0.50718082,
              0.23419823, 0.38781741, 0.60407398, 0.86615441, 0.83945113,
              0.81433379, 0.55443254, 0.53680136, 0.00802213, 0.92662926,
              0.97901938, 0.84495101, 0.10919253, 0.82349112, 0.31015351,
              0.12926107, 0.41025162, 0.04657581, 0.20820402, 0.55715837,
              0.00384003, 0.05305722, 0.35643821, 0.12034943, 0.9416177 ,
              0.62281824, 0.72085372, 0.920785  , 0.67525202, 0.06734374])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.48250704, 0.62949749, 0.79464981, 0.08745061, 0.27545711,
              0.00615298, 0.58040751, 0.67716657, 0.12437634, 0.39955484,
              0.5638671 , 0.30903245, 0.55801044, 0.69011285, 0.99483537,
              0.65735086, 0.70009781, 0.11253425, 0.83341644, 0.66907727,
              0.30759002, 0.62780659, 0.37364524, 0.05897995, 0.12152353,
              0.54677037, 0.66784577, 0.81106802, 0.52784433, 0.33805208,
              0.00677496, 0.74808107, 0.84495456, 0.06887415, 0.81022049,
              0.44343299, 0.56085513, 0.88221066, 0.7067457 , 0.18902523,
              0.25828925, 0.0548601 , 0.60065997, 0.29100461, 0.89589665,
              0.68232927, 0.5126843 , 0.04070526, 0.96670917, 0.68652181,
              0.77929943, 0.19859127, 0.02585358, 0.41062604, 0.14691079,
              0.14390343, 0.212211  , 0.92423052, 0.30082546, 0.75926319,
              0.40756093, 0.9990487 , 0.72386407, 0.57378687, 0.10912264,
              0.28248723, 0.25132416, 0.02231567, 0.57845027, 0.08425054,
              0.85905121, 0.21162258, 0.27728579, 0.30704596, 0.35847401,
              0.15142125, 0.71026052, 0.79441989, 0.8075176 , 0.4183843 ,
              0.87500894, 0.89026133, 0.58617027, 0.10575895, 0.79394493,
              0.53397593, 0.01628823, 0.80940496, 0.41125288, 0.86242162,
              0.50238743, 0.32994422, 0.77848687, 0.54653972, 0.76477394,
              0.19244009, 0.57659011, 0.2200457 , 0.62082591, 0.25537866])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.82991754, 0.00314438, 0.35044423, 0.19051461, 0.886968  ,
              0.40707853, 0.67660724, 0.50897014, 0.26969873, 0.75007788,
              0.78016916, 0.49212242, 0.2306651 , 0.84474443, 0.799749  ,
              0.61723259, 0.93736956, 0.52702149, 0.35597622, 0.25212636,
              0.01614248, 0.67241336, 0.60954382, 0.67514928, 0.21799274,
              0.49647494, 0.45722349, 0.477518  , 0.96674585, 0.99842905,
              0.66915034, 0.27308435, 0.93434195, 0.78774493, 0.20356364,
              0.96679923, 0.18666012, 0.82786261, 0.89171564, 0.72016588,
              0.06288159, 0.12771668, 0.40219481, 0.91229541, 0.50520092,
              0.36539466, 0.82655962, 0.82163034, 0.83159565, 0.84827601,
              0.50259889, 0.33142433, 0.44151473, 0.12235751, 0.09994207,
              0.61555489, 0.99574042, 0.12763599, 0.36146659, 0.75893865,
              0.48436817, 0.22305624, 0.73726009, 0.00787562, 0.69013988,
              0.40067219, 0.52652434, 0.35222344, 0.71057795, 0.34098203,
              0.97039261, 0.40169017, 0.18895127, 0.86624047, 0.58155081,
              0.42757975, 0.43181462, 0.455442  , 0.86619392, 0.28028482,
              0.11070297, 0.15373787, 0.75815878, 0.54121018, 0.52235687,
              0.26563393, 0.30756949, 0.12259744, 0.09124907, 0.13754909,
              0.61194015, 0.72395525, 0.42258218, 0.38472823, 0.03484735,
              0.40730008, 0.22991919, 0.05293548, 0.16795262, 0.08681045])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.43452014, 0.32394211, 0.98920989, 0.71802788, 0.87588059,
              0.45796494, 0.03618269, 0.51964507, 0.98195573, 0.40824673,
              0.70585382, 0.84246991, 0.36238864, 0.53708804, 0.68240567,
              0.37440163, 0.50882824, 0.02972302, 0.9942126 , 0.87852731,
              0.82889277, 0.71400508, 0.51594151, 0.31178208, 0.8174437 ,
              0.78174409, 0.07398434, 0.69610873, 0.30119439, 0.43685956,
              0.41976145, 0.74670145, 0.74861937, 0.49035636, 0.88196252,
              0.43955288, 0.75420337, 0.73181755, 0.80144779, 0.93552117,
              0.57895804, 0.69642562, 0.73713915, 0.14818823, 0.2993124 ,
              0.60833555, 0.65435165, 0.79823399, 0.16566759, 0.42089312,
              0.41431388, 0.07248179, 0.73432159, 0.79953102, 0.40642685,
              0.17050664, 0.43658445, 0.97205086, 0.79455517, 0.54608989,
              0.5434945 , 0.25694583, 0.08211946, 0.12081943, 0.52050318,
              0.91739291, 0.80266836, 0.71697107, 0.95995609, 0.17778873,
              0.29343907, 0.34687604, 0.33583154, 0.99230265, 0.02190397,
              0.95011618, 0.30325153, 0.63778896, 0.34551219, 0.6431487 ,
              0.75686662, 0.99397092, 0.83880032, 0.76543643, 0.07914795,
              0.71724577, 0.73526744, 0.97378572, 0.33038584, 0.22411144,
              0.32095797, 0.31355056, 0.04952833, 0.36266035, 0.32627033,
              0.62399645, 0.52860348, 0.42963984, 0.64716252, 0.40178683])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.99901977, 0.65671777, 0.70835593, 0.87924067, 0.16095055,
              0.38769362, 0.80730494, 0.17877786, 0.7909992 , 0.6300099 ,
              0.67157019, 0.89228077, 0.16211891, 0.35530016, 0.95075847,
              0.77246468, 0.85391879, 0.35499701, 0.24545829, 0.37568571,
              0.93710517, 0.35468835, 0.25010545, 0.60671032, 0.63841229,
              0.00878   , 0.33889825, 0.54130007, 0.00990252, 0.68084065,
              0.88976448, 0.60769887, 0.42709681, 0.35607658, 0.20677309,
              0.64929625, 0.34814929, 0.77845834, 0.86420749, 0.02740419,
              0.55287948, 0.99259498, 0.19550443, 0.40701073, 0.82745901,
              0.12516203, 0.5170155 , 0.83504885, 0.59052587, 0.66596943,
              0.57850869, 0.12278521, 0.41515176, 0.57028347, 0.32374019,
              0.79199897, 0.11326146, 0.20115608, 0.107756  , 0.50498785,
              0.68069395, 0.74038222, 0.52291782, 0.04134971, 0.08249441,
              0.87733907, 0.23528693, 0.80432006, 0.51345074, 0.61063324,
              0.03609338, 0.50370163, 0.41758109, 0.05151092, 0.73533665,
              0.73475077, 0.31815695, 0.1763054 , 0.67149928, 0.48956829,
              0.52224707, 0.57590935, 0.68423141, 0.169181  , 0.73131326,
              0.52376943, 0.12445178, 0.20082392, 0.22185948, 0.59837284,
              0.67208864, 0.95122754, 0.156915  , 0.66930384, 0.97683464,
              0.45027512, 0.05093246, 0.37336785, 0.11868424, 0.32441671])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.78001392, 0.81527048, 0.11736946, 0.90500163, 0.33903157,
              0.13418569, 0.58777455, 0.98118166, 0.37195341, 0.00597665,
              0.76858141, 0.16258838, 0.24613019, 0.8915668 , 0.33566321,
              0.03325343, 0.74979516, 0.46858139, 0.38175119, 0.94806397,
              0.13325381, 0.55507882, 0.74442861, 0.6447566 , 0.1790229 ,
              0.13826523, 0.10977077, 0.0153971 , 0.04758828, 0.03186607,
              0.3003253 , 0.63668588, 0.36965613, 0.97775996, 0.41680583,
              0.88725912, 0.49536493, 0.02005512, 0.98391558, 0.25456908,
              0.59939932, 0.32008398, 0.86565609, 0.07795113, 0.90129653,
              0.57376741, 0.05333434, 0.05658596, 0.34100161, 0.01138439,
              0.19096521, 0.89210172, 0.80082742, 0.48189362, 0.50588119,
              0.26536141, 0.95475658, 0.08060863, 0.17710278, 0.95832455,
              0.03864369, 0.8373216 , 0.79461629, 0.61712145, 0.66820235,
              0.06581771, 0.03725802, 0.94051585, 0.55584088, 0.97801698,
              0.87452852, 0.5512929 , 0.38811253, 0.80214887, 0.16444314,
              0.12612369, 0.15274291, 0.26367926, 0.59429088, 0.5099324 ,
              0.878479  , 0.92088797, 0.27079613, 0.4436692 , 0.28450832,
              0.38927547, 0.29701751, 0.33915883, 0.73030198, 0.7182545 ,
              0.16723272, 0.9320659 , 0.98218246, 0.65945949, 0.91434458,
              0.07706584, 0.99569763, 0.96982433, 0.33628623, 0.66118378])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.99906761, 0.27026268, 0.4890134 , 0.50060814, 0.71587065,
              0.46530578, 0.06843683, 0.74712586, 0.21420233, 0.66510997,
              0.31455493, 0.22652464, 0.23705215, 0.9713856 , 0.0138205 ,
              0.66737758, 0.31874036, 0.29486519, 0.89409396, 0.56602614,
              0.46054261, 0.7735295 , 0.95777488, 0.65708419, 0.0130895 ,
              0.2207381 , 0.9175273 , 0.10142406, 0.36551669, 0.34669792,
              0.4305084 , 0.6161191 , 0.57565956, 0.6326994 , 0.38229037,
              0.01300173, 0.89770314, 0.28684189, 0.29569382, 0.42127422,
              0.30576305, 0.03042565, 0.19521789, 0.16874876, 0.73427902,
              0.48907385, 0.47534111, 0.00690515, 0.59336187, 0.81759722,
              0.62517787, 0.76081098, 0.21740165, 0.54806922, 0.08087128,
              0.28062829, 0.85753836, 0.03663392, 0.11745118, 0.29173631,
              0.56902486, 0.49069871, 0.42553407, 0.43550999, 0.2721381 ,
              0.3834015 , 0.87629316, 0.88409092, 0.12629778, 0.15533589,
              0.15036584, 0.47239436, 0.70360954, 0.86686268, 0.22746436,
              0.44031492, 0.3254333 , 0.3708383 , 0.3017123 , 0.28254362,
              0.29289823, 0.54361398, 0.06859705, 0.8900936 , 0.86803717,
              0.76249858, 0.34052074, 0.82195523, 0.82461842, 0.8736452 ,
              0.07740172, 0.99293135, 0.25113573, 0.06399728, 0.94355686,
              0.24750262, 0.18467307, 0.63461487, 0.32422029, 0.61347892])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.43452014, 0.32394211, 0.98920989, 0.71802788, 0.87588059,
              0.45796494, 0.03618269, 0.51964507, 0.98195573, 0.40824673,
              0.70585382, 0.84246991, 0.36238864, 0.53708804, 0.68240567,
              0.37440163, 0.50882824, 0.02972302, 0.9942126 , 0.87852731,
              0.82889277, 0.71400508, 0.51594151, 0.31178208, 0.8174437 ,
              0.78174409, 0.07398434, 0.69610873, 0.30119439, 0.43685956,
              0.41976145, 0.74670145, 0.74861937, 0.49035636, 0.88196252,
              0.43955288, 0.75420337, 0.73181755, 0.80144779, 0.93552117,
              0.57895804, 0.69642562, 0.73713915, 0.14818823, 0.2993124 ,
              0.60833555, 0.65435165, 0.79823399, 0.16566759, 0.42089312,
              0.41431388, 0.07248179, 0.73432159, 0.79953102, 0.40642685,
              0.17050664, 0.43658445, 0.97205086, 0.79455517, 0.54608989,
              0.5434945 , 0.25694583, 0.08211946, 0.12081943, 0.52050318,
              0.91739291, 0.80266836, 0.71697107, 0.95995609, 0.17778873,
              0.29343907, 0.34687604, 0.33583154, 0.99230265, 0.02190397,
              0.95011618, 0.30325153, 0.63778896, 0.34551219, 0.6431487 ,
              0.75686662, 0.99397092, 0.83880032, 0.76543643, 0.07914795,
              0.71724577, 0.73526744, 0.97378572, 0.33038584, 0.22411144,
              0.32095797, 0.31355056, 0.04952833, 0.36266035, 0.32627033,
              0.62399645, 0.52860348, 0.42963984, 0.64716252, 0.40178683])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.99901977, 0.65671777, 0.70835593, 0.87924067, 0.16095055,
              0.38769362, 0.80730494, 0.17877786, 0.7909992 , 0.6300099 ,
              0.67157019, 0.89228077, 0.16211891, 0.35530016, 0.95075847,
              0.77246468, 0.85391879, 0.35499701, 0.24545829, 0.37568571,
              0.93710517, 0.35468835, 0.25010545, 0.60671032, 0.63841229,
              0.00878   , 0.33889825, 0.54130007, 0.00990252, 0.68084065,
              0.88976448, 0.60769887, 0.42709681, 0.35607658, 0.20677309,
              0.64929625, 0.34814929, 0.77845834, 0.86420749, 0.02740419,
              0.55287948, 0.99259498, 0.19550443, 0.40701073, 0.82745901,
              0.12516203, 0.5170155 , 0.83504885, 0.59052587, 0.66596943,
              0.57850869, 0.12278521, 0.41515176, 0.57028347, 0.32374019,
              0.79199897, 0.11326146, 0.20115608, 0.107756  , 0.50498785,
              0.68069395, 0.74038222, 0.52291782, 0.04134971, 0.08249441,
              0.87733907, 0.23528693, 0.80432006, 0.51345074, 0.61063324,
              0.03609338, 0.50370163, 0.41758109, 0.05151092, 0.73533665,
              0.73475077, 0.31815695, 0.1763054 , 0.67149928, 0.48956829,
              0.52224707, 0.57590935, 0.68423141, 0.169181  , 0.73131326,
              0.52376943, 0.12445178, 0.20082392, 0.22185948, 0.59837284,
              0.67208864, 0.95122754, 0.156915  , 0.66930384, 0.97683464,
              0.45027512, 0.05093246, 0.37336785, 0.11868424, 0.32441671])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.78001392, 0.81527048, 0.11736946, 0.90500163, 0.33903157,
              0.13418569, 0.58777455, 0.98118166, 0.37195341, 0.00597665,
              0.76858141, 0.16258838, 0.24613019, 0.8915668 , 0.33566321,
              0.03325343, 0.74979516, 0.46858139, 0.38175119, 0.94806397,
              0.13325381, 0.55507882, 0.74442861, 0.6447566 , 0.1790229 ,
              0.13826523, 0.10977077, 0.0153971 , 0.04758828, 0.03186607,
              0.3003253 , 0.63668588, 0.36965613, 0.97775996, 0.41680583,
              0.88725912, 0.49536493, 0.02005512, 0.98391558, 0.25456908,
              0.59939932, 0.32008398, 0.86565609, 0.07795113, 0.90129653,
              0.57376741, 0.05333434, 0.05658596, 0.34100161, 0.01138439,
              0.19096521, 0.89210172, 0.80082742, 0.48189362, 0.50588119,
              0.26536141, 0.95475658, 0.08060863, 0.17710278, 0.95832455,
              0.03864369, 0.8373216 , 0.79461629, 0.61712145, 0.66820235,
              0.06581771, 0.03725802, 0.94051585, 0.55584088, 0.97801698,
              0.87452852, 0.5512929 , 0.38811253, 0.80214887, 0.16444314,
              0.12612369, 0.15274291, 0.26367926, 0.59429088, 0.5099324 ,
              0.878479  , 0.92088797, 0.27079613, 0.4436692 , 0.28450832,
              0.38927547, 0.29701751, 0.33915883, 0.73030198, 0.7182545 ,
              0.16723272, 0.9320659 , 0.98218246, 0.65945949, 0.91434458,
              0.07706584, 0.99569763, 0.96982433, 0.33628623, 0.66118378])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.9676481 , 0.29223723, 0.32386761, 0.13279057, 0.92706453,
              0.90489675, 0.48507981, 0.74550686, 0.16793557, 0.17412044,
              0.31192551, 0.29251113, 0.89044605, 0.594664  , 0.1253903 ,
              0.21276644, 0.47934078, 0.32725713, 0.97466359, 0.34165093,
              0.61178235, 0.08631654, 0.06477542, 0.63048148, 0.04098703,
              0.22895071, 0.95439858, 0.96452319, 0.29279044, 0.43000074,
              0.61807168, 0.03576023, 0.05038051, 0.7502775 , 0.91889481,
              0.21139794, 0.80997697, 0.29423669, 0.08191335, 0.22562214,
              0.85981139, 0.93152167, 0.38697491, 0.98140976, 0.79029795,
              0.04064132, 0.25458778, 0.99576399, 0.19278062, 0.84229924,
              0.36115917, 0.14254632, 0.82440279, 0.21747109, 0.44064242,
              0.89114873, 0.04266385, 0.00970099, 0.05552024, 0.43878377,
              0.79662042, 0.89156406, 0.57303342, 0.47912386, 0.0261714 ,
              0.68077758, 0.83038778, 0.05201626, 0.53692509, 0.62923157,
              0.0565114 , 0.98230795, 0.54753703, 0.25243952, 0.2293914 ,
              0.0080203 , 0.1128968 , 0.1932395 , 0.85922668, 0.13905616,
              0.78155926, 0.02262749, 0.86721903, 0.07041709, 0.85875451,
              0.14954008, 0.04108149, 0.16030288, 0.17892111, 0.82423391,
              0.96947949, 0.8167613 , 0.31012144, 0.22401889, 0.25188174,
              0.2311827 , 0.03707928, 0.87212484, 0.49457776, 0.27459339])}]]


