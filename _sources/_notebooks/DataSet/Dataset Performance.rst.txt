
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='bfebc286-ee48-4eae-b3b1-192845aef194'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='0c3248a3-324e-496f-a12e-894aae298867'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.0351226322307253],
     [0.764132131490737],
     [0.939454483614898],
     [0.713775488249402],
     [0.600797423483447],
     [0.0171070642464446],
     [0.682449946969996],
     [0.529638475581797],
     [0.654275434528428],
     [0.618356206091002],
     [0.479700767291605],
     [0.0278080184120085],
     [0.960036863350194],
     [0.347201169148365],
     [0.812072693595724],
     [0.604119630824917],
     [0.923990114839512],
     [0.0251776484701771],
     [0.514636504444092],
     [0.720261142368319],
     [0.0387169390097786],
     [0.372847160101345],
     [0.638196341338635],
     [0.426607778429511],
     [0.0215760473091621],
     [0.676048265496229],
     [0.466972405384642],
     [0.76464959185948],
     [0.708831079553516],
     [0.316529542468414],
     [0.339046341129884],
     [0.803535240300631],
     [0.729367581466666],
     [0.448145567074665],
     [0.0425455745573952],
     [0.38023030002515],
     [0.255104822819531],
     [0.119059034885063],
     [0.0987633495474818],
     [0.307637844384129],
     [0.225894292689386],
     [0.63429626516289],
     [0.47093506280048],
     [0.290983394870531],
     [0.408861830853236],
     [0.307447542721078],
     [0.25688891029961],
     [0.884300487527618],
     [0.0794229948913082],
     [0.225404403973228],
     [0.890843759678719],
     [0.463539999978645],
     [0.750197473322892],
     [0.557620016480506],
     [0.212869886209248],
     [0.255953970343219],
     [0.63510316872863],
     [0.0976108355503404],
     [0.606546976298551],
     [0.761262653359017],
     [0.326679018182157],
     [0.278082629867004],
     [0.210556174605351],
     [0.0584143176733116],
     [0.801071729596633],
     [0.214801710970183],
     [0.851149865251477],
     [0.769760344717809],
     [0.152624078000621],
     [0.744177724297625],
     [0.938993813419679],
     [0.95547958154777],
     [0.488113523130961],
     [0.120917917286024],
     [0.267010446219197],
     [0.142125300244823],
     [0.931985323772378],
     [0.952571484048872],
     [0.578198243170587],
     [0.364089237040576],
     [0.408855321929004],
     [0.682239957060547],
     [0.928832194303836],
     [0.912285803972127],
     [0.95928714135186],
     [0.667099442318918],
     [0.990245467751302],
     [0.22144308952093],
     [0.844796966297088],
     [0.00262460042976764],
     [0.335563494569957],
     [0.67873072369357],
     [0.440496918167909],
     [0.0521241060982819],
     [0.137517755863509],
     [0.670046621657363],
     [0.162498022792573],
     [0.944250892551873],
     [0.300120062748657],
     [0.157614390003821]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.97108145])],
     [array([ 0.4512613])],
     [array([ 0.2567403])],
     [array([ 0.50220361])],
     [array([ 0.99299527])],
     [array([ 0.22584661])],
     [array([ 0.6760811])],
     [array([ 0.04401363])],
     [array([ 0.93580256])],
     [array([ 0.67984292])],
     [array([ 0.50788466])],
     [array([ 0.71213803])],
     [array([ 0.53417874])],
     [array([ 0.52725576])],
     [array([ 0.3334674])],
     [array([ 0.02245377])],
     [array([ 0.58280474])],
     [array([ 0.01303413])],
     [array([ 0.88305493])],
     [array([ 0.87297105])],
     [array([ 0.23980191])],
     [array([ 0.69871357])],
     [array([ 0.29967162])],
     [array([ 0.55871012])],
     [array([ 0.84814468])],
     [array([ 0.01153208])],
     [array([ 0.11578406])],
     [array([ 0.75567605])],
     [array([ 0.39730962])],
     [array([ 0.95116436])],
     [array([ 0.48212009])],
     [array([ 0.11325128])],
     [array([ 0.01369769])],
     [array([ 0.20144092])],
     [array([ 0.53489718])],
     [array([ 0.12462557])],
     [array([ 0.68913154])],
     [array([ 0.02936661])],
     [array([ 0.36283258])],
     [array([ 0.43275632])],
     [array([ 0.09605429])],
     [array([ 0.55891811])],
     [array([ 0.49105239])],
     [array([ 0.74636501])],
     [array([ 0.16903336])],
     [array([ 0.30023533])],
     [array([ 0.05343825])],
     [array([ 0.52015032])],
     [array([ 0.36914259])],
     [array([ 0.86908373])],
     [array([ 0.90039331])],
     [array([ 0.58423143])],
     [array([ 0.62636158])],
     [array([ 0.02721549])],
     [array([ 0.47582738])],
     [array([ 0.97452347])],
     [array([ 0.05789139])],
     [array([ 0.8598778])],
     [array([ 0.44219023])],
     [array([ 0.21678064])],
     [array([ 0.09429648])],
     [array([ 0.01780682])],
     [array([ 0.98926116])],
     [array([ 0.51207623])],
     [array([ 0.01001539])],
     [array([ 0.21595768])],
     [array([ 0.8101043])],
     [array([ 0.99799054])],
     [array([ 0.79893294])],
     [array([ 0.21070294])],
     [array([ 0.95492729])],
     [array([ 0.01575208])],
     [array([ 0.29845065])],
     [array([ 0.48883717])],
     [array([ 0.34964842])],
     [array([ 0.59736143])],
     [array([ 0.26015075])],
     [array([ 0.30693364])],
     [array([ 0.23542973])],
     [array([ 0.12613737])],
     [array([ 0.05138136])],
     [array([ 0.40800437])],
     [array([ 0.1090496])],
     [array([ 0.07617733])],
     [array([ 0.47487898])],
     [array([ 0.83829372])],
     [array([ 0.11841564])],
     [array([ 0.23044851])],
     [array([ 0.91675542])],
     [array([ 0.02273717])],
     [array([ 0.34376298])],
     [array([ 0.19981203])],
     [array([ 0.12068199])],
     [array([ 0.06714718])],
     [array([ 0.968422])],
     [array([ 0.25504989])],
     [array([ 0.233994])],
     [array([ 0.31037489])],
     [array([ 0.41956283])],
     [array([ 0.17198122])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.97108145,  0.4512613 ,  0.2567403 ,  0.50220361,  0.99299527,
            0.22584661,  0.6760811 ,  0.04401363,  0.93580256,  0.67984292,
            0.50788466,  0.71213803,  0.53417874,  0.52725576,  0.3334674 ,
            0.02245377,  0.58280474,  0.01303413,  0.88305493,  0.87297105,
            0.23980191,  0.69871357,  0.29967162,  0.55871012,  0.84814468,
            0.01153208,  0.11578406,  0.75567605,  0.39730962,  0.95116436,
            0.48212009,  0.11325128,  0.01369769,  0.20144092,  0.53489718,
            0.12462557,  0.68913154,  0.02936661,  0.36283258,  0.43275632,
            0.09605429,  0.55891811,  0.49105239,  0.74636501,  0.16903336,
            0.30023533,  0.05343825,  0.52015032,  0.36914259,  0.86908373,
            0.90039331,  0.58423143,  0.62636158,  0.02721549,  0.47582738,
            0.97452347,  0.05789139,  0.8598778 ,  0.44219023,  0.21678064,
            0.09429648,  0.01780682,  0.98926116,  0.51207623,  0.01001539,
            0.21595768,  0.8101043 ,  0.99799054,  0.79893294,  0.21070294,
            0.95492729,  0.01575208,  0.29845065,  0.48883717,  0.34964842,
            0.59736143,  0.26015075,  0.30693364,  0.23542973,  0.12613737,
            0.05138136,  0.40800437,  0.1090496 ,  0.07617733,  0.47487898,
            0.83829372,  0.11841564,  0.23044851,  0.91675542,  0.02273717,
            0.34376298,  0.19981203,  0.12068199,  0.06714718,  0.968422  ,
            0.25504989,  0.233994  ,  0.31037489,  0.41956283,  0.17198122])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.03512263,  0.76413213,  0.93945448,  0.71377549,  0.60079742,
               0.01710706,  0.68244995,  0.52963848,  0.65427543,  0.61835621,
               0.47970077,  0.02780802,  0.96003686,  0.34720117,  0.81207269,
               0.60411963,  0.92399011,  0.02517765,  0.5146365 ,  0.72026114,
               0.03871694,  0.37284716,  0.63819634,  0.42660778,  0.02157605,
               0.67604827,  0.46697241,  0.76464959,  0.70883108,  0.31652954,
               0.33904634,  0.80353524,  0.72936758,  0.44814557,  0.04254557,
               0.3802303 ,  0.25510482,  0.11905903,  0.09876335,  0.30763784,
               0.22589429,  0.63429627,  0.47093506,  0.29098339,  0.40886183,
               0.30744754,  0.25688891,  0.88430049,  0.07942299,  0.2254044 ,
               0.89084376,  0.46354   ,  0.75019747,  0.55762002,  0.21286989,
               0.25595397,  0.63510317,  0.09761084,  0.60654698,  0.76126265,
               0.32667902,  0.27808263,  0.21055617,  0.05841432,  0.80107173,
               0.21480171,  0.85114987,  0.76976034,  0.15262408,  0.74417772,
               0.93899381,  0.95547958,  0.48811352,  0.12091792,  0.26701045,
               0.1421253 ,  0.93198532,  0.95257148,  0.57819824,  0.36408924,
               0.40885532,  0.68223996,  0.92883219,  0.9122858 ,  0.95928714,
               0.66709944,  0.99024547,  0.22144309,  0.84479697,  0.0026246 ,
               0.33556349,  0.67873072,  0.44049692,  0.05212411,  0.13751776,
               0.67004662,  0.16249802,  0.94425089,  0.30012006,  0.15761439])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.00420809,  0.92218465,  0.56972889,  0.33692364,  0.78443328,
               0.85782964,  0.37575964,  0.87464859,  0.11910716,  0.75204296,
               0.29393647,  0.72351151,  0.38529595,  0.53399146,  0.91528916,
               0.32794208,  0.20644824,  0.94458724,  0.47454549,  0.80241627,
               0.29024927,  0.02927087,  0.63741753,  0.91254413,  0.46392618,
               0.64034543,  0.6135856 ,  0.22067156,  0.16222162,  0.55021357,
               0.11390361,  0.78071715,  0.22106714,  0.78159775,  0.88506218,
               0.3853626 ,  0.98313474,  0.29282953,  0.32008846,  0.77294971,
               0.91517891,  0.15011473,  0.32506458,  0.84585433,  0.00246719,
               0.16456584,  0.16913025,  0.59593298,  0.77886595,  0.91135575,
               0.80605196,  0.36700531,  0.50046558,  0.45693363,  0.93126156,
               0.38127651,  0.4154189 ,  0.96681687,  0.99609329,  0.81752955,
               0.65763457,  0.74745919,  0.88798025,  0.56312983,  0.81392063,
               0.47009246,  0.09731164,  0.32737529,  0.94613   ,  0.44351469,
               0.47696746,  0.40859156,  0.12001725,  0.80593507,  0.47369146,
               0.23865035,  0.02185934,  0.93104957,  0.27176856,  0.00771737,
               0.4590995 ,  0.84477395,  0.8131259 ,  0.81432362,  0.2104468 ,
               0.6478693 ,  0.22018757,  0.87527796,  0.23117294,  0.41690766,
               0.57960842,  0.82607598,  0.10051422,  0.68075276,  0.39981598,
               0.8673906 ,  0.87442117,  0.60087388,  0.24981604,  0.17492927])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.40873989,  0.3025264 ,  0.75367392,  0.89730265,  0.93707151,
               0.1085393 ,  0.12746546,  0.38435187,  0.43221164,  0.83906815,
               0.96100476,  0.49106943,  0.59832504,  0.5140966 ,  0.26136903,
               0.56647008,  0.09191379,  0.76945999,  0.16843438,  0.26250361,
               0.31478175,  0.22478467,  0.48825463,  0.64213224,  0.05573557,
               0.77211872,  0.38440376,  0.00428613,  0.34589474,  0.29282908,
               0.67064017,  0.11380493,  0.13453147,  0.17372842,  0.19840048,
               0.90235286,  0.5758119 ,  0.45828145,  0.13380127,  0.1225095 ,
               0.83928513,  0.7498762 ,  0.16385122,  0.36871009,  0.35866171,
               0.07076094,  0.8062917 ,  0.20420618,  0.51293581,  0.77683182,
               0.81210382,  0.94385059,  0.08903866,  0.48271072,  0.73726217,
               0.81770663,  0.54122767,  0.67549304,  0.27765083,  0.2436517 ,
               0.25156721,  0.50425554,  0.04959501,  0.84728988,  0.29107017,
               0.09314787,  0.53342353,  0.92597936,  0.01991709,  0.62088203,
               0.84563467,  0.6596393 ,  0.84257965,  0.94023871,  0.89575068,
               0.72212305,  0.35040341,  0.63203046,  0.69937037,  0.08421945,
               0.05438321,  0.08890181,  0.14360849,  0.16208591,  0.54303606,
               0.16124908,  0.36456255,  0.53930633,  0.78908964,  0.36924006,
               0.72637838,  0.24603752,  0.01817363,  0.58975093,  0.91851361,
               0.0893525 ,  0.18093492,  0.90824401,  0.50413203,  0.23435888])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.97994887,  0.20235617,  0.66975403,  0.79095506,  0.60218969,
               0.79427006,  0.58859791,  0.41590826,  0.76155564,  0.81541246,
               0.93029796,  0.29677186,  0.63440399,  0.79772069,  0.55493286,
               0.88164512,  0.69260012,  0.98873556,  0.48036679,  0.74951665,
               0.57311477,  0.24130879,  0.14972397,  0.94042636,  0.62386436,
               0.26420361,  0.06315127,  0.07502515,  0.21614749,  0.71096438,
               0.59139701,  0.39589203,  0.94896011,  0.49393011,  0.02131197,
               0.2856516 ,  0.81256988,  0.79211169,  0.94196995,  0.36123005,
               0.10543856,  0.21478878,  0.10080752,  0.19794336,  0.19952237,
               0.99631067,  0.0958451 ,  0.34158067,  0.87673449,  0.13793775,
               0.18390136,  0.54690253,  0.21424003,  0.15820554,  0.73504262,
               0.52855253,  0.87039565,  0.34270767,  0.25168682,  0.30836805,
               0.51295495,  0.75604897,  0.50862896,  0.26587752,  0.31613036,
               0.87363406,  0.2985437 ,  0.35157552,  0.5163485 ,  0.67549159,
               0.93938493,  0.62468613,  0.6061096 ,  0.05523415,  0.34925211,
               0.09857154,  0.53644686,  0.96556155,  0.00183352,  0.8469505 ,
               0.23947705,  0.47709969,  0.83355438,  0.66337922,  0.13655366,
               0.30276451,  0.70923181,  0.73484601,  0.02095749,  0.36862868,
               0.99863209,  0.92133116,  0.55687811,  0.01168994,  0.18359001,
               0.4358149 ,  0.51282464,  0.323727  ,  0.9461843 ,  0.91551488])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.03512263,  0.76413213,  0.93945448,  0.71377549,  0.60079742,
               0.01710706,  0.68244995,  0.52963848,  0.65427543,  0.61835621,
               0.47970077,  0.02780802,  0.96003686,  0.34720117,  0.81207269,
               0.60411963,  0.92399011,  0.02517765,  0.5146365 ,  0.72026114,
               0.03871694,  0.37284716,  0.63819634,  0.42660778,  0.02157605,
               0.67604827,  0.46697241,  0.76464959,  0.70883108,  0.31652954,
               0.33904634,  0.80353524,  0.72936758,  0.44814557,  0.04254557,
               0.3802303 ,  0.25510482,  0.11905903,  0.09876335,  0.30763784,
               0.22589429,  0.63429627,  0.47093506,  0.29098339,  0.40886183,
               0.30744754,  0.25688891,  0.88430049,  0.07942299,  0.2254044 ,
               0.89084376,  0.46354   ,  0.75019747,  0.55762002,  0.21286989,
               0.25595397,  0.63510317,  0.09761084,  0.60654698,  0.76126265,
               0.32667902,  0.27808263,  0.21055617,  0.05841432,  0.80107173,
               0.21480171,  0.85114987,  0.76976034,  0.15262408,  0.74417772,
               0.93899381,  0.95547958,  0.48811352,  0.12091792,  0.26701045,
               0.1421253 ,  0.93198532,  0.95257148,  0.57819824,  0.36408924,
               0.40885532,  0.68223996,  0.92883219,  0.9122858 ,  0.95928714,
               0.66709944,  0.99024547,  0.22144309,  0.84479697,  0.0026246 ,
               0.33556349,  0.67873072,  0.44049692,  0.05212411,  0.13751776,
               0.67004662,  0.16249802,  0.94425089,  0.30012006,  0.15761439])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.00420809,  0.92218465,  0.56972889,  0.33692364,  0.78443328,
               0.85782964,  0.37575964,  0.87464859,  0.11910716,  0.75204296,
               0.29393647,  0.72351151,  0.38529595,  0.53399146,  0.91528916,
               0.32794208,  0.20644824,  0.94458724,  0.47454549,  0.80241627,
               0.29024927,  0.02927087,  0.63741753,  0.91254413,  0.46392618,
               0.64034543,  0.6135856 ,  0.22067156,  0.16222162,  0.55021357,
               0.11390361,  0.78071715,  0.22106714,  0.78159775,  0.88506218,
               0.3853626 ,  0.98313474,  0.29282953,  0.32008846,  0.77294971,
               0.91517891,  0.15011473,  0.32506458,  0.84585433,  0.00246719,
               0.16456584,  0.16913025,  0.59593298,  0.77886595,  0.91135575,
               0.80605196,  0.36700531,  0.50046558,  0.45693363,  0.93126156,
               0.38127651,  0.4154189 ,  0.96681687,  0.99609329,  0.81752955,
               0.65763457,  0.74745919,  0.88798025,  0.56312983,  0.81392063,
               0.47009246,  0.09731164,  0.32737529,  0.94613   ,  0.44351469,
               0.47696746,  0.40859156,  0.12001725,  0.80593507,  0.47369146,
               0.23865035,  0.02185934,  0.93104957,  0.27176856,  0.00771737,
               0.4590995 ,  0.84477395,  0.8131259 ,  0.81432362,  0.2104468 ,
               0.6478693 ,  0.22018757,  0.87527796,  0.23117294,  0.41690766,
               0.57960842,  0.82607598,  0.10051422,  0.68075276,  0.39981598,
               0.8673906 ,  0.87442117,  0.60087388,  0.24981604,  0.17492927])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.40873989,  0.3025264 ,  0.75367392,  0.89730265,  0.93707151,
               0.1085393 ,  0.12746546,  0.38435187,  0.43221164,  0.83906815,
               0.96100476,  0.49106943,  0.59832504,  0.5140966 ,  0.26136903,
               0.56647008,  0.09191379,  0.76945999,  0.16843438,  0.26250361,
               0.31478175,  0.22478467,  0.48825463,  0.64213224,  0.05573557,
               0.77211872,  0.38440376,  0.00428613,  0.34589474,  0.29282908,
               0.67064017,  0.11380493,  0.13453147,  0.17372842,  0.19840048,
               0.90235286,  0.5758119 ,  0.45828145,  0.13380127,  0.1225095 ,
               0.83928513,  0.7498762 ,  0.16385122,  0.36871009,  0.35866171,
               0.07076094,  0.8062917 ,  0.20420618,  0.51293581,  0.77683182,
               0.81210382,  0.94385059,  0.08903866,  0.48271072,  0.73726217,
               0.81770663,  0.54122767,  0.67549304,  0.27765083,  0.2436517 ,
               0.25156721,  0.50425554,  0.04959501,  0.84728988,  0.29107017,
               0.09314787,  0.53342353,  0.92597936,  0.01991709,  0.62088203,
               0.84563467,  0.6596393 ,  0.84257965,  0.94023871,  0.89575068,
               0.72212305,  0.35040341,  0.63203046,  0.69937037,  0.08421945,
               0.05438321,  0.08890181,  0.14360849,  0.16208591,  0.54303606,
               0.16124908,  0.36456255,  0.53930633,  0.78908964,  0.36924006,
               0.72637838,  0.24603752,  0.01817363,  0.58975093,  0.91851361,
               0.0893525 ,  0.18093492,  0.90824401,  0.50413203,  0.23435888])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.74269238,  0.45565495,  0.40438986,  0.81749943,  0.49034621,
               0.45693958,  0.90914266,  0.06638214,  0.30819861,  0.95800871,
               0.91876314,  0.05725907,  0.85459064,  0.78545997,  0.45282146,
               0.16985122,  0.67143537,  0.77737846,  0.12083925,  0.68271238,
               0.44641286,  0.77868124,  0.35903994,  0.26505866,  0.04402616,
               0.49839452,  0.96943852,  0.78174738,  0.80930636,  0.92789323,
               0.73761959,  0.88962492,  0.40359781,  0.47855777,  0.09011263,
               0.20824008,  0.60013526,  0.98104515,  0.87557201,  0.11533735,
               0.85136777,  0.52573623,  0.822623  ,  0.5888032 ,  0.63051318,
               0.58320428,  0.66269967,  0.29564464,  0.87879098,  0.49384619,
               0.96648609,  0.48155958,  0.47931629,  0.70196567,  0.29279555,
               0.62830772,  0.92987864,  0.82306711,  0.75452683,  0.26020153,
               0.92712571,  0.79283606,  0.58713769,  0.48954227,  0.68128002,
               0.46578872,  0.4477149 ,  0.72382541,  0.92002106,  0.90187645,
               0.76157895,  0.74707155,  0.9715593 ,  0.43750316,  0.06704117,
               0.22040256,  0.95387908,  0.89587542,  0.93627865,  0.43704954,
               0.20416544,  0.07239907,  0.1444059 ,  0.73693532,  0.68082695,
               0.9845365 ,  0.36171629,  0.82043924,  0.97994339,  0.05843787,
               0.27978804,  0.47572043,  0.59987524,  0.49967028,  0.39157237,
               0.10587593,  0.47419493,  0.69972351,  0.06552573,  0.77277991])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.97108145,  0.4512613 ,  0.2567403 ,  0.50220361,  0.99299527,
               0.22584661,  0.6760811 ,  0.04401363,  0.93580256,  0.67984292,
               0.50788466,  0.71213803,  0.53417874,  0.52725576,  0.3334674 ,
               0.02245377,  0.58280474,  0.01303413,  0.88305493,  0.87297105,
               0.23980191,  0.69871357,  0.29967162,  0.55871012,  0.84814468,
               0.01153208,  0.11578406,  0.75567605,  0.39730962,  0.95116436,
               0.48212009,  0.11325128,  0.01369769,  0.20144092,  0.53489718,
               0.12462557,  0.68913154,  0.02936661,  0.36283258,  0.43275632,
               0.09605429,  0.55891811,  0.49105239,  0.74636501,  0.16903336,
               0.30023533,  0.05343825,  0.52015032,  0.36914259,  0.86908373,
               0.90039331,  0.58423143,  0.62636158,  0.02721549,  0.47582738,
               0.97452347,  0.05789139,  0.8598778 ,  0.44219023,  0.21678064,
               0.09429648,  0.01780682,  0.98926116,  0.51207623,  0.01001539,
               0.21595768,  0.8101043 ,  0.99799054,  0.79893294,  0.21070294,
               0.95492729,  0.01575208,  0.29845065,  0.48883717,  0.34964842,
               0.59736143,  0.26015075,  0.30693364,  0.23542973,  0.12613737,
               0.05138136,  0.40800437,  0.1090496 ,  0.07617733,  0.47487898,
               0.83829372,  0.11841564,  0.23044851,  0.91675542,  0.02273717,
               0.34376298,  0.19981203,  0.12068199,  0.06714718,  0.968422  ,
               0.25504989,  0.233994  ,  0.31037489,  0.41956283,  0.17198122])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.72211753,  0.65272848,  0.1635715 ,  0.94290947,  0.26064103,
               0.03960239,  0.80304049,  0.51800067,  0.16045401,  0.47926014,
               0.35770079,  0.1734963 ,  0.25307277,  0.53584738,  0.4530681 ,
               0.69043308,  0.04283586,  0.31789102,  0.31746564,  0.88399682,
               0.83286787,  0.51914989,  0.94392154,  0.69437859,  0.55138531,
               0.92121019,  0.83667982,  0.54693422,  0.59079975,  0.24874867,
               0.85707739,  0.19422727,  0.86644984,  0.64359796,  0.98387364,
               0.45635618,  0.27019445,  0.72652636,  0.26475688,  0.52862679,
               0.88343276,  0.61624563,  0.36714909,  0.44041015,  0.33623169,
               0.05768912,  0.2919676 ,  0.56486531,  0.02727919,  0.72250463,
               0.7512243 ,  0.4022118 ,  0.56270873,  0.05993951,  0.96536561,
               0.72225978,  0.31882507,  0.78379626,  0.49331773,  0.96621994,
               0.82286442,  0.59123696,  0.60025186,  0.1178538 ,  0.97272404,
               0.74349698,  0.18385688,  0.14193402,  0.47523124,  0.50120369,
               0.93578577,  0.97069794,  0.81259789,  0.23586079,  0.16659027,
               0.47788474,  0.95915444,  0.12170548,  0.24159934,  0.28612761,
               0.79998329,  0.55521226,  0.59474022,  0.17216594,  0.94536108,
               0.38374093,  0.6023906 ,  0.19480807,  0.78222253,  0.6743154 ,
               0.01581317,  0.39812838,  0.21606748,  0.19902353,  0.03110731,
               0.47765951,  0.20239228,  0.88654524,  0.94733324,  0.73315039])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.12437335,  0.93533723,  0.70139017,  0.93922399,  0.66713826,
               0.41496063,  0.20665002,  0.47372012,  0.04020866,  0.87152763,
               0.46305659,  0.0757374 ,  0.39283078,  0.60346393,  0.94438006,
               0.28609865,  0.80057273,  0.14061076,  0.59894077,  0.77595995,
               0.08099395,  0.52515006,  0.11338964,  0.33506533,  0.04691572,
               0.64461223,  0.99487526,  0.02294975,  0.37020931,  0.33062323,
               0.55112735,  0.19641045,  0.64758382,  0.50825566,  0.29104714,
               0.0973202 ,  0.04160322,  0.55544382,  0.6543548 ,  0.8676258 ,
               0.83166416,  0.30034883,  0.73844348,  0.45775821,  0.71517658,
               0.0726798 ,  0.56184438,  0.31164544,  0.03325226,  0.86646899,
               0.61377444,  0.7586469 ,  0.38217229,  0.19649139,  0.14372656,
               0.15317827,  0.64731799,  0.13175599,  0.51616743,  0.81333614,
               0.71910462,  0.66523605,  0.12097713,  0.44759838,  0.81135389,
               0.34933781,  0.4623586 ,  0.52198293,  0.77468135,  0.88140609,
               0.5809383 ,  0.11454653,  0.30241014,  0.61650741,  0.96346521,
               0.50443553,  0.03430321,  0.08193934,  0.22645485,  0.26159038,
               0.76241243,  0.20827053,  0.58463818,  0.2432091 ,  0.0032523 ,
               0.88846789,  0.71389078,  0.23043395,  0.06665885,  0.58120239,
               0.49617057,  0.69829694,  0.22283205,  0.8017412 ,  0.64187317,
               0.36258906,  0.6494624 ,  0.96836386,  0.43585647,  0.78870157])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.75503171,  0.0194281 ,  0.31650997,  0.0026338 ,  0.57930898,
               0.49937505,  0.8458338 ,  0.14918486,  0.75124488,  0.60803328,
               0.60571467,  0.22797208,  0.92134178,  0.04929698,  0.35869197,
               0.40894199,  0.23575025,  0.41150591,  0.73944949,  0.51516674,
               0.02019415,  0.25626604,  0.30042695,  0.52476251,  0.58249393,
               0.86716339,  0.34946369,  0.38012791,  0.37270141,  0.3740437 ,
               0.39765749,  0.86620783,  0.18870364,  0.25584173,  0.13227518,
               0.10239101,  0.45313237,  0.5123199 ,  0.63014938,  0.9398732 ,
               0.92712325,  0.87492021,  0.1269567 ,  0.05766881,  0.57560067,
               0.22101863,  0.86452651,  0.44566371,  0.18440836,  0.88440664,
               0.88593283,  0.40283396,  0.51076918,  0.91585141,  0.65101366,
               0.18147761,  0.97010863,  0.89340451,  0.00430189,  0.66155658,
               0.93589201,  0.14322272,  0.0645744 ,  0.17023818,  0.72226771,
               0.46147817,  0.87629359,  0.76774575,  0.20636612,  0.09441515,
               0.30551194,  0.85245626,  0.35499642,  0.29326374,  0.07241717,
               0.44741792,  0.25331204,  0.08280274,  0.30533261,  0.4571511 ,
               0.05055794,  0.50894599,  0.20273162,  0.982788  ,  0.4140992 ,
               0.83952689,  0.72552578,  0.97841743,  0.74426003,  0.42132626,
               0.63128566,  0.28804604,  0.28351161,  0.75407772,  0.6332124 ,
               0.4172564 ,  0.03349404,  0.07925896,  0.04832485,  0.70882383])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.97108145,  0.4512613 ,  0.2567403 ,  0.50220361,  0.99299527,
               0.22584661,  0.6760811 ,  0.04401363,  0.93580256,  0.67984292,
               0.50788466,  0.71213803,  0.53417874,  0.52725576,  0.3334674 ,
               0.02245377,  0.58280474,  0.01303413,  0.88305493,  0.87297105,
               0.23980191,  0.69871357,  0.29967162,  0.55871012,  0.84814468,
               0.01153208,  0.11578406,  0.75567605,  0.39730962,  0.95116436,
               0.48212009,  0.11325128,  0.01369769,  0.20144092,  0.53489718,
               0.12462557,  0.68913154,  0.02936661,  0.36283258,  0.43275632,
               0.09605429,  0.55891811,  0.49105239,  0.74636501,  0.16903336,
               0.30023533,  0.05343825,  0.52015032,  0.36914259,  0.86908373,
               0.90039331,  0.58423143,  0.62636158,  0.02721549,  0.47582738,
               0.97452347,  0.05789139,  0.8598778 ,  0.44219023,  0.21678064,
               0.09429648,  0.01780682,  0.98926116,  0.51207623,  0.01001539,
               0.21595768,  0.8101043 ,  0.99799054,  0.79893294,  0.21070294,
               0.95492729,  0.01575208,  0.29845065,  0.48883717,  0.34964842,
               0.59736143,  0.26015075,  0.30693364,  0.23542973,  0.12613737,
               0.05138136,  0.40800437,  0.1090496 ,  0.07617733,  0.47487898,
               0.83829372,  0.11841564,  0.23044851,  0.91675542,  0.02273717,
               0.34376298,  0.19981203,  0.12068199,  0.06714718,  0.968422  ,
               0.25504989,  0.233994  ,  0.31037489,  0.41956283,  0.17198122])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.72211753,  0.65272848,  0.1635715 ,  0.94290947,  0.26064103,
               0.03960239,  0.80304049,  0.51800067,  0.16045401,  0.47926014,
               0.35770079,  0.1734963 ,  0.25307277,  0.53584738,  0.4530681 ,
               0.69043308,  0.04283586,  0.31789102,  0.31746564,  0.88399682,
               0.83286787,  0.51914989,  0.94392154,  0.69437859,  0.55138531,
               0.92121019,  0.83667982,  0.54693422,  0.59079975,  0.24874867,
               0.85707739,  0.19422727,  0.86644984,  0.64359796,  0.98387364,
               0.45635618,  0.27019445,  0.72652636,  0.26475688,  0.52862679,
               0.88343276,  0.61624563,  0.36714909,  0.44041015,  0.33623169,
               0.05768912,  0.2919676 ,  0.56486531,  0.02727919,  0.72250463,
               0.7512243 ,  0.4022118 ,  0.56270873,  0.05993951,  0.96536561,
               0.72225978,  0.31882507,  0.78379626,  0.49331773,  0.96621994,
               0.82286442,  0.59123696,  0.60025186,  0.1178538 ,  0.97272404,
               0.74349698,  0.18385688,  0.14193402,  0.47523124,  0.50120369,
               0.93578577,  0.97069794,  0.81259789,  0.23586079,  0.16659027,
               0.47788474,  0.95915444,  0.12170548,  0.24159934,  0.28612761,
               0.79998329,  0.55521226,  0.59474022,  0.17216594,  0.94536108,
               0.38374093,  0.6023906 ,  0.19480807,  0.78222253,  0.6743154 ,
               0.01581317,  0.39812838,  0.21606748,  0.19902353,  0.03110731,
               0.47765951,  0.20239228,  0.88654524,  0.94733324,  0.73315039])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.12437335,  0.93533723,  0.70139017,  0.93922399,  0.66713826,
               0.41496063,  0.20665002,  0.47372012,  0.04020866,  0.87152763,
               0.46305659,  0.0757374 ,  0.39283078,  0.60346393,  0.94438006,
               0.28609865,  0.80057273,  0.14061076,  0.59894077,  0.77595995,
               0.08099395,  0.52515006,  0.11338964,  0.33506533,  0.04691572,
               0.64461223,  0.99487526,  0.02294975,  0.37020931,  0.33062323,
               0.55112735,  0.19641045,  0.64758382,  0.50825566,  0.29104714,
               0.0973202 ,  0.04160322,  0.55544382,  0.6543548 ,  0.8676258 ,
               0.83166416,  0.30034883,  0.73844348,  0.45775821,  0.71517658,
               0.0726798 ,  0.56184438,  0.31164544,  0.03325226,  0.86646899,
               0.61377444,  0.7586469 ,  0.38217229,  0.19649139,  0.14372656,
               0.15317827,  0.64731799,  0.13175599,  0.51616743,  0.81333614,
               0.71910462,  0.66523605,  0.12097713,  0.44759838,  0.81135389,
               0.34933781,  0.4623586 ,  0.52198293,  0.77468135,  0.88140609,
               0.5809383 ,  0.11454653,  0.30241014,  0.61650741,  0.96346521,
               0.50443553,  0.03430321,  0.08193934,  0.22645485,  0.26159038,
               0.76241243,  0.20827053,  0.58463818,  0.2432091 ,  0.0032523 ,
               0.88846789,  0.71389078,  0.23043395,  0.06665885,  0.58120239,
               0.49617057,  0.69829694,  0.22283205,  0.8017412 ,  0.64187317,
               0.36258906,  0.6494624 ,  0.96836386,  0.43585647,  0.78870157])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.57983539,  0.2683092 ,  0.13290002,  0.69403828,  0.16323413,
               0.32261493,  0.73092714,  0.75025977,  0.74520129,  0.78823677,
               0.80256852,  0.91057591,  0.57586877,  0.14107376,  0.09230042,
               0.03340665,  0.90038678,  0.10973436,  0.12580106,  0.44738976,
               0.7261011 ,  0.42775226,  0.17626271,  0.55821626,  0.26468048,
               0.4395993 ,  0.69062545,  0.71913285,  0.22492364,  0.65014812,
               0.30796299,  0.14470304,  0.3334452 ,  0.68034235,  0.77187608,
               0.59833809,  0.98016494,  0.10350359,  0.53753543,  0.74036388,
               0.20274561,  0.32607794,  0.69650696,  0.01563466,  0.44154871,
               0.95477862,  0.90221754,  0.90165764,  0.63008925,  0.36805431,
               0.82913646,  0.9840512 ,  0.92704418,  0.69226634,  0.4614789 ,
               0.62713661,  0.80917533,  0.60465784,  0.20297889,  0.32797767,
               0.09721963,  0.13289303,  0.1099561 ,  0.12600413,  0.11483232,
               0.59286548,  0.31207462,  0.11087621,  0.26084   ,  0.03209467,
               0.36342436,  0.45071964,  0.58359636,  0.26388462,  0.28505628,
               0.62150405,  0.8090618 ,  0.78064627,  0.05264217,  0.62047781,
               0.22348476,  0.92024602,  0.72316553,  0.91148993,  0.60205922,
               0.58626524,  0.11129453,  0.54444317,  0.58555385,  0.76876422,
               0.16266124,  0.13919127,  0.34594845,  0.10139725,  0.63718459,
               0.71904155,  0.6267698 ,  0.23881505,  0.54650939,  0.83143113])}]]


