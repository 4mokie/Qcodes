
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='d3a8c5f6-babf-4e06-b7d7-14ac573bea3c'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='d9f924b8-a0b4-47df-ac82-f053e6df674c'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.905883533416112],
     [0.151786016637486],
     [0.035441952760173],
     [0.133938402095085],
     [0.564942339874083],
     [0.120513094507566],
     [0.539756565052849],
     [0.394671650439334],
     [0.181227245676761],
     [0.346523391930145],
     [0.341805248587708],
     [0.738708944658237],
     [0.0670830740812384],
     [0.491096425015141],
     [0.985079187095576],
     [0.65570143371476],
     [0.617517945597392],
     [0.886623971065323],
     [0.474748278894312],
     [0.0818171401990744],
     [0.692724158993472],
     [0.963381112178628],
     [0.221158441750044],
     [0.914864857121607],
     [0.700090052813267],
     [0.88841299177914],
     [0.509499821580254],
     [0.304278071079272],
     [0.136837440042269],
     [0.0962763377520715],
     [0.677632967233304],
     [0.18775005311106],
     [0.0316451521924656],
     [0.976955005134149],
     [0.219026688886156],
     [0.0685635350360511],
     [0.405607751713382],
     [0.0658388748347354],
     [0.348261666977849],
     [0.471697746074558],
     [0.921798240564103],
     [0.0112141300748289],
     [0.696209914903535],
     [0.928442910417465],
     [0.263685596404582],
     [0.853763355634771],
     [0.234545935012164],
     [0.0570390000750166],
     [0.376187002842787],
     [0.794963951809651],
     [0.593085278943057],
     [0.977448766116634],
     [0.0727349184543843],
     [0.557967090851822],
     [0.518500271005608],
     [0.855615377131198],
     [0.634610354442701],
     [0.754091916598647],
     [0.389191913020891],
     [0.948139803903815],
     [0.978706750355898],
     [0.195350611669977],
     [0.693932460503982],
     [0.159540928884837],
     [0.0968488035698428],
     [0.0647639017107171],
     [0.815084804763459],
     [0.704164191372207],
     [0.745141918650874],
     [0.209645893437969],
     [0.270978276508557],
     [0.203226092383512],
     [0.813135223090374],
     [0.459006778723871],
     [0.0499717390230749],
     [0.232485597204463],
     [0.794036184636796],
     [0.359373053945848],
     [0.0842397684185876],
     [0.824602627761966],
     [0.20448753615244],
     [0.418798789561118],
     [0.205984108549702],
     [0.70000967934607],
     [0.236217670823101],
     [0.683839836295523],
     [0.604925152059227],
     [0.593718813593094],
     [0.142729806801952],
     [0.82634210143621],
     [0.633264244824259],
     [0.468427059787812],
     [0.332429351212925],
     [0.570975926436076],
     [0.586452821237192],
     [0.991021208605642],
     [0.730412642651256],
     [0.0764536126055142],
     [0.163957100972244],
     [0.362577410116616]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.24063251])],
     [array([ 0.69798937])],
     [array([ 0.10274284])],
     [array([ 0.52369481])],
     [array([ 0.29791032])],
     [array([ 0.25024418])],
     [array([ 0.29865032])],
     [array([ 0.471823])],
     [array([ 0.46520642])],
     [array([ 0.7154067])],
     [array([ 0.49746856])],
     [array([ 0.06900338])],
     [array([ 0.42810748])],
     [array([ 0.29523036])],
     [array([ 0.04006996])],
     [array([ 0.79076995])],
     [array([ 0.05048146])],
     [array([ 0.05470982])],
     [array([ 0.88029872])],
     [array([ 0.10806841])],
     [array([ 0.63180659])],
     [array([ 0.92673112])],
     [array([ 0.41435362])],
     [array([ 0.51380493])],
     [array([ 0.58426931])],
     [array([ 0.91985644])],
     [array([ 0.99731635])],
     [array([ 0.16452699])],
     [array([ 0.29831653])],
     [array([ 0.34539664])],
     [array([ 0.97467063])],
     [array([ 0.62028467])],
     [array([ 0.5088585])],
     [array([ 0.76547915])],
     [array([ 0.39331572])],
     [array([ 0.77018542])],
     [array([ 0.13452321])],
     [array([ 0.41299724])],
     [array([ 0.04207899])],
     [array([ 0.30257195])],
     [array([ 0.85102748])],
     [array([ 0.99319178])],
     [array([ 0.78478794])],
     [array([ 0.39778592])],
     [array([ 0.04997409])],
     [array([ 0.69605564])],
     [array([ 0.38104785])],
     [array([ 0.23181512])],
     [array([ 0.25841033])],
     [array([ 0.9446597])],
     [array([ 0.86212854])],
     [array([ 0.45776707])],
     [array([ 0.19002013])],
     [array([ 0.00861229])],
     [array([ 0.60558808])],
     [array([ 0.51656988])],
     [array([ 0.41651114])],
     [array([ 0.24247431])],
     [array([ 0.68106567])],
     [array([ 0.76289621])],
     [array([ 0.64103132])],
     [array([ 0.98523557])],
     [array([ 0.6019845])],
     [array([ 0.77992978])],
     [array([ 0.76455366])],
     [array([ 0.56722626])],
     [array([ 0.39550875])],
     [array([ 0.68233568])],
     [array([ 0.16832424])],
     [array([ 0.81623123])],
     [array([ 0.99215972])],
     [array([ 0.44134757])],
     [array([ 0.31133278])],
     [array([ 0.39863625])],
     [array([ 0.59367371])],
     [array([ 0.48771524])],
     [array([ 0.24165684])],
     [array([ 0.22114285])],
     [array([ 0.27086943])],
     [array([ 0.57388637])],
     [array([ 0.14933362])],
     [array([ 0.79117822])],
     [array([ 0.67967096])],
     [array([ 0.09553829])],
     [array([ 0.992331])],
     [array([ 0.28351779])],
     [array([ 0.91357338])],
     [array([ 0.90922309])],
     [array([ 0.90344425])],
     [array([ 0.8984227])],
     [array([ 0.93152393])],
     [array([ 0.44696444])],
     [array([ 0.17360624])],
     [array([ 0.72801768])],
     [array([ 0.32498782])],
     [array([ 0.64804631])],
     [array([ 0.44417342])],
     [array([ 0.25315722])],
     [array([ 0.01271093])],
     [array([ 0.47768638])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.24063251,  0.69798937,  0.10274284,  0.52369481,  0.29791032,
            0.25024418,  0.29865032,  0.471823  ,  0.46520642,  0.7154067 ,
            0.49746856,  0.06900338,  0.42810748,  0.29523036,  0.04006996,
            0.79076995,  0.05048146,  0.05470982,  0.88029872,  0.10806841,
            0.63180659,  0.92673112,  0.41435362,  0.51380493,  0.58426931,
            0.91985644,  0.99731635,  0.16452699,  0.29831653,  0.34539664,
            0.97467063,  0.62028467,  0.5088585 ,  0.76547915,  0.39331572,
            0.77018542,  0.13452321,  0.41299724,  0.04207899,  0.30257195,
            0.85102748,  0.99319178,  0.78478794,  0.39778592,  0.04997409,
            0.69605564,  0.38104785,  0.23181512,  0.25841033,  0.9446597 ,
            0.86212854,  0.45776707,  0.19002013,  0.00861229,  0.60558808,
            0.51656988,  0.41651114,  0.24247431,  0.68106567,  0.76289621,
            0.64103132,  0.98523557,  0.6019845 ,  0.77992978,  0.76455366,
            0.56722626,  0.39550875,  0.68233568,  0.16832424,  0.81623123,
            0.99215972,  0.44134757,  0.31133278,  0.39863625,  0.59367371,
            0.48771524,  0.24165684,  0.22114285,  0.27086943,  0.57388637,
            0.14933362,  0.79117822,  0.67967096,  0.09553829,  0.992331  ,
            0.28351779,  0.91357338,  0.90922309,  0.90344425,  0.8984227 ,
            0.93152393,  0.44696444,  0.17360624,  0.72801768,  0.32498782,
            0.64804631,  0.44417342,  0.25315722,  0.01271093,  0.47768638])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.90588353,  0.15178602,  0.03544195,  0.1339384 ,  0.56494234,
               0.12051309,  0.53975657,  0.39467165,  0.18122725,  0.34652339,
               0.34180525,  0.73870894,  0.06708307,  0.49109643,  0.98507919,
               0.65570143,  0.61751795,  0.88662397,  0.47474828,  0.08181714,
               0.69272416,  0.96338111,  0.22115844,  0.91486486,  0.70009005,
               0.88841299,  0.50949982,  0.30427807,  0.13683744,  0.09627634,
               0.67763297,  0.18775005,  0.03164515,  0.97695501,  0.21902669,
               0.06856354,  0.40560775,  0.06583887,  0.34826167,  0.47169775,
               0.92179824,  0.01121413,  0.69620991,  0.92844291,  0.2636856 ,
               0.85376336,  0.23454594,  0.057039  ,  0.376187  ,  0.79496395,
               0.59308528,  0.97744877,  0.07273492,  0.55796709,  0.51850027,
               0.85561538,  0.63461035,  0.75409192,  0.38919191,  0.9481398 ,
               0.97870675,  0.19535061,  0.69393246,  0.15954093,  0.0968488 ,
               0.0647639 ,  0.8150848 ,  0.70416419,  0.74514192,  0.20964589,
               0.27097828,  0.20322609,  0.81313522,  0.45900678,  0.04997174,
               0.2324856 ,  0.79403618,  0.35937305,  0.08423977,  0.82460263,
               0.20448754,  0.41879879,  0.20598411,  0.70000968,  0.23621767,
               0.68383984,  0.60492515,  0.59371881,  0.14272981,  0.8263421 ,
               0.63326424,  0.46842706,  0.33242935,  0.57097593,  0.58645282,
               0.99102121,  0.73041264,  0.07645361,  0.1639571 ,  0.36257741])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.82454807,  0.91474692,  0.89471179,  0.5071332 ,  0.55421685,
               0.95994538,  0.75409864,  0.49430354,  0.89760275,  0.57730162,
               0.47600138,  0.25441762,  0.74904082,  0.20225144,  0.33449447,
               0.13254212,  0.48906267,  0.64534247,  0.69826795,  0.05811773,
               0.11773889,  0.26652644,  0.43517482,  0.48696495,  0.19381019,
               0.86125639,  0.54449892,  0.17305613,  0.91755223,  0.83628714,
               0.99644097,  0.59311396,  0.28651645,  0.19518233,  0.12290153,
               0.43949282,  0.74718705,  0.6091285 ,  0.01536584,  0.45884694,
               0.47368801,  0.93994458,  0.28434344,  0.07685793,  0.94496243,
               0.0795988 ,  0.53789926,  0.27029286,  0.16266855,  0.96624033,
               0.7232242 ,  0.12248757,  0.03651587,  0.56695044,  0.58945876,
               0.24599774,  0.32585884,  0.64202334,  0.88428337,  0.11805782,
               0.53977037,  0.44836404,  0.61584525,  0.15827313,  0.41412611,
               0.97881343,  0.76128811,  0.95258178,  0.23056889,  0.17848467,
               0.99704817,  0.29608563,  0.59316508,  0.5076407 ,  0.42589602,
               0.32197676,  0.48055125,  0.45210636,  0.2316655 ,  0.13375414,
               0.44322389,  0.91156748,  0.90025582,  0.10388981,  0.00946426,
               0.03119913,  0.09514423,  0.24887285,  0.29790656,  0.12768201,
               0.46404999,  0.3200053 ,  0.83507918,  0.86374584,  0.36143113,
               0.37479859,  0.64531578,  0.84133787,  0.89807175,  0.97821327])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.20111317,  0.6810319 ,  0.4871991 ,  0.55894084,  0.70742578,
               0.90378787,  0.63237877,  0.17977342,  0.12161399,  0.13603413,
               0.03004708,  0.43843442,  0.35423034,  0.29338627,  0.68031009,
               0.37717514,  0.61777518,  0.98351995,  0.40935984,  0.47815666,
               0.21907105,  0.93646217,  0.47775303,  0.15792626,  0.82901383,
               0.83629111,  0.28665793,  0.7093932 ,  0.77127025,  0.18977391,
               0.98933897,  0.46768398,  0.74233292,  0.73331779,  0.95418854,
               0.2921915 ,  0.23979794,  0.39187061,  0.39836549,  0.92360985,
               0.60038892,  0.41340904,  0.33232464,  0.64921668,  0.7178367 ,
               0.55753207,  0.9022035 ,  0.02197107,  0.30820822,  0.1769397 ,
               0.30804934,  0.92712578,  0.89917534,  0.31518225,  0.190468  ,
               0.89493144,  0.11434501,  0.77664888,  0.18717645,  0.35014588,
               0.87220939,  0.86205424,  0.94292393,  0.88674212,  0.64255882,
               0.32642772,  0.29514133,  0.10985532,  0.86806738,  0.31530558,
               0.32164519,  0.2275029 ,  0.87081609,  0.16065947,  0.86837547,
               0.23687065,  0.35313869,  0.21074654,  0.29839664,  0.81027613,
               0.30450363,  0.83675184,  0.15264186,  0.39393306,  0.05123828,
               0.29656692,  0.23918884,  0.37082921,  0.82884457,  0.49710882,
               0.52434689,  0.64195204,  0.91105934,  0.29184211,  0.61279279,
               0.92101888,  0.0322339 ,  0.11134203,  0.91979779,  0.69346197])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.86267555,  0.74381118,  0.04023261,  0.03238382,  0.10631195,
               0.86930171,  0.70405008,  0.52788394,  0.66028764,  0.50725513,
               0.09575172,  0.74510117,  0.73481181,  0.60670655,  0.35105261,
               0.07937904,  0.57456272,  0.54793098,  0.97844365,  0.43073144,
               0.97969074,  0.36200236,  0.06079639,  0.01570135,  0.40933001,
               0.83658512,  0.78145973,  0.30090207,  0.15106361,  0.11891181,
               0.56638766,  0.19420756,  0.92395764,  0.47395102,  0.16713909,
               0.89286697,  0.00816995,  0.74579568,  0.138448  ,  0.39668455,
               0.43070062,  0.47724715,  0.01694563,  0.47239558,  0.71016971,
               0.96761275,  0.14955745,  0.18449893,  0.30327912,  0.47337726,
               0.18159187,  0.02329531,  0.24583285,  0.49648895,  0.88098929,
               0.71054187,  0.40511544,  0.04618619,  0.85421316,  0.62519373,
               0.74814964,  0.77872422,  0.00402323,  0.63014524,  0.03404374,
               0.44325361,  0.17630568,  0.08581826,  0.39600345,  0.66291535,
               0.52924227,  0.47929934,  0.4324939 ,  0.09821822,  0.86091149,
               0.31839308,  0.39024309,  0.38415416,  0.43199789,  0.58486524,
               0.59123295,  0.39401526,  0.31592579,  0.7411252 ,  0.89863556,
               0.79234481,  0.11476901,  0.86197149,  0.22977561,  0.31800069,
               0.15813197,  0.98235908,  0.26645112,  0.64591349,  0.21280518,
               0.30442507,  0.99245803,  0.03500258,  0.43583308,  0.77123454])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.90588353,  0.15178602,  0.03544195,  0.1339384 ,  0.56494234,
               0.12051309,  0.53975657,  0.39467165,  0.18122725,  0.34652339,
               0.34180525,  0.73870894,  0.06708307,  0.49109643,  0.98507919,
               0.65570143,  0.61751795,  0.88662397,  0.47474828,  0.08181714,
               0.69272416,  0.96338111,  0.22115844,  0.91486486,  0.70009005,
               0.88841299,  0.50949982,  0.30427807,  0.13683744,  0.09627634,
               0.67763297,  0.18775005,  0.03164515,  0.97695501,  0.21902669,
               0.06856354,  0.40560775,  0.06583887,  0.34826167,  0.47169775,
               0.92179824,  0.01121413,  0.69620991,  0.92844291,  0.2636856 ,
               0.85376336,  0.23454594,  0.057039  ,  0.376187  ,  0.79496395,
               0.59308528,  0.97744877,  0.07273492,  0.55796709,  0.51850027,
               0.85561538,  0.63461035,  0.75409192,  0.38919191,  0.9481398 ,
               0.97870675,  0.19535061,  0.69393246,  0.15954093,  0.0968488 ,
               0.0647639 ,  0.8150848 ,  0.70416419,  0.74514192,  0.20964589,
               0.27097828,  0.20322609,  0.81313522,  0.45900678,  0.04997174,
               0.2324856 ,  0.79403618,  0.35937305,  0.08423977,  0.82460263,
               0.20448754,  0.41879879,  0.20598411,  0.70000968,  0.23621767,
               0.68383984,  0.60492515,  0.59371881,  0.14272981,  0.8263421 ,
               0.63326424,  0.46842706,  0.33242935,  0.57097593,  0.58645282,
               0.99102121,  0.73041264,  0.07645361,  0.1639571 ,  0.36257741])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.82454807,  0.91474692,  0.89471179,  0.5071332 ,  0.55421685,
               0.95994538,  0.75409864,  0.49430354,  0.89760275,  0.57730162,
               0.47600138,  0.25441762,  0.74904082,  0.20225144,  0.33449447,
               0.13254212,  0.48906267,  0.64534247,  0.69826795,  0.05811773,
               0.11773889,  0.26652644,  0.43517482,  0.48696495,  0.19381019,
               0.86125639,  0.54449892,  0.17305613,  0.91755223,  0.83628714,
               0.99644097,  0.59311396,  0.28651645,  0.19518233,  0.12290153,
               0.43949282,  0.74718705,  0.6091285 ,  0.01536584,  0.45884694,
               0.47368801,  0.93994458,  0.28434344,  0.07685793,  0.94496243,
               0.0795988 ,  0.53789926,  0.27029286,  0.16266855,  0.96624033,
               0.7232242 ,  0.12248757,  0.03651587,  0.56695044,  0.58945876,
               0.24599774,  0.32585884,  0.64202334,  0.88428337,  0.11805782,
               0.53977037,  0.44836404,  0.61584525,  0.15827313,  0.41412611,
               0.97881343,  0.76128811,  0.95258178,  0.23056889,  0.17848467,
               0.99704817,  0.29608563,  0.59316508,  0.5076407 ,  0.42589602,
               0.32197676,  0.48055125,  0.45210636,  0.2316655 ,  0.13375414,
               0.44322389,  0.91156748,  0.90025582,  0.10388981,  0.00946426,
               0.03119913,  0.09514423,  0.24887285,  0.29790656,  0.12768201,
               0.46404999,  0.3200053 ,  0.83507918,  0.86374584,  0.36143113,
               0.37479859,  0.64531578,  0.84133787,  0.89807175,  0.97821327])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.20111317,  0.6810319 ,  0.4871991 ,  0.55894084,  0.70742578,
               0.90378787,  0.63237877,  0.17977342,  0.12161399,  0.13603413,
               0.03004708,  0.43843442,  0.35423034,  0.29338627,  0.68031009,
               0.37717514,  0.61777518,  0.98351995,  0.40935984,  0.47815666,
               0.21907105,  0.93646217,  0.47775303,  0.15792626,  0.82901383,
               0.83629111,  0.28665793,  0.7093932 ,  0.77127025,  0.18977391,
               0.98933897,  0.46768398,  0.74233292,  0.73331779,  0.95418854,
               0.2921915 ,  0.23979794,  0.39187061,  0.39836549,  0.92360985,
               0.60038892,  0.41340904,  0.33232464,  0.64921668,  0.7178367 ,
               0.55753207,  0.9022035 ,  0.02197107,  0.30820822,  0.1769397 ,
               0.30804934,  0.92712578,  0.89917534,  0.31518225,  0.190468  ,
               0.89493144,  0.11434501,  0.77664888,  0.18717645,  0.35014588,
               0.87220939,  0.86205424,  0.94292393,  0.88674212,  0.64255882,
               0.32642772,  0.29514133,  0.10985532,  0.86806738,  0.31530558,
               0.32164519,  0.2275029 ,  0.87081609,  0.16065947,  0.86837547,
               0.23687065,  0.35313869,  0.21074654,  0.29839664,  0.81027613,
               0.30450363,  0.83675184,  0.15264186,  0.39393306,  0.05123828,
               0.29656692,  0.23918884,  0.37082921,  0.82884457,  0.49710882,
               0.52434689,  0.64195204,  0.91105934,  0.29184211,  0.61279279,
               0.92101888,  0.0322339 ,  0.11134203,  0.91979779,  0.69346197])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.41212978,  0.51294593,  0.50893587,  0.00739957,  0.80692252,
               0.81736933,  0.47801748,  0.81086521,  0.36311824,  0.71411834,
               0.432338  ,  0.81406741,  0.14855331,  0.35734897,  0.51687416,
               0.19660675,  0.51949037,  0.99151307,  0.78095793,  0.99109311,
               0.63271421,  0.99873904,  0.90573053,  0.36631554,  0.22962633,
               0.58397077,  0.15817624,  0.50797902,  0.06345236,  0.34493378,
               0.87206172,  0.9158107 ,  0.98586262,  0.39671732,  0.98743207,
               0.48525403,  0.13714689,  0.61347283,  0.73138875,  0.04593074,
               0.23136971,  0.53247689,  0.33601143,  0.0879213 ,  0.29911077,
               0.95217703,  0.08199039,  0.44988542,  0.74750544,  0.90096738,
               0.90148187,  0.00478031,  0.90884965,  0.41576091,  0.62212052,
               0.25009754,  0.20016279,  0.7399194 ,  0.16566759,  0.27457361,
               0.3455457 ,  0.42745895,  0.96302643,  0.53450836,  0.90061149,
               0.35769929,  0.89093279,  0.66470611,  0.56890297,  0.18213101,
               0.16594796,  0.79310591,  0.70312875,  0.9060078 ,  0.6533513 ,
               0.50242495,  0.50342048,  0.10885663,  0.3268898 ,  0.43074291,
               0.30280918,  0.70335715,  0.39707747,  0.55019865,  0.15415649,
               0.82503037,  0.54859789,  0.99570477,  0.93062619,  0.02355451,
               0.69625058,  0.90884725,  0.6688846 ,  0.72815526,  0.21393857,
               0.24453777,  0.01684801,  0.0069121 ,  0.0370005 ,  0.21178406])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.24063251,  0.69798937,  0.10274284,  0.52369481,  0.29791032,
               0.25024418,  0.29865032,  0.471823  ,  0.46520642,  0.7154067 ,
               0.49746856,  0.06900338,  0.42810748,  0.29523036,  0.04006996,
               0.79076995,  0.05048146,  0.05470982,  0.88029872,  0.10806841,
               0.63180659,  0.92673112,  0.41435362,  0.51380493,  0.58426931,
               0.91985644,  0.99731635,  0.16452699,  0.29831653,  0.34539664,
               0.97467063,  0.62028467,  0.5088585 ,  0.76547915,  0.39331572,
               0.77018542,  0.13452321,  0.41299724,  0.04207899,  0.30257195,
               0.85102748,  0.99319178,  0.78478794,  0.39778592,  0.04997409,
               0.69605564,  0.38104785,  0.23181512,  0.25841033,  0.9446597 ,
               0.86212854,  0.45776707,  0.19002013,  0.00861229,  0.60558808,
               0.51656988,  0.41651114,  0.24247431,  0.68106567,  0.76289621,
               0.64103132,  0.98523557,  0.6019845 ,  0.77992978,  0.76455366,
               0.56722626,  0.39550875,  0.68233568,  0.16832424,  0.81623123,
               0.99215972,  0.44134757,  0.31133278,  0.39863625,  0.59367371,
               0.48771524,  0.24165684,  0.22114285,  0.27086943,  0.57388637,
               0.14933362,  0.79117822,  0.67967096,  0.09553829,  0.992331  ,
               0.28351779,  0.91357338,  0.90922309,  0.90344425,  0.8984227 ,
               0.93152393,  0.44696444,  0.17360624,  0.72801768,  0.32498782,
               0.64804631,  0.44417342,  0.25315722,  0.01271093,  0.47768638])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.51805731,  0.72616913,  0.79367949,  0.77075101,  0.20736175,
               0.55251894,  0.67577192,  0.06647565,  0.30966121,  0.59136445,
               0.86341474,  0.9344403 ,  0.37179687,  0.7397124 ,  0.52463712,
               0.050013  ,  0.98394132,  0.51067595,  0.15235013,  0.51200389,
               0.51687366,  0.26519686,  0.92515345,  0.20397932,  0.73090715,
               0.3246305 ,  0.85587367,  0.79724974,  0.70432994,  0.71779638,
               0.47960234,  0.88635749,  0.11567339,  0.51829451,  0.26430789,
               0.35817536,  0.71342991,  0.36798038,  0.75843501,  0.21384244,
               0.53099101,  0.71640782,  0.98407391,  0.01103486,  0.35944754,
               0.92565315,  0.09649336,  0.25343029,  0.80061552,  0.94712888,
               0.32637995,  0.33783158,  0.496832  ,  0.01456594,  0.83038338,
               0.3672503 ,  0.75424831,  0.52054685,  0.44055689,  0.27332455,
               0.13537218,  0.97424216,  0.4392314 ,  0.08992728,  0.01223342,
               0.30681274,  0.25891465,  0.66875412,  0.02913717,  0.06138194,
               0.7474708 ,  0.59564458,  0.41861002,  0.12921868,  0.64362629,
               0.59890903,  0.17307419,  0.0299176 ,  0.43409762,  0.15324249,
               0.49975359,  0.60381093,  0.95459502,  0.21624826,  0.99862671,
               0.27661124,  0.64211543,  0.21055289,  0.39193889,  0.48384114,
               0.57262749,  0.41786415,  0.36277016,  0.22142544,  0.79018512,
               0.82822728,  0.64018321,  0.34994712,  0.01093857,  0.04358049])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.68562855,  0.57858666,  0.61036458,  0.88022782,  0.59039606,
               0.59361415,  0.41247368,  0.03830895,  0.17530867,  0.5162265 ,
               0.57940246,  0.59709517,  0.21289705,  0.87817598,  0.61392528,
               0.19131165,  0.54830707,  0.34626533,  0.12087362,  0.49511598,
               0.00990371,  0.32972858,  0.16261924,  0.66100694,  0.30016176,
               0.49554128,  0.35497982,  0.18521694,  0.75189942,  0.45383218,
               0.23086712,  0.74176885,  0.32219686,  0.40951827,  0.6206851 ,
               0.89366499,  0.5914545 ,  0.77789086,  0.93773247,  0.33848596,
               0.37415017,  0.18310148,  0.00752026,  0.04224304,  0.68979844,
               0.67825839,  0.84107563,  0.65002548,  0.12359269,  0.17067262,
               0.86340558,  0.12930046,  0.00857716,  0.21857611,  0.95333617,
               0.18591694,  0.10455392,  0.06389105,  0.96181956,  0.30261696,
               0.30599428,  0.14065206,  0.08730826,  0.68583338,  0.55531954,
               0.13487986,  0.35137777,  0.40753802,  0.11552866,  0.43323864,
               0.95447721,  0.20612145,  0.51549456,  0.35667965,  0.48804893,
               0.56656534,  0.50956307,  0.99865519,  0.29421344,  0.30393668,
               0.55759093,  0.20918557,  0.01253812,  0.95034881,  0.97998022,
               0.47442108,  0.34611275,  0.53318358,  0.32615132,  0.8593394 ,
               0.87026827,  0.0342875 ,  0.12356764,  0.22939716,  0.47508725,
               0.7989821 ,  0.20601017,  0.35157215,  0.32968872,  0.85689982])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([  1.31158897e-01,   1.14401565e-01,   8.72286883e-01,
                1.97719791e-01,   6.32529773e-01,   9.27888198e-01,
                8.64822342e-01,   7.29547678e-01,   1.49161012e-01,
                6.01855422e-01,   7.97235330e-01,   3.75926332e-01,
                7.55252550e-01,   1.14779707e-02,   4.82922689e-01,
                4.46281865e-01,   8.05006398e-02,   1.72482855e-01,
                1.65329945e-01,   2.11423386e-01,   2.02545317e-01,
                8.00922797e-01,   3.60589892e-01,   3.42032498e-01,
                2.88067347e-01,   9.18366620e-02,   5.50667343e-01,
                3.45996383e-01,   9.08183992e-01,   4.62455431e-01,
                9.52896877e-01,   6.63175661e-01,   4.90330392e-01,
                1.27921417e-01,   9.14036896e-02,   7.84874967e-01,
                8.91219953e-01,   1.20201174e-01,   9.27280035e-02,
                3.71998803e-01,   4.21182805e-01,   7.59014877e-01,
                1.52604790e-01,   8.64650468e-01,   5.63715978e-01,
                1.18992900e-01,   7.78034487e-01,   5.00539990e-01,
                7.80151190e-01,   7.54628716e-01,   9.35474480e-01,
                3.78128562e-01,   4.41768385e-02,   5.22825428e-01,
                2.06460069e-01,   2.36141827e-01,   9.75564216e-01,
                4.20385437e-01,   4.40730188e-01,   5.95700545e-01,
                5.64536280e-01,   6.17811717e-01,   7.03587719e-01,
                8.24960212e-01,   4.99343487e-01,   5.22337060e-01,
                4.53431610e-01,   8.98908028e-01,   5.92067606e-01,
                1.72669120e-01,   7.07608182e-01,   1.92884595e-01,
                7.55817695e-04,   2.14423312e-01,   4.26174112e-01,
                5.03910284e-01,   2.80372960e-01,   5.73417695e-01,
                3.68928145e-02,   5.62425830e-01,   4.28406389e-01,
                4.57220999e-01,   5.34398350e-01,   3.98380137e-01,
                7.13438176e-01,   2.99353026e-01,   5.47385259e-01,
                6.74186207e-01,   1.96143368e-01,   8.04256297e-01,
                4.59586323e-01,   2.45156992e-01,   3.25479885e-01,
                3.74256540e-01,   9.53140517e-02,   7.50341533e-01,
                4.70437758e-01,   6.32183207e-01,   8.08117665e-01,
                5.31373370e-02])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.24063251,  0.69798937,  0.10274284,  0.52369481,  0.29791032,
               0.25024418,  0.29865032,  0.471823  ,  0.46520642,  0.7154067 ,
               0.49746856,  0.06900338,  0.42810748,  0.29523036,  0.04006996,
               0.79076995,  0.05048146,  0.05470982,  0.88029872,  0.10806841,
               0.63180659,  0.92673112,  0.41435362,  0.51380493,  0.58426931,
               0.91985644,  0.99731635,  0.16452699,  0.29831653,  0.34539664,
               0.97467063,  0.62028467,  0.5088585 ,  0.76547915,  0.39331572,
               0.77018542,  0.13452321,  0.41299724,  0.04207899,  0.30257195,
               0.85102748,  0.99319178,  0.78478794,  0.39778592,  0.04997409,
               0.69605564,  0.38104785,  0.23181512,  0.25841033,  0.9446597 ,
               0.86212854,  0.45776707,  0.19002013,  0.00861229,  0.60558808,
               0.51656988,  0.41651114,  0.24247431,  0.68106567,  0.76289621,
               0.64103132,  0.98523557,  0.6019845 ,  0.77992978,  0.76455366,
               0.56722626,  0.39550875,  0.68233568,  0.16832424,  0.81623123,
               0.99215972,  0.44134757,  0.31133278,  0.39863625,  0.59367371,
               0.48771524,  0.24165684,  0.22114285,  0.27086943,  0.57388637,
               0.14933362,  0.79117822,  0.67967096,  0.09553829,  0.992331  ,
               0.28351779,  0.91357338,  0.90922309,  0.90344425,  0.8984227 ,
               0.93152393,  0.44696444,  0.17360624,  0.72801768,  0.32498782,
               0.64804631,  0.44417342,  0.25315722,  0.01271093,  0.47768638])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.51805731,  0.72616913,  0.79367949,  0.77075101,  0.20736175,
               0.55251894,  0.67577192,  0.06647565,  0.30966121,  0.59136445,
               0.86341474,  0.9344403 ,  0.37179687,  0.7397124 ,  0.52463712,
               0.050013  ,  0.98394132,  0.51067595,  0.15235013,  0.51200389,
               0.51687366,  0.26519686,  0.92515345,  0.20397932,  0.73090715,
               0.3246305 ,  0.85587367,  0.79724974,  0.70432994,  0.71779638,
               0.47960234,  0.88635749,  0.11567339,  0.51829451,  0.26430789,
               0.35817536,  0.71342991,  0.36798038,  0.75843501,  0.21384244,
               0.53099101,  0.71640782,  0.98407391,  0.01103486,  0.35944754,
               0.92565315,  0.09649336,  0.25343029,  0.80061552,  0.94712888,
               0.32637995,  0.33783158,  0.496832  ,  0.01456594,  0.83038338,
               0.3672503 ,  0.75424831,  0.52054685,  0.44055689,  0.27332455,
               0.13537218,  0.97424216,  0.4392314 ,  0.08992728,  0.01223342,
               0.30681274,  0.25891465,  0.66875412,  0.02913717,  0.06138194,
               0.7474708 ,  0.59564458,  0.41861002,  0.12921868,  0.64362629,
               0.59890903,  0.17307419,  0.0299176 ,  0.43409762,  0.15324249,
               0.49975359,  0.60381093,  0.95459502,  0.21624826,  0.99862671,
               0.27661124,  0.64211543,  0.21055289,  0.39193889,  0.48384114,
               0.57262749,  0.41786415,  0.36277016,  0.22142544,  0.79018512,
               0.82822728,  0.64018321,  0.34994712,  0.01093857,  0.04358049])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.68562855,  0.57858666,  0.61036458,  0.88022782,  0.59039606,
               0.59361415,  0.41247368,  0.03830895,  0.17530867,  0.5162265 ,
               0.57940246,  0.59709517,  0.21289705,  0.87817598,  0.61392528,
               0.19131165,  0.54830707,  0.34626533,  0.12087362,  0.49511598,
               0.00990371,  0.32972858,  0.16261924,  0.66100694,  0.30016176,
               0.49554128,  0.35497982,  0.18521694,  0.75189942,  0.45383218,
               0.23086712,  0.74176885,  0.32219686,  0.40951827,  0.6206851 ,
               0.89366499,  0.5914545 ,  0.77789086,  0.93773247,  0.33848596,
               0.37415017,  0.18310148,  0.00752026,  0.04224304,  0.68979844,
               0.67825839,  0.84107563,  0.65002548,  0.12359269,  0.17067262,
               0.86340558,  0.12930046,  0.00857716,  0.21857611,  0.95333617,
               0.18591694,  0.10455392,  0.06389105,  0.96181956,  0.30261696,
               0.30599428,  0.14065206,  0.08730826,  0.68583338,  0.55531954,
               0.13487986,  0.35137777,  0.40753802,  0.11552866,  0.43323864,
               0.95447721,  0.20612145,  0.51549456,  0.35667965,  0.48804893,
               0.56656534,  0.50956307,  0.99865519,  0.29421344,  0.30393668,
               0.55759093,  0.20918557,  0.01253812,  0.95034881,  0.97998022,
               0.47442108,  0.34611275,  0.53318358,  0.32615132,  0.8593394 ,
               0.87026827,  0.0342875 ,  0.12356764,  0.22939716,  0.47508725,
               0.7989821 ,  0.20601017,  0.35157215,  0.32968872,  0.85689982])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.94896546,  0.83890841,  0.19061321,  0.21908257,  0.30505303,
               0.86635421,  0.481824  ,  0.81420824,  0.41856357,  0.21044771,
               0.31902151,  0.82415116,  0.11103659,  0.85986111,  0.9240359 ,
               0.27718887,  0.08009919,  0.25976446,  0.75092734,  0.70955265,
               0.163777  ,  0.4930365 ,  0.24160732,  0.67637615,  0.3009038 ,
               0.27420114,  0.02254516,  0.09325213,  0.41364693,  0.21185379,
               0.46186736,  0.2896435 ,  0.37695631,  0.59898631,  0.25101598,
               0.15679181,  0.53413771,  0.77145479,  0.15578361,  0.55874995,
               0.86516844,  0.90991291,  0.29292055,  0.6422104 ,  0.48669528,
               0.7060411 ,  0.45715791,  0.82136124,  0.891318  ,  0.02152674,
               0.71079324,  0.10755691,  0.83349642,  0.57029022,  0.62934526,
               0.1100321 ,  0.64523669,  0.72668842,  0.30234582,  0.63673152,
               0.2116688 ,  0.20961025,  0.07691746,  0.21368693,  0.10023937,
               0.25230086,  0.39465702,  0.00340461,  0.63227215,  0.88001166,
               0.24059177,  0.95951276,  0.06453504,  0.03493025,  0.46581686,
               0.81607027,  0.11141944,  0.72466947,  0.04329328,  0.34197544,
               0.6899598 ,  0.05818747,  0.7901467 ,  0.89867714,  0.23778676,
               0.38726621,  0.37246703,  0.06576811,  0.65646062,  0.63096288,
               0.67053217,  0.154816  ,  0.43938845,  0.5443565 ,  0.60324729,
               0.5532446 ,  0.50432685,  0.20593208,  0.77513968,  0.52933294])}]]


