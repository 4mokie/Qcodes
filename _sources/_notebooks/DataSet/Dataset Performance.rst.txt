
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='f83a88fc-e5ec-4ae0-ac60-d5f72d503cf1'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='2c1bf96b-bfe7-42bc-86df-8ab5cc9dc4bc'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.652360348712233],
     [0.262110583331523],
     [0.0674670844345653],
     [0.322542452752824],
     [0.282984885908191],
     [0.310705731865794],
     [0.394202884347767],
     [0.865894096569331],
     [0.434378065368879],
     [0.486493480266427],
     [0.523735153731802],
     [0.213470485321859],
     [0.551111954097747],
     [0.854794701382764],
     [0.582371515906098],
     [0.483825173678815],
     [0.798920951831694],
     [0.182299971889319],
     [0.237406553231386],
     [0.583338571506828],
     [0.336148760138638],
     [0.227668903998425],
     [0.487934238011282],
     [0.506663442544316],
     [0.558912950169794],
     [0.260790675516517],
     [0.59890992693049],
     [0.474317854319523],
     [0.566886624277261],
     [0.081874450297136],
     [0.608746436791681],
     [0.463424426767576],
     [0.961479627834378],
     [0.535270345753545],
     [0.667496984975395],
     [0.874852787033176],
     [0.161077522395794],
     [0.832498813617801],
     [0.383554462509176],
     [0.4281162012834],
     [0.395268528847424],
     [0.0979295599532687],
     [0.30297789961827],
     [0.0479008303754974],
     [0.632517536884258],
     [0.362692405087092],
     [0.566788616662185],
     [0.560188027024194],
     [0.745695538757506],
     [0.0820620137964065],
     [0.480475736704102],
     [0.114695011626388],
     [0.947545720783676],
     [0.654261045608259],
     [0.898274460807765],
     [0.896221075142134],
     [0.411550993921694],
     [0.570630649582697],
     [0.413416572734646],
     [0.159310917122061],
     [0.811519000960992],
     [0.790493031937696],
     [0.0917198154465135],
     [0.253044135634562],
     [0.334709148494113],
     [0.0764497833758382],
     [0.641046783857872],
     [0.966607453495643],
     [0.0685104730165487],
     [0.00190131329984622],
     [0.0586622706732152],
     [0.55759628625935],
     [0.510513182210179],
     [0.0975076713460921],
     [0.224993072046226],
     [0.717971247543457],
     [0.364217124479194],
     [0.287182256547376],
     [0.978073535229124],
     [0.272729444562454],
     [0.22444756446352],
     [0.0305455519957695],
     [0.278327402376358],
     [0.882676425830085],
     [0.294982462731557],
     [0.210480326322745],
     [0.701356592848149],
     [0.820154088752282],
     [0.254458580264525],
     [0.920080056472751],
     [0.574616199640077],
     [0.876506094176175],
     [0.671102840436338],
     [0.875302708221742],
     [0.969059231484411],
     [0.0303691241187927],
     [0.195960701901695],
     [0.0619527798207441],
     [0.112495600207547],
     [0.174332809320655]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.67831948])],
     [array([0.43456005])],
     [array([0.24792187])],
     [array([0.46257783])],
     [array([0.44165222])],
     [array([0.51250145])],
     [array([0.42613428])],
     [array([0.26142064])],
     [array([0.32485053])],
     [array([0.12677814])],
     [array([0.67552232])],
     [array([0.9371735])],
     [array([0.46596233])],
     [array([0.82600689])],
     [array([0.34753342])],
     [array([0.75863442])],
     [array([0.28722245])],
     [array([0.06331182])],
     [array([0.86441077])],
     [array([0.74060267])],
     [array([0.36325295])],
     [array([0.29367615])],
     [array([0.35030989])],
     [array([0.32903908])],
     [array([0.12915369])],
     [array([0.14838134])],
     [array([0.59231733])],
     [array([0.40406611])],
     [array([0.97269153])],
     [array([0.12059318])],
     [array([0.5410393])],
     [array([0.62602222])],
     [array([0.31209977])],
     [array([0.58803912])],
     [array([0.92264794])],
     [array([0.92971958])],
     [array([0.50245504])],
     [array([0.21318126])],
     [array([0.9302346])],
     [array([0.35842403])],
     [array([0.93836679])],
     [array([0.02851242])],
     [array([0.4066094])],
     [array([0.99429658])],
     [array([0.76273619])],
     [array([0.32340887])],
     [array([0.97780154])],
     [array([0.77487002])],
     [array([0.45223505])],
     [array([0.15210261])],
     [array([0.15977724])],
     [array([0.4025729])],
     [array([0.20565229])],
     [array([0.96900656])],
     [array([0.63822388])],
     [array([0.74808585])],
     [array([0.80683115])],
     [array([0.64885931])],
     [array([0.66465559])],
     [array([0.63783292])],
     [array([0.2098457])],
     [array([0.52501694])],
     [array([0.09986211])],
     [array([0.7721564])],
     [array([0.84398104])],
     [array([0.61498254])],
     [array([0.78856885])],
     [array([0.01897119])],
     [array([0.19529818])],
     [array([0.68564719])],
     [array([0.79658413])],
     [array([0.61424452])],
     [array([0.98138562])],
     [array([0.33425715])],
     [array([0.27389086])],
     [array([0.58654798])],
     [array([0.9880973])],
     [array([0.37954838])],
     [array([0.58817355])],
     [array([0.08136891])],
     [array([0.28168745])],
     [array([0.20866654])],
     [array([0.51663462])],
     [array([0.47017647])],
     [array([0.45028452])],
     [array([0.64839634])],
     [array([0.53960152])],
     [array([0.11431154])],
     [array([0.91483339])],
     [array([0.34663454])],
     [array([0.45623173])],
     [array([0.46014512])],
     [array([0.56428125])],
     [array([0.50924874])],
     [array([0.74687304])],
     [array([0.3873459])],
     [array([0.13971758])],
     [array([0.38141444])],
     [array([0.15597126])],
     [array([0.05529035])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.67831948, 0.43456005, 0.24792187, 0.46257783, 0.44165222,
           0.51250145, 0.42613428, 0.26142064, 0.32485053, 0.12677814,
           0.67552232, 0.9371735 , 0.46596233, 0.82600689, 0.34753342,
           0.75863442, 0.28722245, 0.06331182, 0.86441077, 0.74060267,
           0.36325295, 0.29367615, 0.35030989, 0.32903908, 0.12915369,
           0.14838134, 0.59231733, 0.40406611, 0.97269153, 0.12059318,
           0.5410393 , 0.62602222, 0.31209977, 0.58803912, 0.92264794,
           0.92971958, 0.50245504, 0.21318126, 0.9302346 , 0.35842403,
           0.93836679, 0.02851242, 0.4066094 , 0.99429658, 0.76273619,
           0.32340887, 0.97780154, 0.77487002, 0.45223505, 0.15210261,
           0.15977724, 0.4025729 , 0.20565229, 0.96900656, 0.63822388,
           0.74808585, 0.80683115, 0.64885931, 0.66465559, 0.63783292,
           0.2098457 , 0.52501694, 0.09986211, 0.7721564 , 0.84398104,
           0.61498254, 0.78856885, 0.01897119, 0.19529818, 0.68564719,
           0.79658413, 0.61424452, 0.98138562, 0.33425715, 0.27389086,
           0.58654798, 0.9880973 , 0.37954838, 0.58817355, 0.08136891,
           0.28168745, 0.20866654, 0.51663462, 0.47017647, 0.45028452,
           0.64839634, 0.53960152, 0.11431154, 0.91483339, 0.34663454,
           0.45623173, 0.46014512, 0.56428125, 0.50924874, 0.74687304,
           0.3873459 , 0.13971758, 0.38141444, 0.15597126, 0.05529035])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.65236035, 0.26211058, 0.06746708, 0.32254245, 0.28298489,
              0.31070573, 0.39420288, 0.8658941 , 0.43437807, 0.48649348,
              0.52373515, 0.21347049, 0.55111195, 0.8547947 , 0.58237152,
              0.48382517, 0.79892095, 0.18229997, 0.23740655, 0.58333857,
              0.33614876, 0.2276689 , 0.48793424, 0.50666344, 0.55891295,
              0.26079068, 0.59890993, 0.47431785, 0.56688662, 0.08187445,
              0.60874644, 0.46342443, 0.96147963, 0.53527035, 0.66749698,
              0.87485279, 0.16107752, 0.83249881, 0.38355446, 0.4281162 ,
              0.39526853, 0.09792956, 0.3029779 , 0.04790083, 0.63251754,
              0.36269241, 0.56678862, 0.56018803, 0.74569554, 0.08206201,
              0.48047574, 0.11469501, 0.94754572, 0.65426105, 0.89827446,
              0.89622108, 0.41155099, 0.57063065, 0.41341657, 0.15931092,
              0.811519  , 0.79049303, 0.09171982, 0.25304414, 0.33470915,
              0.07644978, 0.64104678, 0.96660745, 0.06851047, 0.00190131,
              0.05866227, 0.55759629, 0.51051318, 0.09750767, 0.22499307,
              0.71797125, 0.36421712, 0.28718226, 0.97807354, 0.27272944,
              0.22444756, 0.03054555, 0.2783274 , 0.88267643, 0.29498246,
              0.21048033, 0.70135659, 0.82015409, 0.25445858, 0.92008006,
              0.5746162 , 0.87650609, 0.67110284, 0.87530271, 0.96905923,
              0.03036912, 0.1959607 , 0.06195278, 0.1124956 , 0.17433281])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.93253622, 0.73990633, 0.764778  , 0.15139709, 0.22855532,
              0.66221892, 0.61759493, 0.85685319, 0.6512119 , 0.23935843,
              0.58649437, 0.04384269, 0.46869057, 0.04107387, 0.91680112,
              0.23019308, 0.11399252, 0.50056067, 0.82306713, 0.31027439,
              0.27705602, 0.78046027, 0.70094662, 0.95907281, 0.1518323 ,
              0.66698474, 0.11059221, 0.35683744, 0.75740958, 0.17263414,
              0.1577281 , 0.76741483, 0.04322912, 0.21993097, 0.52438921,
              0.22910634, 0.63422988, 0.94151761, 0.087749  , 0.07980189,
              0.03407718, 0.36906483, 0.19113076, 0.0164321 , 0.55588404,
              0.17633177, 0.80447229, 0.71578799, 0.62008246, 0.91990439,
              0.92888085, 0.99053348, 0.51052081, 0.19764669, 0.00792415,
              0.74833216, 0.93769304, 0.33638228, 0.8184738 , 0.63385323,
              0.691406  , 0.40830673, 0.25612244, 0.87186197, 0.3907825 ,
              0.78987759, 0.19447958, 0.75723116, 0.09255403, 0.60679307,
              0.97382846, 0.52977244, 0.71184379, 0.4754952 , 0.48295572,
              0.3262333 , 0.20618184, 0.66085254, 0.03785605, 0.44075861,
              0.12058064, 0.49838338, 0.35208201, 0.30833705, 0.74758736,
              0.88207296, 0.61797551, 0.51085427, 0.46522101, 0.47338861,
              0.72292141, 0.64087036, 0.6042331 , 0.99780562, 0.91160308,
              0.85994533, 0.85234989, 0.57107762, 0.58317628, 0.72682735])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.42681626, 0.03009625, 0.05749781, 0.54877556, 0.76068932,
              0.17099733, 0.73647399, 0.10340405, 0.66758757, 0.87145802,
              0.04773909, 0.24087422, 0.61415994, 0.31991863, 0.3636169 ,
              0.94933365, 0.49948478, 0.20122693, 0.48654439, 0.15739034,
              0.78748936, 0.05077614, 0.3191    , 0.89445762, 0.28238206,
              0.76241356, 0.85840747, 0.67508477, 0.82090803, 0.48908023,
              0.90999666, 0.72467719, 0.82533401, 0.67789429, 0.79808503,
              0.54029891, 0.71729823, 0.08680827, 0.08410033, 0.33105539,
              0.30924876, 0.13382935, 0.02097899, 0.52331518, 0.01690872,
              0.65798029, 0.60561915, 0.25178791, 0.86202955, 0.82830214,
              0.47101748, 0.19067289, 0.60200597, 0.36458344, 0.41249168,
              0.95454354, 0.38514592, 0.20253028, 0.14416245, 0.34733962,
              0.78716593, 0.05550729, 0.84391043, 0.31784284, 0.27104248,
              0.3749889 , 0.50428121, 0.02415183, 0.94020768, 0.91088433,
              0.44409994, 0.36007667, 0.19286014, 0.33444982, 0.25916433,
              0.83395656, 0.83930949, 0.97995444, 0.71381987, 0.16290363,
              0.35182006, 0.39153802, 0.94631015, 0.42821544, 0.62794572,
              0.85831181, 0.60748607, 0.50051531, 0.88626425, 0.05411316,
              0.26950503, 0.30725948, 0.78021332, 0.61888959, 0.82196296,
              0.3145908 , 0.90798417, 0.62764844, 0.10557101, 0.56376718])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.91725018, 0.26556386, 0.54507737, 0.94853648, 0.05503317,
              0.81065845, 0.18610539, 0.06589693, 0.53955596, 0.85000359,
              0.81821603, 0.08853014, 0.90670626, 0.64518294, 0.54907001,
              0.99787678, 0.69145611, 0.92332503, 0.9766683 , 0.49687942,
              0.00243614, 0.52248893, 0.8850932 , 0.60794356, 0.60352759,
              0.07691028, 0.35220089, 0.93613498, 0.70481777, 0.90619006,
              0.54749024, 0.14978919, 0.28626583, 0.92019774, 0.03861866,
              0.56487024, 0.37587847, 0.40942514, 0.42981835, 0.29094596,
              0.84362707, 0.41556236, 0.64540081, 0.57232788, 0.74332809,
              0.88237323, 0.97456476, 0.79309264, 0.45130304, 0.38886906,
              0.43800883, 0.78622914, 0.50361849, 0.09015838, 0.85341675,
              0.02922632, 0.30516337, 0.39635378, 0.38758774, 0.61957781,
              0.35548532, 0.54708645, 0.0113366 , 0.90825791, 0.38984256,
              0.28467649, 0.40904661, 0.96410219, 0.72906513, 0.87676891,
              0.23126415, 0.28050616, 0.36200643, 0.18985771, 0.95770606,
              0.70152892, 0.17588519, 0.5660177 , 0.66154696, 0.9955681 ,
              0.21165698, 0.50031325, 0.4593676 , 0.3130735 , 0.12449857,
              0.43085715, 0.60847123, 0.75514454, 0.14070779, 0.10522207,
              0.29999506, 0.53731323, 0.48251985, 0.89625451, 0.53606402,
              0.14680869, 0.95687576, 0.89271833, 0.94614957, 0.53495229])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.65236035, 0.26211058, 0.06746708, 0.32254245, 0.28298489,
              0.31070573, 0.39420288, 0.8658941 , 0.43437807, 0.48649348,
              0.52373515, 0.21347049, 0.55111195, 0.8547947 , 0.58237152,
              0.48382517, 0.79892095, 0.18229997, 0.23740655, 0.58333857,
              0.33614876, 0.2276689 , 0.48793424, 0.50666344, 0.55891295,
              0.26079068, 0.59890993, 0.47431785, 0.56688662, 0.08187445,
              0.60874644, 0.46342443, 0.96147963, 0.53527035, 0.66749698,
              0.87485279, 0.16107752, 0.83249881, 0.38355446, 0.4281162 ,
              0.39526853, 0.09792956, 0.3029779 , 0.04790083, 0.63251754,
              0.36269241, 0.56678862, 0.56018803, 0.74569554, 0.08206201,
              0.48047574, 0.11469501, 0.94754572, 0.65426105, 0.89827446,
              0.89622108, 0.41155099, 0.57063065, 0.41341657, 0.15931092,
              0.811519  , 0.79049303, 0.09171982, 0.25304414, 0.33470915,
              0.07644978, 0.64104678, 0.96660745, 0.06851047, 0.00190131,
              0.05866227, 0.55759629, 0.51051318, 0.09750767, 0.22499307,
              0.71797125, 0.36421712, 0.28718226, 0.97807354, 0.27272944,
              0.22444756, 0.03054555, 0.2783274 , 0.88267643, 0.29498246,
              0.21048033, 0.70135659, 0.82015409, 0.25445858, 0.92008006,
              0.5746162 , 0.87650609, 0.67110284, 0.87530271, 0.96905923,
              0.03036912, 0.1959607 , 0.06195278, 0.1124956 , 0.17433281])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.93253622, 0.73990633, 0.764778  , 0.15139709, 0.22855532,
              0.66221892, 0.61759493, 0.85685319, 0.6512119 , 0.23935843,
              0.58649437, 0.04384269, 0.46869057, 0.04107387, 0.91680112,
              0.23019308, 0.11399252, 0.50056067, 0.82306713, 0.31027439,
              0.27705602, 0.78046027, 0.70094662, 0.95907281, 0.1518323 ,
              0.66698474, 0.11059221, 0.35683744, 0.75740958, 0.17263414,
              0.1577281 , 0.76741483, 0.04322912, 0.21993097, 0.52438921,
              0.22910634, 0.63422988, 0.94151761, 0.087749  , 0.07980189,
              0.03407718, 0.36906483, 0.19113076, 0.0164321 , 0.55588404,
              0.17633177, 0.80447229, 0.71578799, 0.62008246, 0.91990439,
              0.92888085, 0.99053348, 0.51052081, 0.19764669, 0.00792415,
              0.74833216, 0.93769304, 0.33638228, 0.8184738 , 0.63385323,
              0.691406  , 0.40830673, 0.25612244, 0.87186197, 0.3907825 ,
              0.78987759, 0.19447958, 0.75723116, 0.09255403, 0.60679307,
              0.97382846, 0.52977244, 0.71184379, 0.4754952 , 0.48295572,
              0.3262333 , 0.20618184, 0.66085254, 0.03785605, 0.44075861,
              0.12058064, 0.49838338, 0.35208201, 0.30833705, 0.74758736,
              0.88207296, 0.61797551, 0.51085427, 0.46522101, 0.47338861,
              0.72292141, 0.64087036, 0.6042331 , 0.99780562, 0.91160308,
              0.85994533, 0.85234989, 0.57107762, 0.58317628, 0.72682735])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.42681626, 0.03009625, 0.05749781, 0.54877556, 0.76068932,
              0.17099733, 0.73647399, 0.10340405, 0.66758757, 0.87145802,
              0.04773909, 0.24087422, 0.61415994, 0.31991863, 0.3636169 ,
              0.94933365, 0.49948478, 0.20122693, 0.48654439, 0.15739034,
              0.78748936, 0.05077614, 0.3191    , 0.89445762, 0.28238206,
              0.76241356, 0.85840747, 0.67508477, 0.82090803, 0.48908023,
              0.90999666, 0.72467719, 0.82533401, 0.67789429, 0.79808503,
              0.54029891, 0.71729823, 0.08680827, 0.08410033, 0.33105539,
              0.30924876, 0.13382935, 0.02097899, 0.52331518, 0.01690872,
              0.65798029, 0.60561915, 0.25178791, 0.86202955, 0.82830214,
              0.47101748, 0.19067289, 0.60200597, 0.36458344, 0.41249168,
              0.95454354, 0.38514592, 0.20253028, 0.14416245, 0.34733962,
              0.78716593, 0.05550729, 0.84391043, 0.31784284, 0.27104248,
              0.3749889 , 0.50428121, 0.02415183, 0.94020768, 0.91088433,
              0.44409994, 0.36007667, 0.19286014, 0.33444982, 0.25916433,
              0.83395656, 0.83930949, 0.97995444, 0.71381987, 0.16290363,
              0.35182006, 0.39153802, 0.94631015, 0.42821544, 0.62794572,
              0.85831181, 0.60748607, 0.50051531, 0.88626425, 0.05411316,
              0.26950503, 0.30725948, 0.78021332, 0.61888959, 0.82196296,
              0.3145908 , 0.90798417, 0.62764844, 0.10557101, 0.56376718])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.54794271, 0.72936359, 0.97712685, 0.0424192 , 0.47763239,
              0.51309595, 0.99744292, 0.48557203, 0.60129951, 0.55968894,
              0.72343402, 0.36776084, 0.75998358, 0.09853354, 0.20707077,
              0.7288612 , 0.904815  , 0.93831722, 0.62896488, 0.37998189,
              0.95966168, 0.20819547, 0.97584581, 0.82211582, 0.00290127,
              0.07287063, 0.57547095, 0.48562333, 0.16328196, 0.45777273,
              0.4662677 , 0.58164987, 0.71329829, 0.59996732, 0.56108108,
              0.63167289, 0.19745392, 0.54425999, 0.69694007, 0.24478538,
              0.17904436, 0.16126168, 0.27620887, 0.74357598, 0.48875063,
              0.61784065, 0.06846826, 0.24154288, 0.85785007, 0.74254903,
              0.59417505, 0.83241119, 0.82107472, 0.73011546, 0.24815075,
              0.46286536, 0.69442217, 0.37245702, 0.53499085, 0.66792192,
              0.15914959, 0.65187571, 0.85352648, 0.54319511, 0.29814055,
              0.30684552, 0.46911146, 0.11807235, 0.23675485, 0.14283608,
              0.99215433, 0.80203459, 0.81781619, 0.66823518, 0.16842337,
              0.39491248, 0.71647614, 0.73433037, 0.94232809, 0.17891461,
              0.12703749, 0.83792122, 0.39684798, 0.57931375, 0.10386772,
              0.20985243, 0.16929662, 0.45774931, 0.58142184, 0.10028185,
              0.22342431, 0.45981291, 0.64150342, 0.91340855, 0.2360808 ,
              0.06729922, 0.56910512, 0.59720706, 0.6203101 , 0.97380327])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.67831948, 0.43456005, 0.24792187, 0.46257783, 0.44165222,
              0.51250145, 0.42613428, 0.26142064, 0.32485053, 0.12677814,
              0.67552232, 0.9371735 , 0.46596233, 0.82600689, 0.34753342,
              0.75863442, 0.28722245, 0.06331182, 0.86441077, 0.74060267,
              0.36325295, 0.29367615, 0.35030989, 0.32903908, 0.12915369,
              0.14838134, 0.59231733, 0.40406611, 0.97269153, 0.12059318,
              0.5410393 , 0.62602222, 0.31209977, 0.58803912, 0.92264794,
              0.92971958, 0.50245504, 0.21318126, 0.9302346 , 0.35842403,
              0.93836679, 0.02851242, 0.4066094 , 0.99429658, 0.76273619,
              0.32340887, 0.97780154, 0.77487002, 0.45223505, 0.15210261,
              0.15977724, 0.4025729 , 0.20565229, 0.96900656, 0.63822388,
              0.74808585, 0.80683115, 0.64885931, 0.66465559, 0.63783292,
              0.2098457 , 0.52501694, 0.09986211, 0.7721564 , 0.84398104,
              0.61498254, 0.78856885, 0.01897119, 0.19529818, 0.68564719,
              0.79658413, 0.61424452, 0.98138562, 0.33425715, 0.27389086,
              0.58654798, 0.9880973 , 0.37954838, 0.58817355, 0.08136891,
              0.28168745, 0.20866654, 0.51663462, 0.47017647, 0.45028452,
              0.64839634, 0.53960152, 0.11431154, 0.91483339, 0.34663454,
              0.45623173, 0.46014512, 0.56428125, 0.50924874, 0.74687304,
              0.3873459 , 0.13971758, 0.38141444, 0.15597126, 0.05529035])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.91760569, 0.47392533, 0.87571349, 0.84766009, 0.12461811,
              0.94552671, 0.69341101, 0.1455235 , 0.9912528 , 0.53380827,
              0.96862311, 0.93465861, 0.09479554, 0.30848163, 0.19678002,
              0.02569514, 0.00764554, 0.07401561, 0.8352112 , 0.04183902,
              0.1668522 , 0.48263285, 0.76664244, 0.50596655, 0.07745294,
              0.93440302, 0.07280591, 0.99403165, 0.26973418, 0.15820284,
              0.63676776, 0.76142855, 0.31370925, 0.53656587, 0.27525464,
              0.00957333, 0.92167737, 0.58358165, 0.65393274, 0.00689218,
              0.60480953, 0.79179238, 0.95172545, 0.19004233, 0.93679001,
              0.52633088, 0.88390711, 0.80698725, 0.77597933, 0.6218302 ,
              0.61305517, 0.7933501 , 0.43304761, 0.13223757, 0.56524261,
              0.45813246, 0.42214041, 0.79876279, 0.28367117, 0.30189497,
              0.56600616, 0.19881061, 0.12321185, 0.44413521, 0.90527901,
              0.52734104, 0.93187196, 0.00510737, 0.45107805, 0.61054852,
              0.31690846, 0.83557721, 0.14928991, 0.83507506, 0.74457036,
              0.96606129, 0.73613304, 0.03531636, 0.63844699, 0.83250727,
              0.31322971, 0.65464231, 0.32209886, 0.81612891, 0.0570833 ,
              0.91363596, 0.97397125, 0.56141534, 0.40180466, 0.78898955,
              0.89099764, 0.60027877, 0.51132599, 0.22338027, 0.7016328 ,
              0.45292301, 0.06394692, 0.29337542, 0.33173741, 0.41492015])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.46061587, 0.9387182 , 0.5588371 , 0.00324234, 0.05816879,
              0.10256124, 0.04340802, 0.60221511, 0.71549906, 0.65389542,
              0.95745073, 0.47080795, 0.4904819 , 0.76042488, 0.88564177,
              0.49294483, 0.42931968, 0.13289013, 0.54013231, 0.19807711,
              0.06889541, 0.2582652 , 0.06361332, 0.19834613, 0.29121843,
              0.655013  , 0.20999359, 0.27178614, 0.73400362, 0.78314367,
              0.95319699, 0.20826684, 0.88252679, 0.53200435, 0.08820049,
              0.48529516, 0.18448627, 0.06294787, 0.4923536 , 0.75039188,
              0.8759471 , 0.73344672, 0.82357356, 0.13875035, 0.36276718,
              0.22787472, 0.50034214, 0.36294311, 0.53404958, 0.6956046 ,
              0.06332115, 0.16744208, 0.47331624, 0.6128155 , 0.5971457 ,
              0.35886622, 0.74267996, 0.61433461, 0.96324817, 0.14217637,
              0.36326063, 0.17554834, 0.57993141, 0.00199622, 0.69238115,
              0.56212146, 0.40652187, 0.9404023 , 0.56412078, 0.56272827,
              0.43923493, 0.08178166, 0.90011904, 0.0504784 , 0.97325872,
              0.05783579, 0.67817719, 0.47236599, 0.31735165, 0.32160394,
              0.76858295, 0.21869265, 0.8058051 , 0.98497493, 0.53738239,
              0.10975551, 0.54937594, 0.21197718, 0.22138913, 0.98092657,
              0.43956329, 0.92828814, 0.24417847, 0.00675583, 0.87750075,
              0.7255472 , 0.42757879, 0.84616869, 0.00424545, 0.02487756])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.73857532, 0.78768348, 0.65883437, 0.0547712 , 0.59254302,
              0.46640995, 0.50869789, 0.56144803, 0.40563971, 0.88440588,
              0.69542133, 0.14233933, 0.21146747, 0.26635714, 0.1242293 ,
              0.11580399, 0.08609862, 0.7555723 , 0.13564361, 0.03585357,
              0.82314483, 0.88266416, 0.19805109, 0.73059519, 0.73081059,
              0.94830503, 0.12301905, 0.44170082, 0.31981784, 0.44516494,
              0.74034532, 0.33756041, 0.30973365, 0.36064159, 0.66613591,
              0.74046522, 0.35894036, 0.26653329, 0.85530376, 0.64146398,
              0.86881937, 0.88611682, 0.45378771, 0.80738065, 0.97339942,
              0.31177807, 0.56072782, 0.13340852, 0.25130208, 0.55540896,
              0.79575774, 0.23698673, 0.92608206, 0.30180611, 0.0901472 ,
              0.58402404, 0.70372989, 0.00242768, 0.37167187, 0.52834715,
              0.30595001, 0.9127025 , 0.55983216, 0.79468013, 0.0463896 ,
              0.66732129, 0.49712351, 0.42857012, 0.55873776, 0.72377487,
              0.11356586, 0.9001249 , 0.1941277 , 0.56461533, 0.8201418 ,
              0.27660369, 0.31637236, 0.78583854, 0.71560993, 0.00258877,
              0.83368451, 0.29733042, 0.04118393, 0.51267025, 0.56518093,
              0.77210904, 0.77756623, 0.95859478, 0.51523203, 0.09659256,
              0.44941786, 0.86092014, 0.73432261, 0.45720699, 0.15439592,
              0.95383546, 0.59939987, 0.48659449, 0.4100576 , 0.48371111])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.67831948, 0.43456005, 0.24792187, 0.46257783, 0.44165222,
              0.51250145, 0.42613428, 0.26142064, 0.32485053, 0.12677814,
              0.67552232, 0.9371735 , 0.46596233, 0.82600689, 0.34753342,
              0.75863442, 0.28722245, 0.06331182, 0.86441077, 0.74060267,
              0.36325295, 0.29367615, 0.35030989, 0.32903908, 0.12915369,
              0.14838134, 0.59231733, 0.40406611, 0.97269153, 0.12059318,
              0.5410393 , 0.62602222, 0.31209977, 0.58803912, 0.92264794,
              0.92971958, 0.50245504, 0.21318126, 0.9302346 , 0.35842403,
              0.93836679, 0.02851242, 0.4066094 , 0.99429658, 0.76273619,
              0.32340887, 0.97780154, 0.77487002, 0.45223505, 0.15210261,
              0.15977724, 0.4025729 , 0.20565229, 0.96900656, 0.63822388,
              0.74808585, 0.80683115, 0.64885931, 0.66465559, 0.63783292,
              0.2098457 , 0.52501694, 0.09986211, 0.7721564 , 0.84398104,
              0.61498254, 0.78856885, 0.01897119, 0.19529818, 0.68564719,
              0.79658413, 0.61424452, 0.98138562, 0.33425715, 0.27389086,
              0.58654798, 0.9880973 , 0.37954838, 0.58817355, 0.08136891,
              0.28168745, 0.20866654, 0.51663462, 0.47017647, 0.45028452,
              0.64839634, 0.53960152, 0.11431154, 0.91483339, 0.34663454,
              0.45623173, 0.46014512, 0.56428125, 0.50924874, 0.74687304,
              0.3873459 , 0.13971758, 0.38141444, 0.15597126, 0.05529035])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.91760569, 0.47392533, 0.87571349, 0.84766009, 0.12461811,
              0.94552671, 0.69341101, 0.1455235 , 0.9912528 , 0.53380827,
              0.96862311, 0.93465861, 0.09479554, 0.30848163, 0.19678002,
              0.02569514, 0.00764554, 0.07401561, 0.8352112 , 0.04183902,
              0.1668522 , 0.48263285, 0.76664244, 0.50596655, 0.07745294,
              0.93440302, 0.07280591, 0.99403165, 0.26973418, 0.15820284,
              0.63676776, 0.76142855, 0.31370925, 0.53656587, 0.27525464,
              0.00957333, 0.92167737, 0.58358165, 0.65393274, 0.00689218,
              0.60480953, 0.79179238, 0.95172545, 0.19004233, 0.93679001,
              0.52633088, 0.88390711, 0.80698725, 0.77597933, 0.6218302 ,
              0.61305517, 0.7933501 , 0.43304761, 0.13223757, 0.56524261,
              0.45813246, 0.42214041, 0.79876279, 0.28367117, 0.30189497,
              0.56600616, 0.19881061, 0.12321185, 0.44413521, 0.90527901,
              0.52734104, 0.93187196, 0.00510737, 0.45107805, 0.61054852,
              0.31690846, 0.83557721, 0.14928991, 0.83507506, 0.74457036,
              0.96606129, 0.73613304, 0.03531636, 0.63844699, 0.83250727,
              0.31322971, 0.65464231, 0.32209886, 0.81612891, 0.0570833 ,
              0.91363596, 0.97397125, 0.56141534, 0.40180466, 0.78898955,
              0.89099764, 0.60027877, 0.51132599, 0.22338027, 0.7016328 ,
              0.45292301, 0.06394692, 0.29337542, 0.33173741, 0.41492015])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.46061587, 0.9387182 , 0.5588371 , 0.00324234, 0.05816879,
              0.10256124, 0.04340802, 0.60221511, 0.71549906, 0.65389542,
              0.95745073, 0.47080795, 0.4904819 , 0.76042488, 0.88564177,
              0.49294483, 0.42931968, 0.13289013, 0.54013231, 0.19807711,
              0.06889541, 0.2582652 , 0.06361332, 0.19834613, 0.29121843,
              0.655013  , 0.20999359, 0.27178614, 0.73400362, 0.78314367,
              0.95319699, 0.20826684, 0.88252679, 0.53200435, 0.08820049,
              0.48529516, 0.18448627, 0.06294787, 0.4923536 , 0.75039188,
              0.8759471 , 0.73344672, 0.82357356, 0.13875035, 0.36276718,
              0.22787472, 0.50034214, 0.36294311, 0.53404958, 0.6956046 ,
              0.06332115, 0.16744208, 0.47331624, 0.6128155 , 0.5971457 ,
              0.35886622, 0.74267996, 0.61433461, 0.96324817, 0.14217637,
              0.36326063, 0.17554834, 0.57993141, 0.00199622, 0.69238115,
              0.56212146, 0.40652187, 0.9404023 , 0.56412078, 0.56272827,
              0.43923493, 0.08178166, 0.90011904, 0.0504784 , 0.97325872,
              0.05783579, 0.67817719, 0.47236599, 0.31735165, 0.32160394,
              0.76858295, 0.21869265, 0.8058051 , 0.98497493, 0.53738239,
              0.10975551, 0.54937594, 0.21197718, 0.22138913, 0.98092657,
              0.43956329, 0.92828814, 0.24417847, 0.00675583, 0.87750075,
              0.7255472 , 0.42757879, 0.84616869, 0.00424545, 0.02487756])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.40431034, 0.7925673 , 0.09412234, 0.1155868 , 0.97556503,
              0.89698062, 0.47923008, 0.73956721, 0.56189969, 0.97013245,
              0.62917553, 0.2544128 , 0.20067159, 0.23004537, 0.5955856 ,
              0.03015333, 0.51279318, 0.67798256, 0.76486648, 0.72131248,
              0.53412472, 0.36577239, 0.26308971, 0.3125558 , 0.54157326,
              0.13753897, 0.15464174, 0.71123963, 0.56058516, 0.15574593,
              0.11259907, 0.30526168, 0.25036789, 0.22902934, 0.401913  ,
              0.96522353, 0.98530781, 0.09375467, 0.62090471, 0.69619792,
              0.84842382, 0.72155881, 0.80161149, 0.63519082, 0.78817803,
              0.22893092, 0.57269021, 0.98424582, 0.12436287, 0.61793053,
              0.62931369, 0.75988824, 0.72321615, 0.7675748 , 0.70649503,
              0.0202876 , 0.43224781, 0.92976415, 0.28898287, 0.04775089,
              0.22336722, 0.67065841, 0.7780084 , 0.64300736, 0.11055731,
              0.56551924, 0.97738614, 0.10585524, 0.17224132, 0.66697906,
              0.12751666, 0.19217729, 0.58875043, 0.89754548, 0.92892457,
              0.47484048, 0.69801792, 0.67748622, 0.5564489 , 0.65052455,
              0.63655147, 0.89770292, 0.71412169, 0.53363111, 0.61844379,
              0.37043067, 0.73198628, 0.67590708, 0.81970628, 0.66156768,
              0.33878685, 0.70098964, 0.6714986 , 0.84457148, 0.68188559,
              0.03631982, 0.94902894, 0.20076769, 0.01321403, 0.13836613])}]]


