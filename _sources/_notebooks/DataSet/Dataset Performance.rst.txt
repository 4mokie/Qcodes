
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='78f922fc-7aa6-4aa4-bd41-e10e3f4c0147'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='305c8f70-aa5b-499c-acb4-4d52337cbe98'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.782808665286351],
     [0.485675414331282],
     [0.33518122994358],
     [0.976599025233795],
     [0.955000152386745],
     [0.913546561529373],
     [0.120170234755114],
     [0.948075192366676],
     [0.961465319298106],
     [0.0502754827373725],
     [0.442148413481705],
     [0.0780047494337289],
     [0.0953207923547009],
     [0.913360293913083],
     [0.387299795712802],
     [0.529439581857406],
     [0.174475456896991],
     [0.431461516905732],
     [0.981809704990778],
     [0.358494674885091],
     [0.417594624192662],
     [0.953148738663672],
     [0.539971379920756],
     [0.878000796363775],
     [0.792193143000936],
     [0.113538069593708],
     [0.24480464175092],
     [0.424670400854004],
     [0.585405233173646],
     [0.612390668618532],
     [0.601331618262779],
     [0.846011752767671],
     [0.892309770654416],
     [0.74714480770029],
     [0.173066264942401],
     [0.476564026569283],
     [0.527477317182481],
     [0.698240883299327],
     [0.485970351828834],
     [0.956858588090075],
     [0.742813374570879],
     [0.797390445525679],
     [0.340215663527382],
     [0.589184630203612],
     [0.374841724908129],
     [0.31623122317808],
     [0.472795790535841],
     [0.823314325416821],
     [0.557071209130211],
     [0.291818303269407],
     [0.219954508893237],
     [0.253865889712872],
     [0.659822330226483],
     [0.335216866118003],
     [0.581574969879818],
     [0.567922010659761],
     [0.432619946515854],
     [0.163386396370191],
     [0.0171715252900683],
     [0.651713174756026],
     [0.757515488811201],
     [0.398277946909026],
     [0.177223390237506],
     [0.697435973358622],
     [0.224054919687313],
     [0.556339065810162],
     [0.533413393985966],
     [0.781912426261897],
     [0.991596885101048],
     [0.686335558395061],
     [0.0265682361425381],
     [0.563435539728511],
     [0.382632116671797],
     [0.331451713849652],
     [0.688731839433795],
     [0.0633376242577222],
     [0.396954665721285],
     [0.511149407711354],
     [0.0361514245641492],
     [0.435736994458172],
     [0.762380589048503],
     [0.653463685678169],
     [0.388958046568543],
     [0.780155436469825],
     [0.473649687423889],
     [0.66983963880185],
     [0.597139671310104],
     [0.331209833829596],
     [0.499991629332011],
     [0.450862642434359],
     [0.841689954686693],
     [0.278173369022131],
     [0.252655482956314],
     [0.154239422501907],
     [0.379009377994175],
     [0.319312938630515],
     [0.344783307143225],
     [0.561625016500053],
     [0.783912445175365],
     [0.0669852207473417]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.6422393])],
     [array([0.11777965])],
     [array([0.80517331])],
     [array([0.19173388])],
     [array([0.24222376])],
     [array([0.96348649])],
     [array([0.16655479])],
     [array([0.17553825])],
     [array([0.96559933])],
     [array([0.88341976])],
     [array([0.43029835])],
     [array([0.92522454])],
     [array([0.50564376])],
     [array([0.70621865])],
     [array([0.35141593])],
     [array([0.36200447])],
     [array([0.16612891])],
     [array([0.58904453])],
     [array([0.64777084])],
     [array([0.24937505])],
     [array([0.21491144])],
     [array([0.72233986])],
     [array([0.45722696])],
     [array([0.96593979])],
     [array([0.73530563])],
     [array([0.94262022])],
     [array([0.72126978])],
     [array([0.96437831])],
     [array([0.06222629])],
     [array([0.57835137])],
     [array([0.38437243])],
     [array([0.41628852])],
     [array([0.65982904])],
     [array([0.59934335])],
     [array([0.2391041])],
     [array([0.32780786])],
     [array([0.85800828])],
     [array([0.12289622])],
     [array([0.73439959])],
     [array([0.97306238])],
     [array([0.83748905])],
     [array([0.4856739])],
     [array([0.01089764])],
     [array([0.30503577])],
     [array([0.84478883])],
     [array([0.82993321])],
     [array([0.03126817])],
     [array([0.39702913])],
     [array([0.71752881])],
     [array([0.62438122])],
     [array([0.71239889])],
     [array([0.97727718])],
     [array([0.72124723])],
     [array([0.81721824])],
     [array([0.19609684])],
     [array([0.19663502])],
     [array([0.03479515])],
     [array([0.34390926])],
     [array([0.56752385])],
     [array([0.53404378])],
     [array([0.43253594])],
     [array([0.2352317])],
     [array([0.04759808])],
     [array([0.41681339])],
     [array([0.26808576])],
     [array([0.51657219])],
     [array([0.3668286])],
     [array([0.21209293])],
     [array([0.72107114])],
     [array([0.77560599])],
     [array([0.97397123])],
     [array([0.88849291])],
     [array([0.38970917])],
     [array([0.05477813])],
     [array([0.0348546])],
     [array([0.56113328])],
     [array([0.77214495])],
     [array([0.72599152])],
     [array([0.26573706])],
     [array([0.72684251])],
     [array([0.79500795])],
     [array([0.97759671])],
     [array([0.42801666])],
     [array([0.40414866])],
     [array([0.49298199])],
     [array([0.01669934])],
     [array([0.15041691])],
     [array([0.91076629])],
     [array([0.25165687])],
     [array([0.68644098])],
     [array([0.41986781])],
     [array([0.22486642])],
     [array([0.81030694])],
     [array([0.59054597])],
     [array([0.64023184])],
     [array([0.73128534])],
     [array([0.67875002])],
     [array([0.3747004])],
     [array([0.26467021])],
     [array([0.08251396])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.6422393 , 0.11777965, 0.80517331, 0.19173388, 0.24222376,
           0.96348649, 0.16655479, 0.17553825, 0.96559933, 0.88341976,
           0.43029835, 0.92522454, 0.50564376, 0.70621865, 0.35141593,
           0.36200447, 0.16612891, 0.58904453, 0.64777084, 0.24937505,
           0.21491144, 0.72233986, 0.45722696, 0.96593979, 0.73530563,
           0.94262022, 0.72126978, 0.96437831, 0.06222629, 0.57835137,
           0.38437243, 0.41628852, 0.65982904, 0.59934335, 0.2391041 ,
           0.32780786, 0.85800828, 0.12289622, 0.73439959, 0.97306238,
           0.83748905, 0.4856739 , 0.01089764, 0.30503577, 0.84478883,
           0.82993321, 0.03126817, 0.39702913, 0.71752881, 0.62438122,
           0.71239889, 0.97727718, 0.72124723, 0.81721824, 0.19609684,
           0.19663502, 0.03479515, 0.34390926, 0.56752385, 0.53404378,
           0.43253594, 0.2352317 , 0.04759808, 0.41681339, 0.26808576,
           0.51657219, 0.3668286 , 0.21209293, 0.72107114, 0.77560599,
           0.97397123, 0.88849291, 0.38970917, 0.05477813, 0.0348546 ,
           0.56113328, 0.77214495, 0.72599152, 0.26573706, 0.72684251,
           0.79500795, 0.97759671, 0.42801666, 0.40414866, 0.49298199,
           0.01669934, 0.15041691, 0.91076629, 0.25165687, 0.68644098,
           0.41986781, 0.22486642, 0.81030694, 0.59054597, 0.64023184,
           0.73128534, 0.67875002, 0.3747004 , 0.26467021, 0.08251396])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.78280867, 0.48567541, 0.33518123, 0.97659903, 0.95500015,
              0.91354656, 0.12017023, 0.94807519, 0.96146532, 0.05027548,
              0.44214841, 0.07800475, 0.09532079, 0.91336029, 0.3872998 ,
              0.52943958, 0.17447546, 0.43146152, 0.9818097 , 0.35849467,
              0.41759462, 0.95314874, 0.53997138, 0.8780008 , 0.79219314,
              0.11353807, 0.24480464, 0.4246704 , 0.58540523, 0.61239067,
              0.60133162, 0.84601175, 0.89230977, 0.74714481, 0.17306626,
              0.47656403, 0.52747732, 0.69824088, 0.48597035, 0.95685859,
              0.74281337, 0.79739045, 0.34021566, 0.58918463, 0.37484172,
              0.31623122, 0.47279579, 0.82331433, 0.55707121, 0.2918183 ,
              0.21995451, 0.25386589, 0.65982233, 0.33521687, 0.58157497,
              0.56792201, 0.43261995, 0.1633864 , 0.01717153, 0.65171317,
              0.75751549, 0.39827795, 0.17722339, 0.69743597, 0.22405492,
              0.55633907, 0.53341339, 0.78191243, 0.99159689, 0.68633556,
              0.02656824, 0.56343554, 0.38263212, 0.33145171, 0.68873184,
              0.06333762, 0.39695467, 0.51114941, 0.03615142, 0.43573699,
              0.76238059, 0.65346369, 0.38895805, 0.78015544, 0.47364969,
              0.66983964, 0.59713967, 0.33120983, 0.49999163, 0.45086264,
              0.84168995, 0.27817337, 0.25265548, 0.15423942, 0.37900938,
              0.31931294, 0.34478331, 0.56162502, 0.78391245, 0.06698522])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.51855277, 0.7300754 , 0.03482601, 0.83053184, 0.64399199,
              0.10338607, 0.35444633, 0.60609053, 0.6424216 , 0.26318638,
              0.37379178, 0.49495022, 0.06209734, 0.65422031, 0.14960632,
              0.61883009, 0.5008165 , 0.09952028, 0.61091111, 0.50510698,
              0.36140553, 0.85020524, 0.25689934, 0.54995133, 0.38210569,
              0.81204615, 0.06982856, 0.37362981, 0.0984947 , 0.77973463,
              0.48148175, 0.96944462, 0.00794803, 0.39719476, 0.06794018,
              0.19277856, 0.76050743, 0.05833596, 0.78585248, 0.93839529,
              0.82106121, 0.74250022, 0.90828527, 0.40700346, 0.59833134,
              0.75422129, 0.42232407, 0.65079978, 0.27992389, 0.4915189 ,
              0.20393868, 0.50443778, 0.0947652 , 0.08209729, 0.776804  ,
              0.68491528, 0.74399468, 0.52181845, 0.96463536, 0.83316505,
              0.15886076, 0.3889018 , 0.38342197, 0.16833353, 0.20220943,
              0.8027785 , 0.71167933, 0.50100906, 0.62335398, 0.46274944,
              0.54600178, 0.18432249, 0.57794981, 0.89114188, 0.87876597,
              0.31890788, 0.12191499, 0.90615536, 0.79036272, 0.95343462,
              0.49771361, 0.21370958, 0.70572216, 0.36356774, 0.00769647,
              0.95950279, 0.82338157, 0.54354306, 0.00984988, 0.33495155,
              0.73310104, 0.97852044, 0.88689494, 0.99369913, 0.88434274,
              0.33729498, 0.20620295, 0.05973689, 0.62770418, 0.45803515])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.76645848, 0.4750489 , 0.84926548, 0.85638089, 0.57079935,
              0.29894677, 0.34544419, 0.69216625, 0.28024934, 0.55936103,
              0.69444732, 0.03902534, 0.28696669, 0.05026104, 0.03886194,
              0.91940584, 0.90581795, 0.79122263, 0.41377402, 0.52012232,
              0.67494832, 0.10113658, 0.55241981, 0.14179706, 0.87110507,
              0.99124149, 0.71638972, 0.95109434, 0.76168104, 0.43882462,
              0.10870883, 0.73995686, 0.01898332, 0.10233417, 0.29130037,
              0.95743505, 0.11534125, 0.38317001, 0.54905914, 0.92565167,
              0.6062501 , 0.26187587, 0.12107761, 0.6434447 , 0.05122339,
              0.69696921, 0.40608602, 0.21581064, 0.83734099, 0.81195206,
              0.67957519, 0.59310388, 0.20274175, 0.55242539, 0.61404728,
              0.94783023, 0.1239336 , 0.20196408, 0.61460913, 0.5144136 ,
              0.06121041, 0.27132196, 0.11286224, 0.29277426, 0.39176447,
              0.98914658, 0.184768  , 0.92984006, 0.27781098, 0.91330637,
              0.60217551, 0.57655508, 0.61270674, 0.28741341, 0.68443489,
              0.50883786, 0.05901162, 0.96556841, 0.83212416, 0.29174735,
              0.75913539, 0.85778625, 0.93001175, 0.79913952, 0.58178733,
              0.78510685, 0.18183402, 0.05431488, 0.17606854, 0.2140163 ,
              0.06960528, 0.70338445, 0.53466705, 0.82865723, 0.55067791,
              0.83280512, 0.28069909, 0.10143601, 0.44517626, 0.46840797])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([6.22056559e-01, 9.75961897e-01, 2.98209218e-01, 6.85477138e-01,
              6.76550461e-01, 8.14099264e-01, 2.22697477e-01, 9.16484264e-01,
              6.77610635e-01, 1.78530711e-01, 1.86401088e-01, 8.69352783e-01,
              4.18936783e-01, 3.24933463e-01, 4.23882669e-01, 4.05292915e-01,
              1.58990836e-01, 5.02254871e-01, 2.60734481e-01, 3.77535842e-01,
              8.82329188e-01, 8.49909535e-01, 6.68992833e-01, 8.97666222e-01,
              1.50270170e-01, 8.68806771e-01, 8.18097303e-01, 8.16399072e-01,
              1.01835262e-01, 9.32127433e-01, 5.69322746e-01, 5.47266140e-02,
              2.05247414e-01, 2.39509708e-01, 7.10719531e-01, 5.22267636e-01,
              2.86379211e-01, 5.72732988e-01, 9.66806391e-02, 1.21337100e-01,
              6.39555611e-01, 9.16940159e-01, 7.67958438e-01, 3.15604610e-01,
              8.51407520e-02, 2.88341275e-01, 4.77537750e-01, 7.93723934e-01,
              2.83156571e-01, 1.49107630e-01, 8.49075051e-01, 6.63367015e-02,
              5.06157395e-01, 1.03582926e-01, 2.39404113e-01, 2.25355130e-01,
              1.63306125e-01, 7.10866394e-01, 5.19143076e-01, 2.05983711e-01,
              6.31991287e-01, 7.34217882e-01, 3.88699697e-01, 2.45228366e-02,
              7.70365643e-04, 6.31739075e-01, 4.65760996e-01, 5.11437603e-01,
              3.03138917e-01, 2.10026319e-01, 4.85564867e-01, 8.15812841e-01,
              9.22456140e-01, 6.53987597e-02, 9.77776547e-01, 5.07389572e-01,
              9.71540054e-01, 2.94780857e-01, 4.71422632e-01, 2.69165357e-01,
              2.25081307e-01, 5.71352211e-01, 9.10688304e-01, 6.86866045e-01,
              7.26946721e-01, 8.74589400e-02, 7.55031337e-01, 2.44705106e-01,
              4.27061128e-01, 9.39796934e-01, 1.25308665e-01, 9.28168054e-02,
              7.51268542e-01, 2.43485235e-01, 4.31140684e-02, 6.45915204e-01,
              6.77630492e-01, 5.48952337e-01, 6.71470300e-01, 8.18931831e-01])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.78280867, 0.48567541, 0.33518123, 0.97659903, 0.95500015,
              0.91354656, 0.12017023, 0.94807519, 0.96146532, 0.05027548,
              0.44214841, 0.07800475, 0.09532079, 0.91336029, 0.3872998 ,
              0.52943958, 0.17447546, 0.43146152, 0.9818097 , 0.35849467,
              0.41759462, 0.95314874, 0.53997138, 0.8780008 , 0.79219314,
              0.11353807, 0.24480464, 0.4246704 , 0.58540523, 0.61239067,
              0.60133162, 0.84601175, 0.89230977, 0.74714481, 0.17306626,
              0.47656403, 0.52747732, 0.69824088, 0.48597035, 0.95685859,
              0.74281337, 0.79739045, 0.34021566, 0.58918463, 0.37484172,
              0.31623122, 0.47279579, 0.82331433, 0.55707121, 0.2918183 ,
              0.21995451, 0.25386589, 0.65982233, 0.33521687, 0.58157497,
              0.56792201, 0.43261995, 0.1633864 , 0.01717153, 0.65171317,
              0.75751549, 0.39827795, 0.17722339, 0.69743597, 0.22405492,
              0.55633907, 0.53341339, 0.78191243, 0.99159689, 0.68633556,
              0.02656824, 0.56343554, 0.38263212, 0.33145171, 0.68873184,
              0.06333762, 0.39695467, 0.51114941, 0.03615142, 0.43573699,
              0.76238059, 0.65346369, 0.38895805, 0.78015544, 0.47364969,
              0.66983964, 0.59713967, 0.33120983, 0.49999163, 0.45086264,
              0.84168995, 0.27817337, 0.25265548, 0.15423942, 0.37900938,
              0.31931294, 0.34478331, 0.56162502, 0.78391245, 0.06698522])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.51855277, 0.7300754 , 0.03482601, 0.83053184, 0.64399199,
              0.10338607, 0.35444633, 0.60609053, 0.6424216 , 0.26318638,
              0.37379178, 0.49495022, 0.06209734, 0.65422031, 0.14960632,
              0.61883009, 0.5008165 , 0.09952028, 0.61091111, 0.50510698,
              0.36140553, 0.85020524, 0.25689934, 0.54995133, 0.38210569,
              0.81204615, 0.06982856, 0.37362981, 0.0984947 , 0.77973463,
              0.48148175, 0.96944462, 0.00794803, 0.39719476, 0.06794018,
              0.19277856, 0.76050743, 0.05833596, 0.78585248, 0.93839529,
              0.82106121, 0.74250022, 0.90828527, 0.40700346, 0.59833134,
              0.75422129, 0.42232407, 0.65079978, 0.27992389, 0.4915189 ,
              0.20393868, 0.50443778, 0.0947652 , 0.08209729, 0.776804  ,
              0.68491528, 0.74399468, 0.52181845, 0.96463536, 0.83316505,
              0.15886076, 0.3889018 , 0.38342197, 0.16833353, 0.20220943,
              0.8027785 , 0.71167933, 0.50100906, 0.62335398, 0.46274944,
              0.54600178, 0.18432249, 0.57794981, 0.89114188, 0.87876597,
              0.31890788, 0.12191499, 0.90615536, 0.79036272, 0.95343462,
              0.49771361, 0.21370958, 0.70572216, 0.36356774, 0.00769647,
              0.95950279, 0.82338157, 0.54354306, 0.00984988, 0.33495155,
              0.73310104, 0.97852044, 0.88689494, 0.99369913, 0.88434274,
              0.33729498, 0.20620295, 0.05973689, 0.62770418, 0.45803515])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.76645848, 0.4750489 , 0.84926548, 0.85638089, 0.57079935,
              0.29894677, 0.34544419, 0.69216625, 0.28024934, 0.55936103,
              0.69444732, 0.03902534, 0.28696669, 0.05026104, 0.03886194,
              0.91940584, 0.90581795, 0.79122263, 0.41377402, 0.52012232,
              0.67494832, 0.10113658, 0.55241981, 0.14179706, 0.87110507,
              0.99124149, 0.71638972, 0.95109434, 0.76168104, 0.43882462,
              0.10870883, 0.73995686, 0.01898332, 0.10233417, 0.29130037,
              0.95743505, 0.11534125, 0.38317001, 0.54905914, 0.92565167,
              0.6062501 , 0.26187587, 0.12107761, 0.6434447 , 0.05122339,
              0.69696921, 0.40608602, 0.21581064, 0.83734099, 0.81195206,
              0.67957519, 0.59310388, 0.20274175, 0.55242539, 0.61404728,
              0.94783023, 0.1239336 , 0.20196408, 0.61460913, 0.5144136 ,
              0.06121041, 0.27132196, 0.11286224, 0.29277426, 0.39176447,
              0.98914658, 0.184768  , 0.92984006, 0.27781098, 0.91330637,
              0.60217551, 0.57655508, 0.61270674, 0.28741341, 0.68443489,
              0.50883786, 0.05901162, 0.96556841, 0.83212416, 0.29174735,
              0.75913539, 0.85778625, 0.93001175, 0.79913952, 0.58178733,
              0.78510685, 0.18183402, 0.05431488, 0.17606854, 0.2140163 ,
              0.06960528, 0.70338445, 0.53466705, 0.82865723, 0.55067791,
              0.83280512, 0.28069909, 0.10143601, 0.44517626, 0.46840797])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([3.86194898e-01, 4.93891394e-01, 2.19601020e-01, 4.19703370e-01,
              7.72575072e-01, 9.39142399e-02, 8.60356344e-02, 4.64235002e-01,
              7.87812570e-02, 1.85601600e-01, 4.41517012e-01, 3.59763366e-01,
              4.47843664e-01, 1.99026424e-01, 2.83650041e-02, 3.80984275e-01,
              1.97880690e-01, 2.03223239e-02, 2.11573236e-01, 4.06811267e-01,
              2.72193453e-01, 1.83536264e-02, 7.86862750e-01, 5.36067488e-01,
              4.02906002e-01, 3.82482410e-01, 2.61252746e-02, 9.54062231e-01,
              7.97404333e-01, 1.74340951e-01, 2.27488165e-01, 2.31151211e-01,
              3.26044473e-01, 4.57722276e-01, 9.10911646e-01, 7.51848355e-04,
              6.07781386e-01, 1.19857192e-01, 6.98437331e-01, 8.33394314e-02,
              8.42945357e-01, 4.24399272e-01, 5.66211580e-01, 3.34172611e-01,
              2.48516804e-01, 7.25191886e-01, 9.57754557e-01, 2.47593862e-01,
              3.35241524e-01, 9.40892586e-01, 5.42104070e-01, 3.07311934e-01,
              3.85626517e-01, 6.03373630e-01, 2.95863355e-01, 7.46274139e-01,
              8.55357711e-01, 4.97475796e-02, 5.80885998e-01, 5.66524512e-01,
              8.92100907e-01, 9.44768167e-01, 3.65542917e-01, 4.16787879e-01,
              1.84336637e-01, 9.48207507e-02, 2.85798720e-01, 1.11038184e-01,
              5.63334994e-01, 8.36250004e-02, 4.42217091e-01, 7.55105411e-01,
              7.62692645e-01, 1.86221291e-01, 9.25115742e-02, 1.60677567e-01,
              7.84527698e-01, 4.57780750e-01, 9.64245874e-01, 1.14357679e-01,
              5.77553065e-01, 5.30822913e-01, 6.85079937e-01, 7.49046380e-01,
              2.38226968e-01, 5.83829030e-01, 5.30991520e-01, 3.74094746e-01,
              6.41630944e-01, 6.72729686e-01, 8.42477935e-01, 8.32147935e-01,
              5.12720058e-02, 6.41464518e-01, 4.84510807e-01, 7.89926803e-01,
              3.52950233e-01, 7.01582776e-01, 2.59551869e-01, 2.13828387e-01])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.6422393 , 0.11777965, 0.80517331, 0.19173388, 0.24222376,
              0.96348649, 0.16655479, 0.17553825, 0.96559933, 0.88341976,
              0.43029835, 0.92522454, 0.50564376, 0.70621865, 0.35141593,
              0.36200447, 0.16612891, 0.58904453, 0.64777084, 0.24937505,
              0.21491144, 0.72233986, 0.45722696, 0.96593979, 0.73530563,
              0.94262022, 0.72126978, 0.96437831, 0.06222629, 0.57835137,
              0.38437243, 0.41628852, 0.65982904, 0.59934335, 0.2391041 ,
              0.32780786, 0.85800828, 0.12289622, 0.73439959, 0.97306238,
              0.83748905, 0.4856739 , 0.01089764, 0.30503577, 0.84478883,
              0.82993321, 0.03126817, 0.39702913, 0.71752881, 0.62438122,
              0.71239889, 0.97727718, 0.72124723, 0.81721824, 0.19609684,
              0.19663502, 0.03479515, 0.34390926, 0.56752385, 0.53404378,
              0.43253594, 0.2352317 , 0.04759808, 0.41681339, 0.26808576,
              0.51657219, 0.3668286 , 0.21209293, 0.72107114, 0.77560599,
              0.97397123, 0.88849291, 0.38970917, 0.05477813, 0.0348546 ,
              0.56113328, 0.77214495, 0.72599152, 0.26573706, 0.72684251,
              0.79500795, 0.97759671, 0.42801666, 0.40414866, 0.49298199,
              0.01669934, 0.15041691, 0.91076629, 0.25165687, 0.68644098,
              0.41986781, 0.22486642, 0.81030694, 0.59054597, 0.64023184,
              0.73128534, 0.67875002, 0.3747004 , 0.26467021, 0.08251396])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.10039656, 0.8053636 , 0.4777668 , 0.33633859, 0.79176161,
              0.06707518, 0.41537895, 0.66533915, 0.28218848, 0.22735378,
              0.34647676, 0.24726826, 0.52088251, 0.93434271, 0.63276613,
              0.36901609, 0.58270902, 0.63997511, 0.83645321, 0.13902424,
              0.27364939, 0.26521071, 0.04513004, 0.4339141 , 0.53676138,
              0.18219164, 0.11956039, 0.06957914, 0.84298626, 0.08997686,
              0.64409544, 0.04976023, 0.04981386, 0.09856181, 0.71279771,
              0.42743006, 0.34339721, 0.96528214, 0.57406477, 0.63046574,
              0.9128583 , 0.35803219, 0.1524431 , 0.95492913, 0.29126673,
              0.11406246, 0.3039544 , 0.07913958, 0.05930272, 0.66825974,
              0.02508059, 0.07104708, 0.15455828, 0.03271057, 0.28128478,
              0.91941585, 0.92489774, 0.15818505, 0.03429534, 0.9229608 ,
              0.9880474 , 0.93577063, 0.92576395, 0.45161816, 0.71339051,
              0.61717964, 0.4314873 , 0.561779  , 0.48262909, 0.63042208,
              0.6241165 , 0.07356945, 0.71015537, 0.07093734, 0.00545193,
              0.95848956, 0.91147446, 0.41269662, 0.22148509, 0.64146929,
              0.89335082, 0.12575116, 0.06950064, 0.37735517, 0.62847669,
              0.98156393, 0.25197711, 0.34601721, 0.83938112, 0.68987411,
              0.33529529, 0.75706694, 0.69865   , 0.35402336, 0.88861967,
              0.25824845, 0.23138531, 0.32225588, 0.59787612, 0.85667407])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.9990833 , 0.58780013, 0.45494122, 0.62417795, 0.21342724,
              0.02057313, 0.6057925 , 0.71520954, 0.99398037, 0.32357137,
              0.32305725, 0.82168111, 0.09981268, 0.32923868, 0.21387005,
              0.3488476 , 0.35232408, 0.48220268, 0.57938638, 0.21280209,
              0.89370836, 0.0022566 , 0.2690275 , 0.23933772, 0.57323956,
              0.17499606, 0.07942806, 0.27364693, 0.41922011, 0.78185115,
              0.21779057, 0.35623333, 0.4741658 , 0.70613939, 0.39822405,
              0.04286219, 0.24523692, 0.45014927, 0.91405178, 0.2351412 ,
              0.96196869, 0.52351058, 0.5381373 , 0.95668797, 0.71806648,
              0.06455844, 0.37066633, 0.37386874, 0.521754  , 0.89508308,
              0.78733854, 0.06426678, 0.75876999, 0.41315085, 0.62372411,
              0.87188805, 0.27378257, 0.18785532, 0.67349523, 0.89548326,
              0.6390442 , 0.25478044, 0.79918236, 0.31140138, 0.41255825,
              0.35093546, 0.11471383, 0.58663839, 0.72065514, 0.04739587,
              0.15409053, 0.12891502, 0.05680272, 0.77099442, 0.66175595,
              0.36903222, 0.84188049, 0.47797774, 0.95731253, 0.05759848,
              0.44180842, 0.13178863, 0.26517088, 0.44920881, 0.1605688 ,
              0.89779752, 0.90312236, 0.71242976, 0.02127021, 0.75103715,
              0.64109586, 0.08868299, 0.66061692, 0.59337691, 0.1692901 ,
              0.83108618, 0.49530829, 0.11435644, 0.76661213, 0.9699087 ])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.53388987, 0.23218868, 0.20387958, 0.4872656 , 0.2109718 ,
              0.03364012, 0.86597888, 0.90982598, 0.85575485, 0.32708716,
              0.82821392, 0.27474462, 0.25307353, 0.74256475, 0.96524889,
              0.68444063, 0.73143445, 0.18584946, 0.97484378, 0.97673589,
              0.35118041, 0.08703373, 0.8300354 , 0.60592208, 0.21079167,
              0.96048816, 0.82224791, 0.20839384, 0.58630012, 0.72505712,
              0.08174962, 0.30859561, 0.16645767, 0.03414147, 0.04684852,
              0.39482422, 0.34396537, 0.48410828, 0.42117199, 0.1664338 ,
              0.23579358, 0.91137064, 0.71829478, 0.16426921, 0.69413708,
              0.48022023, 0.07788939, 0.38192898, 0.3527413 , 0.15091274,
              0.25823414, 0.28114508, 0.49250978, 0.39311825, 0.1633486 ,
              0.01665494, 0.34938402, 0.96345096, 0.76295939, 0.69162987,
              0.99599249, 0.41374504, 0.19749809, 0.60842411, 0.69153189,
              0.17429921, 0.18357121, 0.52132414, 0.27651221, 0.18463356,
              0.86759008, 0.8307194 , 0.64867491, 0.1141962 , 0.35365694,
              0.86411166, 0.34933626, 0.7329178 , 0.59996683, 0.00370529,
              0.662905  , 0.27343174, 0.43560081, 0.49593196, 0.7953769 ,
              0.996612  , 0.45322955, 0.9448087 , 0.15012297, 0.70367519,
              0.97212822, 0.88910353, 0.95835642, 0.36424758, 0.87435185,
              0.38433038, 0.45037454, 0.56160508, 0.46325704, 0.66521636])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.6422393 , 0.11777965, 0.80517331, 0.19173388, 0.24222376,
              0.96348649, 0.16655479, 0.17553825, 0.96559933, 0.88341976,
              0.43029835, 0.92522454, 0.50564376, 0.70621865, 0.35141593,
              0.36200447, 0.16612891, 0.58904453, 0.64777084, 0.24937505,
              0.21491144, 0.72233986, 0.45722696, 0.96593979, 0.73530563,
              0.94262022, 0.72126978, 0.96437831, 0.06222629, 0.57835137,
              0.38437243, 0.41628852, 0.65982904, 0.59934335, 0.2391041 ,
              0.32780786, 0.85800828, 0.12289622, 0.73439959, 0.97306238,
              0.83748905, 0.4856739 , 0.01089764, 0.30503577, 0.84478883,
              0.82993321, 0.03126817, 0.39702913, 0.71752881, 0.62438122,
              0.71239889, 0.97727718, 0.72124723, 0.81721824, 0.19609684,
              0.19663502, 0.03479515, 0.34390926, 0.56752385, 0.53404378,
              0.43253594, 0.2352317 , 0.04759808, 0.41681339, 0.26808576,
              0.51657219, 0.3668286 , 0.21209293, 0.72107114, 0.77560599,
              0.97397123, 0.88849291, 0.38970917, 0.05477813, 0.0348546 ,
              0.56113328, 0.77214495, 0.72599152, 0.26573706, 0.72684251,
              0.79500795, 0.97759671, 0.42801666, 0.40414866, 0.49298199,
              0.01669934, 0.15041691, 0.91076629, 0.25165687, 0.68644098,
              0.41986781, 0.22486642, 0.81030694, 0.59054597, 0.64023184,
              0.73128534, 0.67875002, 0.3747004 , 0.26467021, 0.08251396])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.10039656, 0.8053636 , 0.4777668 , 0.33633859, 0.79176161,
              0.06707518, 0.41537895, 0.66533915, 0.28218848, 0.22735378,
              0.34647676, 0.24726826, 0.52088251, 0.93434271, 0.63276613,
              0.36901609, 0.58270902, 0.63997511, 0.83645321, 0.13902424,
              0.27364939, 0.26521071, 0.04513004, 0.4339141 , 0.53676138,
              0.18219164, 0.11956039, 0.06957914, 0.84298626, 0.08997686,
              0.64409544, 0.04976023, 0.04981386, 0.09856181, 0.71279771,
              0.42743006, 0.34339721, 0.96528214, 0.57406477, 0.63046574,
              0.9128583 , 0.35803219, 0.1524431 , 0.95492913, 0.29126673,
              0.11406246, 0.3039544 , 0.07913958, 0.05930272, 0.66825974,
              0.02508059, 0.07104708, 0.15455828, 0.03271057, 0.28128478,
              0.91941585, 0.92489774, 0.15818505, 0.03429534, 0.9229608 ,
              0.9880474 , 0.93577063, 0.92576395, 0.45161816, 0.71339051,
              0.61717964, 0.4314873 , 0.561779  , 0.48262909, 0.63042208,
              0.6241165 , 0.07356945, 0.71015537, 0.07093734, 0.00545193,
              0.95848956, 0.91147446, 0.41269662, 0.22148509, 0.64146929,
              0.89335082, 0.12575116, 0.06950064, 0.37735517, 0.62847669,
              0.98156393, 0.25197711, 0.34601721, 0.83938112, 0.68987411,
              0.33529529, 0.75706694, 0.69865   , 0.35402336, 0.88861967,
              0.25824845, 0.23138531, 0.32225588, 0.59787612, 0.85667407])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.9990833 , 0.58780013, 0.45494122, 0.62417795, 0.21342724,
              0.02057313, 0.6057925 , 0.71520954, 0.99398037, 0.32357137,
              0.32305725, 0.82168111, 0.09981268, 0.32923868, 0.21387005,
              0.3488476 , 0.35232408, 0.48220268, 0.57938638, 0.21280209,
              0.89370836, 0.0022566 , 0.2690275 , 0.23933772, 0.57323956,
              0.17499606, 0.07942806, 0.27364693, 0.41922011, 0.78185115,
              0.21779057, 0.35623333, 0.4741658 , 0.70613939, 0.39822405,
              0.04286219, 0.24523692, 0.45014927, 0.91405178, 0.2351412 ,
              0.96196869, 0.52351058, 0.5381373 , 0.95668797, 0.71806648,
              0.06455844, 0.37066633, 0.37386874, 0.521754  , 0.89508308,
              0.78733854, 0.06426678, 0.75876999, 0.41315085, 0.62372411,
              0.87188805, 0.27378257, 0.18785532, 0.67349523, 0.89548326,
              0.6390442 , 0.25478044, 0.79918236, 0.31140138, 0.41255825,
              0.35093546, 0.11471383, 0.58663839, 0.72065514, 0.04739587,
              0.15409053, 0.12891502, 0.05680272, 0.77099442, 0.66175595,
              0.36903222, 0.84188049, 0.47797774, 0.95731253, 0.05759848,
              0.44180842, 0.13178863, 0.26517088, 0.44920881, 0.1605688 ,
              0.89779752, 0.90312236, 0.71242976, 0.02127021, 0.75103715,
              0.64109586, 0.08868299, 0.66061692, 0.59337691, 0.1692901 ,
              0.83108618, 0.49530829, 0.11435644, 0.76661213, 0.9699087 ])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.00330135, 0.80676309, 0.52251912, 0.74777405, 0.69534102,
              0.813345  , 0.98068183, 0.55755164, 0.34453097, 0.04568693,
              0.46884676, 0.86729421, 0.83957808, 0.66744784, 0.66340165,
              0.66620532, 0.53788298, 0.57952546, 0.56857961, 0.57752751,
              0.18516229, 0.6082727 , 0.25464338, 0.68603044, 0.86740305,
              0.30600121, 0.43819853, 0.71539118, 0.08769062, 0.85213451,
              0.2382143 , 0.55147363, 0.41151805, 0.32969432, 0.2060696 ,
              0.71785388, 0.88803733, 0.97998443, 0.13174392, 0.31509745,
              0.33007717, 0.36970393, 0.79232764, 0.99324199, 0.04815359,
              0.58541062, 0.74136498, 0.54349606, 0.93865657, 0.14907062,
              0.69157601, 0.74650771, 0.16612825, 0.67026948, 0.88881583,
              0.64657078, 0.59027116, 0.20336517, 0.4734739 , 0.526256  ,
              0.88164301, 0.41062517, 0.16775298, 0.58602989, 0.39934507,
              0.21892801, 0.42119488, 0.2124397 , 0.49269781, 0.62640351,
              0.60278591, 0.47356108, 0.9019134 , 0.090779  , 0.50980208,
              0.49637084, 0.1244262 , 0.29013021, 0.72890341, 0.9433604 ,
              0.26555296, 0.99579714, 0.79342796, 0.35770656, 0.96822378,
              0.21044788, 0.28815972, 0.6120779 , 0.46316586, 0.43793018,
              0.05618802, 0.27866698, 0.03553435, 0.43768943, 0.99846725,
              0.6869228 , 0.8527385 , 0.34695002, 0.12817196, 0.06670312])}]]


