
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='24550148-ce38-43a0-a88c-02f2858eb605'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='02fd0815-fdd5-4883-bea0-3512bbc51ad7'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.591324810316265],
     [0.0552310761816666],
     [0.883068517277421],
     [0.317298580048543],
     [0.580835295933281],
     [0.616885129114987],
     [0.0191725528426701],
     [0.311098705017419],
     [0.496890682287416],
     [0.127285980110925],
     [0.714851914274416],
     [0.123991484759805],
     [0.404031830890134],
     [0.577600073510652],
     [0.0683484278416074],
     [0.948932966472557],
     [0.495843545726009],
     [0.926978336205011],
     [0.614300956714155],
     [0.377818994662829],
     [0.0539990930449227],
     [0.0863527399974561],
     [0.415675296843894],
     [0.422521740477563],
     [0.147966496095535],
     [0.186051638691747],
     [0.128461134300073],
     [0.406043359068045],
     [0.0441434395826759],
     [0.0562702265815906],
     [0.106573877548243],
     [0.361340086714052],
     [0.574063526769906],
     [0.248500731426492],
     [0.456657475645639],
     [0.122817034637655],
     [0.820875159209479],
     [0.141953218582214],
     [0.396586807842225],
     [0.904190409624562],
     [0.993203678108358],
     [0.362729884912923],
     [0.764588150315923],
     [0.790907731235457],
     [0.442873940443492],
     [0.115066688849016],
     [0.497524321723963],
     [0.631842218284553],
     [0.541052924944372],
     [0.736485393638459],
     [0.78619013081885],
     [0.594640481021211],
     [0.163453601656994],
     [0.632923779294679],
     [0.976036958101699],
     [0.874836521374776],
     [0.839634714438015],
     [0.873713572547942],
     [0.338983158130027],
     [0.717397273387835],
     [0.561351815928676],
     [0.0536877336991557],
     [0.797194668179842],
     [0.841692928880931],
     [0.804943130075746],
     [0.947192027748039],
     [0.316230331299292],
     [0.611928098738192],
     [0.392920053430375],
     [0.251055582941925],
     [0.122805252491184],
     [0.42157268214092],
     [0.250879963342836],
     [0.79481944374617],
     [0.693069316762597],
     [0.594646971447755],
     [0.994537699258788],
     [0.249826700297724],
     [0.52406478289145],
     [0.361953304728202],
     [0.879508911347683],
     [0.230491319563962],
     [0.594133719214027],
     [0.0220307457617823],
     [0.340715363764092],
     [0.83911964854422],
     [0.303218092378689],
     [0.387604015546538],
     [0.434331665193808],
     [0.647542981328044],
     [0.0275249792440766],
     [0.847822391504944],
     [0.380859208276396],
     [0.688623092255102],
     [0.899622192903693],
     [0.223502472533633],
     [0.595159161007382],
     [0.0922093887644805],
     [0.647189695787644],
     [0.640665279770438]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([ 0.03493803])],
     [array([ 0.64497238])],
     [array([ 0.48579713])],
     [array([ 0.21161867])],
     [array([ 0.30545544])],
     [array([ 0.53012302])],
     [array([ 0.50939186])],
     [array([ 0.87487668])],
     [array([ 0.7216717])],
     [array([ 0.92281074])],
     [array([ 0.94611754])],
     [array([ 0.17331603])],
     [array([ 0.94778514])],
     [array([ 0.35483492])],
     [array([ 0.97168029])],
     [array([ 0.26040028])],
     [array([ 0.83341524])],
     [array([ 0.60239947])],
     [array([ 0.02355172])],
     [array([ 0.83617004])],
     [array([ 0.37723728])],
     [array([ 0.12103015])],
     [array([ 0.93955494])],
     [array([ 0.66771794])],
     [array([ 0.24196876])],
     [array([ 0.56619519])],
     [array([ 0.18553211])],
     [array([ 0.4047049])],
     [array([ 0.4820159])],
     [array([ 0.3299324])],
     [array([ 0.60147416])],
     [array([ 0.84280159])],
     [array([ 0.63618148])],
     [array([ 0.06676039])],
     [array([ 0.54111067])],
     [array([ 0.569315])],
     [array([ 0.092486])],
     [array([ 0.68269744])],
     [array([ 0.33031381])],
     [array([ 0.83768567])],
     [array([ 0.2187082])],
     [array([ 0.43221756])],
     [array([ 0.69163936])],
     [array([ 0.98118552])],
     [array([ 0.20444931])],
     [array([ 0.37127962])],
     [array([ 0.39626301])],
     [array([ 0.55368719])],
     [array([ 0.02481739])],
     [array([ 0.88616703])],
     [array([ 0.02738729])],
     [array([ 0.57028156])],
     [array([ 0.23573116])],
     [array([ 0.95869449])],
     [array([ 0.51804904])],
     [array([ 0.19918161])],
     [array([ 0.5376473])],
     [array([ 0.91168117])],
     [array([ 0.64609687])],
     [array([ 0.69336704])],
     [array([ 0.03015443])],
     [array([ 0.4617534])],
     [array([ 0.55194316])],
     [array([ 0.55403276])],
     [array([ 0.28509247])],
     [array([ 0.38975974])],
     [array([ 0.6366779])],
     [array([ 0.32814218])],
     [array([ 0.96893309])],
     [array([ 0.59016089])],
     [array([ 0.30095144])],
     [array([ 0.27777036])],
     [array([ 0.2923394])],
     [array([ 0.37674469])],
     [array([ 0.96529778])],
     [array([ 0.46596325])],
     [array([ 0.33400082])],
     [array([ 0.02257406])],
     [array([ 0.94095915])],
     [array([ 0.05747625])],
     [array([ 0.66647372])],
     [array([ 0.29857305])],
     [array([ 0.83058139])],
     [array([ 0.15296526])],
     [array([ 0.15364997])],
     [array([ 0.55175602])],
     [array([ 0.27051068])],
     [array([ 0.56892075])],
     [array([ 0.02680535])],
     [array([ 0.38655558])],
     [array([ 0.2544029])],
     [array([ 0.08849192])],
     [array([ 0.08587347])],
     [array([ 0.5109211])],
     [array([ 0.0145726])],
     [array([ 0.58450201])],
     [array([ 0.65030777])],
     [array([ 0.07591478])],
     [array([ 0.6522814])],
     [array([ 0.49282094])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([ 0.03493803,  0.64497238,  0.48579713,  0.21161867,  0.30545544,
            0.53012302,  0.50939186,  0.87487668,  0.7216717 ,  0.92281074,
            0.94611754,  0.17331603,  0.94778514,  0.35483492,  0.97168029,
            0.26040028,  0.83341524,  0.60239947,  0.02355172,  0.83617004,
            0.37723728,  0.12103015,  0.93955494,  0.66771794,  0.24196876,
            0.56619519,  0.18553211,  0.4047049 ,  0.4820159 ,  0.3299324 ,
            0.60147416,  0.84280159,  0.63618148,  0.06676039,  0.54111067,
            0.569315  ,  0.092486  ,  0.68269744,  0.33031381,  0.83768567,
            0.2187082 ,  0.43221756,  0.69163936,  0.98118552,  0.20444931,
            0.37127962,  0.39626301,  0.55368719,  0.02481739,  0.88616703,
            0.02738729,  0.57028156,  0.23573116,  0.95869449,  0.51804904,
            0.19918161,  0.5376473 ,  0.91168117,  0.64609687,  0.69336704,
            0.03015443,  0.4617534 ,  0.55194316,  0.55403276,  0.28509247,
            0.38975974,  0.6366779 ,  0.32814218,  0.96893309,  0.59016089,
            0.30095144,  0.27777036,  0.2923394 ,  0.37674469,  0.96529778,
            0.46596325,  0.33400082,  0.02257406,  0.94095915,  0.05747625,
            0.66647372,  0.29857305,  0.83058139,  0.15296526,  0.15364997,
            0.55175602,  0.27051068,  0.56892075,  0.02680535,  0.38655558,
            0.2544029 ,  0.08849192,  0.08587347,  0.5109211 ,  0.0145726 ,
            0.58450201,  0.65030777,  0.07591478,  0.6522814 ,  0.49282094])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.59132481,  0.05523108,  0.88306852,  0.31729858,  0.5808353 ,
               0.61688513,  0.01917255,  0.31109871,  0.49689068,  0.12728598,
               0.71485191,  0.12399148,  0.40403183,  0.57760007,  0.06834843,
               0.94893297,  0.49584355,  0.92697834,  0.61430096,  0.37781899,
               0.05399909,  0.08635274,  0.4156753 ,  0.42252174,  0.1479665 ,
               0.18605164,  0.12846113,  0.40604336,  0.04414344,  0.05627023,
               0.10657388,  0.36134009,  0.57406353,  0.24850073,  0.45665748,
               0.12281703,  0.82087516,  0.14195322,  0.39658681,  0.90419041,
               0.99320368,  0.36272988,  0.76458815,  0.79090773,  0.44287394,
               0.11506669,  0.49752432,  0.63184222,  0.54105292,  0.73648539,
               0.78619013,  0.59464048,  0.1634536 ,  0.63292378,  0.97603696,
               0.87483652,  0.83963471,  0.87371357,  0.33898316,  0.71739727,
               0.56135182,  0.05368773,  0.79719467,  0.84169293,  0.80494313,
               0.94719203,  0.31623033,  0.6119281 ,  0.39292005,  0.25105558,
               0.12280525,  0.42157268,  0.25087996,  0.79481944,  0.69306932,
               0.59464697,  0.9945377 ,  0.2498267 ,  0.52406478,  0.3619533 ,
               0.87950891,  0.23049132,  0.59413372,  0.02203075,  0.34071536,
               0.83911965,  0.30321809,  0.38760402,  0.43433167,  0.64754298,
               0.02752498,  0.84782239,  0.38085921,  0.68862309,  0.89962219,
               0.22350247,  0.59515916,  0.09220939,  0.6471897 ,  0.64066528])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.85385762,  0.44935956,  0.17396701,  0.44219179,  0.55769743,
               0.87573807,  0.2899678 ,  0.71746134,  0.51175955,  0.95381048,
               0.98114227,  0.3295433 ,  0.40261791,  0.02778311,  0.91919129,
               0.47189856,  0.24070405,  0.25841811,  0.58007829,  0.77690754,
               0.03874655,  0.29995129,  0.53976279,  0.30980833,  0.16199203,
               0.12046664,  0.15837761,  0.31132779,  0.37507523,  0.75639494,
               0.54154967,  0.73288069,  0.9498826 ,  0.61203301,  0.95601233,
               0.41209783,  0.96815582,  0.32089178,  0.57672674,  0.24390663,
               0.36455291,  0.59595075,  0.26587132,  0.27698695,  0.81170767,
               0.89078431,  0.69702192,  0.42259514,  0.57610588,  0.54838906,
               0.43864762,  0.88537349,  0.65681606,  0.23353727,  0.37809493,
               0.25507463,  0.12933261,  0.31818281,  0.1046449 ,  0.63910526,
               0.7814754 ,  0.89802928,  0.97140942,  0.43601686,  0.4727771 ,
               0.33394639,  0.22508189,  0.1070213 ,  0.59692368,  0.86953144,
               0.96981758,  0.09933156,  0.61382337,  0.36579384,  0.40114921,
               0.93198844,  0.2255291 ,  0.72734438,  0.78307546,  0.23112629,
               0.73924256,  0.05909704,  0.62337079,  0.43563411,  0.6502498 ,
               0.47890344,  0.29767207,  0.00303956,  0.69001749,  0.47674356,
               0.33428044,  0.54192462,  0.53694853,  0.44310422,  0.44064378,
               0.90297563,  0.17584546,  0.22348601,  0.85902646,  0.67219738])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.46862517,  0.20653382,  0.11244779,  0.4137706 ,  0.78679066,
               0.08805571,  0.26215393,  0.77138811,  0.38626522,  0.77244988,
               0.78090354,  0.341344  ,  0.36584733,  0.05997885,  0.74998415,
               0.14023951,  0.07474052,  0.45347733,  0.56747374,  0.9861118 ,
               0.78841557,  0.82376894,  0.08105226,  0.53093657,  0.86834685,
               0.02057591,  0.10741305,  0.80091162,  0.73003545,  0.19403845,
               0.35173017,  0.94863992,  0.87112376,  0.8169618 ,  0.83615992,
               0.18483578,  0.07351874,  0.44922679,  0.42018025,  0.67875355,
               0.94586873,  0.80275338,  0.22261616,  0.65048752,  0.13051109,
               0.82139479,  0.90975691,  0.75465477,  0.91548833,  0.50027007,
               0.70121462,  0.81200957,  0.11648729,  0.18250801,  0.49813443,
               0.7755604 ,  0.61949226,  0.4306188 ,  0.83824359,  0.14849941,
               0.96663017,  0.90735078,  0.5298633 ,  0.42303003,  0.20352997,
               0.77859234,  0.63186718,  0.97395536,  0.27276678,  0.60085301,
               0.8360612 ,  0.37865892,  0.11847312,  0.23128346,  0.69855526,
               0.49398308,  0.85434537,  0.0713529 ,  0.71881056,  0.76659713,
               0.19964834,  0.22657428,  0.63101235,  0.58960968,  0.98518868,
               0.76725881,  0.15465758,  0.48093515,  0.10986393,  0.81346233,
               0.81253564,  0.03384801,  0.58307602,  0.03327376,  0.15699964,
               0.48797595,  0.35789527,  0.67944834,  0.7984501 ,  0.52503463])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.80445854,  0.9406097 ,  0.57082365,  0.82592593,  0.9386654 ,
               0.3731396 ,  0.08155075,  0.66967481,  0.17356602,  0.73981906,
               0.19484881,  0.81258593,  0.6109059 ,  0.0771839 ,  0.74076903,
               0.82204383,  0.39106104,  0.21855432,  0.03942719,  0.69930832,
               0.51525162,  0.41007684,  0.35536635,  0.13024698,  0.2811241 ,
               0.48586445,  0.59610524,  0.1017401 ,  0.14082399,  0.58885179,
               0.26418859,  0.95670994,  0.35527788,  0.96775277,  0.26024619,
               0.15730045,  0.37429095,  0.93804386,  0.26877776,  0.2309815 ,
               0.09044367,  0.35681427,  0.28731212,  0.49431365,  0.95007124,
               0.5714717 ,  0.07394935,  0.82977345,  0.96106544,  0.31945316,
               0.09185142,  0.44510302,  0.74502551,  0.34574076,  0.43465   ,
               0.61903319,  0.10051442,  0.13545869,  0.38227624,  0.56106399,
               0.79026166,  0.40304219,  0.39885756,  0.54520134,  0.32655511,
               0.27030779,  0.40905262,  0.76833545,  0.6961465 ,  0.81786922,
               0.16412251,  0.8634777 ,  0.11094832,  0.15347896,  0.74635058,
               0.73473517,  0.93180196,  0.2997232 ,  0.73192568,  0.35006182,
               0.89304551,  0.52338212,  0.27248545,  0.88571631,  0.09846467,
               0.19979957,  0.94865332,  0.46354227,  0.20695942,  0.04499567,
               0.9620514 ,  0.11963982,  0.04042979,  0.040425  ,  0.85924603,
               0.14098387,  0.54649031,  0.00379018,  0.67576299,  0.90515057])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.59132481,  0.05523108,  0.88306852,  0.31729858,  0.5808353 ,
               0.61688513,  0.01917255,  0.31109871,  0.49689068,  0.12728598,
               0.71485191,  0.12399148,  0.40403183,  0.57760007,  0.06834843,
               0.94893297,  0.49584355,  0.92697834,  0.61430096,  0.37781899,
               0.05399909,  0.08635274,  0.4156753 ,  0.42252174,  0.1479665 ,
               0.18605164,  0.12846113,  0.40604336,  0.04414344,  0.05627023,
               0.10657388,  0.36134009,  0.57406353,  0.24850073,  0.45665748,
               0.12281703,  0.82087516,  0.14195322,  0.39658681,  0.90419041,
               0.99320368,  0.36272988,  0.76458815,  0.79090773,  0.44287394,
               0.11506669,  0.49752432,  0.63184222,  0.54105292,  0.73648539,
               0.78619013,  0.59464048,  0.1634536 ,  0.63292378,  0.97603696,
               0.87483652,  0.83963471,  0.87371357,  0.33898316,  0.71739727,
               0.56135182,  0.05368773,  0.79719467,  0.84169293,  0.80494313,
               0.94719203,  0.31623033,  0.6119281 ,  0.39292005,  0.25105558,
               0.12280525,  0.42157268,  0.25087996,  0.79481944,  0.69306932,
               0.59464697,  0.9945377 ,  0.2498267 ,  0.52406478,  0.3619533 ,
               0.87950891,  0.23049132,  0.59413372,  0.02203075,  0.34071536,
               0.83911965,  0.30321809,  0.38760402,  0.43433167,  0.64754298,
               0.02752498,  0.84782239,  0.38085921,  0.68862309,  0.89962219,
               0.22350247,  0.59515916,  0.09220939,  0.6471897 ,  0.64066528])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.85385762,  0.44935956,  0.17396701,  0.44219179,  0.55769743,
               0.87573807,  0.2899678 ,  0.71746134,  0.51175955,  0.95381048,
               0.98114227,  0.3295433 ,  0.40261791,  0.02778311,  0.91919129,
               0.47189856,  0.24070405,  0.25841811,  0.58007829,  0.77690754,
               0.03874655,  0.29995129,  0.53976279,  0.30980833,  0.16199203,
               0.12046664,  0.15837761,  0.31132779,  0.37507523,  0.75639494,
               0.54154967,  0.73288069,  0.9498826 ,  0.61203301,  0.95601233,
               0.41209783,  0.96815582,  0.32089178,  0.57672674,  0.24390663,
               0.36455291,  0.59595075,  0.26587132,  0.27698695,  0.81170767,
               0.89078431,  0.69702192,  0.42259514,  0.57610588,  0.54838906,
               0.43864762,  0.88537349,  0.65681606,  0.23353727,  0.37809493,
               0.25507463,  0.12933261,  0.31818281,  0.1046449 ,  0.63910526,
               0.7814754 ,  0.89802928,  0.97140942,  0.43601686,  0.4727771 ,
               0.33394639,  0.22508189,  0.1070213 ,  0.59692368,  0.86953144,
               0.96981758,  0.09933156,  0.61382337,  0.36579384,  0.40114921,
               0.93198844,  0.2255291 ,  0.72734438,  0.78307546,  0.23112629,
               0.73924256,  0.05909704,  0.62337079,  0.43563411,  0.6502498 ,
               0.47890344,  0.29767207,  0.00303956,  0.69001749,  0.47674356,
               0.33428044,  0.54192462,  0.53694853,  0.44310422,  0.44064378,
               0.90297563,  0.17584546,  0.22348601,  0.85902646,  0.67219738])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.46862517,  0.20653382,  0.11244779,  0.4137706 ,  0.78679066,
               0.08805571,  0.26215393,  0.77138811,  0.38626522,  0.77244988,
               0.78090354,  0.341344  ,  0.36584733,  0.05997885,  0.74998415,
               0.14023951,  0.07474052,  0.45347733,  0.56747374,  0.9861118 ,
               0.78841557,  0.82376894,  0.08105226,  0.53093657,  0.86834685,
               0.02057591,  0.10741305,  0.80091162,  0.73003545,  0.19403845,
               0.35173017,  0.94863992,  0.87112376,  0.8169618 ,  0.83615992,
               0.18483578,  0.07351874,  0.44922679,  0.42018025,  0.67875355,
               0.94586873,  0.80275338,  0.22261616,  0.65048752,  0.13051109,
               0.82139479,  0.90975691,  0.75465477,  0.91548833,  0.50027007,
               0.70121462,  0.81200957,  0.11648729,  0.18250801,  0.49813443,
               0.7755604 ,  0.61949226,  0.4306188 ,  0.83824359,  0.14849941,
               0.96663017,  0.90735078,  0.5298633 ,  0.42303003,  0.20352997,
               0.77859234,  0.63186718,  0.97395536,  0.27276678,  0.60085301,
               0.8360612 ,  0.37865892,  0.11847312,  0.23128346,  0.69855526,
               0.49398308,  0.85434537,  0.0713529 ,  0.71881056,  0.76659713,
               0.19964834,  0.22657428,  0.63101235,  0.58960968,  0.98518868,
               0.76725881,  0.15465758,  0.48093515,  0.10986393,  0.81346233,
               0.81253564,  0.03384801,  0.58307602,  0.03327376,  0.15699964,
               0.48797595,  0.35789527,  0.67944834,  0.7984501 ,  0.52503463])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.04073967,  0.19900926,  0.42724656,  0.54208409,  0.32844546,
               0.34907904,  0.19592336,  0.13583233,  0.9717277 ,  0.4834309 ,
               0.92765205,  0.8250387 ,  0.2434011 ,  0.69918386,  0.91363561,
               0.83188757,  0.26958616,  0.16682204,  0.96521687,  0.5748709 ,
               0.27722682,  0.88485014,  0.98121405,  0.78149476,  0.9139462 ,
               0.58668369,  0.93338553,  0.04040736,  0.5582326 ,  0.87981653,
               0.35381753,  0.36928632,  0.4205909 ,  0.86739093,  0.7030323 ,
               0.05085104,  0.73510296,  0.18788664,  0.70259165,  0.46381379,
               0.205402  ,  0.53300599,  0.30486193,  0.42762697,  0.81870256,
               0.44707966,  0.25722294,  0.52379998,  0.40196492,  0.55976901,
               0.78135327,  0.81024865,  0.57355056,  0.2692856 ,  0.04798956,
               0.89347694,  0.39750711,  0.67549535,  0.61291475,  0.40424083,
               0.45816709,  0.81625089,  0.48622573,  0.45760734,  0.07256347,
               0.85040502,  0.35212441,  0.49362039,  0.95896263,  0.9183344 ,
               0.22071427,  0.7007503 ,  0.39361399,  0.08349454,  0.68707482,
               0.30901388,  0.03277462,  0.05839678,  0.0483843 ,  0.79220946,
               0.02223191,  0.4419189 ,  0.37131665,  0.71008003,  0.83325012,
               0.47665105,  0.2042891 ,  0.41848734,  0.34976378,  0.30459033,
               0.92034057,  0.30902978,  0.21332876,  0.12184113,  0.01627931,
               0.22984649,  0.55918546,  0.77826746,  0.5465441 ,  0.15603923])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.03493803,  0.64497238,  0.48579713,  0.21161867,  0.30545544,
               0.53012302,  0.50939186,  0.87487668,  0.7216717 ,  0.92281074,
               0.94611754,  0.17331603,  0.94778514,  0.35483492,  0.97168029,
               0.26040028,  0.83341524,  0.60239947,  0.02355172,  0.83617004,
               0.37723728,  0.12103015,  0.93955494,  0.66771794,  0.24196876,
               0.56619519,  0.18553211,  0.4047049 ,  0.4820159 ,  0.3299324 ,
               0.60147416,  0.84280159,  0.63618148,  0.06676039,  0.54111067,
               0.569315  ,  0.092486  ,  0.68269744,  0.33031381,  0.83768567,
               0.2187082 ,  0.43221756,  0.69163936,  0.98118552,  0.20444931,
               0.37127962,  0.39626301,  0.55368719,  0.02481739,  0.88616703,
               0.02738729,  0.57028156,  0.23573116,  0.95869449,  0.51804904,
               0.19918161,  0.5376473 ,  0.91168117,  0.64609687,  0.69336704,
               0.03015443,  0.4617534 ,  0.55194316,  0.55403276,  0.28509247,
               0.38975974,  0.6366779 ,  0.32814218,  0.96893309,  0.59016089,
               0.30095144,  0.27777036,  0.2923394 ,  0.37674469,  0.96529778,
               0.46596325,  0.33400082,  0.02257406,  0.94095915,  0.05747625,
               0.66647372,  0.29857305,  0.83058139,  0.15296526,  0.15364997,
               0.55175602,  0.27051068,  0.56892075,  0.02680535,  0.38655558,
               0.2544029 ,  0.08849192,  0.08587347,  0.5109211 ,  0.0145726 ,
               0.58450201,  0.65030777,  0.07591478,  0.6522814 ,  0.49282094])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.06567959,  0.26898026,  0.18167939,  0.89613789,  0.98635364,
               0.73250331,  0.74183079,  0.88734169,  0.95855625,  0.89649708,
               0.49264126,  0.3786236 ,  0.45213533,  0.22991452,  0.52957063,
               0.06581549,  0.0656007 ,  0.92921623,  0.58937235,  0.52146042,
               0.33114181,  0.96797044,  0.35557643,  0.93884403,  0.51895902,
               0.44430049,  0.20763854,  0.38183712,  0.36378305,  0.50323238,
               0.32682061,  0.94471143,  0.77632617,  0.25217445,  0.72884789,
               0.34113405,  0.82328567,  0.83451713,  0.70356453,  0.95985912,
               0.10583436,  0.2197624 ,  0.71018374,  0.0741443 ,  0.65904109,
               0.25517725,  0.38529746,  0.40661527,  0.27333254,  0.58441815,
               0.51984398,  0.21504456,  0.32729807,  0.86687283,  0.32913768,
               0.50829152,  0.00420381,  0.31587725,  0.64811417,  0.25574377,
               0.86614457,  0.25653661,  0.28900705,  0.37432317,  0.56015412,
               0.18457913,  0.49120026,  0.00972935,  0.03515787,  0.48198843,
               0.00665277,  0.32341591,  0.22309186,  0.20824641,  0.73060997,
               0.98784979,  0.1817045 ,  0.11193465,  0.27799845,  0.01008521,
               0.67036039,  0.68871638,  0.17093188,  0.19426831,  0.11952009,
               0.25175253,  0.5581065 ,  0.15423729,  0.44103487,  0.44963467,
               0.85391674,  0.70971572,  0.8333828 ,  0.69679531,  0.47079078,
               0.25932051,  0.20573476,  0.26361069,  0.20439411,  0.2771754 ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.25335041,  0.02766018,  0.23880772,  0.04332764,  0.7315597 ,
               0.05681156,  0.89380444,  0.97142615,  0.85494988,  0.28095395,
               0.23403076,  0.06521492,  0.61444817,  0.41695959,  0.20444365,
               0.7030926 ,  0.22563289,  0.89418339,  0.45736031,  0.85571346,
               0.84935432,  0.5904548 ,  0.53904801,  0.40638515,  0.57801432,
               0.21850065,  0.20572572,  0.86481848,  0.18817308,  0.30969355,
               0.04114814,  0.2441479 ,  0.2942342 ,  0.65310129,  0.61593179,
               0.87473665,  0.46227934,  0.72257227,  0.65629098,  0.63860624,
               0.651489  ,  0.61504714,  0.38297102,  0.35222751,  0.57526058,
               0.6284503 ,  0.96312141,  0.40087272,  0.36175896,  0.01492435,
               0.87171633,  0.65690261,  0.78700561,  0.94597177,  0.2810368 ,
               0.23112279,  0.48769839,  0.99431151,  0.87144485,  0.62253772,
               0.46111545,  0.66876272,  0.72432496,  0.75584835,  0.58488959,
               0.96791408,  0.87100128,  0.61900634,  0.60495599,  0.98907644,
               0.24199891,  0.53499899,  0.50909337,  0.36314284,  0.11734647,
               0.3257482 ,  0.3662057 ,  0.07658323,  0.69121754,  0.11822623,
               0.90302756,  0.8289348 ,  0.64019148,  0.14112613,  0.62433791,
               0.44588186,  0.00426762,  0.94372563,  0.03493108,  0.8078087 ,
               0.67539223,  0.86973539,  0.82705061,  0.50507575,  0.70914458,
               0.272789  ,  0.21241393,  0.28918149,  0.61650406,  0.02445963])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([ 0.12109759,  0.45362747,  0.51650748,  0.97078141,  0.73414107,
               0.6812116 ,  0.74979344,  0.11771896,  0.61372725,  0.28337798,
               0.81999691,  0.2630991 ,  0.13533754,  0.29485847,  0.13635978,
               0.59875293,  0.9945303 ,  0.81771307,  0.46579977,  0.69655508,
               0.96996714,  0.7891673 ,  0.63138901,  0.25640306,  0.70346389,
               0.58269713,  0.2633798 ,  0.97796534,  0.84068642,  0.71888369,
               0.40995016,  0.45036923,  0.38035175,  0.49624464,  0.20179978,
               0.44414597,  0.88418183,  0.87659162,  0.87384268,  0.95254468,
               0.95154734,  0.03401391,  0.70906745,  0.53653459,  0.6948857 ,
               0.23683797,  0.95516833,  0.69731883,  0.98606531,  0.15808538,
               0.14371165,  0.53366258,  0.93141893,  0.69396599,  0.33118372,
               0.0555778 ,  0.64219622,  0.13297439,  0.68778608,  0.64239977,
               0.12872691,  0.23410793,  0.21685121,  0.36732008,  0.82330812,
               0.75106628,  0.43291562,  0.59532731,  0.78038183,  0.45549017,
               0.63596316,  0.08527446,  0.23615455,  0.10439553,  0.71319051,
               0.30849076,  0.26671462,  0.82977858,  0.03065744,  0.23377945,
               0.28718688,  0.28295931,  0.57197265,  0.52303354,  0.14394042,
               0.32189751,  0.84429613,  0.16298598,  0.27828876,  0.11328579,
               0.76557073,  0.36450293,  0.62455805,  0.98400376,  0.24573668,
               0.28352874,  0.10242481,  0.46340198,  0.18389494,  0.53500427])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([ 0.03493803,  0.64497238,  0.48579713,  0.21161867,  0.30545544,
               0.53012302,  0.50939186,  0.87487668,  0.7216717 ,  0.92281074,
               0.94611754,  0.17331603,  0.94778514,  0.35483492,  0.97168029,
               0.26040028,  0.83341524,  0.60239947,  0.02355172,  0.83617004,
               0.37723728,  0.12103015,  0.93955494,  0.66771794,  0.24196876,
               0.56619519,  0.18553211,  0.4047049 ,  0.4820159 ,  0.3299324 ,
               0.60147416,  0.84280159,  0.63618148,  0.06676039,  0.54111067,
               0.569315  ,  0.092486  ,  0.68269744,  0.33031381,  0.83768567,
               0.2187082 ,  0.43221756,  0.69163936,  0.98118552,  0.20444931,
               0.37127962,  0.39626301,  0.55368719,  0.02481739,  0.88616703,
               0.02738729,  0.57028156,  0.23573116,  0.95869449,  0.51804904,
               0.19918161,  0.5376473 ,  0.91168117,  0.64609687,  0.69336704,
               0.03015443,  0.4617534 ,  0.55194316,  0.55403276,  0.28509247,
               0.38975974,  0.6366779 ,  0.32814218,  0.96893309,  0.59016089,
               0.30095144,  0.27777036,  0.2923394 ,  0.37674469,  0.96529778,
               0.46596325,  0.33400082,  0.02257406,  0.94095915,  0.05747625,
               0.66647372,  0.29857305,  0.83058139,  0.15296526,  0.15364997,
               0.55175602,  0.27051068,  0.56892075,  0.02680535,  0.38655558,
               0.2544029 ,  0.08849192,  0.08587347,  0.5109211 ,  0.0145726 ,
               0.58450201,  0.65030777,  0.07591478,  0.6522814 ,  0.49282094])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([ 0.06567959,  0.26898026,  0.18167939,  0.89613789,  0.98635364,
               0.73250331,  0.74183079,  0.88734169,  0.95855625,  0.89649708,
               0.49264126,  0.3786236 ,  0.45213533,  0.22991452,  0.52957063,
               0.06581549,  0.0656007 ,  0.92921623,  0.58937235,  0.52146042,
               0.33114181,  0.96797044,  0.35557643,  0.93884403,  0.51895902,
               0.44430049,  0.20763854,  0.38183712,  0.36378305,  0.50323238,
               0.32682061,  0.94471143,  0.77632617,  0.25217445,  0.72884789,
               0.34113405,  0.82328567,  0.83451713,  0.70356453,  0.95985912,
               0.10583436,  0.2197624 ,  0.71018374,  0.0741443 ,  0.65904109,
               0.25517725,  0.38529746,  0.40661527,  0.27333254,  0.58441815,
               0.51984398,  0.21504456,  0.32729807,  0.86687283,  0.32913768,
               0.50829152,  0.00420381,  0.31587725,  0.64811417,  0.25574377,
               0.86614457,  0.25653661,  0.28900705,  0.37432317,  0.56015412,
               0.18457913,  0.49120026,  0.00972935,  0.03515787,  0.48198843,
               0.00665277,  0.32341591,  0.22309186,  0.20824641,  0.73060997,
               0.98784979,  0.1817045 ,  0.11193465,  0.27799845,  0.01008521,
               0.67036039,  0.68871638,  0.17093188,  0.19426831,  0.11952009,
               0.25175253,  0.5581065 ,  0.15423729,  0.44103487,  0.44963467,
               0.85391674,  0.70971572,  0.8333828 ,  0.69679531,  0.47079078,
               0.25932051,  0.20573476,  0.26361069,  0.20439411,  0.2771754 ])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([ 0.25335041,  0.02766018,  0.23880772,  0.04332764,  0.7315597 ,
               0.05681156,  0.89380444,  0.97142615,  0.85494988,  0.28095395,
               0.23403076,  0.06521492,  0.61444817,  0.41695959,  0.20444365,
               0.7030926 ,  0.22563289,  0.89418339,  0.45736031,  0.85571346,
               0.84935432,  0.5904548 ,  0.53904801,  0.40638515,  0.57801432,
               0.21850065,  0.20572572,  0.86481848,  0.18817308,  0.30969355,
               0.04114814,  0.2441479 ,  0.2942342 ,  0.65310129,  0.61593179,
               0.87473665,  0.46227934,  0.72257227,  0.65629098,  0.63860624,
               0.651489  ,  0.61504714,  0.38297102,  0.35222751,  0.57526058,
               0.6284503 ,  0.96312141,  0.40087272,  0.36175896,  0.01492435,
               0.87171633,  0.65690261,  0.78700561,  0.94597177,  0.2810368 ,
               0.23112279,  0.48769839,  0.99431151,  0.87144485,  0.62253772,
               0.46111545,  0.66876272,  0.72432496,  0.75584835,  0.58488959,
               0.96791408,  0.87100128,  0.61900634,  0.60495599,  0.98907644,
               0.24199891,  0.53499899,  0.50909337,  0.36314284,  0.11734647,
               0.3257482 ,  0.3662057 ,  0.07658323,  0.69121754,  0.11822623,
               0.90302756,  0.8289348 ,  0.64019148,  0.14112613,  0.62433791,
               0.44588186,  0.00426762,  0.94372563,  0.03493108,  0.8078087 ,
               0.67539223,  0.86973539,  0.82705061,  0.50507575,  0.70914458,
               0.272789  ,  0.21241393,  0.28918149,  0.61650406,  0.02445963])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([ 0.78930452,  0.68536004,  0.04323393,  0.17143937,  0.26972533,
               0.3867833 ,  0.41530223,  0.71153926,  0.80171366,  0.94227769,
               0.57883968,  0.7142293 ,  0.40932556,  0.01344528,  0.83831126,
               0.97888937,  0.09027823,  0.28208625,  0.60006917,  0.12407354,
               0.41092729,  0.74170283,  0.32637431,  0.35053551,  0.06977921,
               0.61221429,  0.83022884,  0.20538978,  0.31860354,  0.79553248,
               0.00935354,  0.16678342,  0.19338925,  0.99703287,  0.51580942,
               0.37914779,  0.74001838,  0.42078296,  0.23609908,  0.57859481,
               0.01473262,  0.25691821,  0.12298403,  0.75076197,  0.67854172,
               0.40776755,  0.43778672,  0.63111611,  0.49373692,  0.73448299,
               0.25110828,  0.62888493,  0.95771979,  0.58367825,  0.19308399,
               0.2178481 ,  0.07519989,  0.01982192,  0.24918776,  0.86955   ,
               0.13340932,  0.13997848,  0.20176406,  0.89893009,  0.60681223,
               0.33723035,  0.47059088,  0.16790079,  0.44611068,  0.90853738,
               0.66033971,  0.88854356,  0.11204741,  0.42272582,  0.76226253,
               0.39179773,  0.26269749,  0.52086258,  0.65796817,  0.68827989,
               0.68405265,  0.31571194,  0.43870316,  0.17115584,  0.71878504,
               0.86234969,  0.94084469,  0.42642596,  0.59346464,  0.64279842,
               0.41963611,  0.81248387,  0.98741637,  0.61268211,  0.03990433,
               0.92973313,  0.75631546,  0.1716752 ,  0.77440815,  0.66108794])}]]


