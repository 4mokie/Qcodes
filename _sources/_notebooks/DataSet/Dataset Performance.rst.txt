
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='920ba2fb-8020-49db-8d75-22281c6ac965'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='b527510b-1659-4045-bb4c-184b85fe73b1'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.360525823161105],
     [0.0531092143425935],
     [0.0873753415116488],
     [0.290623188779557],
     [0.495177521061308],
     [0.906790281831198],
     [0.591719104854347],
     [0.04350876874077],
     [0.316509799219756],
     [0.763998574310153],
     [0.841801739851469],
     [0.870633122261363],
     [0.00229883631912198],
     [0.00930538252502111],
     [0.067795635041348],
     [0.217250457556138],
     [0.388275839554042],
     [0.218562744102902],
     [0.464583570457543],
     [0.678150387418125],
     [0.458372809362839],
     [0.625142066678037],
     [0.408903969439964],
     [0.903897403257303],
     [0.57286094787188],
     [0.201354507729762],
     [0.64888769524291],
     [0.0233480456906994],
     [0.110490641302695],
     [0.370953633062844],
     [0.674084551060248],
     [0.510860175355682],
     [0.444929803144409],
     [0.495648519064339],
     [0.372926242381948],
     [0.468371200657661],
     [0.599331548154627],
     [0.134508123492085],
     [0.886725332455893],
     [0.353691095109585],
     [0.040108701790301],
     [0.780652172260731],
     [0.313177605433314],
     [0.211892650379382],
     [0.157077496994096],
     [0.424854207659383],
     [0.917196053030866],
     [0.174214491891831],
     [0.0315263719448937],
     [0.656536810473387],
     [0.147266555396215],
     [0.653100624260612],
     [0.649450992408582],
     [0.870225367043453],
     [0.671141016451147],
     [0.111247183666255],
     [0.380722219325271],
     [0.294052456212245],
     [0.994096469870179],
     [0.42905171843242],
     [0.969357242932288],
     [0.7371154730366],
     [0.560877116189075],
     [0.250594729539451],
     [0.385558178501417],
     [0.447265124599071],
     [0.0430727279356955],
     [0.225843943107917],
     [0.00450135530151141],
     [0.694382485981025],
     [0.502132516332286],
     [0.0870223998526849],
     [0.747106130157485],
     [0.511942793555101],
     [0.159916854789428],
     [0.916032843904887],
     [0.0645082728012045],
     [0.202555295516002],
     [0.52999021894666],
     [0.67834804520384],
     [0.718891932218962],
     [0.223272973654495],
     [0.502152614102793],
     [0.284455412705753],
     [0.0153115220561407],
     [0.338667599014003],
     [0.0353691009905228],
     [0.513697611400389],
     [0.29506564003164],
     [0.216887307009068],
     [0.46787439684482],
     [0.166619779481438],
     [0.321067660417841],
     [0.576470337659991],
     [0.486724727677084],
     [0.98138427228292],
     [0.442668160742826],
     [0.36399822283715],
     [0.723560005752388],
     [0.655945430972946]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.64802052])],
     [array([0.95677063])],
     [array([0.25000843])],
     [array([0.0197271])],
     [array([0.74968212])],
     [array([0.36672297])],
     [array([0.157589])],
     [array([0.28781272])],
     [array([0.11876034])],
     [array([0.29785085])],
     [array([0.43598447])],
     [array([0.54254661])],
     [array([0.37190254])],
     [array([0.82697586])],
     [array([0.0374055])],
     [array([0.52563865])],
     [array([0.99302623])],
     [array([0.14044626])],
     [array([0.4656024])],
     [array([0.27285167])],
     [array([0.44195595])],
     [array([0.86773339])],
     [array([0.42185835])],
     [array([0.87602743])],
     [array([0.87388279])],
     [array([0.31489573])],
     [array([0.23845596])],
     [array([0.39314562])],
     [array([0.89543632])],
     [array([0.70855739])],
     [array([0.73383465])],
     [array([0.95195578])],
     [array([0.43784562])],
     [array([0.06838632])],
     [array([0.73473999])],
     [array([0.25224039])],
     [array([0.41922793])],
     [array([0.6493382])],
     [array([0.39424759])],
     [array([0.61271252])],
     [array([0.42502837])],
     [array([0.52982237])],
     [array([0.06944277])],
     [array([0.91526146])],
     [array([0.93022333])],
     [array([0.75273096])],
     [array([0.01758073])],
     [array([0.76047734])],
     [array([0.47460265])],
     [array([0.31965199])],
     [array([0.84824151])],
     [array([0.7810559])],
     [array([0.50688355])],
     [array([0.97332836])],
     [array([0.69808701])],
     [array([0.72924278])],
     [array([0.21755123])],
     [array([0.21450158])],
     [array([0.98837727])],
     [array([0.52517457])],
     [array([0.60677691])],
     [array([0.86742195])],
     [array([0.3196515])],
     [array([0.44311815])],
     [array([0.02728792])],
     [array([0.72173136])],
     [array([0.71141892])],
     [array([0.0906571])],
     [array([0.84953869])],
     [array([0.08716372])],
     [array([0.72722661])],
     [array([0.71329468])],
     [array([0.05616872])],
     [array([0.17790575])],
     [array([0.12963292])],
     [array([0.71160407])],
     [array([0.06777001])],
     [array([0.59292029])],
     [array([0.48439299])],
     [array([0.17066915])],
     [array([0.83658627])],
     [array([0.09118627])],
     [array([0.99164713])],
     [array([0.37268342])],
     [array([0.32106139])],
     [array([0.14697593])],
     [array([0.26547178])],
     [array([0.91422788])],
     [array([0.08286116])],
     [array([0.83062866])],
     [array([0.06691952])],
     [array([0.6225807])],
     [array([0.20324662])],
     [array([0.82947275])],
     [array([0.94873238])],
     [array([0.29782646])],
     [array([0.69886826])],
     [array([0.09363161])],
     [array([0.16694335])],
     [array([0.77637904])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.64802052, 0.95677063, 0.25000843, 0.0197271 , 0.74968212,
           0.36672297, 0.157589  , 0.28781272, 0.11876034, 0.29785085,
           0.43598447, 0.54254661, 0.37190254, 0.82697586, 0.0374055 ,
           0.52563865, 0.99302623, 0.14044626, 0.4656024 , 0.27285167,
           0.44195595, 0.86773339, 0.42185835, 0.87602743, 0.87388279,
           0.31489573, 0.23845596, 0.39314562, 0.89543632, 0.70855739,
           0.73383465, 0.95195578, 0.43784562, 0.06838632, 0.73473999,
           0.25224039, 0.41922793, 0.6493382 , 0.39424759, 0.61271252,
           0.42502837, 0.52982237, 0.06944277, 0.91526146, 0.93022333,
           0.75273096, 0.01758073, 0.76047734, 0.47460265, 0.31965199,
           0.84824151, 0.7810559 , 0.50688355, 0.97332836, 0.69808701,
           0.72924278, 0.21755123, 0.21450158, 0.98837727, 0.52517457,
           0.60677691, 0.86742195, 0.3196515 , 0.44311815, 0.02728792,
           0.72173136, 0.71141892, 0.0906571 , 0.84953869, 0.08716372,
           0.72722661, 0.71329468, 0.05616872, 0.17790575, 0.12963292,
           0.71160407, 0.06777001, 0.59292029, 0.48439299, 0.17066915,
           0.83658627, 0.09118627, 0.99164713, 0.37268342, 0.32106139,
           0.14697593, 0.26547178, 0.91422788, 0.08286116, 0.83062866,
           0.06691952, 0.6225807 , 0.20324662, 0.82947275, 0.94873238,
           0.29782646, 0.69886826, 0.09363161, 0.16694335, 0.77637904])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.36052582, 0.05310921, 0.08737534, 0.29062319, 0.49517752,
              0.90679028, 0.5917191 , 0.04350877, 0.3165098 , 0.76399857,
              0.84180174, 0.87063312, 0.00229884, 0.00930538, 0.06779564,
              0.21725046, 0.38827584, 0.21856274, 0.46458357, 0.67815039,
              0.45837281, 0.62514207, 0.40890397, 0.9038974 , 0.57286095,
              0.20135451, 0.6488877 , 0.02334805, 0.11049064, 0.37095363,
              0.67408455, 0.51086018, 0.4449298 , 0.49564852, 0.37292624,
              0.4683712 , 0.59933155, 0.13450812, 0.88672533, 0.3536911 ,
              0.0401087 , 0.78065217, 0.31317761, 0.21189265, 0.1570775 ,
              0.42485421, 0.91719605, 0.17421449, 0.03152637, 0.65653681,
              0.14726656, 0.65310062, 0.64945099, 0.87022537, 0.67114102,
              0.11124718, 0.38072222, 0.29405246, 0.99409647, 0.42905172,
              0.96935724, 0.73711547, 0.56087712, 0.25059473, 0.38555818,
              0.44726512, 0.04307273, 0.22584394, 0.00450136, 0.69438249,
              0.50213252, 0.0870224 , 0.74710613, 0.51194279, 0.15991685,
              0.91603284, 0.06450827, 0.2025553 , 0.52999022, 0.67834805,
              0.71889193, 0.22327297, 0.50215261, 0.28445541, 0.01531152,
              0.3386676 , 0.0353691 , 0.51369761, 0.29506564, 0.21688731,
              0.4678744 , 0.16661978, 0.32106766, 0.57647034, 0.48672473,
              0.98138427, 0.44266816, 0.36399822, 0.72356001, 0.65594543])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.8932072 , 0.01185928, 0.69398919, 0.76711833, 0.20671086,
              0.7365731 , 0.78320131, 0.69362529, 0.57222394, 0.91286205,
              0.03615715, 0.84037691, 0.47259901, 0.17204838, 0.94367402,
              0.81269431, 0.60180032, 0.90500225, 0.26500639, 0.85460664,
              0.55709757, 0.16149943, 0.13086539, 0.09863882, 0.12062408,
              0.06134459, 0.11662054, 0.10710396, 0.0541205 , 0.19866885,
              0.82500477, 0.24877124, 0.7763632 , 0.39394908, 0.31115282,
              0.42632368, 0.43316212, 0.36144859, 0.52812187, 0.62963808,
              0.16137654, 0.19773197, 0.82368496, 0.49900026, 0.83492385,
              0.17885021, 0.90590032, 0.33150004, 0.30856229, 0.99090151,
              0.74044583, 0.55031268, 0.89322556, 0.93012701, 0.17438514,
              0.20378582, 0.51081132, 0.77357192, 0.53002266, 0.84147156,
              0.82857917, 0.14442499, 0.11010918, 0.22678513, 0.97940648,
              0.87266543, 0.00477755, 0.08466056, 0.91319746, 0.36940691,
              0.63174113, 0.14419144, 0.57809603, 0.03514386, 0.37073599,
              0.93509965, 0.79387495, 0.41615885, 0.99753734, 0.96585464,
              0.2439953 , 0.66520018, 0.36615401, 0.95295816, 0.24466123,
              0.59110017, 0.73855401, 0.98278386, 0.66451501, 0.25715508,
              0.05525727, 0.39974438, 0.71020769, 0.24807221, 0.25467463,
              0.45085656, 0.04166522, 0.64845771, 0.24725989, 0.75583297])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.82637545, 0.50971189, 0.49093171, 0.31100331, 0.20830653,
              0.59429733, 0.18390911, 0.37662622, 0.19916454, 0.76965036,
              0.13966141, 0.16077623, 0.30242869, 0.31956712, 0.43310736,
              0.22075975, 0.58451484, 0.8632778 , 0.25519616, 0.76774738,
              0.8318216 , 0.35476399, 0.01274531, 0.10536787, 0.18418884,
              0.78025047, 0.29882112, 0.92355209, 0.65170323, 0.20117317,
              0.39724541, 0.10889019, 0.92534025, 0.67778658, 0.66890915,
              0.44021847, 0.59837624, 0.37396918, 0.33388037, 0.83364776,
              0.90589314, 0.93040072, 0.74671738, 0.3113533 , 0.41391491,
              0.45950287, 0.69884232, 0.10984567, 0.9873947 , 0.31205971,
              0.50264619, 0.53418732, 0.57137999, 0.97905344, 0.00259365,
              0.19621679, 0.5772286 , 0.43510162, 0.33559274, 0.60685616,
              0.7759096 , 0.60892979, 0.66021737, 0.58268589, 0.79428119,
              0.59255363, 0.27782608, 0.09382613, 0.88727781, 0.73095258,
              0.17174786, 0.67635763, 0.41090224, 0.37282469, 0.42322091,
              0.6548965 , 0.50635117, 0.43538428, 0.72409445, 0.28993677,
              0.18982077, 0.55686898, 0.09212472, 0.72267054, 0.84679965,
              0.48046604, 0.13059095, 0.93604685, 0.60823834, 0.37436095,
              0.18262187, 0.93206803, 0.4975137 , 0.54651703, 0.08056941,
              0.96159975, 0.22712317, 0.34180981, 0.52248943, 0.83241018])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.586631  , 0.16883217, 0.92126   , 0.24137036, 0.11863416,
              0.65824291, 0.16944192, 0.02948584, 0.85188986, 0.57343531,
              0.41264197, 0.46420407, 0.85603009, 0.23656613, 0.54817962,
              0.68594326, 0.63418258, 0.73543619, 0.52692296, 0.8402072 ,
              0.6580389 , 0.89508469, 0.66731638, 0.33722933, 0.21201858,
              0.67136982, 0.95593495, 0.38882779, 0.89056948, 0.27779934,
              0.96629541, 0.7560535 , 0.010344  , 0.43905702, 0.14521279,
              0.65076534, 0.03396697, 0.25313353, 0.51526762, 0.9900283 ,
              0.54257374, 0.97874923, 0.30775881, 0.20898696, 0.40595172,
              0.88604103, 0.43073661, 0.43285552, 0.67202101, 0.45825209,
              0.63772219, 0.85308811, 0.73144012, 0.73801581, 0.4945345 ,
              0.9484043 , 0.41269548, 0.22262881, 0.85443357, 0.17141767,
              0.3536219 , 0.28703501, 0.6640064 , 0.64259144, 0.6798773 ,
              0.67814919, 0.09985987, 0.74501277, 0.08359062, 0.41903507,
              0.58075502, 0.32852833, 0.56771719, 0.50399482, 0.52209677,
              0.14373473, 0.12573313, 0.46555973, 0.93985326, 0.59319533,
              0.65922681, 0.00338439, 0.19426877, 0.66799011, 0.01626996,
              0.75000663, 0.13248176, 0.70455917, 0.83935551, 0.45334114,
              0.92641914, 0.55296266, 0.73279739, 0.60365488, 0.24704086,
              0.56515512, 0.49146252, 0.31167332, 0.72183317, 0.32270213])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.36052582, 0.05310921, 0.08737534, 0.29062319, 0.49517752,
              0.90679028, 0.5917191 , 0.04350877, 0.3165098 , 0.76399857,
              0.84180174, 0.87063312, 0.00229884, 0.00930538, 0.06779564,
              0.21725046, 0.38827584, 0.21856274, 0.46458357, 0.67815039,
              0.45837281, 0.62514207, 0.40890397, 0.9038974 , 0.57286095,
              0.20135451, 0.6488877 , 0.02334805, 0.11049064, 0.37095363,
              0.67408455, 0.51086018, 0.4449298 , 0.49564852, 0.37292624,
              0.4683712 , 0.59933155, 0.13450812, 0.88672533, 0.3536911 ,
              0.0401087 , 0.78065217, 0.31317761, 0.21189265, 0.1570775 ,
              0.42485421, 0.91719605, 0.17421449, 0.03152637, 0.65653681,
              0.14726656, 0.65310062, 0.64945099, 0.87022537, 0.67114102,
              0.11124718, 0.38072222, 0.29405246, 0.99409647, 0.42905172,
              0.96935724, 0.73711547, 0.56087712, 0.25059473, 0.38555818,
              0.44726512, 0.04307273, 0.22584394, 0.00450136, 0.69438249,
              0.50213252, 0.0870224 , 0.74710613, 0.51194279, 0.15991685,
              0.91603284, 0.06450827, 0.2025553 , 0.52999022, 0.67834805,
              0.71889193, 0.22327297, 0.50215261, 0.28445541, 0.01531152,
              0.3386676 , 0.0353691 , 0.51369761, 0.29506564, 0.21688731,
              0.4678744 , 0.16661978, 0.32106766, 0.57647034, 0.48672473,
              0.98138427, 0.44266816, 0.36399822, 0.72356001, 0.65594543])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.8932072 , 0.01185928, 0.69398919, 0.76711833, 0.20671086,
              0.7365731 , 0.78320131, 0.69362529, 0.57222394, 0.91286205,
              0.03615715, 0.84037691, 0.47259901, 0.17204838, 0.94367402,
              0.81269431, 0.60180032, 0.90500225, 0.26500639, 0.85460664,
              0.55709757, 0.16149943, 0.13086539, 0.09863882, 0.12062408,
              0.06134459, 0.11662054, 0.10710396, 0.0541205 , 0.19866885,
              0.82500477, 0.24877124, 0.7763632 , 0.39394908, 0.31115282,
              0.42632368, 0.43316212, 0.36144859, 0.52812187, 0.62963808,
              0.16137654, 0.19773197, 0.82368496, 0.49900026, 0.83492385,
              0.17885021, 0.90590032, 0.33150004, 0.30856229, 0.99090151,
              0.74044583, 0.55031268, 0.89322556, 0.93012701, 0.17438514,
              0.20378582, 0.51081132, 0.77357192, 0.53002266, 0.84147156,
              0.82857917, 0.14442499, 0.11010918, 0.22678513, 0.97940648,
              0.87266543, 0.00477755, 0.08466056, 0.91319746, 0.36940691,
              0.63174113, 0.14419144, 0.57809603, 0.03514386, 0.37073599,
              0.93509965, 0.79387495, 0.41615885, 0.99753734, 0.96585464,
              0.2439953 , 0.66520018, 0.36615401, 0.95295816, 0.24466123,
              0.59110017, 0.73855401, 0.98278386, 0.66451501, 0.25715508,
              0.05525727, 0.39974438, 0.71020769, 0.24807221, 0.25467463,
              0.45085656, 0.04166522, 0.64845771, 0.24725989, 0.75583297])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.82637545, 0.50971189, 0.49093171, 0.31100331, 0.20830653,
              0.59429733, 0.18390911, 0.37662622, 0.19916454, 0.76965036,
              0.13966141, 0.16077623, 0.30242869, 0.31956712, 0.43310736,
              0.22075975, 0.58451484, 0.8632778 , 0.25519616, 0.76774738,
              0.8318216 , 0.35476399, 0.01274531, 0.10536787, 0.18418884,
              0.78025047, 0.29882112, 0.92355209, 0.65170323, 0.20117317,
              0.39724541, 0.10889019, 0.92534025, 0.67778658, 0.66890915,
              0.44021847, 0.59837624, 0.37396918, 0.33388037, 0.83364776,
              0.90589314, 0.93040072, 0.74671738, 0.3113533 , 0.41391491,
              0.45950287, 0.69884232, 0.10984567, 0.9873947 , 0.31205971,
              0.50264619, 0.53418732, 0.57137999, 0.97905344, 0.00259365,
              0.19621679, 0.5772286 , 0.43510162, 0.33559274, 0.60685616,
              0.7759096 , 0.60892979, 0.66021737, 0.58268589, 0.79428119,
              0.59255363, 0.27782608, 0.09382613, 0.88727781, 0.73095258,
              0.17174786, 0.67635763, 0.41090224, 0.37282469, 0.42322091,
              0.6548965 , 0.50635117, 0.43538428, 0.72409445, 0.28993677,
              0.18982077, 0.55686898, 0.09212472, 0.72267054, 0.84679965,
              0.48046604, 0.13059095, 0.93604685, 0.60823834, 0.37436095,
              0.18262187, 0.93206803, 0.4975137 , 0.54651703, 0.08056941,
              0.96159975, 0.22712317, 0.34180981, 0.52248943, 0.83241018])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.94574917, 0.39686564, 0.97322783, 0.3024735 , 0.04776212,
              0.91824904, 0.8578053 , 0.76380622, 0.83143834, 0.95171849,
              0.04903612, 0.51682475, 0.42244651, 0.11042972, 0.22674543,
              0.63055999, 0.5096227 , 0.20081841, 0.5247157 , 0.77553725,
              0.17153987, 0.03164286, 0.67276426, 0.96277853, 0.11852619,
              0.15358632, 0.10942984, 0.1633609 , 0.78317048, 0.77726133,
              0.04139306, 0.46654041, 0.4302075 , 0.87561693, 0.72564472,
              0.25009325, 0.13258639, 0.28608154, 0.86522623, 0.93783852,
              0.94783794, 0.0649516 , 0.03578572, 0.49807505, 0.11007346,
              0.6287975 , 0.70862948, 0.20460297, 0.05471561, 0.52058644,
              0.8049662 , 0.15113011, 0.04975803, 0.83171719, 0.73158649,
              0.66298864, 0.33901795, 0.57230944, 0.61213725, 0.71601807,
              0.994295  , 0.42256749, 0.83080381, 0.43743715, 0.39045417,
              0.23942863, 0.97700768, 0.60219064, 0.05299879, 0.92404284,
              0.04067865, 0.24029974, 0.04553064, 0.13281068, 0.89390655,
              0.1443855 , 0.98412741, 0.05338741, 0.88172054, 0.34674873,
              0.1598079 , 0.42476173, 0.75753351, 0.52093046, 0.66875058,
              0.26680048, 0.31103323, 0.10816311, 0.58214142, 0.89382575,
              0.16544059, 0.42652454, 0.56256923, 0.85396485, 0.44265055,
              0.49815279, 0.51404052, 0.1573381 , 0.44145866, 0.99609436])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.64802052, 0.95677063, 0.25000843, 0.0197271 , 0.74968212,
              0.36672297, 0.157589  , 0.28781272, 0.11876034, 0.29785085,
              0.43598447, 0.54254661, 0.37190254, 0.82697586, 0.0374055 ,
              0.52563865, 0.99302623, 0.14044626, 0.4656024 , 0.27285167,
              0.44195595, 0.86773339, 0.42185835, 0.87602743, 0.87388279,
              0.31489573, 0.23845596, 0.39314562, 0.89543632, 0.70855739,
              0.73383465, 0.95195578, 0.43784562, 0.06838632, 0.73473999,
              0.25224039, 0.41922793, 0.6493382 , 0.39424759, 0.61271252,
              0.42502837, 0.52982237, 0.06944277, 0.91526146, 0.93022333,
              0.75273096, 0.01758073, 0.76047734, 0.47460265, 0.31965199,
              0.84824151, 0.7810559 , 0.50688355, 0.97332836, 0.69808701,
              0.72924278, 0.21755123, 0.21450158, 0.98837727, 0.52517457,
              0.60677691, 0.86742195, 0.3196515 , 0.44311815, 0.02728792,
              0.72173136, 0.71141892, 0.0906571 , 0.84953869, 0.08716372,
              0.72722661, 0.71329468, 0.05616872, 0.17790575, 0.12963292,
              0.71160407, 0.06777001, 0.59292029, 0.48439299, 0.17066915,
              0.83658627, 0.09118627, 0.99164713, 0.37268342, 0.32106139,
              0.14697593, 0.26547178, 0.91422788, 0.08286116, 0.83062866,
              0.06691952, 0.6225807 , 0.20324662, 0.82947275, 0.94873238,
              0.29782646, 0.69886826, 0.09363161, 0.16694335, 0.77637904])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.88840105, 0.03778028, 0.59368634, 0.79694878, 0.086057  ,
              0.20411891, 0.3864404 , 0.87348902, 0.35211195, 0.57156286,
              0.88985966, 0.7298697 , 0.10170336, 0.36706798, 0.15805463,
              0.14742806, 0.49073531, 0.05844659, 0.97057877, 0.56902186,
              0.01732054, 0.04431993, 0.79611915, 0.01576419, 0.66567235,
              0.03867908, 0.87187184, 0.29368704, 0.56426866, 0.03294199,
              0.18038414, 0.98696633, 0.23578356, 0.11169945, 0.41146317,
              0.93489821, 0.46753411, 0.51765284, 0.89396516, 0.11995058,
              0.37487616, 0.61750028, 0.86552511, 0.92334317, 0.6789693 ,
              0.53173243, 0.28173567, 0.58205897, 0.24862612, 0.01644485,
              0.49972915, 0.90296825, 0.64955286, 0.05817151, 0.43244822,
              0.23685956, 0.68472102, 0.15917005, 0.74265308, 0.61159336,
              0.23612648, 0.62337739, 0.70598677, 0.2699673 , 0.45390568,
              0.95468834, 0.86751924, 0.99403488, 0.24797899, 0.84911262,
              0.43253702, 0.53984974, 0.15566124, 0.74838017, 0.70112517,
              0.02724979, 0.82934426, 0.42319897, 0.14370483, 0.54292195,
              0.24382199, 0.5265025 , 0.64415137, 0.5891368 , 0.03828933,
              0.24148874, 0.65845593, 0.83722453, 0.04935002, 0.51693332,
              0.33565522, 0.84557824, 0.27638415, 0.39503269, 0.90582924,
              0.08580615, 0.18192857, 0.75312406, 0.58968768, 0.33949925])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.96120973, 0.69534643, 0.90255275, 0.32316835, 0.29986182,
              0.36517192, 0.49597547, 0.215212  , 0.84876872, 0.22499002,
              0.74403714, 0.1362499 , 0.38161024, 0.94488762, 0.22130107,
              0.67240998, 0.10229841, 0.55776824, 0.84321944, 0.86655446,
              0.66753707, 0.86719858, 0.64074294, 0.11015949, 0.0398291 ,
              0.50638797, 0.22739527, 0.73600027, 0.51369274, 0.7798128 ,
              0.93592876, 0.17740866, 0.34749084, 0.63712473, 0.31433111,
              0.11660277, 0.6661202 , 0.50847654, 0.61332036, 0.49676287,
              0.41512751, 0.02909605, 0.34695112, 0.04965179, 0.59036152,
              0.05924263, 0.06314827, 0.21227822, 0.04307102, 0.43568342,
              0.79517986, 0.43896859, 0.28850187, 0.83960357, 0.23413242,
              0.49023168, 0.32535796, 0.90313162, 0.92035978, 0.29297665,
              0.28521578, 0.35257498, 0.52184443, 0.94126924, 0.30885349,
              0.51153722, 0.30875891, 0.98140434, 0.58386878, 0.26175031,
              0.61462929, 0.74245283, 0.74822854, 0.59326143, 0.22402792,
              0.0585289 , 0.04537491, 0.69026048, 0.88144957, 0.25375531,
              0.19292649, 0.74946305, 0.75288321, 0.8395159 , 0.42834334,
              0.14269863, 0.17678251, 0.73415826, 0.51876642, 0.53252278,
              0.81418209, 0.9050713 , 0.12521166, 0.84608004, 0.70718112,
              0.29404858, 0.1446755 , 0.00356009, 0.09552775, 0.30660542])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.41592862, 0.2963536 , 0.05796991, 0.54527277, 0.91566879,
              0.21140703, 0.9971804 , 0.31365157, 0.11850929, 0.04566527,
              0.12023532, 0.95496991, 0.70770308, 0.72600875, 0.70538945,
              0.08964357, 0.19280172, 0.58445454, 0.71624104, 0.09696392,
              0.36306835, 0.11466122, 0.32686625, 0.79567549, 0.51767951,
              0.63641317, 0.54011574, 0.83413678, 0.21906429, 0.8962082 ,
              0.12424206, 0.16146947, 0.83561812, 0.44407686, 0.61922122,
              0.43265525, 0.10170921, 0.25370981, 0.91672949, 0.44306833,
              0.03675861, 0.559396  , 0.01500712, 0.95723834, 0.68391614,
              0.22951062, 0.40703236, 0.45079106, 0.41113565, 0.40775268,
              0.48933172, 0.98469437, 0.9143447 , 0.95338149, 0.56035747,
              0.77219664, 0.62788459, 0.78985515, 0.97540443, 0.65036237,
              0.07713646, 0.21442534, 0.89794128, 0.5604785 , 0.36221184,
              0.65194012, 0.11961868, 0.86861582, 0.13761216, 0.44492957,
              0.36561007, 0.79950143, 0.47515563, 0.67017417, 0.93204561,
              0.67861054, 0.25899719, 0.77754031, 0.83228087, 0.61912742,
              0.43026434, 0.14933915, 0.59871209, 0.25738694, 0.67646828,
              0.25086387, 0.44097445, 0.6053076 , 0.42470131, 0.61878607,
              0.66149082, 0.36936787, 0.9299698 , 0.40098825, 0.51213774,
              0.08968319, 0.20550563, 0.57330264, 0.60006995, 0.38220898])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.64802052, 0.95677063, 0.25000843, 0.0197271 , 0.74968212,
              0.36672297, 0.157589  , 0.28781272, 0.11876034, 0.29785085,
              0.43598447, 0.54254661, 0.37190254, 0.82697586, 0.0374055 ,
              0.52563865, 0.99302623, 0.14044626, 0.4656024 , 0.27285167,
              0.44195595, 0.86773339, 0.42185835, 0.87602743, 0.87388279,
              0.31489573, 0.23845596, 0.39314562, 0.89543632, 0.70855739,
              0.73383465, 0.95195578, 0.43784562, 0.06838632, 0.73473999,
              0.25224039, 0.41922793, 0.6493382 , 0.39424759, 0.61271252,
              0.42502837, 0.52982237, 0.06944277, 0.91526146, 0.93022333,
              0.75273096, 0.01758073, 0.76047734, 0.47460265, 0.31965199,
              0.84824151, 0.7810559 , 0.50688355, 0.97332836, 0.69808701,
              0.72924278, 0.21755123, 0.21450158, 0.98837727, 0.52517457,
              0.60677691, 0.86742195, 0.3196515 , 0.44311815, 0.02728792,
              0.72173136, 0.71141892, 0.0906571 , 0.84953869, 0.08716372,
              0.72722661, 0.71329468, 0.05616872, 0.17790575, 0.12963292,
              0.71160407, 0.06777001, 0.59292029, 0.48439299, 0.17066915,
              0.83658627, 0.09118627, 0.99164713, 0.37268342, 0.32106139,
              0.14697593, 0.26547178, 0.91422788, 0.08286116, 0.83062866,
              0.06691952, 0.6225807 , 0.20324662, 0.82947275, 0.94873238,
              0.29782646, 0.69886826, 0.09363161, 0.16694335, 0.77637904])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.88840105, 0.03778028, 0.59368634, 0.79694878, 0.086057  ,
              0.20411891, 0.3864404 , 0.87348902, 0.35211195, 0.57156286,
              0.88985966, 0.7298697 , 0.10170336, 0.36706798, 0.15805463,
              0.14742806, 0.49073531, 0.05844659, 0.97057877, 0.56902186,
              0.01732054, 0.04431993, 0.79611915, 0.01576419, 0.66567235,
              0.03867908, 0.87187184, 0.29368704, 0.56426866, 0.03294199,
              0.18038414, 0.98696633, 0.23578356, 0.11169945, 0.41146317,
              0.93489821, 0.46753411, 0.51765284, 0.89396516, 0.11995058,
              0.37487616, 0.61750028, 0.86552511, 0.92334317, 0.6789693 ,
              0.53173243, 0.28173567, 0.58205897, 0.24862612, 0.01644485,
              0.49972915, 0.90296825, 0.64955286, 0.05817151, 0.43244822,
              0.23685956, 0.68472102, 0.15917005, 0.74265308, 0.61159336,
              0.23612648, 0.62337739, 0.70598677, 0.2699673 , 0.45390568,
              0.95468834, 0.86751924, 0.99403488, 0.24797899, 0.84911262,
              0.43253702, 0.53984974, 0.15566124, 0.74838017, 0.70112517,
              0.02724979, 0.82934426, 0.42319897, 0.14370483, 0.54292195,
              0.24382199, 0.5265025 , 0.64415137, 0.5891368 , 0.03828933,
              0.24148874, 0.65845593, 0.83722453, 0.04935002, 0.51693332,
              0.33565522, 0.84557824, 0.27638415, 0.39503269, 0.90582924,
              0.08580615, 0.18192857, 0.75312406, 0.58968768, 0.33949925])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.96120973, 0.69534643, 0.90255275, 0.32316835, 0.29986182,
              0.36517192, 0.49597547, 0.215212  , 0.84876872, 0.22499002,
              0.74403714, 0.1362499 , 0.38161024, 0.94488762, 0.22130107,
              0.67240998, 0.10229841, 0.55776824, 0.84321944, 0.86655446,
              0.66753707, 0.86719858, 0.64074294, 0.11015949, 0.0398291 ,
              0.50638797, 0.22739527, 0.73600027, 0.51369274, 0.7798128 ,
              0.93592876, 0.17740866, 0.34749084, 0.63712473, 0.31433111,
              0.11660277, 0.6661202 , 0.50847654, 0.61332036, 0.49676287,
              0.41512751, 0.02909605, 0.34695112, 0.04965179, 0.59036152,
              0.05924263, 0.06314827, 0.21227822, 0.04307102, 0.43568342,
              0.79517986, 0.43896859, 0.28850187, 0.83960357, 0.23413242,
              0.49023168, 0.32535796, 0.90313162, 0.92035978, 0.29297665,
              0.28521578, 0.35257498, 0.52184443, 0.94126924, 0.30885349,
              0.51153722, 0.30875891, 0.98140434, 0.58386878, 0.26175031,
              0.61462929, 0.74245283, 0.74822854, 0.59326143, 0.22402792,
              0.0585289 , 0.04537491, 0.69026048, 0.88144957, 0.25375531,
              0.19292649, 0.74946305, 0.75288321, 0.8395159 , 0.42834334,
              0.14269863, 0.17678251, 0.73415826, 0.51876642, 0.53252278,
              0.81418209, 0.9050713 , 0.12521166, 0.84608004, 0.70718112,
              0.29404858, 0.1446755 , 0.00356009, 0.09552775, 0.30660542])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.81488312, 0.88750248, 0.01148623, 0.47631937, 0.131494  ,
              0.45211794, 0.98011193, 0.03799571, 0.89797435, 0.47680845,
              0.59217195, 0.13388738, 0.24122149, 0.30587311, 0.36673623,
              0.37491248, 0.37063463, 0.37876449, 0.88433575, 0.68150648,
              0.79738834, 0.57728243, 0.73439313, 0.85122546, 0.80229422,
              0.64206603, 0.3946953 , 0.57509073, 0.68049988, 0.53198642,
              0.71971914, 0.81018988, 0.75172497, 0.93382289, 0.01913334,
              0.88861972, 0.70161626, 0.58677941, 0.50781583, 0.96348408,
              0.56231703, 0.41698316, 0.48386049, 0.40753738, 0.21807612,
              0.51778971, 0.90310604, 0.63045708, 0.80957161, 0.91723302,
              0.7690616 , 0.27368063, 0.88226201, 0.29974343, 0.7809749 ,
              0.3357969 , 0.61216034, 0.05512047, 0.62052657, 0.10983358,
              0.22535019, 0.15703252, 0.91087009, 0.45971214, 0.9829359 ,
              0.59145084, 0.85993467, 0.23313618, 0.60054328, 0.77174027,
              0.92404823, 0.1132712 , 0.14006476, 0.39352072, 0.37024077,
              0.58605661, 0.08553694, 0.79152528, 0.44838723, 0.87759013,
              0.89606689, 0.84776958, 0.46495562, 0.57353548, 0.41765871,
              0.24201625, 0.75822786, 0.76941477, 0.29444758, 0.94437987,
              0.2868009 , 0.69007125, 0.09400625, 0.68797405, 0.41594486,
              0.33881971, 0.63833042, 0.05700738, 0.19803355, 0.17930077])}]]


