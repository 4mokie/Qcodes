
DataSet Performance
===================

This notebook shows the tradeoffs between inserting data into the
database row by row and as binary blobs. There is a tradeoff between
inserting the data in these to ways.

Inserting the data row by row means that we direct access to all the
data and may perform querys directly on the values of the data. On the
other hand as we will see below this is much slower than inserting the
data direcly as binary blobs

First we chose a new location for the database to ensuer that we don't
add a bunch of benchmarking data to it

.. code:: ipython3

    import os
    cwd = os.getcwd()
    import qcodes as qc
    qc.config["core"]["db_location"] = os.path.join(cwd, 'testing.db')


.. code:: ipython3

    %matplotlib notebook
    import time
    import matplotlib.pyplot as plt
    import numpy as np
    
    import qcodes as qc
    from qcodes.instrument.parameter import ManualParameter
    from qcodes.dataset.experiment_container import (Experiment,
                                                     load_last_experiment,
                                                     new_experiment)
    from qcodes.dataset.database import initialise_database
    from qcodes.dataset.measurements import Measurement

.. code:: ipython3

    initialise_database()
    new_experiment(name='tutorial_exp', sample_name="no sample")




.. parsed-literal::

    tutorial_exp#no sample#1@/home/travis/build/QCoDeS/Qcodes/docs/examples/DataSet/testing.db
    ------------------------------------------------------------------------------------------



Here we define a simple function to benchmark the time it takes to
insert n points with either numeric or array data type. We will compare
both the time used to call add\_result and the time used for the full
measurement.

.. code:: ipython3

    def insert_data(paramtype, npoints, nreps=1):
    
        meas = Measurement()
    
        x1 = ManualParameter('x1')
        x2 = ManualParameter('x2')
        x3 = ManualParameter('x3')
        y1 = ManualParameter('y1')
        y2 = ManualParameter('y2')
    
        meas.register_parameter(x1, paramtype=paramtype)
        meas.register_parameter(x2, paramtype=paramtype)
        meas.register_parameter(x3, paramtype=paramtype)
        meas.register_parameter(y1, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        meas.register_parameter(y2, setpoints=[x1, x2, x3],
                                paramtype=paramtype)
        start = time.perf_counter()
        with meas.run() as datasaver:
            start_adding = time.perf_counter()
            for i in range(nreps):
                datasaver.add_result((x1, np.random.rand(npoints)),
                                     (x2, np.random.rand(npoints)),
                                     (x3, np.random.rand(npoints)),
                                     (y1, np.random.rand(npoints)),
                                     (y2, np.random.rand(npoints)))
            stop_adding = time.perf_counter()
            run_id = datasaver.run_id
        stop = time.perf_counter()
        tot_time = stop - start
        add_time = stop_adding - start_adding
        return tot_time, add_time, run_id

And perform a quick comparison of the two

.. code:: ipython3

    sizes = [1,100,5000,7000,8000,10000,15000,20000]
    t_numeric = []
    t_numeric_add = []
    t_array = []
    t_array_add = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
    
        ta, taa, run_id_a =  insert_data('array', size)
        t_array.append(ta)
        t_array_add.append(taa)


.. parsed-literal::

    Starting experimental run with id: 1
    Starting experimental run with id: 2
    Starting experimental run with id: 3
    Starting experimental run with id: 4
    Starting experimental run with id: 5
    Starting experimental run with id: 6
    Starting experimental run with id: 7
    Starting experimental run with id: 8
    Starting experimental run with id: 9
    Starting experimental run with id: 10
    Starting experimental run with id: 11
    Starting experimental run with id: 12
    Starting experimental run with id: 13
    Starting experimental run with id: 14
    Starting experimental run with id: 15
    Starting experimental run with id: 16


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='86d17d9a-0ac1-4203-8140-3f081c6b1e12'></div>


As we can see there the time to setup and and close the experiment is
approximately 0.4 sec. At small array sizes the difference between
inserting as arrays and inserting row by row is therefore relatively
unimportant. At larger array sizes above 10000 points or so the cost of
writing data as individual datapoints starts to become important.

.. code:: ipython3

    sizes = [1,10,100,1000,3000,5000]
    nreps = 100
    t_numeric = []
    t_numeric_add = []
    t_numeric_run_ids = []
    t_array = []
    t_array_add = []
    t_array_run_ids = []
    for size in sizes:
        tn, tna, run_id_n =  insert_data('numeric', size, nreps=nreps)
        t_numeric.append(tn)
        t_numeric_add.append(tna)
        t_numeric_run_ids.append(run_id_n)
    
        ta, taa, run_id_a =  insert_data('array', size, nreps=nreps)
        t_array.append(ta)
        t_array_add.append(taa)
        t_array_run_ids.append(run_id_a)


.. parsed-literal::

    Starting experimental run with id: 17
    Starting experimental run with id: 18
    Starting experimental run with id: 19
    Starting experimental run with id: 20
    Starting experimental run with id: 21
    Starting experimental run with id: 22
    Starting experimental run with id: 23
    Starting experimental run with id: 24
    Starting experimental run with id: 25
    Starting experimental run with id: 26
    Starting experimental run with id: 27
    Starting experimental run with id: 28


.. code:: ipython3

    fig, ax = plt.subplots(1,1)
    ax.plot(sizes, t_numeric, 'o-', label='Inserting row by row')
    ax.plot(sizes, t_numeric_add, 'o-', label='Inserting row by row: add_result only')
    ax.plot(sizes, t_array, 'd-', label='Inserting as binary blob')
    ax.plot(sizes, t_array_add, 'd-', label='Inserting as binary blob: add_result only')
    ax.legend()
    ax.set_xlabel('Array lenght')
    ax.set_ylabel('Time (s)')
    fig.tight_layout()



.. parsed-literal::

    <IPython.core.display.Javascript object>



.. raw:: html

    <div id='e53f1c4b-55ce-4e34-a17c-e56368e28152'></div>


However, as we increase the length of the experimenter as seen here by
repeating the insertion 100 times we see a big difference between
inserting row by row and inserting as a binary blob

.. code:: ipython3

    from qcodes.dataset.data_set import load_by_id
    from qcodes.dataset.data_export import get_data_by_id

As usual you can load the data using load\_by\_id but you will notice
that the different storage methods are reflected in shape of the data as
is is retried.

.. code:: ipython3

    run_id_n = t_numeric_run_ids[0]
    run_id_a = t_array_run_ids[0]

.. code:: ipython3

    ds = load_by_id(run_id_n)
    ds.get_data('x1')




.. parsed-literal::

    [[0.53292198331248],
     [0.887699590471643],
     [0.304321470701553],
     [0.428153596947323],
     [0.929017654666124],
     [0.805177345216229],
     [0.599163372509085],
     [0.962807307600977],
     [0.555167874214154],
     [0.333210714577456],
     [0.072529249412128],
     [0.128695823708681],
     [0.248700984476483],
     [0.333636662091682],
     [0.412393052907246],
     [0.635710497795754],
     [0.419893553018007],
     [0.7196873792062],
     [0.16983120112475],
     [0.94038170945676],
     [0.792412789845053],
     [0.82781632303791],
     [0.0205680432404163],
     [0.271566463886392],
     [0.272697183368951],
     [0.433418081463749],
     [0.114207052843281],
     [0.747551876669547],
     [0.101150626278615],
     [0.435636879676084],
     [0.658921202475251],
     [0.273491523553286],
     [0.88355258297108],
     [0.546350584482857],
     [0.803798229229123],
     [0.754118643113361],
     [0.0642968888126083],
     [0.568655583755195],
     [0.321610560904385],
     [0.659296622882533],
     [0.945914828171488],
     [0.908272018878659],
     [0.487917495020039],
     [0.830450836070872],
     [0.155245009892307],
     [0.841157901884601],
     [0.678098150329125],
     [0.925087326714502],
     [0.0229619928767334],
     [0.401351549540308],
     [0.203400255542412],
     [0.0784316760132567],
     [0.754717470791013],
     [0.0406765244751018],
     [0.541549193077166],
     [0.0454861388302115],
     [0.47857837650099],
     [0.446979828815425],
     [0.977119319622969],
     [0.664939224351861],
     [0.874855279644975],
     [0.888893593012419],
     [0.624808119583607],
     [0.845868810262675],
     [0.553987478112057],
     [0.679120358899891],
     [0.777610448525483],
     [0.351333635975154],
     [0.445136347856576],
     [0.271448354673315],
     [0.940757800040356],
     [0.0844302757729343],
     [0.0849038774759709],
     [0.753638308269519],
     [0.47196953640295],
     [0.760407116013172],
     [0.567967249883704],
     [0.856693099179165],
     [0.335034527235541],
     [0.143383511715858],
     [0.69622255206125],
     [0.033198662308013],
     [0.143789246741508],
     [0.715360555654453],
     [0.819527722640854],
     [0.354056499188829],
     [0.0585145308908557],
     [0.0686594017540726],
     [0.275293100523195],
     [0.645719780961474],
     [0.668888429403335],
     [0.118600860878037],
     [0.414251444393266],
     [0.981056747757221],
     [0.347139055778403],
     [0.373628902420028],
     [0.0246547840876573],
     [0.640359936052718],
     [0.539447664571879],
     [0.530212286643284]]



And a dataset stored as binary arrays

.. code:: ipython3

    ds = load_by_id(run_id_a)
    ds.get_data('x1')




.. parsed-literal::

    [[array([0.2893645])],
     [array([0.42818498])],
     [array([0.54545949])],
     [array([0.95372973])],
     [array([0.43809844])],
     [array([0.56945735])],
     [array([0.31497494])],
     [array([0.50806222])],
     [array([0.0749869])],
     [array([0.85582044])],
     [array([0.87965201])],
     [array([0.45004576])],
     [array([0.78191549])],
     [array([0.85468493])],
     [array([0.04879261])],
     [array([0.17751226])],
     [array([0.93070865])],
     [array([0.80066006])],
     [array([0.0314571])],
     [array([0.84320447])],
     [array([0.45355745])],
     [array([0.37875083])],
     [array([0.82091269])],
     [array([0.47039573])],
     [array([0.9608627])],
     [array([0.18107735])],
     [array([0.65867579])],
     [array([0.18940078])],
     [array([0.64152836])],
     [array([0.04304327])],
     [array([0.08651158])],
     [array([0.3646347])],
     [array([0.08620214])],
     [array([0.66915235])],
     [array([0.960854])],
     [array([0.62766866])],
     [array([0.08980762])],
     [array([0.77134295])],
     [array([0.7065104])],
     [array([0.1212676])],
     [array([0.12439344])],
     [array([0.58353764])],
     [array([0.40415924])],
     [array([0.14008977])],
     [array([0.73399799])],
     [array([0.39559877])],
     [array([0.62379776])],
     [array([0.68804997])],
     [array([0.10783672])],
     [array([0.26662261])],
     [array([0.94126039])],
     [array([0.38880282])],
     [array([0.15598185])],
     [array([0.72555602])],
     [array([0.88489384])],
     [array([0.08483333])],
     [array([0.45975773])],
     [array([0.81300339])],
     [array([0.42544251])],
     [array([0.54094111])],
     [array([0.7110063])],
     [array([0.47175382])],
     [array([0.15123926])],
     [array([0.54449548])],
     [array([0.86896213])],
     [array([0.37943964])],
     [array([0.38609503])],
     [array([0.27864581])],
     [array([0.71891548])],
     [array([0.96395877])],
     [array([0.40671568])],
     [array([0.74930195])],
     [array([0.06361175])],
     [array([0.63849185])],
     [array([0.12826175])],
     [array([0.68114816])],
     [array([0.61541371])],
     [array([0.48818958])],
     [array([0.97596052])],
     [array([0.32341256])],
     [array([0.16924708])],
     [array([0.0470687])],
     [array([0.14767913])],
     [array([0.22384641])],
     [array([0.10420908])],
     [array([0.61016049])],
     [array([0.43718932])],
     [array([0.97071581])],
     [array([0.95233291])],
     [array([0.936212])],
     [array([0.47074191])],
     [array([0.81860043])],
     [array([0.44766264])],
     [array([0.73265972])],
     [array([0.26343512])],
     [array([0.0168844])],
     [array([0.06132717])],
     [array([0.72441755])],
     [array([0.91306812])],
     [array([0.72700519])]]



This is probably more useful as a numpy array. Here we use squeze to get
rid of any singleton dimensions.

.. code:: ipython3

    np.array(ds.get_data('x1')).squeeze()




.. parsed-literal::

    array([0.2893645 , 0.42818498, 0.54545949, 0.95372973, 0.43809844,
           0.56945735, 0.31497494, 0.50806222, 0.0749869 , 0.85582044,
           0.87965201, 0.45004576, 0.78191549, 0.85468493, 0.04879261,
           0.17751226, 0.93070865, 0.80066006, 0.0314571 , 0.84320447,
           0.45355745, 0.37875083, 0.82091269, 0.47039573, 0.9608627 ,
           0.18107735, 0.65867579, 0.18940078, 0.64152836, 0.04304327,
           0.08651158, 0.3646347 , 0.08620214, 0.66915235, 0.960854  ,
           0.62766866, 0.08980762, 0.77134295, 0.7065104 , 0.1212676 ,
           0.12439344, 0.58353764, 0.40415924, 0.14008977, 0.73399799,
           0.39559877, 0.62379776, 0.68804997, 0.10783672, 0.26662261,
           0.94126039, 0.38880282, 0.15598185, 0.72555602, 0.88489384,
           0.08483333, 0.45975773, 0.81300339, 0.42544251, 0.54094111,
           0.7110063 , 0.47175382, 0.15123926, 0.54449548, 0.86896213,
           0.37943964, 0.38609503, 0.27864581, 0.71891548, 0.96395877,
           0.40671568, 0.74930195, 0.06361175, 0.63849185, 0.12826175,
           0.68114816, 0.61541371, 0.48818958, 0.97596052, 0.32341256,
           0.16924708, 0.0470687 , 0.14767913, 0.22384641, 0.10420908,
           0.61016049, 0.43718932, 0.97071581, 0.95233291, 0.936212  ,
           0.47074191, 0.81860043, 0.44766264, 0.73265972, 0.26343512,
           0.0168844 , 0.06132717, 0.72441755, 0.91306812, 0.72700519])



A better solution may be to use get\_data\_by\_id which will load the
data in a format that does not depend on the internal storage

.. code:: ipython3

    get_data_by_id(run_id_n)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.53292198, 0.88769959, 0.30432147, 0.4281536 , 0.92901765,
              0.80517735, 0.59916337, 0.96280731, 0.55516787, 0.33321071,
              0.07252925, 0.12869582, 0.24870098, 0.33363666, 0.41239305,
              0.6357105 , 0.41989355, 0.71968738, 0.1698312 , 0.94038171,
              0.79241279, 0.82781632, 0.02056804, 0.27156646, 0.27269718,
              0.43341808, 0.11420705, 0.74755188, 0.10115063, 0.43563688,
              0.6589212 , 0.27349152, 0.88355258, 0.54635058, 0.80379823,
              0.75411864, 0.06429689, 0.56865558, 0.32161056, 0.65929662,
              0.94591483, 0.90827202, 0.4879175 , 0.83045084, 0.15524501,
              0.8411579 , 0.67809815, 0.92508733, 0.02296199, 0.40135155,
              0.20340026, 0.07843168, 0.75471747, 0.04067652, 0.54154919,
              0.04548614, 0.47857838, 0.44697983, 0.97711932, 0.66493922,
              0.87485528, 0.88889359, 0.62480812, 0.84586881, 0.55398748,
              0.67912036, 0.77761045, 0.35133364, 0.44513635, 0.27144835,
              0.9407578 , 0.08443028, 0.08490388, 0.75363831, 0.47196954,
              0.76040712, 0.56796725, 0.8566931 , 0.33503453, 0.14338351,
              0.69622255, 0.03319866, 0.14378925, 0.71536056, 0.81952772,
              0.3540565 , 0.05851453, 0.0686594 , 0.2752931 , 0.64571978,
              0.66888843, 0.11860086, 0.41425144, 0.98105675, 0.34713906,
              0.3736289 , 0.02465478, 0.64035994, 0.53944766, 0.53021229])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.71320408, 0.56212045, 0.42838005, 0.44727178, 0.14115523,
              0.9892752 , 0.19864994, 0.18870428, 0.42120556, 0.63566186,
              0.50142217, 0.95716689, 0.86540134, 0.97540097, 0.10788832,
              0.88763932, 0.11560172, 0.91184029, 0.45766465, 0.11231452,
              0.68976881, 0.90845289, 0.75577533, 0.5917096 , 0.34836976,
              0.48621029, 0.82709602, 0.78547691, 0.78619514, 0.84354899,
              0.86146007, 0.79469285, 0.05841413, 0.84622889, 0.45566615,
              0.92501734, 0.23969729, 0.07697159, 0.56609599, 0.78699833,
              0.86135388, 0.74001508, 0.88623536, 0.29169529, 0.16331214,
              0.73551862, 0.14171739, 0.59869134, 0.63883709, 0.51030801,
              0.5733261 , 0.85904642, 0.28149416, 0.84799155, 0.92022017,
              0.54520137, 0.21989161, 0.05341848, 0.46463665, 0.79813544,
              0.39114272, 0.44110148, 0.07416845, 0.28212132, 0.40211864,
              0.01408253, 0.946075  , 0.08351415, 0.56127719, 0.10063261,
              0.36745012, 0.28742563, 0.24411362, 0.55504413, 0.53790618,
              0.41366593, 0.11762981, 0.15322817, 0.395547  , 0.64876987,
              0.65477553, 0.33902505, 0.28428755, 0.53206654, 0.1578678 ,
              0.02803013, 0.63273176, 0.68139775, 0.63821648, 0.89156438,
              0.16643957, 0.97984564, 0.37117593, 0.96460587, 0.89525724,
              0.51686863, 0.08033927, 0.09404611, 0.06973722, 0.94602994])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.73144102, 0.86631919, 0.58872988, 0.24011467, 0.2075241 ,
              0.13083319, 0.66258127, 0.56109445, 0.25317588, 0.26043852,
              0.72779989, 0.39875526, 0.12063047, 0.75828809, 0.87639773,
              0.17110561, 0.81074551, 0.75613079, 0.24307231, 0.82759008,
              0.79034317, 0.51705492, 0.72882993, 0.07955654, 0.14868538,
              0.86596358, 0.04270115, 0.16674773, 0.08505771, 0.32685352,
              0.19317028, 0.08720853, 0.93205149, 0.75796078, 0.86399839,
              0.80224044, 0.57045866, 0.54467345, 0.95878067, 0.65946981,
              0.99479224, 0.43261312, 0.35410096, 0.51363674, 0.48614023,
              0.71661915, 0.01927884, 0.75850077, 0.69217389, 0.57454777,
              0.93167462, 0.47132679, 0.32261971, 0.34260692, 0.33416567,
              0.23644898, 0.84074336, 0.98600186, 0.8214469 , 0.13586471,
              0.20511417, 0.64325372, 0.96833588, 0.92848437, 0.19587869,
              0.47479879, 0.15022462, 0.9753577 , 0.87203575, 0.63270742,
              0.06324885, 0.38914563, 0.41568734, 0.61576428, 0.31924081,
              0.52341018, 0.11062749, 0.73014907, 0.55806989, 0.44260033,
              0.11926329, 0.12839734, 0.909116  , 0.22714527, 0.398066  ,
              0.55824736, 0.41840695, 0.89263969, 0.66866228, 0.38266856,
              0.37454591, 0.64164154, 0.97766596, 0.10376609, 0.06538287,
              0.08478071, 0.96381312, 0.03534799, 0.95428064, 0.14439696])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.45074036, 0.36043551, 0.60123028, 0.94277385, 0.37442456,
              0.4331088 , 0.94258162, 0.0731959 , 0.52937976, 0.50184304,
              0.21529405, 0.32453344, 0.46055179, 0.40570896, 0.30601753,
              0.8438184 , 0.39389556, 0.03877037, 0.29386614, 0.86853447,
              0.78561998, 0.05520885, 0.69341829, 0.81058169, 0.94635189,
              0.39485579, 0.2475973 , 0.51360167, 0.32108332, 0.60288582,
              0.30087091, 0.36882763, 0.80038777, 0.76429256, 0.00208798,
              0.51911663, 0.15179674, 0.15127215, 0.30273523, 0.85388837,
              0.44036939, 0.94624438, 0.04411357, 0.8806996 , 0.11936998,
              0.57438399, 0.73313347, 0.56049818, 0.1736449 , 0.90355578,
              0.49656241, 0.27060392, 0.1509166 , 0.68097189, 0.88439349,
              0.46154633, 0.28712599, 0.47027984, 0.33126311, 0.94439278,
              0.51579255, 0.81588084, 0.11736389, 0.60805363, 0.51953758,
              0.51354287, 0.37597674, 0.1167726 , 0.89052467, 0.73594431,
              0.01251466, 0.85555819, 0.17950808, 0.71250593, 0.80835776,
              0.78614982, 0.80453183, 0.18441201, 0.1620325 , 0.98001892,
              0.17420765, 0.48298763, 0.8277274 , 0.22932812, 0.39003543,
              0.35271581, 0.50279999, 0.00420276, 0.6762745 , 0.78880939,
              0.57930994, 0.14045582, 0.35840819, 0.84514847, 0.55290446,
              0.01421801, 0.70301802, 0.68060936, 0.58083269, 0.52158171])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.53292198, 0.88769959, 0.30432147, 0.4281536 , 0.92901765,
              0.80517735, 0.59916337, 0.96280731, 0.55516787, 0.33321071,
              0.07252925, 0.12869582, 0.24870098, 0.33363666, 0.41239305,
              0.6357105 , 0.41989355, 0.71968738, 0.1698312 , 0.94038171,
              0.79241279, 0.82781632, 0.02056804, 0.27156646, 0.27269718,
              0.43341808, 0.11420705, 0.74755188, 0.10115063, 0.43563688,
              0.6589212 , 0.27349152, 0.88355258, 0.54635058, 0.80379823,
              0.75411864, 0.06429689, 0.56865558, 0.32161056, 0.65929662,
              0.94591483, 0.90827202, 0.4879175 , 0.83045084, 0.15524501,
              0.8411579 , 0.67809815, 0.92508733, 0.02296199, 0.40135155,
              0.20340026, 0.07843168, 0.75471747, 0.04067652, 0.54154919,
              0.04548614, 0.47857838, 0.44697983, 0.97711932, 0.66493922,
              0.87485528, 0.88889359, 0.62480812, 0.84586881, 0.55398748,
              0.67912036, 0.77761045, 0.35133364, 0.44513635, 0.27144835,
              0.9407578 , 0.08443028, 0.08490388, 0.75363831, 0.47196954,
              0.76040712, 0.56796725, 0.8566931 , 0.33503453, 0.14338351,
              0.69622255, 0.03319866, 0.14378925, 0.71536056, 0.81952772,
              0.3540565 , 0.05851453, 0.0686594 , 0.2752931 , 0.64571978,
              0.66888843, 0.11860086, 0.41425144, 0.98105675, 0.34713906,
              0.3736289 , 0.02465478, 0.64035994, 0.53944766, 0.53021229])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.71320408, 0.56212045, 0.42838005, 0.44727178, 0.14115523,
              0.9892752 , 0.19864994, 0.18870428, 0.42120556, 0.63566186,
              0.50142217, 0.95716689, 0.86540134, 0.97540097, 0.10788832,
              0.88763932, 0.11560172, 0.91184029, 0.45766465, 0.11231452,
              0.68976881, 0.90845289, 0.75577533, 0.5917096 , 0.34836976,
              0.48621029, 0.82709602, 0.78547691, 0.78619514, 0.84354899,
              0.86146007, 0.79469285, 0.05841413, 0.84622889, 0.45566615,
              0.92501734, 0.23969729, 0.07697159, 0.56609599, 0.78699833,
              0.86135388, 0.74001508, 0.88623536, 0.29169529, 0.16331214,
              0.73551862, 0.14171739, 0.59869134, 0.63883709, 0.51030801,
              0.5733261 , 0.85904642, 0.28149416, 0.84799155, 0.92022017,
              0.54520137, 0.21989161, 0.05341848, 0.46463665, 0.79813544,
              0.39114272, 0.44110148, 0.07416845, 0.28212132, 0.40211864,
              0.01408253, 0.946075  , 0.08351415, 0.56127719, 0.10063261,
              0.36745012, 0.28742563, 0.24411362, 0.55504413, 0.53790618,
              0.41366593, 0.11762981, 0.15322817, 0.395547  , 0.64876987,
              0.65477553, 0.33902505, 0.28428755, 0.53206654, 0.1578678 ,
              0.02803013, 0.63273176, 0.68139775, 0.63821648, 0.89156438,
              0.16643957, 0.97984564, 0.37117593, 0.96460587, 0.89525724,
              0.51686863, 0.08033927, 0.09404611, 0.06973722, 0.94602994])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.73144102, 0.86631919, 0.58872988, 0.24011467, 0.2075241 ,
              0.13083319, 0.66258127, 0.56109445, 0.25317588, 0.26043852,
              0.72779989, 0.39875526, 0.12063047, 0.75828809, 0.87639773,
              0.17110561, 0.81074551, 0.75613079, 0.24307231, 0.82759008,
              0.79034317, 0.51705492, 0.72882993, 0.07955654, 0.14868538,
              0.86596358, 0.04270115, 0.16674773, 0.08505771, 0.32685352,
              0.19317028, 0.08720853, 0.93205149, 0.75796078, 0.86399839,
              0.80224044, 0.57045866, 0.54467345, 0.95878067, 0.65946981,
              0.99479224, 0.43261312, 0.35410096, 0.51363674, 0.48614023,
              0.71661915, 0.01927884, 0.75850077, 0.69217389, 0.57454777,
              0.93167462, 0.47132679, 0.32261971, 0.34260692, 0.33416567,
              0.23644898, 0.84074336, 0.98600186, 0.8214469 , 0.13586471,
              0.20511417, 0.64325372, 0.96833588, 0.92848437, 0.19587869,
              0.47479879, 0.15022462, 0.9753577 , 0.87203575, 0.63270742,
              0.06324885, 0.38914563, 0.41568734, 0.61576428, 0.31924081,
              0.52341018, 0.11062749, 0.73014907, 0.55806989, 0.44260033,
              0.11926329, 0.12839734, 0.909116  , 0.22714527, 0.398066  ,
              0.55824736, 0.41840695, 0.89263969, 0.66866228, 0.38266856,
              0.37454591, 0.64164154, 0.97766596, 0.10376609, 0.06538287,
              0.08478071, 0.96381312, 0.03534799, 0.95428064, 0.14439696])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.17834331, 0.80675629, 0.70484653, 0.7831436 , 0.59182876,
              0.89510038, 0.45522113, 0.72435248, 0.92729644, 0.15018904,
              0.10027003, 0.89933258, 0.82282828, 0.71327277, 0.7886206 ,
              0.68139592, 0.22236802, 0.87594424, 0.05087131, 0.42979581,
              0.39855504, 0.39100825, 0.57972988, 0.65937527, 0.43042011,
              0.86371271, 0.24317746, 0.30367903, 0.61604458, 0.60861206,
              0.84405202, 0.19215835, 0.52669697, 0.4156065 , 0.51226645,
              0.27721313, 0.79975263, 0.64831174, 0.77960533, 0.85862915,
              0.66864484, 0.44361631, 0.98876881, 0.55623682, 0.63577706,
              0.88033142, 0.60281854, 0.4424973 , 0.13213389, 0.75272432,
              0.04105587, 0.06357853, 0.43038029, 0.37595342, 0.58407413,
              0.09546603, 0.48468777, 0.44429991, 0.63417184, 0.30977432,
              0.29743743, 0.14671757, 0.66858702, 0.6037537 , 0.9102998 ,
              0.63592421, 0.23254587, 0.16755664, 0.32209128, 0.74632961,
              0.28438498, 0.49468887, 0.67239389, 0.51676564, 0.46128927,
              0.20968023, 0.84168892, 0.89927193, 0.29973331, 0.84602573,
              0.0618318 , 0.16283101, 0.05746918, 0.78696192, 0.45275582,
              0.69991942, 0.78219436, 0.71583659, 0.59955021, 0.21975057,
              0.1422223 , 0.75180933, 0.79501636, 0.50365243, 0.02940633,
              0.66312703, 0.65817512, 0.57308157, 0.24708472, 0.62651887])}]]



.. code:: ipython3

    get_data_by_id(run_id_a)




.. parsed-literal::

    [[{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.2893645 , 0.42818498, 0.54545949, 0.95372973, 0.43809844,
              0.56945735, 0.31497494, 0.50806222, 0.0749869 , 0.85582044,
              0.87965201, 0.45004576, 0.78191549, 0.85468493, 0.04879261,
              0.17751226, 0.93070865, 0.80066006, 0.0314571 , 0.84320447,
              0.45355745, 0.37875083, 0.82091269, 0.47039573, 0.9608627 ,
              0.18107735, 0.65867579, 0.18940078, 0.64152836, 0.04304327,
              0.08651158, 0.3646347 , 0.08620214, 0.66915235, 0.960854  ,
              0.62766866, 0.08980762, 0.77134295, 0.7065104 , 0.1212676 ,
              0.12439344, 0.58353764, 0.40415924, 0.14008977, 0.73399799,
              0.39559877, 0.62379776, 0.68804997, 0.10783672, 0.26662261,
              0.94126039, 0.38880282, 0.15598185, 0.72555602, 0.88489384,
              0.08483333, 0.45975773, 0.81300339, 0.42544251, 0.54094111,
              0.7110063 , 0.47175382, 0.15123926, 0.54449548, 0.86896213,
              0.37943964, 0.38609503, 0.27864581, 0.71891548, 0.96395877,
              0.40671568, 0.74930195, 0.06361175, 0.63849185, 0.12826175,
              0.68114816, 0.61541371, 0.48818958, 0.97596052, 0.32341256,
              0.16924708, 0.0470687 , 0.14767913, 0.22384641, 0.10420908,
              0.61016049, 0.43718932, 0.97071581, 0.95233291, 0.936212  ,
              0.47074191, 0.81860043, 0.44766264, 0.73265972, 0.26343512,
              0.0168844 , 0.06132717, 0.72441755, 0.91306812, 0.72700519])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.48655051, 0.82540681, 0.97237723, 0.48369917, 0.30739381,
              0.03223498, 0.50703844, 0.25789334, 0.18993601, 0.09198381,
              0.93196342, 0.42099065, 0.68217856, 0.67540089, 0.70411088,
              0.58545226, 0.32128007, 0.5498733 , 0.10427649, 0.84539553,
              0.43646781, 0.23608275, 0.59565842, 0.0085883 , 0.48997674,
              0.81434723, 0.93951317, 0.45063939, 0.47920963, 0.23121569,
              0.83193518, 0.99515797, 0.8025747 , 0.71684796, 0.1751842 ,
              0.28159299, 0.55218421, 0.1600954 , 0.65654833, 0.9983826 ,
              0.80363545, 0.07325055, 0.55858692, 0.38758337, 0.89304488,
              0.91938417, 0.18593999, 0.79837008, 0.91131533, 0.406125  ,
              0.5855255 , 0.25613556, 0.09832839, 0.75961951, 0.62764425,
              0.22777381, 0.42997178, 0.4068552 , 0.67481339, 0.57709161,
              0.56791972, 0.61303103, 0.550571  , 0.98576576, 0.03815712,
              0.76023367, 0.03897906, 0.16539291, 0.29993348, 0.57310505,
              0.92308662, 0.82584391, 0.22113987, 0.26811988, 0.36192731,
              0.63481338, 0.63399385, 0.62283638, 0.13496591, 0.44817916,
              0.21060427, 0.68288773, 0.532229  , 0.71063705, 0.22529133,
              0.39029737, 0.66759417, 0.22443632, 0.09279604, 0.65667897,
              0.49791191, 0.66940924, 0.60110201, 0.53699598, 0.15922067,
              0.3182896 , 0.70790895, 0.41294335, 0.23764687, 0.56974361])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.87200773, 0.70489079, 0.12128771, 0.65955142, 0.23383579,
              0.26890853, 0.14045687, 0.8344714 , 0.47484346, 0.91528286,
              0.40956094, 0.30843657, 0.73398349, 0.42325022, 0.99684641,
              0.77705399, 0.51132076, 0.1040497 , 0.64240384, 0.0081588 ,
              0.03721181, 0.14229975, 0.768356  , 0.71840163, 0.54081034,
              0.32378258, 0.30903698, 0.65561447, 0.62559689, 0.81052908,
              0.96211808, 0.27714243, 0.46741397, 0.96193919, 0.30100592,
              0.25554214, 0.46996873, 0.66945944, 0.1579812 , 0.30170626,
              0.99110747, 0.94026801, 0.93782572, 0.64811847, 0.45428863,
              0.62921228, 0.01688481, 0.52773247, 0.90373614, 0.25432459,
              0.40287795, 0.29835521, 0.69180501, 0.98794117, 0.94701915,
              0.08435853, 0.76242465, 0.34073718, 0.97500843, 0.22448794,
              0.85638131, 0.600137  , 0.87470874, 0.2747437 , 0.39875505,
              0.1275801 , 0.53590525, 0.55141049, 0.94166227, 0.48467975,
              0.02379642, 0.74948056, 0.1009445 , 0.93251824, 0.93268937,
              0.9138953 , 0.80025857, 0.87156236, 0.82574868, 0.4727869 ,
              0.66051675, 0.5394137 , 0.23618919, 0.86269173, 0.80518051,
              0.20802332, 0.46944879, 0.60103173, 0.28730923, 0.61847308,
              0.66710634, 0.32750847, 0.26051774, 0.18012365, 0.3559938 ,
              0.23209146, 0.9055766 , 0.82120225, 0.88744988, 0.15358162])},
      {'name': 'y1',
       'label': 'y1',
       'unit': '',
       'data': array([0.20369313, 0.37626326, 0.3755687 , 0.62422585, 0.45154473,
              0.06904342, 0.67650912, 0.07492796, 0.10818031, 0.89376003,
              0.13989567, 0.72768814, 0.34825339, 0.87760105, 0.97851514,
              0.0027986 , 0.29457758, 0.4748549 , 0.67487424, 0.65233087,
              0.39170648, 0.32409028, 0.13610099, 0.62127202, 0.5523103 ,
              0.60094466, 0.88780578, 0.85727128, 0.74922294, 0.96980184,
              0.91396523, 0.87958951, 0.90485434, 0.67180925, 0.53865895,
              0.88132805, 0.91318657, 0.67383218, 0.39272515, 0.97027523,
              0.58304264, 0.54327227, 0.77921483, 0.13008004, 0.55858917,
              0.52826737, 0.95027797, 0.65026725, 0.87598969, 0.12870844,
              0.15647435, 0.40281459, 0.87232811, 0.55063071, 0.47364488,
              0.16287208, 0.35394658, 0.32611116, 0.81723998, 0.23218959,
              0.88685405, 0.48799379, 0.09878238, 0.26804603, 0.86311001,
              0.66322118, 0.23282469, 0.24605493, 0.93850535, 0.59837302,
              0.09849561, 0.4224227 , 0.55925056, 0.25314039, 0.25683154,
              0.05240346, 0.30096226, 0.53268803, 0.49982183, 0.08111022,
              0.97418225, 0.73357382, 0.23998791, 0.3968345 , 0.38726094,
              0.64238322, 0.89747142, 0.74788172, 0.58638166, 0.23757345,
              0.27100188, 0.11602068, 0.61701558, 0.4540125 , 0.00931453,
              0.50296985, 0.41856147, 0.5305852 , 0.1460058 , 0.90662143])}],
     [{'name': 'x1',
       'label': 'x1',
       'unit': '',
       'data': array([0.2893645 , 0.42818498, 0.54545949, 0.95372973, 0.43809844,
              0.56945735, 0.31497494, 0.50806222, 0.0749869 , 0.85582044,
              0.87965201, 0.45004576, 0.78191549, 0.85468493, 0.04879261,
              0.17751226, 0.93070865, 0.80066006, 0.0314571 , 0.84320447,
              0.45355745, 0.37875083, 0.82091269, 0.47039573, 0.9608627 ,
              0.18107735, 0.65867579, 0.18940078, 0.64152836, 0.04304327,
              0.08651158, 0.3646347 , 0.08620214, 0.66915235, 0.960854  ,
              0.62766866, 0.08980762, 0.77134295, 0.7065104 , 0.1212676 ,
              0.12439344, 0.58353764, 0.40415924, 0.14008977, 0.73399799,
              0.39559877, 0.62379776, 0.68804997, 0.10783672, 0.26662261,
              0.94126039, 0.38880282, 0.15598185, 0.72555602, 0.88489384,
              0.08483333, 0.45975773, 0.81300339, 0.42544251, 0.54094111,
              0.7110063 , 0.47175382, 0.15123926, 0.54449548, 0.86896213,
              0.37943964, 0.38609503, 0.27864581, 0.71891548, 0.96395877,
              0.40671568, 0.74930195, 0.06361175, 0.63849185, 0.12826175,
              0.68114816, 0.61541371, 0.48818958, 0.97596052, 0.32341256,
              0.16924708, 0.0470687 , 0.14767913, 0.22384641, 0.10420908,
              0.61016049, 0.43718932, 0.97071581, 0.95233291, 0.936212  ,
              0.47074191, 0.81860043, 0.44766264, 0.73265972, 0.26343512,
              0.0168844 , 0.06132717, 0.72441755, 0.91306812, 0.72700519])},
      {'name': 'x2',
       'label': 'x2',
       'unit': '',
       'data': array([0.48655051, 0.82540681, 0.97237723, 0.48369917, 0.30739381,
              0.03223498, 0.50703844, 0.25789334, 0.18993601, 0.09198381,
              0.93196342, 0.42099065, 0.68217856, 0.67540089, 0.70411088,
              0.58545226, 0.32128007, 0.5498733 , 0.10427649, 0.84539553,
              0.43646781, 0.23608275, 0.59565842, 0.0085883 , 0.48997674,
              0.81434723, 0.93951317, 0.45063939, 0.47920963, 0.23121569,
              0.83193518, 0.99515797, 0.8025747 , 0.71684796, 0.1751842 ,
              0.28159299, 0.55218421, 0.1600954 , 0.65654833, 0.9983826 ,
              0.80363545, 0.07325055, 0.55858692, 0.38758337, 0.89304488,
              0.91938417, 0.18593999, 0.79837008, 0.91131533, 0.406125  ,
              0.5855255 , 0.25613556, 0.09832839, 0.75961951, 0.62764425,
              0.22777381, 0.42997178, 0.4068552 , 0.67481339, 0.57709161,
              0.56791972, 0.61303103, 0.550571  , 0.98576576, 0.03815712,
              0.76023367, 0.03897906, 0.16539291, 0.29993348, 0.57310505,
              0.92308662, 0.82584391, 0.22113987, 0.26811988, 0.36192731,
              0.63481338, 0.63399385, 0.62283638, 0.13496591, 0.44817916,
              0.21060427, 0.68288773, 0.532229  , 0.71063705, 0.22529133,
              0.39029737, 0.66759417, 0.22443632, 0.09279604, 0.65667897,
              0.49791191, 0.66940924, 0.60110201, 0.53699598, 0.15922067,
              0.3182896 , 0.70790895, 0.41294335, 0.23764687, 0.56974361])},
      {'name': 'x3',
       'label': 'x3',
       'unit': '',
       'data': array([0.87200773, 0.70489079, 0.12128771, 0.65955142, 0.23383579,
              0.26890853, 0.14045687, 0.8344714 , 0.47484346, 0.91528286,
              0.40956094, 0.30843657, 0.73398349, 0.42325022, 0.99684641,
              0.77705399, 0.51132076, 0.1040497 , 0.64240384, 0.0081588 ,
              0.03721181, 0.14229975, 0.768356  , 0.71840163, 0.54081034,
              0.32378258, 0.30903698, 0.65561447, 0.62559689, 0.81052908,
              0.96211808, 0.27714243, 0.46741397, 0.96193919, 0.30100592,
              0.25554214, 0.46996873, 0.66945944, 0.1579812 , 0.30170626,
              0.99110747, 0.94026801, 0.93782572, 0.64811847, 0.45428863,
              0.62921228, 0.01688481, 0.52773247, 0.90373614, 0.25432459,
              0.40287795, 0.29835521, 0.69180501, 0.98794117, 0.94701915,
              0.08435853, 0.76242465, 0.34073718, 0.97500843, 0.22448794,
              0.85638131, 0.600137  , 0.87470874, 0.2747437 , 0.39875505,
              0.1275801 , 0.53590525, 0.55141049, 0.94166227, 0.48467975,
              0.02379642, 0.74948056, 0.1009445 , 0.93251824, 0.93268937,
              0.9138953 , 0.80025857, 0.87156236, 0.82574868, 0.4727869 ,
              0.66051675, 0.5394137 , 0.23618919, 0.86269173, 0.80518051,
              0.20802332, 0.46944879, 0.60103173, 0.28730923, 0.61847308,
              0.66710634, 0.32750847, 0.26051774, 0.18012365, 0.3559938 ,
              0.23209146, 0.9055766 , 0.82120225, 0.88744988, 0.15358162])},
      {'name': 'y2',
       'label': 'y2',
       'unit': '',
       'data': array([0.53033338, 0.50598997, 0.34081445, 0.51579197, 0.57176504,
              0.24698998, 0.35743032, 0.09014054, 0.03452348, 0.28325278,
              0.75156086, 0.37410723, 0.24417539, 0.67492929, 0.17034021,
              0.2279608 , 0.35942365, 0.31805829, 0.28016112, 0.53602181,
              0.14481526, 0.50245828, 0.1300251 , 0.11188089, 0.42976274,
              0.59783847, 0.69978018, 0.34436996, 0.29527808, 0.10314032,
              0.83460928, 0.8556807 , 0.52142883, 0.21446982, 0.5912619 ,
              0.35826547, 0.78260777, 0.08323736, 0.82884514, 0.9159667 ,
              0.87923879, 0.15391301, 0.76522894, 0.25832193, 0.96002139,
              0.67204609, 0.54736959, 0.93383061, 0.86468718, 0.43875838,
              0.5483436 , 0.69270129, 0.67886642, 0.65419551, 0.31675969,
              0.93345233, 0.40291541, 0.58584721, 0.19170833, 0.64191683,
              0.66367326, 0.67750886, 0.27329077, 0.74230161, 0.13230897,
              0.00597127, 0.44619382, 0.65840262, 0.00123466, 0.14820192,
              0.36574194, 0.57386453, 0.1475269 , 0.04626896, 0.13931855,
              0.73045827, 0.4621867 , 0.36178634, 0.81175258, 0.73301444,
              0.88897585, 0.11980736, 0.8376235 , 0.77362366, 0.07372861,
              0.06628216, 0.96813259, 0.72763476, 0.17099615, 0.73866064,
              0.69252347, 0.45839349, 0.06766469, 0.53435916, 0.07030798,
              0.69006789, 0.51342701, 0.63856786, 0.84270415, 0.9036492 ])}]]


